# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelrefrigeration
else:
    import _openstudiomodelrefrigeration

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_SwigPyIterator

    def value(self):
        return _openstudiomodelrefrigeration.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudiomodelrefrigeration.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudiomodelrefrigeration.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudiomodelrefrigeration.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudiomodelrefrigeration.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudiomodelrefrigeration.SwigPyIterator_copy(self)

    def next(self):
        return _openstudiomodelrefrigeration.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudiomodelrefrigeration.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudiomodelrefrigeration.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudiomodelrefrigeration.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudiomodelrefrigeration.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudiomodelrefrigeration.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudiomodelrefrigeration.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudiomodelrefrigeration.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudiomodelrefrigeration.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudiomodelrefrigeration.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudiomodelrefrigeration.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudioutilitiesxml

# Import common modules
import typing
import warnings

from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources
from .import openstudiomodelgeometry
from .import openstudiomodelhvac
from .import openstudiomodelzonehvac

Model = openstudiomodelcore.Model

class RefrigerationAirChillerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationAirChillerVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationAirChillerVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChillerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationAirChillerVector

# Register RefrigerationAirChillerVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationAirChillerVector_swigregister(RefrigerationAirChillerVector)
class OptionalRefrigerationAirChiller(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationAirChiller(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationAirChiller

# Register OptionalRefrigerationAirChiller in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationAirChiller_swigregister(OptionalRefrigerationAirChiller)
class RefrigerationCaseVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationCaseVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationCaseVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationCaseVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCaseVector

# Register RefrigerationCaseVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationCaseVector_swigregister(RefrigerationCaseVector)
class OptionalRefrigerationCase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationCase_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationCase(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCase_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationCase

# Register OptionalRefrigerationCase in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationCase_swigregister(OptionalRefrigerationCase)
class RefrigerationCompressorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationCompressorVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationCompressorVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCompressorVector

# Register RefrigerationCompressorVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationCompressorVector_swigregister(RefrigerationCompressorVector)
class OptionalRefrigerationCompressor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationCompressor_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationCompressor(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressor_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationCompressor

# Register OptionalRefrigerationCompressor in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationCompressor_swigregister(OptionalRefrigerationCompressor)
class RefrigerationCompressorRackVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationCompressorRackVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRackVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCompressorRackVector

# Register RefrigerationCompressorRackVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationCompressorRackVector_swigregister(RefrigerationCompressorRackVector)
class OptionalRefrigerationCompressorRack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationCompressorRack_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationCompressorRack(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressorRack_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressorRack___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressorRack___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressorRack_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressorRack_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressorRack_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressorRack_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressorRack_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCompressorRack_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationCompressorRack

# Register OptionalRefrigerationCompressorRack in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationCompressorRack_swigregister(OptionalRefrigerationCompressorRack)
class RefrigerationCondenserAirCooledVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationCondenserAirCooledVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserAirCooledVector

# Register RefrigerationCondenserAirCooledVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationCondenserAirCooledVector_swigregister(RefrigerationCondenserAirCooledVector)
class OptionalRefrigerationCondenserAirCooled(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationCondenserAirCooled(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationCondenserAirCooled

# Register OptionalRefrigerationCondenserAirCooled in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationCondenserAirCooled_swigregister(OptionalRefrigerationCondenserAirCooled)
class RefrigerationCondenserCascadeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationCondenserCascadeVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserCascadeVector

# Register RefrigerationCondenserCascadeVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationCondenserCascadeVector_swigregister(RefrigerationCondenserCascadeVector)
class OptionalRefrigerationCondenserCascade(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationCondenserCascade(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationCondenserCascade

# Register OptionalRefrigerationCondenserCascade in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationCondenserCascade_swigregister(OptionalRefrigerationCondenserCascade)
class RefrigerationCondenserEvaporativeCooledVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationCondenserEvaporativeCooledVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserEvaporativeCooledVector

# Register RefrigerationCondenserEvaporativeCooledVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooledVector_swigregister(RefrigerationCondenserEvaporativeCooledVector)
class OptionalRefrigerationCondenserEvaporativeCooled(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationCondenserEvaporativeCooled(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationCondenserEvaporativeCooled

# Register OptionalRefrigerationCondenserEvaporativeCooled in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationCondenserEvaporativeCooled_swigregister(OptionalRefrigerationCondenserEvaporativeCooled)
class RefrigerationCondenserWaterCooledVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationCondenserWaterCooledVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserWaterCooledVector

# Register RefrigerationCondenserWaterCooledVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationCondenserWaterCooledVector_swigregister(RefrigerationCondenserWaterCooledVector)
class OptionalRefrigerationCondenserWaterCooled(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationCondenserWaterCooled(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationCondenserWaterCooled

# Register OptionalRefrigerationCondenserWaterCooled in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationCondenserWaterCooled_swigregister(OptionalRefrigerationCondenserWaterCooled)
class RefrigerationDefrostCycleParametersVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationDefrostCycleParametersVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationDefrostCycleParametersVector

# Register RefrigerationDefrostCycleParametersVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationDefrostCycleParametersVector_swigregister(RefrigerationDefrostCycleParametersVector)
class OptionalRefrigerationDefrostCycleParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationDefrostCycleParameters(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationDefrostCycleParameters

# Register OptionalRefrigerationDefrostCycleParameters in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationDefrostCycleParameters_swigregister(OptionalRefrigerationDefrostCycleParameters)
class RefrigerationGasCoolerAirCooledVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationGasCoolerAirCooledVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationGasCoolerAirCooledVector

# Register RefrigerationGasCoolerAirCooledVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooledVector_swigregister(RefrigerationGasCoolerAirCooledVector)
class OptionalRefrigerationGasCoolerAirCooled(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationGasCoolerAirCooled(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationGasCoolerAirCooled

# Register OptionalRefrigerationGasCoolerAirCooled in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationGasCoolerAirCooled_swigregister(OptionalRefrigerationGasCoolerAirCooled)
class RefrigerationSubcoolerLiquidSuctionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationSubcoolerLiquidSuctionVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSubcoolerLiquidSuctionVector

# Register RefrigerationSubcoolerLiquidSuctionVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuctionVector_swigregister(RefrigerationSubcoolerLiquidSuctionVector)
class OptionalRefrigerationSubcoolerLiquidSuction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationSubcoolerLiquidSuction(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationSubcoolerLiquidSuction

# Register OptionalRefrigerationSubcoolerLiquidSuction in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerLiquidSuction_swigregister(OptionalRefrigerationSubcoolerLiquidSuction)
class RefrigerationSubcoolerMechanicalVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationSubcoolerMechanicalVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSubcoolerMechanicalVector

# Register RefrigerationSubcoolerMechanicalVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationSubcoolerMechanicalVector_swigregister(RefrigerationSubcoolerMechanicalVector)
class OptionalRefrigerationSubcoolerMechanical(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationSubcoolerMechanical(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationSubcoolerMechanical

# Register OptionalRefrigerationSubcoolerMechanical in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationSubcoolerMechanical_swigregister(OptionalRefrigerationSubcoolerMechanical)
class RefrigerationSecondarySystemVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationSecondarySystemVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSecondarySystemVector

# Register RefrigerationSecondarySystemVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationSecondarySystemVector_swigregister(RefrigerationSecondarySystemVector)
class OptionalRefrigerationSecondarySystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationSecondarySystem(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationSecondarySystem

# Register OptionalRefrigerationSecondarySystem in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationSecondarySystem_swigregister(OptionalRefrigerationSecondarySystem)
class RefrigerationSystemVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationSystemVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationSystemVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationSystemVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSystemVector

# Register RefrigerationSystemVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationSystemVector_swigregister(RefrigerationSystemVector)
class OptionalRefrigerationSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationSystem_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationSystem(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationSystem_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationSystem

# Register OptionalRefrigerationSystem in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationSystem_swigregister(OptionalRefrigerationSystem)
class RefrigerationTranscriticalSystemVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationTranscriticalSystemVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationTranscriticalSystemVector

# Register RefrigerationTranscriticalSystemVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationTranscriticalSystemVector_swigregister(RefrigerationTranscriticalSystemVector)
class OptionalRefrigerationTranscriticalSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationTranscriticalSystem(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationTranscriticalSystem

# Register OptionalRefrigerationTranscriticalSystem in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationTranscriticalSystem_swigregister(OptionalRefrigerationTranscriticalSystem)
class RefrigerationWalkInVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationWalkInVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationWalkInVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationWalkInVector

# Register RefrigerationWalkInVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationWalkInVector_swigregister(RefrigerationWalkInVector)
class OptionalRefrigerationWalkIn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationWalkIn(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationWalkIn

# Register OptionalRefrigerationWalkIn in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationWalkIn_swigregister(OptionalRefrigerationWalkIn)
class RefrigerationWalkInZoneBoundaryVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___bool__(self)

    def __len__(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_pop(self)

    def append(self, x):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_append(self, x)

    def empty(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_empty(self)

    def size(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_size(self)

    def swap(self, v):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_swap(self, v)

    def begin(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_begin(self)

    def end(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_end(self)

    def rbegin(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_rbegin(self)

    def rend(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_rend(self)

    def clear(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationWalkInZoneBoundaryVector(*args))

    def push_back(self, x):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_push_back(self, x)

    def front(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_front(self)

    def back(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_capacity(self)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationWalkInZoneBoundaryVector

# Register RefrigerationWalkInZoneBoundaryVector in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundaryVector_swigregister(RefrigerationWalkInZoneBoundaryVector)
class OptionalRefrigerationWalkInZoneBoundary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_swiginit(self, _openstudiomodelrefrigeration.new_OptionalRefrigerationWalkInZoneBoundary(*args))

    def reset(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_reset(self)

    def __nonzero__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary___ref__(self)

    def is_initialized(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_is_initialized(self)

    def isNull(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_isNull(self)

    def empty(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_empty(self)

    def get(self):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_get(self)

    def set(self, t):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_OptionalRefrigerationWalkInZoneBoundary

# Register OptionalRefrigerationWalkInZoneBoundary in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.OptionalRefrigerationWalkInZoneBoundary_swigregister(OptionalRefrigerationWalkInZoneBoundary)
class RefrigerationAirChiller(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationAirChiller

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationAirChiller_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationAirChiller(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_iddObjectType()

    @staticmethod
    def capacityRatingTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_capacityRatingTypeValues()

    @staticmethod
    def fanSpeedControlTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_fanSpeedControlTypeValues()

    @staticmethod
    def defrostTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostTypeValues()

    @staticmethod
    def defrostControlTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostControlTypeValues()

    @staticmethod
    def verticalLocationValues():
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_verticalLocationValues()

    def availabilitySchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_availabilitySchedule(self)

    def capacityRatingType(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_capacityRatingType(self)

    def ratedUnitLoadFactor(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedUnitLoadFactor(self)

    def ratedCapacity(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedCapacity(self)

    def ratedRelativeHumidity(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedRelativeHumidity(self)

    def isRatedRelativeHumidityDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isRatedRelativeHumidityDefaulted(self)

    def ratedCoolingSourceTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedCoolingSourceTemperature(self)

    def ratedTemperatureDifferenceDT1(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedTemperatureDifferenceDT1(self)

    def maximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_maximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature(self)

    def coilMaterialCorrectionFactor(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_coilMaterialCorrectionFactor(self)

    def isCoilMaterialCorrectionFactorDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isCoilMaterialCorrectionFactorDefaulted(self)

    def refrigerantCorrectionFactor(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_refrigerantCorrectionFactor(self)

    def isRefrigerantCorrectionFactorDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isRefrigerantCorrectionFactorDefaulted(self)

    def sHR60CorrectionFactor(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_sHR60CorrectionFactor(self)

    def isSHR60CorrectionFactorDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isSHR60CorrectionFactorDefaulted(self)

    def ratedTotalHeatingPower(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedTotalHeatingPower(self)

    def heatingPowerSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_heatingPowerSchedule(self)

    def fanSpeedControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_fanSpeedControlType(self)

    def isFanSpeedControlTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isFanSpeedControlTypeDefaulted(self)

    def ratedFanPower(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedFanPower(self)

    def isRatedFanPowerDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isRatedFanPowerDefaulted(self)

    def ratedAirFlow(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_ratedAirFlow(self)

    def minimumFanAirFlowRatio(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_minimumFanAirFlowRatio(self)

    def isMinimumFanAirFlowRatioDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isMinimumFanAirFlowRatioDefaulted(self)

    def defrostType(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostType(self)

    def isDefrostTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isDefrostTypeDefaulted(self)

    def defrostControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostControlType(self)

    def isDefrostControlTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isDefrostControlTypeDefaulted(self)

    def defrostSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostSchedule(self)

    def defrostDripDownSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostDripDownSchedule(self)

    def defrostPower(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_defrostPower(self)

    def temperatureTerminationDefrostFractiontoIce(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_temperatureTerminationDefrostFractiontoIce(self)

    def verticalLocation(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_verticalLocation(self)

    def isVerticalLocationDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isVerticalLocationDefaulted(self)

    def averageRefrigerantChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_averageRefrigerantChargeInventory(self)

    def isAverageRefrigerantChargeInventoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_isAverageRefrigerantChargeInventoryDefaulted(self)

    def system(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_system(self)

    def secondarySystem(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_secondarySystem(self)

    def compressorRack(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_compressorRack(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetAvailabilitySchedule(self)

    def setCapacityRatingType(self, capacityRatingType):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setCapacityRatingType(self, capacityRatingType)

    def setRatedUnitLoadFactor(self, ratedUnitLoadFactor):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedUnitLoadFactor(self, ratedUnitLoadFactor)

    def resetRatedUnitLoadFactor(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetRatedUnitLoadFactor(self)

    def setRatedCapacity(self, ratedCapacity):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedCapacity(self, ratedCapacity)

    def resetRatedCapacity(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetRatedCapacity(self)

    def setRatedRelativeHumidity(self, ratedRelativeHumidity):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedRelativeHumidity(self, ratedRelativeHumidity)

    def resetRatedRelativeHumidity(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetRatedRelativeHumidity(self)

    def setRatedCoolingSourceTemperature(self, ratedCoolingSourceTemperature):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedCoolingSourceTemperature(self, ratedCoolingSourceTemperature)

    def setRatedTemperatureDifferenceDT1(self, ratedTemperatureDifferenceDT1):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedTemperatureDifferenceDT1(self, ratedTemperatureDifferenceDT1)

    def setMaximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature(self, maximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setMaximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature(self, maximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature)

    def resetMaximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetMaximumTemperatureDifferenceBetweenInletAirandEvaporatingTemperature(self)

    def setCoilMaterialCorrectionFactor(self, coilMaterialCorrectionFactor):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setCoilMaterialCorrectionFactor(self, coilMaterialCorrectionFactor)

    def resetCoilMaterialCorrectionFactor(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetCoilMaterialCorrectionFactor(self)

    def setRefrigerantCorrectionFactor(self, refrigerantCorrectionFactor):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRefrigerantCorrectionFactor(self, refrigerantCorrectionFactor)

    def resetRefrigerantCorrectionFactor(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetRefrigerantCorrectionFactor(self)

    def setSHR60CorrectionFactor(self, sHR60CorrectionFactor):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setSHR60CorrectionFactor(self, sHR60CorrectionFactor)

    def resetSHR60CorrectionFactor(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetSHR60CorrectionFactor(self)

    def setRatedTotalHeatingPower(self, ratedTotalHeatingPower):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedTotalHeatingPower(self, ratedTotalHeatingPower)

    def setHeatingPowerSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setHeatingPowerSchedule(self, schedule)

    def resetHeatingPowerSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetHeatingPowerSchedule(self)

    def setFanSpeedControlType(self, fanSpeedControlType):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setFanSpeedControlType(self, fanSpeedControlType)

    def resetFanSpeedControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetFanSpeedControlType(self)

    def setRatedFanPower(self, ratedFanPower):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedFanPower(self, ratedFanPower)

    def resetRatedFanPower(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetRatedFanPower(self)

    def setRatedAirFlow(self, ratedAirFlow):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setRatedAirFlow(self, ratedAirFlow)

    def setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio)

    def resetMinimumFanAirFlowRatio(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetMinimumFanAirFlowRatio(self)

    def setDefrostType(self, defrostType):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setDefrostType(self, defrostType)

    def resetDefrostType(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetDefrostType(self)

    def setDefrostControlType(self, defrostControlType):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setDefrostControlType(self, defrostControlType)

    def resetDefrostControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetDefrostControlType(self)

    def setDefrostSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setDefrostSchedule(self, schedule)

    def setDefrostDripDownSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setDefrostDripDownSchedule(self, schedule)

    def resetDefrostDripDownSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetDefrostDripDownSchedule(self)

    def setDefrostPower(self, defrostPower):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setDefrostPower(self, defrostPower)

    def resetDefrostPower(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetDefrostPower(self)

    def setTemperatureTerminationDefrostFractiontoIce(self, temperatureTerminationDefrostFractiontoIce):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setTemperatureTerminationDefrostFractiontoIce(self, temperatureTerminationDefrostFractiontoIce)

    def resetTemperatureTerminationDefrostFractiontoIce(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetTemperatureTerminationDefrostFractiontoIce(self)

    def setAverageRefrigerantChargeInventory(self, averageRefrigerantChargeInventory):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_setAverageRefrigerantChargeInventory(self, averageRefrigerantChargeInventory)

    def resetAverageRefrigerantChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_resetAverageRefrigerantChargeInventory(self)

    def addToSystem(self, system):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_addToSystem(self, system)

    def addToSecondarySystem(self, secondarySystem):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_addToSecondarySystem(self, secondarySystem)

    def addToCompressorRack(self, compressorRack):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_addToCompressorRack(self, compressorRack)

    def removeFromSystem(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_removeFromSystem(self)

    def removeFromSecondarySystem(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_removeFromSecondarySystem(self)

    def removeFromCompressorRack(self):
        return _openstudiomodelrefrigeration.RefrigerationAirChiller_removeFromCompressorRack(self)

# Register RefrigerationAirChiller in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationAirChiller_swigregister(RefrigerationAirChiller)

def toRefrigerationAirChiller(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationAirChiller(idfObject)

def getRefrigerationAirChiller(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationAirChiller(t_model, t_handle)

def getRefrigerationAirChillers(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationAirChillers(t_model)

def getRefrigerationAirChillerByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationAirChillerByName(t_model, t_name)

def getRefrigerationAirChillersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationAirChillersByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationAirChiller(self) -> OptionalRefrigerationAirChiller:
    """Try to cast the ModelObject to a RefrigerationAirChiller.

    :return: An Optional RefrigerationAirChiller.
    """
    return toRefrigerationAirChiller(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationAirChiller = _to_RefrigerationAirChiller

def _getRefrigerationAirChiller(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationAirChiller:
    """Try to get an object of type RefrigerationAirChiller referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationAirChiller.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationAirChiller(self, t_handle)
Model.getRefrigerationAirChiller = _getRefrigerationAirChiller

def _getRefrigerationAirChillers(self) -> RefrigerationAirChillerVector:
    """Get a vector of all objects of type RefrigerationAirChiller in the model.

    :return: A vector of RefrigerationAirChiller.
    """
    return getRefrigerationAirChillers(self)
Model.getRefrigerationAirChillers = _getRefrigerationAirChillers

def _getRefrigerationAirChillerByName(self, t_name: str) -> OptionalRefrigerationAirChiller:
    """Try to get an object of type RefrigerationAirChiller that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationAirChiller.
    """
    return getRefrigerationAirChillerByName(self, t_name)
Model.getRefrigerationAirChillerByName = _getRefrigerationAirChillerByName

def _getRefrigerationAirChillersByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationAirChillerVector:
    """Returns all objects of type RefrigerationAirChiller named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationAirChillersByName(self, t_name, t_exactMatch)
Model.getRefrigerationAirChillersByName = _getRefrigerationAirChillersByName

class RefrigerationCase(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCase

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationCase_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationCase(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationCase_iddObjectType()

    @staticmethod
    def latentCaseCreditCurveTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationCase_latentCaseCreditCurveTypeValues()

    @staticmethod
    def antiSweatHeaterControlTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationCase_antiSweatHeaterControlTypeValues()

    @staticmethod
    def caseDefrostTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationCase_caseDefrostTypeValues()

    @staticmethod
    def defrostEnergyCorrectionCurveTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationCase_defrostEnergyCorrectionCurveTypeValues()

    @staticmethod
    def unitTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationCase_unitTypeValues()

    def availabilitySchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_availabilitySchedule(self)

    def thermalZone(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_thermalZone(self)

    def ratedAmbientTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_ratedAmbientTemperature(self)

    def isRatedAmbientTemperatureDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isRatedAmbientTemperatureDefaulted(self)

    def ratedAmbientRelativeHumidity(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_ratedAmbientRelativeHumidity(self)

    def isRatedAmbientRelativeHumidityDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isRatedAmbientRelativeHumidityDefaulted(self)

    def ratedTotalCoolingCapacityperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_ratedTotalCoolingCapacityperUnitLength(self)

    def isRatedTotalCoolingCapacityperUnitLengthDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isRatedTotalCoolingCapacityperUnitLengthDefaulted(self)

    def ratedLatentHeatRatio(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_ratedLatentHeatRatio(self)

    def isRatedLatentHeatRatioDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isRatedLatentHeatRatioDefaulted(self)

    def ratedRuntimeFraction(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_ratedRuntimeFraction(self)

    def isRatedRuntimeFractionDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isRatedRuntimeFractionDefaulted(self)

    def caseLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_caseLength(self)

    def isCaseLengthDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isCaseLengthDefaulted(self)

    def caseOperatingTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_caseOperatingTemperature(self)

    def isCaseOperatingTemperatureDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isCaseOperatingTemperatureDefaulted(self)

    def latentCaseCreditCurveType(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_latentCaseCreditCurveType(self)

    def isLatentCaseCreditCurveTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isLatentCaseCreditCurveTypeDefaulted(self)

    def latentCaseCreditCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_latentCaseCreditCurve(self)

    def standardCaseFanPowerperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_standardCaseFanPowerperUnitLength(self)

    def isStandardCaseFanPowerperUnitLengthDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isStandardCaseFanPowerperUnitLengthDefaulted(self)

    def operatingCaseFanPowerperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_operatingCaseFanPowerperUnitLength(self)

    def isOperatingCaseFanPowerperUnitLengthDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isOperatingCaseFanPowerperUnitLengthDefaulted(self)

    def standardCaseLightingPowerperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_standardCaseLightingPowerperUnitLength(self)

    def isStandardCaseLightingPowerperUnitLengthDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isStandardCaseLightingPowerperUnitLengthDefaulted(self)

    def installedCaseLightingPowerperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_installedCaseLightingPowerperUnitLength(self)

    def caseLightingSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_caseLightingSchedule(self)

    def fractionofLightingEnergytoCase(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_fractionofLightingEnergytoCase(self)

    def isFractionofLightingEnergytoCaseDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isFractionofLightingEnergytoCaseDefaulted(self)

    def caseAntiSweatHeaterPowerperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_caseAntiSweatHeaterPowerperUnitLength(self)

    def isCaseAntiSweatHeaterPowerperUnitLengthDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isCaseAntiSweatHeaterPowerperUnitLengthDefaulted(self)

    def minimumAntiSweatHeaterPowerperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_minimumAntiSweatHeaterPowerperUnitLength(self)

    def isMinimumAntiSweatHeaterPowerperUnitLengthDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isMinimumAntiSweatHeaterPowerperUnitLengthDefaulted(self)

    def antiSweatHeaterControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_antiSweatHeaterControlType(self)

    def isAntiSweatHeaterControlTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isAntiSweatHeaterControlTypeDefaulted(self)

    def humidityatZeroAntiSweatHeaterEnergy(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_humidityatZeroAntiSweatHeaterEnergy(self)

    def isHumidityatZeroAntiSweatHeaterEnergyDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isHumidityatZeroAntiSweatHeaterEnergyDefaulted(self)

    def caseHeight(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_caseHeight(self)

    def isCaseHeightDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isCaseHeightDefaulted(self)

    def fractionofAntiSweatHeaterEnergytoCase(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_fractionofAntiSweatHeaterEnergytoCase(self)

    def isFractionofAntiSweatHeaterEnergytoCaseDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isFractionofAntiSweatHeaterEnergytoCaseDefaulted(self)

    def caseDefrostPowerperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_caseDefrostPowerperUnitLength(self)

    def isCaseDefrostPowerperUnitLengthDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isCaseDefrostPowerperUnitLengthDefaulted(self)

    def caseDefrostType(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_caseDefrostType(self)

    def isCaseDefrostTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isCaseDefrostTypeDefaulted(self)

    def caseDefrostSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_caseDefrostSchedule(self)

    def caseDefrostDripDownSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_caseDefrostDripDownSchedule(self)

    def defrostEnergyCorrectionCurveType(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_defrostEnergyCorrectionCurveType(self)

    def isDefrostEnergyCorrectionCurveTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isDefrostEnergyCorrectionCurveTypeDefaulted(self)

    def defrostEnergyCorrectionCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_defrostEnergyCorrectionCurve(self)

    def underCaseHVACReturnAirFraction(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_underCaseHVACReturnAirFraction(self)

    def isUnderCaseHVACReturnAirFractionDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isUnderCaseHVACReturnAirFractionDefaulted(self)

    def refrigeratedCaseRestockingSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_refrigeratedCaseRestockingSchedule(self)

    def caseCreditFractionSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_caseCreditFractionSchedule(self)

    def designEvaporatorTemperatureorBrineInletTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_designEvaporatorTemperatureorBrineInletTemperature(self)

    def averageRefrigerantChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_averageRefrigerantChargeInventory(self)

    def isAverageRefrigerantChargeInventoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isAverageRefrigerantChargeInventoryDefaulted(self)

    def numberOfDoors(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_numberOfDoors(self)

    def ratedTotalCoolingCapacityperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_ratedTotalCoolingCapacityperDoor(self)

    def standardCaseFanPowerperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_standardCaseFanPowerperDoor(self)

    def operatingCaseFanPowerperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_operatingCaseFanPowerperDoor(self)

    def standardCaseLightingPowerperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_standardCaseLightingPowerperDoor(self)

    def installedCaseLightingPowerperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_installedCaseLightingPowerperDoor(self)

    def caseAntiSweatHeaterPowerperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_caseAntiSweatHeaterPowerperDoor(self)

    def minimumAntiSweatHeaterPowerperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_minimumAntiSweatHeaterPowerperDoor(self)

    def caseDefrostPowerperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_caseDefrostPowerperDoor(self)

    def unitType(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_unitType(self)

    def isUnitTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_isUnitTypeDefaulted(self)

    def durationofDefrostCycle(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_durationofDefrostCycle(self)

    def dripDownTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_dripDownTime(self)

    def defrost1StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost1StartTime(self)

    def defrost2StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost2StartTime(self)

    def defrost3StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost3StartTime(self)

    def defrost4StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost4StartTime(self)

    def defrost5StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost5StartTime(self)

    def defrost6StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost6StartTime(self)

    def defrost7StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost7StartTime(self)

    def defrost8StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_defrost8StartTime(self)

    def system(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_system(self)

    def secondarySystem(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_secondarySystem(self)

    def compressorRack(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_compressorRack(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationCase_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetAvailabilitySchedule(self)

    def setThermalZone(self, thermalZone):
        return _openstudiomodelrefrigeration.RefrigerationCase_setThermalZone(self, thermalZone)

    def resetThermalZone(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetThermalZone(self)

    def setRatedAmbientTemperature(self, ratedAmbientTemperature):
        return _openstudiomodelrefrigeration.RefrigerationCase_setRatedAmbientTemperature(self, ratedAmbientTemperature)

    def resetRatedAmbientTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetRatedAmbientTemperature(self)

    def setRatedAmbientRelativeHumidity(self, ratedAmbientRelativeHumidity):
        return _openstudiomodelrefrigeration.RefrigerationCase_setRatedAmbientRelativeHumidity(self, ratedAmbientRelativeHumidity)

    def resetRatedAmbientRelativeHumidity(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetRatedAmbientRelativeHumidity(self)

    def setRatedTotalCoolingCapacityperUnitLength(self, ratedTotalCoolingCapacityperUnitLength):
        return _openstudiomodelrefrigeration.RefrigerationCase_setRatedTotalCoolingCapacityperUnitLength(self, ratedTotalCoolingCapacityperUnitLength)

    def resetRatedTotalCoolingCapacityperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetRatedTotalCoolingCapacityperUnitLength(self)

    def setRatedLatentHeatRatio(self, ratedLatentHeatRatio):
        return _openstudiomodelrefrigeration.RefrigerationCase_setRatedLatentHeatRatio(self, ratedLatentHeatRatio)

    def resetRatedLatentHeatRatio(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetRatedLatentHeatRatio(self)

    def setRatedRuntimeFraction(self, ratedRuntimeFraction):
        return _openstudiomodelrefrigeration.RefrigerationCase_setRatedRuntimeFraction(self, ratedRuntimeFraction)

    def resetRatedRuntimeFraction(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetRatedRuntimeFraction(self)

    def setCaseLength(self, caseLength):
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseLength(self, caseLength)

    def resetCaseLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseLength(self)

    def setCaseOperatingTemperature(self, caseOperatingTemperature):
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseOperatingTemperature(self, caseOperatingTemperature)

    def resetCaseOperatingTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseOperatingTemperature(self)

    def setLatentCaseCreditCurveType(self, latentCaseCreditCurveType):
        return _openstudiomodelrefrigeration.RefrigerationCase_setLatentCaseCreditCurveType(self, latentCaseCreditCurveType)

    def resetLatentCaseCreditCurveType(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetLatentCaseCreditCurveType(self)

    def setLatentCaseCreditCurve(self, curveCubic):
        return _openstudiomodelrefrigeration.RefrigerationCase_setLatentCaseCreditCurve(self, curveCubic)

    def setStandardCaseFanPowerperUnitLength(self, standardCaseFanPowerperUnitLength):
        return _openstudiomodelrefrigeration.RefrigerationCase_setStandardCaseFanPowerperUnitLength(self, standardCaseFanPowerperUnitLength)

    def resetStandardCaseFanPowerperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetStandardCaseFanPowerperUnitLength(self)

    def setOperatingCaseFanPowerperUnitLength(self, operatingCaseFanPowerperUnitLength):
        return _openstudiomodelrefrigeration.RefrigerationCase_setOperatingCaseFanPowerperUnitLength(self, operatingCaseFanPowerperUnitLength)

    def resetOperatingCaseFanPowerperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetOperatingCaseFanPowerperUnitLength(self)

    def setStandardCaseLightingPowerperUnitLength(self, standardCaseLightingPowerperUnitLength):
        return _openstudiomodelrefrigeration.RefrigerationCase_setStandardCaseLightingPowerperUnitLength(self, standardCaseLightingPowerperUnitLength)

    def resetStandardCaseLightingPowerperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetStandardCaseLightingPowerperUnitLength(self)

    def setInstalledCaseLightingPowerperUnitLength(self, installedCaseLightingPowerperUnitLength):
        return _openstudiomodelrefrigeration.RefrigerationCase_setInstalledCaseLightingPowerperUnitLength(self, installedCaseLightingPowerperUnitLength)

    def resetInstalledCaseLightingPowerperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetInstalledCaseLightingPowerperUnitLength(self)

    def setCaseLightingSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseLightingSchedule(self, schedule)

    def resetCaseLightingSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseLightingSchedule(self)

    def setFractionofLightingEnergytoCase(self, fractionofLightingEnergytoCase):
        return _openstudiomodelrefrigeration.RefrigerationCase_setFractionofLightingEnergytoCase(self, fractionofLightingEnergytoCase)

    def resetFractionofLightingEnergytoCase(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetFractionofLightingEnergytoCase(self)

    def setCaseAntiSweatHeaterPowerperUnitLength(self, caseAntiSweatHeaterPowerperUnitLength):
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseAntiSweatHeaterPowerperUnitLength(self, caseAntiSweatHeaterPowerperUnitLength)

    def resetCaseAntiSweatHeaterPowerperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseAntiSweatHeaterPowerperUnitLength(self)

    def setMinimumAntiSweatHeaterPowerperUnitLength(self, minimumAntiSweatHeaterPowerperUnitLength):
        return _openstudiomodelrefrigeration.RefrigerationCase_setMinimumAntiSweatHeaterPowerperUnitLength(self, minimumAntiSweatHeaterPowerperUnitLength)

    def resetMinimumAntiSweatHeaterPowerperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetMinimumAntiSweatHeaterPowerperUnitLength(self)

    def setAntiSweatHeaterControlType(self, antiSweatHeaterControlType):
        return _openstudiomodelrefrigeration.RefrigerationCase_setAntiSweatHeaterControlType(self, antiSweatHeaterControlType)

    def resetAntiSweatHeaterControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetAntiSweatHeaterControlType(self)

    def setHumidityatZeroAntiSweatHeaterEnergy(self, humidityatZeroAntiSweatHeaterEnergy):
        return _openstudiomodelrefrigeration.RefrigerationCase_setHumidityatZeroAntiSweatHeaterEnergy(self, humidityatZeroAntiSweatHeaterEnergy)

    def resetHumidityatZeroAntiSweatHeaterEnergy(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetHumidityatZeroAntiSweatHeaterEnergy(self)

    def setCaseHeight(self, caseHeight):
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseHeight(self, caseHeight)

    def resetCaseHeight(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseHeight(self)

    def setFractionofAntiSweatHeaterEnergytoCase(self, fractionofAntiSweatHeaterEnergytoCase):
        return _openstudiomodelrefrigeration.RefrigerationCase_setFractionofAntiSweatHeaterEnergytoCase(self, fractionofAntiSweatHeaterEnergytoCase)

    def resetFractionofAntiSweatHeaterEnergytoCase(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetFractionofAntiSweatHeaterEnergytoCase(self)

    def setCaseDefrostPowerperUnitLength(self, caseDefrostPowerperUnitLength):
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseDefrostPowerperUnitLength(self, caseDefrostPowerperUnitLength)

    def resetCaseDefrostPowerperUnitLength(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseDefrostPowerperUnitLength(self)

    def setCaseDefrostType(self, caseDefrostType):
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseDefrostType(self, caseDefrostType)

    def resetCaseDefrostType(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseDefrostType(self)

    def setCaseDefrostSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseDefrostSchedule(self, schedule)

    def resetCaseDefrostSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseDefrostSchedule(self)

    def setCaseDefrostDripDownSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseDefrostDripDownSchedule(self, schedule)

    def resetCaseDefrostDripDownSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseDefrostDripDownSchedule(self)

    def setDefrostEnergyCorrectionCurveType(self, defrostEnergyCorrectionCurveType):
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrostEnergyCorrectionCurveType(self, defrostEnergyCorrectionCurveType)

    def resetDefrostEnergyCorrectionCurveType(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrostEnergyCorrectionCurveType(self)

    def setDefrostEnergyCorrectionCurve(self, curveCubic):
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrostEnergyCorrectionCurve(self, curveCubic)

    def resetDefrostEnergyCorrectionCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrostEnergyCorrectionCurve(self)

    def setUnderCaseHVACReturnAirFraction(self, underCaseHVACReturnAirFraction):
        return _openstudiomodelrefrigeration.RefrigerationCase_setUnderCaseHVACReturnAirFraction(self, underCaseHVACReturnAirFraction)

    def resetUnderCaseHVACReturnAirFraction(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetUnderCaseHVACReturnAirFraction(self)

    def setRefrigeratedCaseRestockingSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationCase_setRefrigeratedCaseRestockingSchedule(self, schedule)

    def resetRefrigeratedCaseRestockingSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetRefrigeratedCaseRestockingSchedule(self)

    def setCaseCreditFractionSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseCreditFractionSchedule(self, schedule)

    def resetCaseCreditFractionSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseCreditFractionSchedule(self)

    def setDesignEvaporatorTemperatureorBrineInletTemperature(self, designEvaporatorTemperatureorBrineInletTemperature):
        return _openstudiomodelrefrigeration.RefrigerationCase_setDesignEvaporatorTemperatureorBrineInletTemperature(self, designEvaporatorTemperatureorBrineInletTemperature)

    def resetDesignEvaporatorTemperatureorBrineInletTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDesignEvaporatorTemperatureorBrineInletTemperature(self)

    def setAverageRefrigerantChargeInventory(self, averageRefrigerantChargeInventory):
        return _openstudiomodelrefrigeration.RefrigerationCase_setAverageRefrigerantChargeInventory(self, averageRefrigerantChargeInventory)

    def resetAverageRefrigerantChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetAverageRefrigerantChargeInventory(self)

    def setNumberOfDoors(self, numberOfDoors):
        return _openstudiomodelrefrigeration.RefrigerationCase_setNumberOfDoors(self, numberOfDoors)

    def resetNumberOfDoors(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetNumberOfDoors(self)

    def setRatedTotalCoolingCapacityperDoor(self, ratedTotalCoolingCapacityperDoor):
        return _openstudiomodelrefrigeration.RefrigerationCase_setRatedTotalCoolingCapacityperDoor(self, ratedTotalCoolingCapacityperDoor)

    def resetRatedTotalCoolingCapacityperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetRatedTotalCoolingCapacityperDoor(self)

    def setStandardCaseFanPowerperDoor(self, standardCaseFanPowerperDoor):
        return _openstudiomodelrefrigeration.RefrigerationCase_setStandardCaseFanPowerperDoor(self, standardCaseFanPowerperDoor)

    def resetStandardCaseFanPowerperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetStandardCaseFanPowerperDoor(self)

    def setOperatingCaseFanPowerperDoor(self, operatingCaseFanPowerperDoor):
        return _openstudiomodelrefrigeration.RefrigerationCase_setOperatingCaseFanPowerperDoor(self, operatingCaseFanPowerperDoor)

    def resetOperatingCaseFanPowerperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetOperatingCaseFanPowerperDoor(self)

    def setStandardCaseLightingPowerperDoor(self, standardCaseLightingPowerperDoor):
        return _openstudiomodelrefrigeration.RefrigerationCase_setStandardCaseLightingPowerperDoor(self, standardCaseLightingPowerperDoor)

    def resetStandardCaseLightingPowerperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetStandardCaseLightingPowerperDoor(self)

    def setInstalledCaseLightingPowerperDoor(self, installedCaseLightingPowerperDoor):
        return _openstudiomodelrefrigeration.RefrigerationCase_setInstalledCaseLightingPowerperDoor(self, installedCaseLightingPowerperDoor)

    def resetInstalledCaseLightingPowerperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetInstalledCaseLightingPowerperDoor(self)

    def setCaseAntiSweatHeaterPowerperDoor(self, caseAntiSweatHeaterPowerperDoor):
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseAntiSweatHeaterPowerperDoor(self, caseAntiSweatHeaterPowerperDoor)

    def resetCaseAntiSweatHeaterPowerperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseAntiSweatHeaterPowerperDoor(self)

    def setMinimumAntiSweatHeaterPowerperDoor(self, minimumAntiSweatHeaterPowerperDoor):
        return _openstudiomodelrefrigeration.RefrigerationCase_setMinimumAntiSweatHeaterPowerperDoor(self, minimumAntiSweatHeaterPowerperDoor)

    def resetMinimumAntiSweatHeaterPowerperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetMinimumAntiSweatHeaterPowerperDoor(self)

    def setCaseDefrostPowerperDoor(self, caseDefrostPowerperDoor):
        return _openstudiomodelrefrigeration.RefrigerationCase_setCaseDefrostPowerperDoor(self, caseDefrostPowerperDoor)

    def resetCaseDefrostPowerperDoor(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetCaseDefrostPowerperDoor(self)

    def setUnitType(self, unitType):
        return _openstudiomodelrefrigeration.RefrigerationCase_setUnitType(self, unitType)

    def resetUnitType(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetUnitType(self)

    def setDurationofDefrostCycle(self, durationofDefrostCycle):
        return _openstudiomodelrefrigeration.RefrigerationCase_setDurationofDefrostCycle(self, durationofDefrostCycle)

    def resetDurationofDefrostCycle(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDurationofDefrostCycle(self)

    def setDripDownTime(self, dripDownTime):
        return _openstudiomodelrefrigeration.RefrigerationCase_setDripDownTime(self, dripDownTime)

    def resetDripDownTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDripDownTime(self)

    def setDefrost1StartTime(self, defrost1StartTime):
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost1StartTime(self, defrost1StartTime)

    def resetDefrost1StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost1StartTime(self)

    def setDefrost2StartTime(self, defrost2StartTime):
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost2StartTime(self, defrost2StartTime)

    def resetDefrost2StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost2StartTime(self)

    def setDefrost3StartTime(self, defrost3StartTime):
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost3StartTime(self, defrost3StartTime)

    def resetDefrost3StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost3StartTime(self)

    def setDefrost4StartTime(self, defrost4StartTime):
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost4StartTime(self, defrost4StartTime)

    def resetDefrost4StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost4StartTime(self)

    def setDefrost5StartTime(self, defrost5StartTime):
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost5StartTime(self, defrost5StartTime)

    def resetDefrost5StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost5StartTime(self)

    def setDefrost6StartTime(self, defrost6StartTime):
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost6StartTime(self, defrost6StartTime)

    def resetDefrost6StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost6StartTime(self)

    def setDefrost7StartTime(self, defrost7StartTime):
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost7StartTime(self, defrost7StartTime)

    def resetDefrost7StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost7StartTime(self)

    def setDefrost8StartTime(self, defrost8StartTime):
        return _openstudiomodelrefrigeration.RefrigerationCase_setDefrost8StartTime(self, defrost8StartTime)

    def resetDefrost8StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_resetDefrost8StartTime(self)

    def addToSystem(self, system):
        return _openstudiomodelrefrigeration.RefrigerationCase_addToSystem(self, system)

    def addToSecondarySystem(self, secondarySystem):
        return _openstudiomodelrefrigeration.RefrigerationCase_addToSecondarySystem(self, secondarySystem)

    def addToCompressorRack(self, compressorRack):
        return _openstudiomodelrefrigeration.RefrigerationCase_addToCompressorRack(self, compressorRack)

    def removeFromSystem(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_removeFromSystem(self)

    def removeFromSecondarySystem(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_removeFromSecondarySystem(self)

    def removeFromCompressorRack(self):
        return _openstudiomodelrefrigeration.RefrigerationCase_removeFromCompressorRack(self)

# Register RefrigerationCase in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationCase_swigregister(RefrigerationCase)

def toRefrigerationCase(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationCase(idfObject)

def getRefrigerationCase(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationCase(t_model, t_handle)

def getRefrigerationCases(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationCases(t_model)

def getRefrigerationCaseByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationCaseByName(t_model, t_name)

def getRefrigerationCasesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationCasesByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationCase(self) -> OptionalRefrigerationCase:
    """Try to cast the ModelObject to a RefrigerationCase.

    :return: An Optional RefrigerationCase.
    """
    return toRefrigerationCase(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationCase = _to_RefrigerationCase

def _getRefrigerationCase(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationCase:
    """Try to get an object of type RefrigerationCase referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationCase.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationCase(self, t_handle)
Model.getRefrigerationCase = _getRefrigerationCase

def _getRefrigerationCases(self) -> RefrigerationCaseVector:
    """Get a vector of all objects of type RefrigerationCase in the model.

    :return: A vector of RefrigerationCase.
    """
    return getRefrigerationCases(self)
Model.getRefrigerationCases = _getRefrigerationCases

def _getRefrigerationCaseByName(self, t_name: str) -> OptionalRefrigerationCase:
    """Try to get an object of type RefrigerationCase that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationCase.
    """
    return getRefrigerationCaseByName(self, t_name)
Model.getRefrigerationCaseByName = _getRefrigerationCaseByName

def _getRefrigerationCasesByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationCaseVector:
    """Returns all objects of type RefrigerationCase named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationCasesByName(self, t_name, t_exactMatch)
Model.getRefrigerationCasesByName = _getRefrigerationCasesByName

class RefrigerationCompressor(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCompressor

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationCompressor_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationCompressor(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationCompressor_iddObjectType()

    @staticmethod
    def modeofOperationValues():
        return _openstudiomodelrefrigeration.RefrigerationCompressor_modeofOperationValues()

    def refrigerationCompressorPowerCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_refrigerationCompressorPowerCurve(self)

    def refrigerationCompressorCapacityCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_refrigerationCompressorCapacityCurve(self)

    def ratedSuperheat(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_ratedSuperheat(self)

    def ratedReturnGasTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_ratedReturnGasTemperature(self)

    def ratedLiquidTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_ratedLiquidTemperature(self)

    def ratedSubcooling(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_ratedSubcooling(self)

    def endUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_isEndUseSubcategoryDefaulted(self)

    def modeofOperation(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_modeofOperation(self)

    def transcriticalCompressorPowerCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_transcriticalCompressorPowerCurve(self)

    def transcriticalCompressorCapacityCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_transcriticalCompressorCapacityCurve(self)

    def system(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_system(self)

    def setRefrigerationCompressorPowerCurve(self, curveBicubic):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setRefrigerationCompressorPowerCurve(self, curveBicubic)

    def setRefrigerationCompressorCapacityCurve(self, curveBicubic):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setRefrigerationCompressorCapacityCurve(self, curveBicubic)

    def setRatedSuperheat(self, ratedSuperheat):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setRatedSuperheat(self, ratedSuperheat)

    def resetRatedSuperheat(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_resetRatedSuperheat(self)

    def setRatedReturnGasTemperature(self, ratedReturnGasTemperature):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setRatedReturnGasTemperature(self, ratedReturnGasTemperature)

    def resetRatedReturnGasTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_resetRatedReturnGasTemperature(self)

    def setRatedLiquidTemperature(self, ratedLiquidTemperature):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setRatedLiquidTemperature(self, ratedLiquidTemperature)

    def resetRatedLiquidTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_resetRatedLiquidTemperature(self)

    def setRatedSubcooling(self, ratedSubcooling):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setRatedSubcooling(self, ratedSubcooling)

    def resetRatedSubcooling(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_resetRatedSubcooling(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_resetEndUseSubcategory(self)

    def setTranscriticalCompressorPowerCurve(self, curveBicubic):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setTranscriticalCompressorPowerCurve(self, curveBicubic)

    def resetTranscriticalCompressorPowerCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_resetTranscriticalCompressorPowerCurve(self)

    def setTranscriticalCompressorCapacityCurve(self, curveBicubic):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_setTranscriticalCompressorCapacityCurve(self, curveBicubic)

    def resetTranscriticalCompressorCapacityCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_resetTranscriticalCompressorCapacityCurve(self)

    def removeFromSystem(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressor_removeFromSystem(self)

# Register RefrigerationCompressor in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationCompressor_swigregister(RefrigerationCompressor)

def toRefrigerationCompressor(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationCompressor(idfObject)

def getRefrigerationCompressor(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationCompressor(t_model, t_handle)

def getRefrigerationCompressors(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationCompressors(t_model)

def getRefrigerationCompressorByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationCompressorByName(t_model, t_name)

def getRefrigerationCompressorsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationCompressorsByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationCompressor(self) -> OptionalRefrigerationCompressor:
    """Try to cast the ModelObject to a RefrigerationCompressor.

    :return: An Optional RefrigerationCompressor.
    """
    return toRefrigerationCompressor(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationCompressor = _to_RefrigerationCompressor

def _getRefrigerationCompressor(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationCompressor:
    """Try to get an object of type RefrigerationCompressor referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationCompressor.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationCompressor(self, t_handle)
Model.getRefrigerationCompressor = _getRefrigerationCompressor

def _getRefrigerationCompressors(self) -> RefrigerationCompressorVector:
    """Get a vector of all objects of type RefrigerationCompressor in the model.

    :return: A vector of RefrigerationCompressor.
    """
    return getRefrigerationCompressors(self)
Model.getRefrigerationCompressors = _getRefrigerationCompressors

def _getRefrigerationCompressorByName(self, t_name: str) -> OptionalRefrigerationCompressor:
    """Try to get an object of type RefrigerationCompressor that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationCompressor.
    """
    return getRefrigerationCompressorByName(self, t_name)
Model.getRefrigerationCompressorByName = _getRefrigerationCompressorByName

def _getRefrigerationCompressorsByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationCompressorVector:
    """Returns all objects of type RefrigerationCompressor named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationCompressorsByName(self, t_name, t_exactMatch)
Model.getRefrigerationCompressorsByName = _getRefrigerationCompressorsByName

class RefrigerationCompressorRack(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCompressorRack

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationCompressorRack_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationCompressorRack(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_iddObjectType()

    @staticmethod
    def condenserTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_condenserTypeValues()

    @staticmethod
    def waterCooledLoopFlowTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_waterCooledLoopFlowTypeValues()

    def heatRejectionLocation(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_heatRejectionLocation(self)

    def designCompressorRackCOP(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_designCompressorRackCOP(self)

    def compressorRackCOPFunctionofTemperatureCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_compressorRackCOPFunctionofTemperatureCurve(self)

    def designCondenserFanPower(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_designCondenserFanPower(self)

    def condenserFanPowerFunctionofTemperatureCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_condenserFanPowerFunctionofTemperatureCurve(self)

    def condenserType(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_condenserType(self)

    def waterCooledLoopFlowType(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_waterCooledLoopFlowType(self)

    def waterCooledCondenserOutletTemperatureSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_waterCooledCondenserOutletTemperatureSchedule(self)

    def waterCooledCondenserDesignFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_waterCooledCondenserDesignFlowRate(self)

    def waterCooledCondenserMaximumFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_waterCooledCondenserMaximumFlowRate(self)

    def waterCooledCondenserMaximumWaterOutletTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_waterCooledCondenserMaximumWaterOutletTemperature(self)

    def waterCooledCondenserMinimumWaterInletTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_waterCooledCondenserMinimumWaterInletTemperature(self)

    def evaporativeCondenserAvailabilitySchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_evaporativeCondenserAvailabilitySchedule(self)

    def evaporativeCondenserEffectiveness(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_evaporativeCondenserEffectiveness(self)

    def evaporativeCondenserAirFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_evaporativeCondenserAirFlowRate(self)

    def isEvaporativeCondenserAirFlowRateAutocalculated(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_isEvaporativeCondenserAirFlowRateAutocalculated(self)

    def basinHeaterCapacity(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_basinHeaterCapacity(self)

    def basinHeaterSetpointTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_basinHeaterSetpointTemperature(self)

    def designEvaporativeCondenserWaterPumpPower(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_designEvaporativeCondenserWaterPumpPower(self)

    def isDesignEvaporativeCondenserWaterPumpPowerAutocalculated(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_isDesignEvaporativeCondenserWaterPumpPowerAutocalculated(self)

    def endUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_isEndUseSubcategoryDefaulted(self)

    def cases(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_cases(self)

    def walkins(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_walkins(self)

    def airChillers(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_airChillers(self)

    def heatRejectionZone(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_heatRejectionZone(self)

    def setHeatRejectionLocation(self, heatRejectionLocation):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setHeatRejectionLocation(self, heatRejectionLocation)

    def setDesignCompressorRackCOP(self, designCompressorRackCOP):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setDesignCompressorRackCOP(self, designCompressorRackCOP)

    def setCompressorRackCOPFunctionofTemperatureCurve(self, curve):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setCompressorRackCOPFunctionofTemperatureCurve(self, curve)

    def setDesignCondenserFanPower(self, designCondenserFanPower):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setDesignCondenserFanPower(self, designCondenserFanPower)

    def setCondenserFanPowerFunctionofTemperatureCurve(self, curve):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setCondenserFanPowerFunctionofTemperatureCurve(self, curve)

    def resetCondenserFanPowerFunctionofTemperatureCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_resetCondenserFanPowerFunctionofTemperatureCurve(self)

    def setCondenserType(self, condenserType):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setCondenserType(self, condenserType)

    def setWaterCooledLoopFlowType(self, waterCooledLoopFlowType):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setWaterCooledLoopFlowType(self, waterCooledLoopFlowType)

    def setWaterCooledCondenserOutletTemperatureSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setWaterCooledCondenserOutletTemperatureSchedule(self, schedule)

    def resetWaterCooledCondenserOutletTemperatureSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_resetWaterCooledCondenserOutletTemperatureSchedule(self)

    def setWaterCooledCondenserDesignFlowRate(self, waterCooledCondenserDesignFlowRate):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setWaterCooledCondenserDesignFlowRate(self, waterCooledCondenserDesignFlowRate)

    def resetWaterCooledCondenserDesignFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_resetWaterCooledCondenserDesignFlowRate(self)

    def setWaterCooledCondenserMaximumFlowRate(self, waterCooledCondenserMaximumFlowRate):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setWaterCooledCondenserMaximumFlowRate(self, waterCooledCondenserMaximumFlowRate)

    def resetWaterCooledCondenserMaximumFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_resetWaterCooledCondenserMaximumFlowRate(self)

    def setWaterCooledCondenserMaximumWaterOutletTemperature(self, waterCooledCondenserMaximumWaterOutletTemperature):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setWaterCooledCondenserMaximumWaterOutletTemperature(self, waterCooledCondenserMaximumWaterOutletTemperature)

    def setWaterCooledCondenserMinimumWaterInletTemperature(self, waterCooledCondenserMinimumWaterInletTemperature):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setWaterCooledCondenserMinimumWaterInletTemperature(self, waterCooledCondenserMinimumWaterInletTemperature)

    def setEvaporativeCondenserAvailabilitySchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setEvaporativeCondenserAvailabilitySchedule(self, schedule)

    def resetEvaporativeCondenserAvailabilitySchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_resetEvaporativeCondenserAvailabilitySchedule(self)

    def setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness)

    def setEvaporativeCondenserAirFlowRate(self, evaporativeCondenserAirFlowRate):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setEvaporativeCondenserAirFlowRate(self, evaporativeCondenserAirFlowRate)

    def autocalculateEvaporativeCondenserAirFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_autocalculateEvaporativeCondenserAirFlowRate(self)

    def setBasinHeaterCapacity(self, basinHeaterCapacity):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setBasinHeaterCapacity(self, basinHeaterCapacity)

    def setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature)

    def setDesignEvaporativeCondenserWaterPumpPower(self, designEvaporativeCondenserWaterPumpPower):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setDesignEvaporativeCondenserWaterPumpPower(self, designEvaporativeCondenserWaterPumpPower)

    def autocalculateDesignEvaporativeCondenserWaterPumpPower(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_autocalculateDesignEvaporativeCondenserWaterPumpPower(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_resetEndUseSubcategory(self)

    def addCase(self, refrigerationCase):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_addCase(self, refrigerationCase)

    def removeCase(self, refrigerationCase):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_removeCase(self, refrigerationCase)

    def removeAllCases(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_removeAllCases(self)

    def addWalkin(self, refrigerationWalkin):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_addWalkin(self, refrigerationWalkin)

    def removeWalkin(self, refrigerationWalkin):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_removeWalkin(self, refrigerationWalkin)

    def removeAllWalkins(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_removeAllWalkins(self)

    def addAirChiller(self, airChiller):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_addAirChiller(self, airChiller)

    def removeAirChiller(self, airChiller):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_removeAirChiller(self, airChiller)

    def removeAllAirChillers(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_removeAllAirChillers(self)

    def resetRefrigeratedCaseAndWalkInList(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_resetRefrigeratedCaseAndWalkInList(self)

    def setHeatRejectionZone(self, thermalZone):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_setHeatRejectionZone(self, thermalZone)

    def resetHeatRejectionZone(self):
        return _openstudiomodelrefrigeration.RefrigerationCompressorRack_resetHeatRejectionZone(self)

# Register RefrigerationCompressorRack in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationCompressorRack_swigregister(RefrigerationCompressorRack)

def toRefrigerationCompressorRack(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationCompressorRack(idfObject)

def getRefrigerationCompressorRack(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationCompressorRack(t_model, t_handle)

def getRefrigerationCompressorRacks(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationCompressorRacks(t_model)

def getRefrigerationCompressorRackByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationCompressorRackByName(t_model, t_name)

def getRefrigerationCompressorRacksByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationCompressorRacksByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationCompressorRack(self) -> OptionalRefrigerationCompressorRack:
    """Try to cast the ModelObject to a RefrigerationCompressorRack.

    :return: An Optional RefrigerationCompressorRack.
    """
    return toRefrigerationCompressorRack(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationCompressorRack = _to_RefrigerationCompressorRack

def _getRefrigerationCompressorRack(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationCompressorRack:
    """Try to get an object of type RefrigerationCompressorRack referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationCompressorRack.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationCompressorRack(self, t_handle)
Model.getRefrigerationCompressorRack = _getRefrigerationCompressorRack

def _getRefrigerationCompressorRacks(self) -> RefrigerationCompressorRackVector:
    """Get a vector of all objects of type RefrigerationCompressorRack in the model.

    :return: A vector of RefrigerationCompressorRack.
    """
    return getRefrigerationCompressorRacks(self)
Model.getRefrigerationCompressorRacks = _getRefrigerationCompressorRacks

def _getRefrigerationCompressorRackByName(self, t_name: str) -> OptionalRefrigerationCompressorRack:
    """Try to get an object of type RefrigerationCompressorRack that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationCompressorRack.
    """
    return getRefrigerationCompressorRackByName(self, t_name)
Model.getRefrigerationCompressorRackByName = _getRefrigerationCompressorRackByName

def _getRefrigerationCompressorRacksByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationCompressorRackVector:
    """Returns all objects of type RefrigerationCompressorRack named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationCompressorRacksByName(self, t_name, t_exactMatch)
Model.getRefrigerationCompressorRacksByName = _getRefrigerationCompressorRacksByName

class RefrigerationCondenserAirCooled(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserAirCooled

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationCondenserAirCooled(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_iddObjectType()

    @staticmethod
    def condenserFanSpeedControlTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_condenserFanSpeedControlTypeValues()

    def ratedEffectiveTotalHeatRejectionRateCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_ratedEffectiveTotalHeatRejectionRateCurve(self)

    def ratedSubcoolingTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_ratedSubcoolingTemperatureDifference(self)

    def isRatedSubcoolingTemperatureDifferenceDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isRatedSubcoolingTemperatureDifferenceDefaulted(self)

    def condenserFanSpeedControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_condenserFanSpeedControlType(self)

    def isCondenserFanSpeedControlTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isCondenserFanSpeedControlTypeDefaulted(self)

    def ratedFanPower(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_ratedFanPower(self)

    def isRatedFanPowerDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isRatedFanPowerDefaulted(self)

    def minimumFanAirFlowRatio(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_minimumFanAirFlowRatio(self)

    def isMinimumFanAirFlowRatioDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isMinimumFanAirFlowRatioDefaulted(self)

    def airInletZone(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_airInletZone(self)

    def endUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isEndUseSubcategoryDefaulted(self)

    def condenserRefrigerantOperatingChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_condenserRefrigerantOperatingChargeInventory(self)

    def isCondenserRefrigerantOperatingChargeInventoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isCondenserRefrigerantOperatingChargeInventoryDefaulted(self)

    def condensateReceiverRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_condensateReceiverRefrigerantInventory(self)

    def isCondensateReceiverRefrigerantInventoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isCondensateReceiverRefrigerantInventoryDefaulted(self)

    def condensatePipingRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_condensatePipingRefrigerantInventory(self)

    def isCondensatePipingRefrigerantInventoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_isCondensatePipingRefrigerantInventoryDefaulted(self)

    def setRatedEffectiveTotalHeatRejectionRateCurve(self, curveLinear):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setRatedEffectiveTotalHeatRejectionRateCurve(self, curveLinear)

    def resetRatedEffectiveTotalHeatRejectionRateCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetRatedEffectiveTotalHeatRejectionRateCurve(self)

    def setRatedSubcoolingTemperatureDifference(self, ratedSubcoolingTemperatureDifference):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setRatedSubcoolingTemperatureDifference(self, ratedSubcoolingTemperatureDifference)

    def resetRatedSubcoolingTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetRatedSubcoolingTemperatureDifference(self)

    def setCondenserFanSpeedControlType(self, condenserFanSpeedControlType):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setCondenserFanSpeedControlType(self, condenserFanSpeedControlType)

    def resetCondenserFanSpeedControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetCondenserFanSpeedControlType(self)

    def setRatedFanPower(self, ratedFanPower):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setRatedFanPower(self, ratedFanPower)

    def resetRatedFanPower(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetRatedFanPower(self)

    def setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio)

    def resetMinimumFanAirFlowRatio(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetMinimumFanAirFlowRatio(self)

    def setAirInletZone(self, thermalZone):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setAirInletZone(self, thermalZone)

    def resetAirInletZone(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetAirInletZone(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetEndUseSubcategory(self)

    def setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory)

    def resetCondenserRefrigerantOperatingChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetCondenserRefrigerantOperatingChargeInventory(self)

    def setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory)

    def resetCondensateReceiverRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetCondensateReceiverRefrigerantInventory(self)

    def setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory)

    def resetCondensatePipingRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_resetCondensatePipingRefrigerantInventory(self)

    def system(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_system(self)

# Register RefrigerationCondenserAirCooled in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationCondenserAirCooled_swigregister(RefrigerationCondenserAirCooled)

def toRefrigerationCondenserAirCooled(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationCondenserAirCooled(idfObject)

def getRefrigerationCondenserAirCooled(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserAirCooled(t_model, t_handle)

def getRefrigerationCondenserAirCooleds(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserAirCooleds(t_model)

def getRefrigerationCondenserAirCooledByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserAirCooledByName(t_model, t_name)

def getRefrigerationCondenserAirCooledsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserAirCooledsByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationCondenserAirCooled(self) -> OptionalRefrigerationCondenserAirCooled:
    """Try to cast the ModelObject to a RefrigerationCondenserAirCooled.

    :return: An Optional RefrigerationCondenserAirCooled.
    """
    return toRefrigerationCondenserAirCooled(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationCondenserAirCooled = _to_RefrigerationCondenserAirCooled

def _getRefrigerationCondenserAirCooled(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationCondenserAirCooled:
    """Try to get an object of type RefrigerationCondenserAirCooled referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationCondenserAirCooled.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationCondenserAirCooled(self, t_handle)
Model.getRefrigerationCondenserAirCooled = _getRefrigerationCondenserAirCooled

def _getRefrigerationCondenserAirCooleds(self) -> RefrigerationCondenserAirCooledVector:
    """Get a vector of all objects of type RefrigerationCondenserAirCooled in the model.

    :return: A vector of RefrigerationCondenserAirCooled.
    """
    return getRefrigerationCondenserAirCooleds(self)
Model.getRefrigerationCondenserAirCooleds = _getRefrigerationCondenserAirCooleds

def _getRefrigerationCondenserAirCooledByName(self, t_name: str) -> OptionalRefrigerationCondenserAirCooled:
    """Try to get an object of type RefrigerationCondenserAirCooled that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationCondenserAirCooled.
    """
    return getRefrigerationCondenserAirCooledByName(self, t_name)
Model.getRefrigerationCondenserAirCooledByName = _getRefrigerationCondenserAirCooledByName

def _getRefrigerationCondenserAirCooledsByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationCondenserAirCooledVector:
    """Returns all objects of type RefrigerationCondenserAirCooled named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationCondenserAirCooledsByName(self, t_name, t_exactMatch)
Model.getRefrigerationCondenserAirCooledsByName = _getRefrigerationCondenserAirCooledsByName

class RefrigerationCondenserCascade(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserCascade

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationCondenserCascade_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationCondenserCascade(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_iddObjectType()

    @staticmethod
    def condensingTemperatureControlTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_condensingTemperatureControlTypeValues()

    def ratedCondensingTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_ratedCondensingTemperature(self)

    def ratedApproachTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_ratedApproachTemperatureDifference(self)

    def isRatedApproachTemperatureDifferenceDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_isRatedApproachTemperatureDifferenceDefaulted(self)

    def ratedEffectiveTotalHeatRejectionRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_ratedEffectiveTotalHeatRejectionRate(self)

    def condensingTemperatureControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_condensingTemperatureControlType(self)

    def isCondensingTemperatureControlTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_isCondensingTemperatureControlTypeDefaulted(self)

    def condenserRefrigerantOperatingChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_condenserRefrigerantOperatingChargeInventory(self)

    def condensateReceiverRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_condensateReceiverRefrigerantInventory(self)

    def condensatePipingRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_condensatePipingRefrigerantInventory(self)

    def setRatedCondensingTemperature(self, ratedCondensingTemperature):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_setRatedCondensingTemperature(self, ratedCondensingTemperature)

    def setRatedApproachTemperatureDifference(self, ratedApproachTemperatureDifference):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_setRatedApproachTemperatureDifference(self, ratedApproachTemperatureDifference)

    def resetRatedApproachTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_resetRatedApproachTemperatureDifference(self)

    def setRatedEffectiveTotalHeatRejectionRate(self, ratedEffectiveTotalHeatRejectionRate):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_setRatedEffectiveTotalHeatRejectionRate(self, ratedEffectiveTotalHeatRejectionRate)

    def setCondensingTemperatureControlType(self, condensingTemperatureControlType):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_setCondensingTemperatureControlType(self, condensingTemperatureControlType)

    def resetCondensingTemperatureControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_resetCondensingTemperatureControlType(self)

    def setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory)

    def resetCondenserRefrigerantOperatingChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_resetCondenserRefrigerantOperatingChargeInventory(self)

    def setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory)

    def resetCondensateReceiverRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_resetCondensateReceiverRefrigerantInventory(self)

    def setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory)

    def resetCondensatePipingRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_resetCondensatePipingRefrigerantInventory(self)

    def system(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_system(self)

    def removeFromSystem(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_removeFromSystem(self)

    def heatRejectingSystem(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_heatRejectingSystem(self)

    def removeFromHeatRejectingSystem(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserCascade_removeFromHeatRejectingSystem(self)

# Register RefrigerationCondenserCascade in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationCondenserCascade_swigregister(RefrigerationCondenserCascade)

def toRefrigerationCondenserCascade(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationCondenserCascade(idfObject)

def getRefrigerationCondenserCascade(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserCascade(t_model, t_handle)

def getRefrigerationCondenserCascades(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserCascades(t_model)

def getRefrigerationCondenserCascadeByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserCascadeByName(t_model, t_name)

def getRefrigerationCondenserCascadesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserCascadesByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationCondenserCascade(self) -> OptionalRefrigerationCondenserCascade:
    """Try to cast the ModelObject to a RefrigerationCondenserCascade.

    :return: An Optional RefrigerationCondenserCascade.
    """
    return toRefrigerationCondenserCascade(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationCondenserCascade = _to_RefrigerationCondenserCascade

def _getRefrigerationCondenserCascade(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationCondenserCascade:
    """Try to get an object of type RefrigerationCondenserCascade referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationCondenserCascade.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationCondenserCascade(self, t_handle)
Model.getRefrigerationCondenserCascade = _getRefrigerationCondenserCascade

def _getRefrigerationCondenserCascades(self) -> RefrigerationCondenserCascadeVector:
    """Get a vector of all objects of type RefrigerationCondenserCascade in the model.

    :return: A vector of RefrigerationCondenserCascade.
    """
    return getRefrigerationCondenserCascades(self)
Model.getRefrigerationCondenserCascades = _getRefrigerationCondenserCascades

def _getRefrigerationCondenserCascadeByName(self, t_name: str) -> OptionalRefrigerationCondenserCascade:
    """Try to get an object of type RefrigerationCondenserCascade that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationCondenserCascade.
    """
    return getRefrigerationCondenserCascadeByName(self, t_name)
Model.getRefrigerationCondenserCascadeByName = _getRefrigerationCondenserCascadeByName

def _getRefrigerationCondenserCascadesByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationCondenserCascadeVector:
    """Returns all objects of type RefrigerationCondenserCascade named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationCondenserCascadesByName(self, t_name, t_exactMatch)
Model.getRefrigerationCondenserCascadesByName = _getRefrigerationCondenserCascadesByName

class RefrigerationCondenserEvaporativeCooled(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserEvaporativeCooled

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationCondenserEvaporativeCooled(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_iddObjectType()

    @staticmethod
    def fanSpeedControlTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_fanSpeedControlTypeValues()

    def ratedEffectiveTotalHeatRejectionRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_ratedEffectiveTotalHeatRejectionRate(self)

    def ratedSubcoolingTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_ratedSubcoolingTemperatureDifference(self)

    def isRatedSubcoolingTemperatureDifferenceDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isRatedSubcoolingTemperatureDifferenceDefaulted(self)

    def fanSpeedControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_fanSpeedControlType(self)

    def isFanSpeedControlTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isFanSpeedControlTypeDefaulted(self)

    def ratedFanPower(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_ratedFanPower(self)

    def minimumFanAirFlowRatio(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_minimumFanAirFlowRatio(self)

    def isMinimumFanAirFlowRatioDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isMinimumFanAirFlowRatioDefaulted(self)

    def approachTemperatureConstantTerm(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_approachTemperatureConstantTerm(self)

    def isApproachTemperatureConstantTermDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isApproachTemperatureConstantTermDefaulted(self)

    def approachTemperatureCoefficient2(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_approachTemperatureCoefficient2(self)

    def isApproachTemperatureCoefficient2Defaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isApproachTemperatureCoefficient2Defaulted(self)

    def approachTemperatureCoefficient3(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_approachTemperatureCoefficient3(self)

    def isApproachTemperatureCoefficient3Defaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isApproachTemperatureCoefficient3Defaulted(self)

    def approachTemperatureCoefficient4(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_approachTemperatureCoefficient4(self)

    def isApproachTemperatureCoefficient4Defaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isApproachTemperatureCoefficient4Defaulted(self)

    def minimumCapacityFactor(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_minimumCapacityFactor(self)

    def isMinimumCapacityFactorDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isMinimumCapacityFactorDefaulted(self)

    def maximumCapacityFactor(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_maximumCapacityFactor(self)

    def isMaximumCapacityFactorDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isMaximumCapacityFactorDefaulted(self)

    def ratedAirFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_ratedAirFlowRate(self)

    def isRatedAirFlowRateDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isRatedAirFlowRateDefaulted(self)

    def isRatedAirFlowRateAutocalculated(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isRatedAirFlowRateAutocalculated(self)

    def basinHeaterCapacity(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_basinHeaterCapacity(self)

    def isBasinHeaterCapacityDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isBasinHeaterCapacityDefaulted(self)

    def basinHeaterSetpointTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_basinHeaterSetpointTemperature(self)

    def isBasinHeaterSetpointTemperatureDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isBasinHeaterSetpointTemperatureDefaulted(self)

    def ratedWaterPumpPower(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_ratedWaterPumpPower(self)

    def isRatedWaterPumpPowerDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isRatedWaterPumpPowerDefaulted(self)

    def isRatedWaterPumpPowerAutocalculated(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isRatedWaterPumpPowerAutocalculated(self)

    def evaporativeCondenserAvailabilitySchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_evaporativeCondenserAvailabilitySchedule(self)

    def endUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isEndUseSubcategoryDefaulted(self)

    def condenserRefrigerantOperatingChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_condenserRefrigerantOperatingChargeInventory(self)

    def isCondenserRefrigerantOperatingChargeInventoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isCondenserRefrigerantOperatingChargeInventoryDefaulted(self)

    def condensateReceiverRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_condensateReceiverRefrigerantInventory(self)

    def isCondensateReceiverRefrigerantInventoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isCondensateReceiverRefrigerantInventoryDefaulted(self)

    def condensatePipingRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_condensatePipingRefrigerantInventory(self)

    def isCondensatePipingRefrigerantInventoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_isCondensatePipingRefrigerantInventoryDefaulted(self)

    def setRatedEffectiveTotalHeatRejectionRate(self, ratedEffectiveTotalHeatRejectionRate):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setRatedEffectiveTotalHeatRejectionRate(self, ratedEffectiveTotalHeatRejectionRate)

    def setRatedSubcoolingTemperatureDifference(self, ratedSubcoolingTemperatureDifference):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setRatedSubcoolingTemperatureDifference(self, ratedSubcoolingTemperatureDifference)

    def resetRatedSubcoolingTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetRatedSubcoolingTemperatureDifference(self)

    def setFanSpeedControlType(self, fanSpeedControlType):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setFanSpeedControlType(self, fanSpeedControlType)

    def resetFanSpeedControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetFanSpeedControlType(self)

    def setRatedFanPower(self, ratedFanPower):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setRatedFanPower(self, ratedFanPower)

    def setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio)

    def resetMinimumFanAirFlowRatio(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetMinimumFanAirFlowRatio(self)

    def setApproachTemperatureConstantTerm(self, approachTemperatureConstantTerm):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setApproachTemperatureConstantTerm(self, approachTemperatureConstantTerm)

    def resetApproachTemperatureConstantTerm(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetApproachTemperatureConstantTerm(self)

    def setApproachTemperatureCoefficient2(self, approachTemperatureCoefficient2):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setApproachTemperatureCoefficient2(self, approachTemperatureCoefficient2)

    def resetApproachTemperatureCoefficient2(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetApproachTemperatureCoefficient2(self)

    def setApproachTemperatureCoefficient3(self, approachTemperatureCoefficient3):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setApproachTemperatureCoefficient3(self, approachTemperatureCoefficient3)

    def resetApproachTemperatureCoefficient3(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetApproachTemperatureCoefficient3(self)

    def setApproachTemperatureCoefficient4(self, approachTemperatureCoefficient4):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setApproachTemperatureCoefficient4(self, approachTemperatureCoefficient4)

    def resetApproachTemperatureCoefficient4(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetApproachTemperatureCoefficient4(self)

    def setMinimumCapacityFactor(self, minimumCapacityFactor):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setMinimumCapacityFactor(self, minimumCapacityFactor)

    def resetMinimumCapacityFactor(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetMinimumCapacityFactor(self)

    def setMaximumCapacityFactor(self, maximumCapacityFactor):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setMaximumCapacityFactor(self, maximumCapacityFactor)

    def resetMaximumCapacityFactor(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetMaximumCapacityFactor(self)

    def setRatedAirFlowRate(self, ratedAirFlowRate):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setRatedAirFlowRate(self, ratedAirFlowRate)

    def resetRatedAirFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetRatedAirFlowRate(self)

    def autocalculateRatedAirFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_autocalculateRatedAirFlowRate(self)

    def setBasinHeaterCapacity(self, basinHeaterCapacity):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setBasinHeaterCapacity(self, basinHeaterCapacity)

    def resetBasinHeaterCapacity(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetBasinHeaterCapacity(self)

    def setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setBasinHeaterSetpointTemperature(self, basinHeaterSetpointTemperature)

    def resetBasinHeaterSetpointTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetBasinHeaterSetpointTemperature(self)

    def setRatedWaterPumpPower(self, ratedWaterPumpPower):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setRatedWaterPumpPower(self, ratedWaterPumpPower)

    def resetRatedWaterPumpPower(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetRatedWaterPumpPower(self)

    def autocalculateRatedWaterPumpPower(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_autocalculateRatedWaterPumpPower(self)

    def setEvaporativeCondenserAvailabilitySchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setEvaporativeCondenserAvailabilitySchedule(self, schedule)

    def resetEvaporativeCondenserAvailabilitySchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetEvaporativeCondenserAvailabilitySchedule(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetEndUseSubcategory(self)

    def setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory)

    def resetCondenserRefrigerantOperatingChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetCondenserRefrigerantOperatingChargeInventory(self)

    def setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory)

    def resetCondensateReceiverRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetCondensateReceiverRefrigerantInventory(self)

    def setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory)

    def resetCondensatePipingRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_resetCondensatePipingRefrigerantInventory(self)

    def system(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_system(self)

# Register RefrigerationCondenserEvaporativeCooled in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationCondenserEvaporativeCooled_swigregister(RefrigerationCondenserEvaporativeCooled)

def toRefrigerationCondenserEvaporativeCooled(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationCondenserEvaporativeCooled(idfObject)

def getRefrigerationCondenserEvaporativeCooled(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserEvaporativeCooled(t_model, t_handle)

def getRefrigerationCondenserEvaporativeCooleds(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserEvaporativeCooleds(t_model)

def getRefrigerationCondenserEvaporativeCooledByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserEvaporativeCooledByName(t_model, t_name)

def getRefrigerationCondenserEvaporativeCooledsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserEvaporativeCooledsByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationCondenserEvaporativeCooled(self) -> OptionalRefrigerationCondenserEvaporativeCooled:
    """Try to cast the ModelObject to a RefrigerationCondenserEvaporativeCooled.

    :return: An Optional RefrigerationCondenserEvaporativeCooled.
    """
    return toRefrigerationCondenserEvaporativeCooled(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationCondenserEvaporativeCooled = _to_RefrigerationCondenserEvaporativeCooled

def _getRefrigerationCondenserEvaporativeCooled(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationCondenserEvaporativeCooled:
    """Try to get an object of type RefrigerationCondenserEvaporativeCooled referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationCondenserEvaporativeCooled.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationCondenserEvaporativeCooled(self, t_handle)
Model.getRefrigerationCondenserEvaporativeCooled = _getRefrigerationCondenserEvaporativeCooled

def _getRefrigerationCondenserEvaporativeCooleds(self) -> RefrigerationCondenserEvaporativeCooledVector:
    """Get a vector of all objects of type RefrigerationCondenserEvaporativeCooled in the model.

    :return: A vector of RefrigerationCondenserEvaporativeCooled.
    """
    return getRefrigerationCondenserEvaporativeCooleds(self)
Model.getRefrigerationCondenserEvaporativeCooleds = _getRefrigerationCondenserEvaporativeCooleds

def _getRefrigerationCondenserEvaporativeCooledByName(self, t_name: str) -> OptionalRefrigerationCondenserEvaporativeCooled:
    """Try to get an object of type RefrigerationCondenserEvaporativeCooled that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationCondenserEvaporativeCooled.
    """
    return getRefrigerationCondenserEvaporativeCooledByName(self, t_name)
Model.getRefrigerationCondenserEvaporativeCooledByName = _getRefrigerationCondenserEvaporativeCooledByName

def _getRefrigerationCondenserEvaporativeCooledsByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationCondenserEvaporativeCooledVector:
    """Returns all objects of type RefrigerationCondenserEvaporativeCooled named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationCondenserEvaporativeCooledsByName(self, t_name, t_exactMatch)
Model.getRefrigerationCondenserEvaporativeCooledsByName = _getRefrigerationCondenserEvaporativeCooledsByName

class RefrigerationCondenserWaterCooled(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationCondenserWaterCooled

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationCondenserWaterCooled(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_iddObjectType()

    @staticmethod
    def waterCooledLoopFlowTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterCooledLoopFlowTypeValues()

    def ratedEffectiveTotalHeatRejectionRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_ratedEffectiveTotalHeatRejectionRate(self)

    def ratedCondensingTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_ratedCondensingTemperature(self)

    def ratedSubcoolingTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_ratedSubcoolingTemperatureDifference(self)

    def isRatedSubcoolingTemperatureDifferenceDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_isRatedSubcoolingTemperatureDifferenceDefaulted(self)

    def ratedWaterInletTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_ratedWaterInletTemperature(self)

    def waterCooledLoopFlowType(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterCooledLoopFlowType(self)

    def isWaterCooledLoopFlowTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_isWaterCooledLoopFlowTypeDefaulted(self)

    def waterOutletTemperatureSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterOutletTemperatureSchedule(self)

    def waterDesignFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterDesignFlowRate(self)

    def waterMaximumFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterMaximumFlowRate(self)

    def waterMaximumWaterOutletTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterMaximumWaterOutletTemperature(self)

    def isWaterMaximumWaterOutletTemperatureDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_isWaterMaximumWaterOutletTemperatureDefaulted(self)

    def waterMinimumWaterInletTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_waterMinimumWaterInletTemperature(self)

    def isWaterMinimumWaterInletTemperatureDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_isWaterMinimumWaterInletTemperatureDefaulted(self)

    def endUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_isEndUseSubcategoryDefaulted(self)

    def condenserRefrigerantOperatingChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_condenserRefrigerantOperatingChargeInventory(self)

    def condensateReceiverRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_condensateReceiverRefrigerantInventory(self)

    def condensatePipingRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_condensatePipingRefrigerantInventory(self)

    def setRatedEffectiveTotalHeatRejectionRate(self, ratedEffectiveTotalHeatRejectionRate):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setRatedEffectiveTotalHeatRejectionRate(self, ratedEffectiveTotalHeatRejectionRate)

    def resetRatedEffectiveTotalHeatRejectionRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetRatedEffectiveTotalHeatRejectionRate(self)

    def setRatedCondensingTemperature(self, ratedCondensingTemperature):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setRatedCondensingTemperature(self, ratedCondensingTemperature)

    def setRatedSubcoolingTemperatureDifference(self, ratedSubcoolingTemperatureDifference):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setRatedSubcoolingTemperatureDifference(self, ratedSubcoolingTemperatureDifference)

    def resetRatedSubcoolingTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetRatedSubcoolingTemperatureDifference(self)

    def setRatedWaterInletTemperature(self, ratedWaterInletTemperature):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setRatedWaterInletTemperature(self, ratedWaterInletTemperature)

    def setWaterCooledLoopFlowType(self, waterCooledLoopFlowType):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setWaterCooledLoopFlowType(self, waterCooledLoopFlowType)

    def resetWaterCooledLoopFlowType(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetWaterCooledLoopFlowType(self)

    def setWaterOutletTemperatureSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setWaterOutletTemperatureSchedule(self, schedule)

    def resetWaterOutletTemperatureSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetWaterOutletTemperatureSchedule(self)

    def setWaterDesignFlowRate(self, waterDesignFlowRate):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setWaterDesignFlowRate(self, waterDesignFlowRate)

    def resetWaterDesignFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetWaterDesignFlowRate(self)

    def setWaterMaximumFlowRate(self, waterMaximumFlowRate):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setWaterMaximumFlowRate(self, waterMaximumFlowRate)

    def resetWaterMaximumFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetWaterMaximumFlowRate(self)

    def setWaterMaximumWaterOutletTemperature(self, waterMaximumWaterOutletTemperature):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setWaterMaximumWaterOutletTemperature(self, waterMaximumWaterOutletTemperature)

    def resetWaterMaximumWaterOutletTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetWaterMaximumWaterOutletTemperature(self)

    def setWaterMinimumWaterInletTemperature(self, waterMinimumWaterInletTemperature):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setWaterMinimumWaterInletTemperature(self, waterMinimumWaterInletTemperature)

    def resetWaterMinimumWaterInletTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetWaterMinimumWaterInletTemperature(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetEndUseSubcategory(self)

    def setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setCondenserRefrigerantOperatingChargeInventory(self, condenserRefrigerantOperatingChargeInventory)

    def resetCondenserRefrigerantOperatingChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetCondenserRefrigerantOperatingChargeInventory(self)

    def setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setCondensateReceiverRefrigerantInventory(self, condensateReceiverRefrigerantInventory)

    def resetCondensateReceiverRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetCondensateReceiverRefrigerantInventory(self)

    def setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_setCondensatePipingRefrigerantInventory(self, condensatePipingRefrigerantInventory)

    def resetCondensatePipingRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_resetCondensatePipingRefrigerantInventory(self)

    def system(self):
        return _openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_system(self)

# Register RefrigerationCondenserWaterCooled in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationCondenserWaterCooled_swigregister(RefrigerationCondenserWaterCooled)

def toRefrigerationCondenserWaterCooled(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationCondenserWaterCooled(idfObject)

def getRefrigerationCondenserWaterCooled(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserWaterCooled(t_model, t_handle)

def getRefrigerationCondenserWaterCooleds(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserWaterCooleds(t_model)

def getRefrigerationCondenserWaterCooledByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserWaterCooledByName(t_model, t_name)

def getRefrigerationCondenserWaterCooledsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationCondenserWaterCooledsByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationCondenserWaterCooled(self) -> OptionalRefrigerationCondenserWaterCooled:
    """Try to cast the ModelObject to a RefrigerationCondenserWaterCooled.

    :return: An Optional RefrigerationCondenserWaterCooled.
    """
    return toRefrigerationCondenserWaterCooled(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationCondenserWaterCooled = _to_RefrigerationCondenserWaterCooled

def _getRefrigerationCondenserWaterCooled(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationCondenserWaterCooled:
    """Try to get an object of type RefrigerationCondenserWaterCooled referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationCondenserWaterCooled.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationCondenserWaterCooled(self, t_handle)
Model.getRefrigerationCondenserWaterCooled = _getRefrigerationCondenserWaterCooled

def _getRefrigerationCondenserWaterCooleds(self) -> RefrigerationCondenserWaterCooledVector:
    """Get a vector of all objects of type RefrigerationCondenserWaterCooled in the model.

    :return: A vector of RefrigerationCondenserWaterCooled.
    """
    return getRefrigerationCondenserWaterCooleds(self)
Model.getRefrigerationCondenserWaterCooleds = _getRefrigerationCondenserWaterCooleds

def _getRefrigerationCondenserWaterCooledByName(self, t_name: str) -> OptionalRefrigerationCondenserWaterCooled:
    """Try to get an object of type RefrigerationCondenserWaterCooled that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationCondenserWaterCooled.
    """
    return getRefrigerationCondenserWaterCooledByName(self, t_name)
Model.getRefrigerationCondenserWaterCooledByName = _getRefrigerationCondenserWaterCooledByName

def _getRefrigerationCondenserWaterCooledsByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationCondenserWaterCooledVector:
    """Returns all objects of type RefrigerationCondenserWaterCooled named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationCondenserWaterCooledsByName(self, t_name, t_exactMatch)
Model.getRefrigerationCondenserWaterCooledsByName = _getRefrigerationCondenserWaterCooledsByName

class RefrigerationDefrostCycleParameters(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationDefrostCycleParameters

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationDefrostCycleParameters_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationDefrostCycleParameters(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationDefrostCycleParameters_iddObjectType()

# Register RefrigerationDefrostCycleParameters in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationDefrostCycleParameters_swigregister(RefrigerationDefrostCycleParameters)

def toRefrigerationDefrostCycleParameters(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationDefrostCycleParameters(idfObject)

def getRefrigerationDefrostCycleParameters(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationDefrostCycleParameters(t_model, t_handle)

def getRefrigerationDefrostCycleParameterss(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationDefrostCycleParameterss(t_model)

def getRefrigerationDefrostCycleParametersByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationDefrostCycleParametersByName(t_model, t_name)

def getRefrigerationDefrostCycleParameterssByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationDefrostCycleParameterssByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationDefrostCycleParameters(self) -> OptionalRefrigerationDefrostCycleParameters:
    """Try to cast the ModelObject to a RefrigerationDefrostCycleParameters.

    :return: An Optional RefrigerationDefrostCycleParameters.
    """
    return toRefrigerationDefrostCycleParameters(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationDefrostCycleParameters = _to_RefrigerationDefrostCycleParameters

def _getRefrigerationDefrostCycleParameters(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationDefrostCycleParameters:
    """Try to get an object of type RefrigerationDefrostCycleParameters referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationDefrostCycleParameters.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationDefrostCycleParameters(self, t_handle)
Model.getRefrigerationDefrostCycleParameters = _getRefrigerationDefrostCycleParameters

def _getRefrigerationDefrostCycleParameterss(self) -> RefrigerationDefrostCycleParametersVector:
    """Get a vector of all objects of type RefrigerationDefrostCycleParameters in the model.

    :return: A vector of RefrigerationDefrostCycleParameters.
    """
    return getRefrigerationDefrostCycleParameterss(self)
Model.getRefrigerationDefrostCycleParameterss = _getRefrigerationDefrostCycleParameterss

def _getRefrigerationDefrostCycleParametersByName(self, t_name: str) -> OptionalRefrigerationDefrostCycleParameters:
    """Try to get an object of type RefrigerationDefrostCycleParameters that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationDefrostCycleParameters.
    """
    return getRefrigerationDefrostCycleParametersByName(self, t_name)
Model.getRefrigerationDefrostCycleParametersByName = _getRefrigerationDefrostCycleParametersByName

def _getRefrigerationDefrostCycleParameterssByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationDefrostCycleParametersVector:
    """Returns all objects of type RefrigerationDefrostCycleParameters named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationDefrostCycleParameterssByName(self, t_name, t_exactMatch)
Model.getRefrigerationDefrostCycleParameterssByName = _getRefrigerationDefrostCycleParameterssByName

class RefrigerationGasCoolerAirCooled(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationGasCoolerAirCooled

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationGasCoolerAirCooled(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_iddObjectType()

    @staticmethod
    def gasCoolerFanSpeedControlTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_gasCoolerFanSpeedControlTypeValues()

    def ratedTotalHeatRejectionRateCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_ratedTotalHeatRejectionRateCurve(self)

    def gasCoolerFanSpeedControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_gasCoolerFanSpeedControlType(self)

    def isGasCoolerFanSpeedControlTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isGasCoolerFanSpeedControlTypeDefaulted(self)

    def ratedFanPower(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_ratedFanPower(self)

    def isRatedFanPowerDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isRatedFanPowerDefaulted(self)

    def minimumFanAirFlowRatio(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_minimumFanAirFlowRatio(self)

    def isMinimumFanAirFlowRatioDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isMinimumFanAirFlowRatioDefaulted(self)

    def transitionTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_transitionTemperature(self)

    def isTransitionTemperatureDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isTransitionTemperatureDefaulted(self)

    def transcriticalApproachTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_transcriticalApproachTemperature(self)

    def isTranscriticalApproachTemperatureDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isTranscriticalApproachTemperatureDefaulted(self)

    def subcriticalTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_subcriticalTemperatureDifference(self)

    def isSubcriticalTemperatureDifferenceDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isSubcriticalTemperatureDifferenceDefaulted(self)

    def minimumCondensingTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_minimumCondensingTemperature(self)

    def isMinimumCondensingTemperatureDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isMinimumCondensingTemperatureDefaulted(self)

    def endUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isEndUseSubcategoryDefaulted(self)

    def gasCoolerRefrigerantOperatingChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_gasCoolerRefrigerantOperatingChargeInventory(self)

    def isGasCoolerRefrigerantOperatingChargeInventoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isGasCoolerRefrigerantOperatingChargeInventoryDefaulted(self)

    def gasCoolerReceiverRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_gasCoolerReceiverRefrigerantInventory(self)

    def isGasCoolerReceiverRefrigerantInventoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isGasCoolerReceiverRefrigerantInventoryDefaulted(self)

    def gasCoolerOutletPipingRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_gasCoolerOutletPipingRefrigerantInventory(self)

    def isGasCoolerOutletPipingRefrigerantInventoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_isGasCoolerOutletPipingRefrigerantInventoryDefaulted(self)

    def setRatedTotalHeatRejectionRateCurve(self, curveLinear):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setRatedTotalHeatRejectionRateCurve(self, curveLinear)

    def resetRatedTotalHeatRejectionRateCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetRatedTotalHeatRejectionRateCurve(self)

    def setGasCoolerFanSpeedControlType(self, gasCoolerFanSpeedControlType):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setGasCoolerFanSpeedControlType(self, gasCoolerFanSpeedControlType)

    def resetGasCoolerFanSpeedControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetGasCoolerFanSpeedControlType(self)

    def setRatedFanPower(self, ratedFanPower):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setRatedFanPower(self, ratedFanPower)

    def resetRatedFanPower(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetRatedFanPower(self)

    def setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setMinimumFanAirFlowRatio(self, minimumFanAirFlowRatio)

    def resetMinimumFanAirFlowRatio(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetMinimumFanAirFlowRatio(self)

    def setTransitionTemperature(self, transitionTemperature):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setTransitionTemperature(self, transitionTemperature)

    def resetTransitionTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetTransitionTemperature(self)

    def setTranscriticalApproachTemperature(self, transcriticalApproachTemperature):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setTranscriticalApproachTemperature(self, transcriticalApproachTemperature)

    def resetTranscriticalApproachTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetTranscriticalApproachTemperature(self)

    def setSubcriticalTemperatureDifference(self, subcriticalTemperatureDifference):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setSubcriticalTemperatureDifference(self, subcriticalTemperatureDifference)

    def resetSubcriticalTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetSubcriticalTemperatureDifference(self)

    def setMinimumCondensingTemperature(self, minimumCondensingTemperature):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setMinimumCondensingTemperature(self, minimumCondensingTemperature)

    def resetMinimumCondensingTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetMinimumCondensingTemperature(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetEndUseSubcategory(self)

    def setGasCoolerRefrigerantOperatingChargeInventory(self, gasCoolerRefrigerantOperatingChargeInventory):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setGasCoolerRefrigerantOperatingChargeInventory(self, gasCoolerRefrigerantOperatingChargeInventory)

    def resetGasCoolerRefrigerantOperatingChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetGasCoolerRefrigerantOperatingChargeInventory(self)

    def setGasCoolerReceiverRefrigerantInventory(self, gasCoolerReceiverRefrigerantInventory):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setGasCoolerReceiverRefrigerantInventory(self, gasCoolerReceiverRefrigerantInventory)

    def resetGasCoolerReceiverRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetGasCoolerReceiverRefrigerantInventory(self)

    def setGasCoolerOutletPipingRefrigerantInventory(self, gasCoolerOutletPipingRefrigerantInventory):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_setGasCoolerOutletPipingRefrigerantInventory(self, gasCoolerOutletPipingRefrigerantInventory)

    def resetGasCoolerOutletPipingRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_resetGasCoolerOutletPipingRefrigerantInventory(self)

# Register RefrigerationGasCoolerAirCooled in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationGasCoolerAirCooled_swigregister(RefrigerationGasCoolerAirCooled)

def toRefrigerationGasCoolerAirCooled(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationGasCoolerAirCooled(idfObject)

def getRefrigerationGasCoolerAirCooled(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationGasCoolerAirCooled(t_model, t_handle)

def getRefrigerationGasCoolerAirCooleds(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationGasCoolerAirCooleds(t_model)

def getRefrigerationGasCoolerAirCooledByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationGasCoolerAirCooledByName(t_model, t_name)

def getRefrigerationGasCoolerAirCooledsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationGasCoolerAirCooledsByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationGasCoolerAirCooled(self) -> OptionalRefrigerationGasCoolerAirCooled:
    """Try to cast the ModelObject to a RefrigerationGasCoolerAirCooled.

    :return: An Optional RefrigerationGasCoolerAirCooled.
    """
    return toRefrigerationGasCoolerAirCooled(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationGasCoolerAirCooled = _to_RefrigerationGasCoolerAirCooled

def _getRefrigerationGasCoolerAirCooled(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationGasCoolerAirCooled:
    """Try to get an object of type RefrigerationGasCoolerAirCooled referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationGasCoolerAirCooled.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationGasCoolerAirCooled(self, t_handle)
Model.getRefrigerationGasCoolerAirCooled = _getRefrigerationGasCoolerAirCooled

def _getRefrigerationGasCoolerAirCooleds(self) -> RefrigerationGasCoolerAirCooledVector:
    """Get a vector of all objects of type RefrigerationGasCoolerAirCooled in the model.

    :return: A vector of RefrigerationGasCoolerAirCooled.
    """
    return getRefrigerationGasCoolerAirCooleds(self)
Model.getRefrigerationGasCoolerAirCooleds = _getRefrigerationGasCoolerAirCooleds

def _getRefrigerationGasCoolerAirCooledByName(self, t_name: str) -> OptionalRefrigerationGasCoolerAirCooled:
    """Try to get an object of type RefrigerationGasCoolerAirCooled that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationGasCoolerAirCooled.
    """
    return getRefrigerationGasCoolerAirCooledByName(self, t_name)
Model.getRefrigerationGasCoolerAirCooledByName = _getRefrigerationGasCoolerAirCooledByName

def _getRefrigerationGasCoolerAirCooledsByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationGasCoolerAirCooledVector:
    """Returns all objects of type RefrigerationGasCoolerAirCooled named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationGasCoolerAirCooledsByName(self, t_name, t_exactMatch)
Model.getRefrigerationGasCoolerAirCooledsByName = _getRefrigerationGasCoolerAirCooledsByName

class RefrigerationSubcoolerLiquidSuction(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSubcoolerLiquidSuction

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationSubcoolerLiquidSuction(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_iddObjectType()

    def liquidSuctionDesignSubcoolingTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_liquidSuctionDesignSubcoolingTemperatureDifference(self)

    def designLiquidInletTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_designLiquidInletTemperature(self)

    def designVaporInletTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_designVaporInletTemperature(self)

    def setLiquidSuctionDesignSubcoolingTemperatureDifference(self, liquidSuctionDesignSubcoolingTemperatureDifference):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_setLiquidSuctionDesignSubcoolingTemperatureDifference(self, liquidSuctionDesignSubcoolingTemperatureDifference)

    def resetLiquidSuctionDesignSubcoolingTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_resetLiquidSuctionDesignSubcoolingTemperatureDifference(self)

    def setDesignLiquidInletTemperature(self, designLiquidInletTemperature):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_setDesignLiquidInletTemperature(self, designLiquidInletTemperature)

    def resetDesignLiquidInletTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_resetDesignLiquidInletTemperature(self)

    def setDesignVaporInletTemperature(self, designVaporInletTemperature):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_setDesignVaporInletTemperature(self, designVaporInletTemperature)

    def resetDesignVaporInletTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_resetDesignVaporInletTemperature(self)

    def system(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_system(self)

# Register RefrigerationSubcoolerLiquidSuction in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationSubcoolerLiquidSuction_swigregister(RefrigerationSubcoolerLiquidSuction)

def toRefrigerationSubcoolerLiquidSuction(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationSubcoolerLiquidSuction(idfObject)

def getRefrigerationSubcoolerLiquidSuction(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerLiquidSuction(t_model, t_handle)

def getRefrigerationSubcoolerLiquidSuctions(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerLiquidSuctions(t_model)

def getRefrigerationSubcoolerLiquidSuctionByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerLiquidSuctionByName(t_model, t_name)

def getRefrigerationSubcoolerLiquidSuctionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerLiquidSuctionsByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationSubcoolerLiquidSuction(self) -> OptionalRefrigerationSubcoolerLiquidSuction:
    """Try to cast the ModelObject to a RefrigerationSubcoolerLiquidSuction.

    :return: An Optional RefrigerationSubcoolerLiquidSuction.
    """
    return toRefrigerationSubcoolerLiquidSuction(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationSubcoolerLiquidSuction = _to_RefrigerationSubcoolerLiquidSuction

def _getRefrigerationSubcoolerLiquidSuction(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationSubcoolerLiquidSuction:
    """Try to get an object of type RefrigerationSubcoolerLiquidSuction referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationSubcoolerLiquidSuction.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationSubcoolerLiquidSuction(self, t_handle)
Model.getRefrigerationSubcoolerLiquidSuction = _getRefrigerationSubcoolerLiquidSuction

def _getRefrigerationSubcoolerLiquidSuctions(self) -> RefrigerationSubcoolerLiquidSuctionVector:
    """Get a vector of all objects of type RefrigerationSubcoolerLiquidSuction in the model.

    :return: A vector of RefrigerationSubcoolerLiquidSuction.
    """
    return getRefrigerationSubcoolerLiquidSuctions(self)
Model.getRefrigerationSubcoolerLiquidSuctions = _getRefrigerationSubcoolerLiquidSuctions

def _getRefrigerationSubcoolerLiquidSuctionByName(self, t_name: str) -> OptionalRefrigerationSubcoolerLiquidSuction:
    """Try to get an object of type RefrigerationSubcoolerLiquidSuction that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationSubcoolerLiquidSuction.
    """
    return getRefrigerationSubcoolerLiquidSuctionByName(self, t_name)
Model.getRefrigerationSubcoolerLiquidSuctionByName = _getRefrigerationSubcoolerLiquidSuctionByName

def _getRefrigerationSubcoolerLiquidSuctionsByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationSubcoolerLiquidSuctionVector:
    """Returns all objects of type RefrigerationSubcoolerLiquidSuction named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationSubcoolerLiquidSuctionsByName(self, t_name, t_exactMatch)
Model.getRefrigerationSubcoolerLiquidSuctionsByName = _getRefrigerationSubcoolerLiquidSuctionsByName

class RefrigerationSubcoolerMechanical(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSubcoolerMechanical

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationSubcoolerMechanical(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_iddObjectType()

    def capacityProvidingSystem(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_capacityProvidingSystem(self)

    def outletControlTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_outletControlTemperature(self)

    def setCapacityProvidingSystem(self, refrigerationSystem):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_setCapacityProvidingSystem(self, refrigerationSystem)

    def resetCapacityProvidingSystem(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_resetCapacityProvidingSystem(self)

    def setOutletControlTemperature(self, outletControlTemperature):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_setOutletControlTemperature(self, outletControlTemperature)

    def resetOutletControlTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_resetOutletControlTemperature(self)

    def system(self):
        return _openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_system(self)

# Register RefrigerationSubcoolerMechanical in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationSubcoolerMechanical_swigregister(RefrigerationSubcoolerMechanical)

def toRefrigerationSubcoolerMechanical(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationSubcoolerMechanical(idfObject)

def getRefrigerationSubcoolerMechanical(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerMechanical(t_model, t_handle)

def getRefrigerationSubcoolerMechanicals(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerMechanicals(t_model)

def getRefrigerationSubcoolerMechanicalByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerMechanicalByName(t_model, t_name)

def getRefrigerationSubcoolerMechanicalsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationSubcoolerMechanicalsByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationSubcoolerMechanical(self) -> OptionalRefrigerationSubcoolerMechanical:
    """Try to cast the ModelObject to a RefrigerationSubcoolerMechanical.

    :return: An Optional RefrigerationSubcoolerMechanical.
    """
    return toRefrigerationSubcoolerMechanical(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationSubcoolerMechanical = _to_RefrigerationSubcoolerMechanical

def _getRefrigerationSubcoolerMechanical(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationSubcoolerMechanical:
    """Try to get an object of type RefrigerationSubcoolerMechanical referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationSubcoolerMechanical.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationSubcoolerMechanical(self, t_handle)
Model.getRefrigerationSubcoolerMechanical = _getRefrigerationSubcoolerMechanical

def _getRefrigerationSubcoolerMechanicals(self) -> RefrigerationSubcoolerMechanicalVector:
    """Get a vector of all objects of type RefrigerationSubcoolerMechanical in the model.

    :return: A vector of RefrigerationSubcoolerMechanical.
    """
    return getRefrigerationSubcoolerMechanicals(self)
Model.getRefrigerationSubcoolerMechanicals = _getRefrigerationSubcoolerMechanicals

def _getRefrigerationSubcoolerMechanicalByName(self, t_name: str) -> OptionalRefrigerationSubcoolerMechanical:
    """Try to get an object of type RefrigerationSubcoolerMechanical that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationSubcoolerMechanical.
    """
    return getRefrigerationSubcoolerMechanicalByName(self, t_name)
Model.getRefrigerationSubcoolerMechanicalByName = _getRefrigerationSubcoolerMechanicalByName

def _getRefrigerationSubcoolerMechanicalsByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationSubcoolerMechanicalVector:
    """Returns all objects of type RefrigerationSubcoolerMechanical named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationSubcoolerMechanicalsByName(self, t_name, t_exactMatch)
Model.getRefrigerationSubcoolerMechanicalsByName = _getRefrigerationSubcoolerMechanicalsByName

class RefrigerationSecondarySystem(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSecondarySystem

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationSecondarySystem_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationSecondarySystem(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_iddObjectType()

    @staticmethod
    def circulatingFluidNameValues():
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_circulatingFluidNameValues()

    @staticmethod
    def pumpDriveTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_pumpDriveTypeValues()

    def addCase(self, refrigerationCase):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_addCase(self, refrigerationCase)

    def removeCase(self, refrigerationCase):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_removeCase(self, refrigerationCase)

    def removeAllCases(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_removeAllCases(self)

    def cases(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_cases(self)

    def addWalkin(self, refrigerationWalkin):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_addWalkin(self, refrigerationWalkin)

    def removeWalkin(self, refrigerationWalkin):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_removeWalkin(self, refrigerationWalkin)

    def removeAllWalkins(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_removeAllWalkins(self)

    def walkins(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_walkins(self)

    def addAirChiller(self, airChiller):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_addAirChiller(self, airChiller)

    def removeAirChiller(self, airChiller):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_removeAirChiller(self, airChiller)

    def removeAllAirChillers(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_removeAllAirChillers(self)

    def airChillers(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_airChillers(self)

    def circulatingFluidName(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_circulatingFluidName(self)

    def glycolConcentration(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_glycolConcentration(self)

    def evaporatorCapacity(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_evaporatorCapacity(self)

    def evaporatorFlowRateforSecondaryFluid(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_evaporatorFlowRateforSecondaryFluid(self)

    def evaporatorEvaporatingTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_evaporatorEvaporatingTemperature(self)

    def evaporatorApproachTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_evaporatorApproachTemperatureDifference(self)

    def evaporatorRangeTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_evaporatorRangeTemperatureDifference(self)

    def numberofPumpsinLoop(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_numberofPumpsinLoop(self)

    def isNumberofPumpsinLoopDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isNumberofPumpsinLoopDefaulted(self)

    def totalPumpFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_totalPumpFlowRate(self)

    def totalPumpPower(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_totalPumpPower(self)

    def totalPumpHead(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_totalPumpHead(self)

    def phaseChangeCirculatingRate(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_phaseChangeCirculatingRate(self)

    def isPhaseChangeCirculatingRateDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isPhaseChangeCirculatingRateDefaulted(self)

    def pumpDriveType(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_pumpDriveType(self)

    def isPumpDriveTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isPumpDriveTypeDefaulted(self)

    def variableSpeedPumpCubicCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_variableSpeedPumpCubicCurve(self)

    def pumpMotorHeattoFluid(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_pumpMotorHeattoFluid(self)

    def isPumpMotorHeattoFluidDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isPumpMotorHeattoFluidDefaulted(self)

    def sumUADistributionPiping(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_sumUADistributionPiping(self)

    def isSumUADistributionPipingDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isSumUADistributionPipingDefaulted(self)

    def distributionPipingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_distributionPipingZone(self)

    def sumUAReceiverSeparatorShell(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_sumUAReceiverSeparatorShell(self)

    def isSumUAReceiverSeparatorShellDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isSumUAReceiverSeparatorShellDefaulted(self)

    def receiverSeparatorZone(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_receiverSeparatorZone(self)

    def evaporatorRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_evaporatorRefrigerantInventory(self)

    def isEvaporatorRefrigerantInventoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isEvaporatorRefrigerantInventoryDefaulted(self)

    def endUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_isEndUseSubcategoryDefaulted(self)

    def system(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_system(self)

    def resetRefrigeratedCaseAndWalkInList(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetRefrigeratedCaseAndWalkInList(self)

    def setCirculatingFluidName(self, circulatingFluidName):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setCirculatingFluidName(self, circulatingFluidName)

    def setGlycolConcentration(self, glycolConcentration):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setGlycolConcentration(self, glycolConcentration)

    def resetGlycolConcentration(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetGlycolConcentration(self)

    def setEvaporatorCapacity(self, evaporatorCapacity):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setEvaporatorCapacity(self, evaporatorCapacity)

    def resetEvaporatorCapacity(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetEvaporatorCapacity(self)

    def setEvaporatorFlowRateforSecondaryFluid(self, evaporatorFlowRateforSecondaryFluid):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setEvaporatorFlowRateforSecondaryFluid(self, evaporatorFlowRateforSecondaryFluid)

    def resetEvaporatorFlowRateforSecondaryFluid(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetEvaporatorFlowRateforSecondaryFluid(self)

    def setEvaporatorEvaporatingTemperature(self, evaporatorEvaporatingTemperature):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setEvaporatorEvaporatingTemperature(self, evaporatorEvaporatingTemperature)

    def setEvaporatorApproachTemperatureDifference(self, evaporatorApproachTemperatureDifference):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setEvaporatorApproachTemperatureDifference(self, evaporatorApproachTemperatureDifference)

    def setEvaporatorRangeTemperatureDifference(self, evaporatorRangeTemperatureDifference):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setEvaporatorRangeTemperatureDifference(self, evaporatorRangeTemperatureDifference)

    def resetEvaporatorRangeTemperatureDifference(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetEvaporatorRangeTemperatureDifference(self)

    def setNumberofPumpsinLoop(self, numberofPumpsinLoop):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setNumberofPumpsinLoop(self, numberofPumpsinLoop)

    def resetNumberofPumpsinLoop(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetNumberofPumpsinLoop(self)

    def setTotalPumpFlowRate(self, totalPumpFlowRate):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setTotalPumpFlowRate(self, totalPumpFlowRate)

    def resetTotalPumpFlowRate(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetTotalPumpFlowRate(self)

    def setTotalPumpPower(self, totalPumpPower):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setTotalPumpPower(self, totalPumpPower)

    def resetTotalPumpPower(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetTotalPumpPower(self)

    def setTotalPumpHead(self, totalPumpHead):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setTotalPumpHead(self, totalPumpHead)

    def resetTotalPumpHead(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetTotalPumpHead(self)

    def setPhaseChangeCirculatingRate(self, phaseChangeCirculatingRate):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setPhaseChangeCirculatingRate(self, phaseChangeCirculatingRate)

    def resetPhaseChangeCirculatingRate(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetPhaseChangeCirculatingRate(self)

    def setPumpDriveType(self, pumpDriveType):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setPumpDriveType(self, pumpDriveType)

    def resetPumpDriveType(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetPumpDriveType(self)

    def setVariableSpeedPumpCubicCurve(self, curveCubic):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setVariableSpeedPumpCubicCurve(self, curveCubic)

    def resetVariableSpeedPumpCubicCurve(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetVariableSpeedPumpCubicCurve(self)

    def setPumpMotorHeattoFluid(self, pumpMotorHeattoFluid):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setPumpMotorHeattoFluid(self, pumpMotorHeattoFluid)

    def resetPumpMotorHeattoFluid(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetPumpMotorHeattoFluid(self)

    def setSumUADistributionPiping(self, sumUADistributionPiping):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setSumUADistributionPiping(self, sumUADistributionPiping)

    def resetSumUADistributionPiping(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetSumUADistributionPiping(self)

    def setDistributionPipingZone(self, thermalZone):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setDistributionPipingZone(self, thermalZone)

    def resetDistributionPipingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetDistributionPipingZone(self)

    def setSumUAReceiverSeparatorShell(self, sumUAReceiverSeparatorShell):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setSumUAReceiverSeparatorShell(self, sumUAReceiverSeparatorShell)

    def resetSumUAReceiverSeparatorShell(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetSumUAReceiverSeparatorShell(self)

    def setReceiverSeparatorZone(self, thermalZone):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setReceiverSeparatorZone(self, thermalZone)

    def resetReceiverSeparatorZone(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetReceiverSeparatorZone(self)

    def setEvaporatorRefrigerantInventory(self, evaporatorRefrigerantInventory):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setEvaporatorRefrigerantInventory(self, evaporatorRefrigerantInventory)

    def resetEvaporatorRefrigerantInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetEvaporatorRefrigerantInventory(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_resetEndUseSubcategory(self)

    def removeFromSystem(self):
        return _openstudiomodelrefrigeration.RefrigerationSecondarySystem_removeFromSystem(self)

# Register RefrigerationSecondarySystem in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationSecondarySystem_swigregister(RefrigerationSecondarySystem)

def toRefrigerationSecondarySystem(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationSecondarySystem(idfObject)

def getRefrigerationSecondarySystem(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationSecondarySystem(t_model, t_handle)

def getRefrigerationSecondarySystems(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationSecondarySystems(t_model)

def getRefrigerationSecondarySystemByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationSecondarySystemByName(t_model, t_name)

def getRefrigerationSecondarySystemsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationSecondarySystemsByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationSecondarySystem(self) -> OptionalRefrigerationSecondarySystem:
    """Try to cast the ModelObject to a RefrigerationSecondarySystem.

    :return: An Optional RefrigerationSecondarySystem.
    """
    return toRefrigerationSecondarySystem(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationSecondarySystem = _to_RefrigerationSecondarySystem

def _getRefrigerationSecondarySystem(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationSecondarySystem:
    """Try to get an object of type RefrigerationSecondarySystem referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationSecondarySystem.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationSecondarySystem(self, t_handle)
Model.getRefrigerationSecondarySystem = _getRefrigerationSecondarySystem

def _getRefrigerationSecondarySystems(self) -> RefrigerationSecondarySystemVector:
    """Get a vector of all objects of type RefrigerationSecondarySystem in the model.

    :return: A vector of RefrigerationSecondarySystem.
    """
    return getRefrigerationSecondarySystems(self)
Model.getRefrigerationSecondarySystems = _getRefrigerationSecondarySystems

def _getRefrigerationSecondarySystemByName(self, t_name: str) -> OptionalRefrigerationSecondarySystem:
    """Try to get an object of type RefrigerationSecondarySystem that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationSecondarySystem.
    """
    return getRefrigerationSecondarySystemByName(self, t_name)
Model.getRefrigerationSecondarySystemByName = _getRefrigerationSecondarySystemByName

def _getRefrigerationSecondarySystemsByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationSecondarySystemVector:
    """Returns all objects of type RefrigerationSecondarySystem named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationSecondarySystemsByName(self, t_name, t_exactMatch)
Model.getRefrigerationSecondarySystemsByName = _getRefrigerationSecondarySystemsByName

class RefrigerationSystem(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationSystem

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationSystem_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationSystem(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationSystem_iddObjectType()

    @staticmethod
    def refrigerationSystemWorkingFluidTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationSystem_refrigerationSystemWorkingFluidTypeValues()

    @staticmethod
    def suctionTemperatureControlTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationSystem_suctionTemperatureControlTypeValues()

    @staticmethod
    def intercoolerTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationSystem_intercoolerTypeValues()

    def addCase(self, refrigerationCase):
        return _openstudiomodelrefrigeration.RefrigerationSystem_addCase(self, refrigerationCase)

    def removeCase(self, refrigerationCase):
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeCase(self, refrigerationCase)

    def removeAllCases(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAllCases(self)

    def cases(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_cases(self)

    def addWalkin(self, refrigerationWalkin):
        return _openstudiomodelrefrigeration.RefrigerationSystem_addWalkin(self, refrigerationWalkin)

    def removeWalkin(self, refrigerationWalkin):
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeWalkin(self, refrigerationWalkin)

    def removeAllWalkins(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAllWalkins(self)

    def walkins(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_walkins(self)

    def addCompressor(self, compressor):
        return _openstudiomodelrefrigeration.RefrigerationSystem_addCompressor(self, compressor)

    def removeCompressor(self, compressor):
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeCompressor(self, compressor)

    def removeAllCompressors(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAllCompressors(self)

    def compressors(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_compressors(self)

    def addHighStageCompressor(self, highStageCompressor):
        return _openstudiomodelrefrigeration.RefrigerationSystem_addHighStageCompressor(self, highStageCompressor)

    def removeHighStageCompressor(self, highStageCompressor):
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeHighStageCompressor(self, highStageCompressor)

    def removeAllHighStageCompressors(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAllHighStageCompressors(self)

    def highStageCompressors(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_highStageCompressors(self)

    def addSecondarySystemLoad(self, refrigerationSecondarySystem):
        return _openstudiomodelrefrigeration.RefrigerationSystem_addSecondarySystemLoad(self, refrigerationSecondarySystem)

    def removeSecondarySystemLoad(self, refrigerationSecondarySystem):
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeSecondarySystemLoad(self, refrigerationSecondarySystem)

    def removeAllSecondarySystemLoads(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAllSecondarySystemLoads(self)

    def secondarySystemLoads(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_secondarySystemLoads(self)

    def addCascadeCondenserLoad(self, refrigerationCondenserCascade):
        return _openstudiomodelrefrigeration.RefrigerationSystem_addCascadeCondenserLoad(self, refrigerationCondenserCascade)

    def removeCascadeCondenserLoad(self, refrigerationCondenserCascade):
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeCascadeCondenserLoad(self, refrigerationCondenserCascade)

    def removeAllCascadeCondenserLoads(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAllCascadeCondenserLoads(self)

    def cascadeCondenserLoads(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_cascadeCondenserLoads(self)

    def addAirChiller(self, airChiller):
        return _openstudiomodelrefrigeration.RefrigerationSystem_addAirChiller(self, airChiller)

    def removeAirChiller(self, airChiller):
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAirChiller(self, airChiller)

    def removeAllAirChillers(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_removeAllAirChillers(self)

    def airChillers(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_airChillers(self)

    def refrigerationCondenser(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_refrigerationCondenser(self)

    def minimumCondensingTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_minimumCondensingTemperature(self)

    def refrigerationSystemWorkingFluidType(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_refrigerationSystemWorkingFluidType(self)

    def suctionTemperatureControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_suctionTemperatureControlType(self)

    def isSuctionTemperatureControlTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_isSuctionTemperatureControlTypeDefaulted(self)

    def mechanicalSubcooler(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_mechanicalSubcooler(self)

    def liquidSuctionHeatExchangerSubcooler(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_liquidSuctionHeatExchangerSubcooler(self)

    def sumUASuctionPiping(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_sumUASuctionPiping(self)

    def isSumUASuctionPipingDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_isSumUASuctionPipingDefaulted(self)

    def suctionPipingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_suctionPipingZone(self)

    def endUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_isEndUseSubcategoryDefaulted(self)

    def numberofCompressorStages(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_numberofCompressorStages(self)

    def intercoolerType(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_intercoolerType(self)

    def isIntercoolerTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_isIntercoolerTypeDefaulted(self)

    def shellandCoilIntercoolerEffectiveness(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_shellandCoilIntercoolerEffectiveness(self)

    def isShellandCoilIntercoolerEffectivenessDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_isShellandCoilIntercoolerEffectivenessDefaulted(self)

    def setRefrigerationCondenser(self, refrigerationCondenser):
        return _openstudiomodelrefrigeration.RefrigerationSystem_setRefrigerationCondenser(self, refrigerationCondenser)

    def resetRefrigerationCondenser(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetRefrigerationCondenser(self)

    def setMinimumCondensingTemperature(self, minimumCondensingTemperature):
        return _openstudiomodelrefrigeration.RefrigerationSystem_setMinimumCondensingTemperature(self, minimumCondensingTemperature)

    def setRefrigerationSystemWorkingFluidType(self, refrigerationSystemWorkingFluidType):
        return _openstudiomodelrefrigeration.RefrigerationSystem_setRefrigerationSystemWorkingFluidType(self, refrigerationSystemWorkingFluidType)

    def setSuctionTemperatureControlType(self, suctionTemperatureControlType):
        return _openstudiomodelrefrigeration.RefrigerationSystem_setSuctionTemperatureControlType(self, suctionTemperatureControlType)

    def resetSuctionTemperatureControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetSuctionTemperatureControlType(self)

    def setMechanicalSubcooler(self, refrigerationSubcoolerMechanical):
        return _openstudiomodelrefrigeration.RefrigerationSystem_setMechanicalSubcooler(self, refrigerationSubcoolerMechanical)

    def resetMechanicalSubcooler(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetMechanicalSubcooler(self)

    def setLiquidSuctionHeatExchangerSubcooler(self, refrigerationSubcoolerLiquidSuction):
        return _openstudiomodelrefrigeration.RefrigerationSystem_setLiquidSuctionHeatExchangerSubcooler(self, refrigerationSubcoolerLiquidSuction)

    def resetLiquidSuctionHeatExchangerSubcooler(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetLiquidSuctionHeatExchangerSubcooler(self)

    def setSumUASuctionPiping(self, sumUASuctionPiping):
        return _openstudiomodelrefrigeration.RefrigerationSystem_setSumUASuctionPiping(self, sumUASuctionPiping)

    def resetSumUASuctionPiping(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetSumUASuctionPiping(self)

    def setSuctionPipingZone(self, thermalZone):
        return _openstudiomodelrefrigeration.RefrigerationSystem_setSuctionPipingZone(self, thermalZone)

    def resetSuctionPipingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetSuctionPipingZone(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelrefrigeration.RefrigerationSystem_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetEndUseSubcategory(self)

    def setIntercoolerType(self, intercoolerType):
        return _openstudiomodelrefrigeration.RefrigerationSystem_setIntercoolerType(self, intercoolerType)

    def resetIntercoolerType(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetIntercoolerType(self)

    def setShellandCoilIntercoolerEffectiveness(self, shellandCoilIntercoolerEffectiveness):
        return _openstudiomodelrefrigeration.RefrigerationSystem_setShellandCoilIntercoolerEffectiveness(self, shellandCoilIntercoolerEffectiveness)

    def resetShellandCoilIntercoolerEffectiveness(self):
        return _openstudiomodelrefrigeration.RefrigerationSystem_resetShellandCoilIntercoolerEffectiveness(self)

# Register RefrigerationSystem in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationSystem_swigregister(RefrigerationSystem)

def toRefrigerationSystem(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationSystem(idfObject)

def getRefrigerationSystem(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationSystem(t_model, t_handle)

def getRefrigerationSystems(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationSystems(t_model)

def getRefrigerationSystemByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationSystemByName(t_model, t_name)

def getRefrigerationSystemsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationSystemsByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationSystem(self) -> OptionalRefrigerationSystem:
    """Try to cast the ModelObject to a RefrigerationSystem.

    :return: An Optional RefrigerationSystem.
    """
    return toRefrigerationSystem(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationSystem = _to_RefrigerationSystem

def _getRefrigerationSystem(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationSystem:
    """Try to get an object of type RefrigerationSystem referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationSystem.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationSystem(self, t_handle)
Model.getRefrigerationSystem = _getRefrigerationSystem

def _getRefrigerationSystems(self) -> RefrigerationSystemVector:
    """Get a vector of all objects of type RefrigerationSystem in the model.

    :return: A vector of RefrigerationSystem.
    """
    return getRefrigerationSystems(self)
Model.getRefrigerationSystems = _getRefrigerationSystems

def _getRefrigerationSystemByName(self, t_name: str) -> OptionalRefrigerationSystem:
    """Try to get an object of type RefrigerationSystem that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationSystem.
    """
    return getRefrigerationSystemByName(self, t_name)
Model.getRefrigerationSystemByName = _getRefrigerationSystemByName

def _getRefrigerationSystemsByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationSystemVector:
    """Returns all objects of type RefrigerationSystem named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationSystemsByName(self, t_name, t_exactMatch)
Model.getRefrigerationSystemsByName = _getRefrigerationSystemsByName

class RefrigerationTranscriticalSystem(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationTranscriticalSystem

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationTranscriticalSystem(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_iddObjectType()

    @staticmethod
    def refrigerationSystemWorkingFluidTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_refrigerationSystemWorkingFluidTypeValues()

    def remove(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_remove(self)

    def clone(self, model):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_clone(self, model)

    def addMediumTemperatureCase(self, refrigerationCase):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_addMediumTemperatureCase(self, refrigerationCase)

    def removeMediumTemperatureCase(self, refrigerationCase):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeMediumTemperatureCase(self, refrigerationCase)

    def removeAllMediumTemperatureCases(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeAllMediumTemperatureCases(self)

    def mediumTemperatureCases(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_mediumTemperatureCases(self)

    def addLowTemperatureCase(self, refrigerationCase):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_addLowTemperatureCase(self, refrigerationCase)

    def removeLowTemperatureCase(self, refrigerationCase):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeLowTemperatureCase(self, refrigerationCase)

    def removeAllLowTemperatureCases(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeAllLowTemperatureCases(self)

    def lowTemperatureCases(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_lowTemperatureCases(self)

    def addMediumTemperatureWalkin(self, refrigerationWalkin):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_addMediumTemperatureWalkin(self, refrigerationWalkin)

    def removeMediumTemperatureWalkin(self, refrigerationWalkin):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeMediumTemperatureWalkin(self, refrigerationWalkin)

    def removeAllMediumTemperatureWalkins(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeAllMediumTemperatureWalkins(self)

    def mediumTemperatureWalkins(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_mediumTemperatureWalkins(self)

    def addLowTemperatureWalkin(self, refrigerationWalkin):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_addLowTemperatureWalkin(self, refrigerationWalkin)

    def removeLowTemperatureWalkin(self, refrigerationWalkin):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeLowTemperatureWalkin(self, refrigerationWalkin)

    def removeAllLowTemperatureWalkins(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeAllLowTemperatureWalkins(self)

    def lowTemperatureWalkins(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_lowTemperatureWalkins(self)

    def addHighPressureCompressor(self, compressor):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_addHighPressureCompressor(self, compressor)

    def removeHighPressureCompressor(self, compressor):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeHighPressureCompressor(self, compressor)

    def removeAllHighPressureCompressors(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeAllHighPressureCompressors(self)

    def highPressureCompressors(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_highPressureCompressors(self)

    def addLowPressureCompressor(self, compressor):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_addLowPressureCompressor(self, compressor)

    def removeLowPressureCompressor(self, compressor):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeLowPressureCompressor(self, compressor)

    def removeAllLowPressureCompressors(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_removeAllLowPressureCompressors(self)

    def lowPressureCompressors(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_lowPressureCompressors(self)

    def refrigerationGasCooler(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_refrigerationGasCooler(self)

    def receiverPressure(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_receiverPressure(self)

    def isReceiverPressureDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_isReceiverPressureDefaulted(self)

    def subcoolerEffectiveness(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_subcoolerEffectiveness(self)

    def isSubcoolerEffectivenessDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_isSubcoolerEffectivenessDefaulted(self)

    def refrigerationSystemWorkingFluidType(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_refrigerationSystemWorkingFluidType(self)

    def sumUASuctionPipingforMediumTemperatureLoads(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_sumUASuctionPipingforMediumTemperatureLoads(self)

    def isSumUASuctionPipingforMediumTemperatureLoadsDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_isSumUASuctionPipingforMediumTemperatureLoadsDefaulted(self)

    def mediumTemperatureSuctionPipingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_mediumTemperatureSuctionPipingZone(self)

    def sumUASuctionPipingforLowTemperatureLoads(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_sumUASuctionPipingforLowTemperatureLoads(self)

    def isSumUASuctionPipingforLowTemperatureLoadsDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_isSumUASuctionPipingforLowTemperatureLoadsDefaulted(self)

    def lowTemperatureSuctionPipingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_lowTemperatureSuctionPipingZone(self)

    def endUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_isEndUseSubcategoryDefaulted(self)

    def setRefrigerationGasCooler(self, refrigerationGasCoolerAirCooled):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setRefrigerationGasCooler(self, refrigerationGasCoolerAirCooled)

    def setReceiverPressure(self, receiverPressure):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setReceiverPressure(self, receiverPressure)

    def resetReceiverPressure(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_resetReceiverPressure(self)

    def setSubcoolerEffectiveness(self, subcoolerEffectiveness):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setSubcoolerEffectiveness(self, subcoolerEffectiveness)

    def resetSubcoolerEffectiveness(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_resetSubcoolerEffectiveness(self)

    def setRefrigerationSystemWorkingFluidType(self, refrigerationSystemWorkingFluidType):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setRefrigerationSystemWorkingFluidType(self, refrigerationSystemWorkingFluidType)

    def setSumUASuctionPipingforMediumTemperatureLoads(self, sumUASuctionPipingforMediumTemperatureLoads):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setSumUASuctionPipingforMediumTemperatureLoads(self, sumUASuctionPipingforMediumTemperatureLoads)

    def resetSumUASuctionPipingforMediumTemperatureLoads(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_resetSumUASuctionPipingforMediumTemperatureLoads(self)

    def setMediumTemperatureSuctionPipingZone(self, thermalZone):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setMediumTemperatureSuctionPipingZone(self, thermalZone)

    def resetMediumTemperatureSuctionPipingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_resetMediumTemperatureSuctionPipingZone(self)

    def setSumUASuctionPipingforLowTemperatureLoads(self, sumUASuctionPipingforLowTemperatureLoads):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setSumUASuctionPipingforLowTemperatureLoads(self, sumUASuctionPipingforLowTemperatureLoads)

    def resetSumUASuctionPipingforLowTemperatureLoads(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_resetSumUASuctionPipingforLowTemperatureLoads(self)

    def setLowTemperatureSuctionPipingZone(self, thermalZone):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setLowTemperatureSuctionPipingZone(self, thermalZone)

    def resetLowTemperatureSuctionPipingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_resetLowTemperatureSuctionPipingZone(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_resetEndUseSubcategory(self)

# Register RefrigerationTranscriticalSystem in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationTranscriticalSystem_swigregister(RefrigerationTranscriticalSystem)

def toRefrigerationTranscriticalSystem(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationTranscriticalSystem(idfObject)

def getRefrigerationTranscriticalSystem(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationTranscriticalSystem(t_model, t_handle)

def getRefrigerationTranscriticalSystems(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationTranscriticalSystems(t_model)

def getRefrigerationTranscriticalSystemByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationTranscriticalSystemByName(t_model, t_name)

def getRefrigerationTranscriticalSystemsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationTranscriticalSystemsByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationTranscriticalSystem(self) -> OptionalRefrigerationTranscriticalSystem:
    """Try to cast the ModelObject to a RefrigerationTranscriticalSystem.

    :return: An Optional RefrigerationTranscriticalSystem.
    """
    return toRefrigerationTranscriticalSystem(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationTranscriticalSystem = _to_RefrigerationTranscriticalSystem

def _getRefrigerationTranscriticalSystem(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationTranscriticalSystem:
    """Try to get an object of type RefrigerationTranscriticalSystem referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationTranscriticalSystem.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationTranscriticalSystem(self, t_handle)
Model.getRefrigerationTranscriticalSystem = _getRefrigerationTranscriticalSystem

def _getRefrigerationTranscriticalSystems(self) -> RefrigerationTranscriticalSystemVector:
    """Get a vector of all objects of type RefrigerationTranscriticalSystem in the model.

    :return: A vector of RefrigerationTranscriticalSystem.
    """
    return getRefrigerationTranscriticalSystems(self)
Model.getRefrigerationTranscriticalSystems = _getRefrigerationTranscriticalSystems

def _getRefrigerationTranscriticalSystemByName(self, t_name: str) -> OptionalRefrigerationTranscriticalSystem:
    """Try to get an object of type RefrigerationTranscriticalSystem that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationTranscriticalSystem.
    """
    return getRefrigerationTranscriticalSystemByName(self, t_name)
Model.getRefrigerationTranscriticalSystemByName = _getRefrigerationTranscriticalSystemByName

def _getRefrigerationTranscriticalSystemsByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationTranscriticalSystemVector:
    """Returns all objects of type RefrigerationTranscriticalSystem named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationTranscriticalSystemsByName(self, t_name, t_exactMatch)
Model.getRefrigerationTranscriticalSystemsByName = _getRefrigerationTranscriticalSystemsByName

class RefrigerationWalkIn(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationWalkIn

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationWalkIn_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationWalkIn(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_iddObjectType()

    @staticmethod
    def defrostTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostTypeValues()

    @staticmethod
    def defrostControlTypeValues():
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostControlTypeValues()

    def addZoneBoundary(self, refrigerationWalkInZoneBoundary):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_addZoneBoundary(self, refrigerationWalkInZoneBoundary)

    def removeZoneBoundary(self, index):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_removeZoneBoundary(self, index)

    def removeAllZoneBoundaries(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_removeAllZoneBoundaries(self)

    def zoneBoundaries(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaries(self)

    def availabilitySchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_availabilitySchedule(self)

    def ratedCoilCoolingCapacity(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_ratedCoilCoolingCapacity(self)

    def operatingTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_operatingTemperature(self)

    def ratedCoolingSourceTemperature(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_ratedCoolingSourceTemperature(self)

    def ratedTotalHeatingPower(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_ratedTotalHeatingPower(self)

    def heatingPowerSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_heatingPowerSchedule(self)

    def ratedCoolingCoilFanPower(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_ratedCoolingCoilFanPower(self)

    def isRatedCoolingCoilFanPowerDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_isRatedCoolingCoilFanPowerDefaulted(self)

    def ratedCirculationFanPower(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_ratedCirculationFanPower(self)

    def isRatedCirculationFanPowerDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_isRatedCirculationFanPowerDefaulted(self)

    def ratedTotalLightingPower(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_ratedTotalLightingPower(self)

    def lightingSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_lightingSchedule(self)

    def defrostType(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostType(self)

    def isDefrostTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_isDefrostTypeDefaulted(self)

    def defrostControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostControlType(self)

    def isDefrostControlTypeDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_isDefrostControlTypeDefaulted(self)

    def defrostSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostSchedule(self)

    def defrostDripDownSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostDripDownSchedule(self)

    def defrostPower(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrostPower(self)

    def temperatureTerminationDefrostFractiontoIce(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_temperatureTerminationDefrostFractiontoIce(self)

    def restockingSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_restockingSchedule(self)

    def averageRefrigerantChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_averageRefrigerantChargeInventory(self)

    def isAverageRefrigerantChargeInventoryDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_isAverageRefrigerantChargeInventoryDefaulted(self)

    def insulatedFloorSurfaceArea(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_insulatedFloorSurfaceArea(self)

    def insulatedFloorUValue(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_insulatedFloorUValue(self)

    def isInsulatedFloorUValueDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_isInsulatedFloorUValueDefaulted(self)

    def durationofDefrostCycle(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_durationofDefrostCycle(self)

    def dripDownTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_dripDownTime(self)

    def defrost1StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost1StartTime(self)

    def defrost2StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost2StartTime(self)

    def defrost3StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost3StartTime(self)

    def defrost4StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost4StartTime(self)

    def defrost5StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost5StartTime(self)

    def defrost6StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost6StartTime(self)

    def defrost7StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost7StartTime(self)

    def defrost8StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_defrost8StartTime(self)

    def zoneBoundaryThermalZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryThermalZone(self)

    def zoneBoundaryTotalInsulatedSurfaceAreaFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryTotalInsulatedSurfaceAreaFacingZone(self)

    def zoneBoundaryAreaofGlassReachInDoorsFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryAreaofGlassReachInDoorsFacingZone(self)

    def zoneBoundaryHeightofGlassReachInDoorsFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryHeightofGlassReachInDoorsFacingZone(self)

    def zoneBoundaryAreaofStockingDoorsFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryAreaofStockingDoorsFacingZone(self)

    def zoneBoundaryHeightofStockingDoorsFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryHeightofStockingDoorsFacingZone(self)

    def zoneBoundaryInsulatedSurfaceUValueFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryInsulatedSurfaceUValueFacingZone(self)

    def zoneBoundaryGlassReachInDoorUValueFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryGlassReachInDoorUValueFacingZone(self)

    def zoneBoundaryStockingDoorUValueFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryStockingDoorUValueFacingZone(self)

    def zoneBoundaryStockingDoorOpeningScheduleFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_zoneBoundaryStockingDoorOpeningScheduleFacingZone(self)

    def system(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_system(self)

    def secondarySystem(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_secondarySystem(self)

    def compressorRack(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_compressorRack(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetAvailabilitySchedule(self)

    def setRatedCoilCoolingCapacity(self, ratedCoilCoolingCapacity):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setRatedCoilCoolingCapacity(self, ratedCoilCoolingCapacity)

    def setOperatingTemperature(self, operatingTemperature):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setOperatingTemperature(self, operatingTemperature)

    def setRatedCoolingSourceTemperature(self, ratedCoolingSourceTemperature):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setRatedCoolingSourceTemperature(self, ratedCoolingSourceTemperature)

    def setRatedTotalHeatingPower(self, ratedTotalHeatingPower):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setRatedTotalHeatingPower(self, ratedTotalHeatingPower)

    def setHeatingPowerSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setHeatingPowerSchedule(self, schedule)

    def resetHeatingPowerSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetHeatingPowerSchedule(self)

    def setRatedCoolingCoilFanPower(self, ratedCoolingCoilFanPower):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setRatedCoolingCoilFanPower(self, ratedCoolingCoilFanPower)

    def resetRatedCoolingCoilFanPower(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetRatedCoolingCoilFanPower(self)

    def setRatedCirculationFanPower(self, ratedCirculationFanPower):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setRatedCirculationFanPower(self, ratedCirculationFanPower)

    def resetRatedCirculationFanPower(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetRatedCirculationFanPower(self)

    def setRatedTotalLightingPower(self, ratedTotalLightingPower):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setRatedTotalLightingPower(self, ratedTotalLightingPower)

    def setLightingSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setLightingSchedule(self, schedule)

    def resetLightingSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetLightingSchedule(self)

    def setDefrostType(self, defrostType):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrostType(self, defrostType)

    def resetDefrostType(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrostType(self)

    def setDefrostControlType(self, defrostControlType):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrostControlType(self, defrostControlType)

    def resetDefrostControlType(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrostControlType(self)

    def setDefrostSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrostSchedule(self, schedule)

    def setDefrostDripDownSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrostDripDownSchedule(self, schedule)

    def resetDefrostDripDownSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrostDripDownSchedule(self)

    def setDefrostPower(self, defrostPower):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrostPower(self, defrostPower)

    def resetDefrostPower(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrostPower(self)

    def setTemperatureTerminationDefrostFractiontoIce(self, temperatureTerminationDefrostFractiontoIce):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setTemperatureTerminationDefrostFractiontoIce(self, temperatureTerminationDefrostFractiontoIce)

    def resetTemperatureTerminationDefrostFractiontoIce(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetTemperatureTerminationDefrostFractiontoIce(self)

    def setRestockingSchedule(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setRestockingSchedule(self, schedule)

    def resetRestockingSchedule(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetRestockingSchedule(self)

    def setAverageRefrigerantChargeInventory(self, averageRefrigerantChargeInventory):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setAverageRefrigerantChargeInventory(self, averageRefrigerantChargeInventory)

    def resetAverageRefrigerantChargeInventory(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetAverageRefrigerantChargeInventory(self)

    def setInsulatedFloorSurfaceArea(self, insulatedFloorSurfaceArea):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setInsulatedFloorSurfaceArea(self, insulatedFloorSurfaceArea)

    def setInsulatedFloorUValue(self, insulatedFloorUValue):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setInsulatedFloorUValue(self, insulatedFloorUValue)

    def resetInsulatedFloorUValue(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetInsulatedFloorUValue(self)

    def setDurationofDefrostCycle(self, durationofDefrostCycle):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDurationofDefrostCycle(self, durationofDefrostCycle)

    def resetDurationofDefrostCycle(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDurationofDefrostCycle(self)

    def setDripDownTime(self, dripDownTime):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDripDownTime(self, dripDownTime)

    def resetDripDownTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDripDownTime(self)

    def setDefrost1StartTime(self, defrost1StartTime):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost1StartTime(self, defrost1StartTime)

    def resetDefrost1StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost1StartTime(self)

    def setDefrost2StartTime(self, defrost2StartTime):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost2StartTime(self, defrost2StartTime)

    def resetDefrost2StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost2StartTime(self)

    def setDefrost3StartTime(self, defrost3StartTime):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost3StartTime(self, defrost3StartTime)

    def resetDefrost3StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost3StartTime(self)

    def setDefrost4StartTime(self, defrost4StartTime):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost4StartTime(self, defrost4StartTime)

    def resetDefrost4StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost4StartTime(self)

    def setDefrost5StartTime(self, defrost5StartTime):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost5StartTime(self, defrost5StartTime)

    def resetDefrost5StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost5StartTime(self)

    def setDefrost6StartTime(self, defrost6StartTime):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost6StartTime(self, defrost6StartTime)

    def resetDefrost6StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost6StartTime(self)

    def setDefrost7StartTime(self, defrost7StartTime):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost7StartTime(self, defrost7StartTime)

    def resetDefrost7StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost7StartTime(self)

    def setDefrost8StartTime(self, defrost8StartTime):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setDefrost8StartTime(self, defrost8StartTime)

    def resetDefrost8StartTime(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetDefrost8StartTime(self)

    def setZoneBoundaryThermalZone(self, zoneBoundaryThermalZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryThermalZone(self, zoneBoundaryThermalZone)

    def resetZoneBoundaryThermalZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetZoneBoundaryThermalZone(self)

    def setZoneBoundaryTotalInsulatedSurfaceAreaFacingZone(self, zoneBoundaryTotalInsulatedSurfaceAreaFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryTotalInsulatedSurfaceAreaFacingZone(self, zoneBoundaryTotalInsulatedSurfaceAreaFacingZone)

    def setZoneBoundaryAreaofGlassReachInDoorsFacingZone(self, zoneBoundaryAreaofGlassReachInDoorsFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryAreaofGlassReachInDoorsFacingZone(self, zoneBoundaryAreaofGlassReachInDoorsFacingZone)

    def setZoneBoundaryHeightofGlassReachInDoorsFacingZone(self, zoneBoundaryHeightofGlassReachInDoorsFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryHeightofGlassReachInDoorsFacingZone(self, zoneBoundaryHeightofGlassReachInDoorsFacingZone)

    def setZoneBoundaryAreaofStockingDoorsFacingZone(self, zoneBoundaryAreaofStockingDoorsFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryAreaofStockingDoorsFacingZone(self, zoneBoundaryAreaofStockingDoorsFacingZone)

    def setZoneBoundaryHeightofStockingDoorsFacingZone(self, zoneBoundaryHeightofStockingDoorsFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryHeightofStockingDoorsFacingZone(self, zoneBoundaryHeightofStockingDoorsFacingZone)

    def setZoneBoundaryInsulatedSurfaceUValueFacingZone(self, zoneBoundaryInsulatedSurfaceUValueFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryInsulatedSurfaceUValueFacingZone(self, zoneBoundaryInsulatedSurfaceUValueFacingZone)

    def setZoneBoundaryGlassReachInDoorUValueFacingZone(self, zoneBoundaryGlassReachInDoorUValueFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryGlassReachInDoorUValueFacingZone(self, zoneBoundaryGlassReachInDoorUValueFacingZone)

    def setZoneBoundaryStockingDoorUValueFacingZone(self, zoneBoundaryStockingDoorUValueFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryStockingDoorUValueFacingZone(self, zoneBoundaryStockingDoorUValueFacingZone)

    def setZoneBoundaryStockingDoorOpeningScheduleFacingZone(self, zoneBoundaryStockingDoorOpeningScheduleFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_setZoneBoundaryStockingDoorOpeningScheduleFacingZone(self, zoneBoundaryStockingDoorOpeningScheduleFacingZone)

    def resetZoneBoundaryStockingDoorOpeningScheduleFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_resetZoneBoundaryStockingDoorOpeningScheduleFacingZone(self)

    def addToSystem(self, system):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_addToSystem(self, system)

    def addToSecondarySystem(self, secondarySystem):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_addToSecondarySystem(self, secondarySystem)

    def addToCompressorRack(self, compressorRack):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_addToCompressorRack(self, compressorRack)

    def removeFromSystem(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_removeFromSystem(self)

    def removeFromSecondarySystem(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_removeFromSecondarySystem(self)

    def removeFromCompressorRack(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkIn_removeFromCompressorRack(self)

# Register RefrigerationWalkIn in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationWalkIn_swigregister(RefrigerationWalkIn)

def toRefrigerationWalkIn(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationWalkIn(idfObject)

def getRefrigerationWalkIn(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationWalkIn(t_model, t_handle)

def getRefrigerationWalkIns(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationWalkIns(t_model)

def getRefrigerationWalkInByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationWalkInByName(t_model, t_name)

def getRefrigerationWalkInsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationWalkInsByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationWalkIn(self) -> OptionalRefrigerationWalkIn:
    """Try to cast the ModelObject to a RefrigerationWalkIn.

    :return: An Optional RefrigerationWalkIn.
    """
    return toRefrigerationWalkIn(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationWalkIn = _to_RefrigerationWalkIn

def _getRefrigerationWalkIn(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationWalkIn:
    """Try to get an object of type RefrigerationWalkIn referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationWalkIn.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationWalkIn(self, t_handle)
Model.getRefrigerationWalkIn = _getRefrigerationWalkIn

def _getRefrigerationWalkIns(self) -> RefrigerationWalkInVector:
    """Get a vector of all objects of type RefrigerationWalkIn in the model.

    :return: A vector of RefrigerationWalkIn.
    """
    return getRefrigerationWalkIns(self)
Model.getRefrigerationWalkIns = _getRefrigerationWalkIns

def _getRefrigerationWalkInByName(self, t_name: str) -> OptionalRefrigerationWalkIn:
    """Try to get an object of type RefrigerationWalkIn that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationWalkIn.
    """
    return getRefrigerationWalkInByName(self, t_name)
Model.getRefrigerationWalkInByName = _getRefrigerationWalkInByName

def _getRefrigerationWalkInsByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationWalkInVector:
    """Returns all objects of type RefrigerationWalkIn named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationWalkInsByName(self, t_name, t_exactMatch)
Model.getRefrigerationWalkInsByName = _getRefrigerationWalkInsByName

class RefrigerationWalkInZoneBoundary(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelrefrigeration.delete_RefrigerationWalkInZoneBoundary

    def __init__(self, *args):
        _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_swiginit(self, _openstudiomodelrefrigeration.new_RefrigerationWalkInZoneBoundary(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_iddObjectType()

    @staticmethod
    def stockingDoorOpeningProtectionTypeFacingZoneValues():
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_stockingDoorOpeningProtectionTypeFacingZoneValues()

    def thermalZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_thermalZone(self)

    def totalInsulatedSurfaceAreaFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_totalInsulatedSurfaceAreaFacingZone(self)

    def insulatedSurfaceUValueFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_insulatedSurfaceUValueFacingZone(self)

    def isInsulatedSurfaceUValueFacingZoneDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isInsulatedSurfaceUValueFacingZoneDefaulted(self)

    def areaofGlassReachInDoorsFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_areaofGlassReachInDoorsFacingZone(self)

    def isAreaofGlassReachInDoorsFacingZoneDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isAreaofGlassReachInDoorsFacingZoneDefaulted(self)

    def heightofGlassReachInDoorsFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_heightofGlassReachInDoorsFacingZone(self)

    def isHeightofGlassReachInDoorsFacingZoneDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isHeightofGlassReachInDoorsFacingZoneDefaulted(self)

    def glassReachInDoorUValueFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_glassReachInDoorUValueFacingZone(self)

    def isGlassReachInDoorUValueFacingZoneDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isGlassReachInDoorUValueFacingZoneDefaulted(self)

    def glassReachInDoorOpeningScheduleFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_glassReachInDoorOpeningScheduleFacingZone(self)

    def areaofStockingDoorsFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_areaofStockingDoorsFacingZone(self)

    def isAreaofStockingDoorsFacingZoneDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isAreaofStockingDoorsFacingZoneDefaulted(self)

    def heightofStockingDoorsFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_heightofStockingDoorsFacingZone(self)

    def isHeightofStockingDoorsFacingZoneDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isHeightofStockingDoorsFacingZoneDefaulted(self)

    def stockingDoorUValueFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_stockingDoorUValueFacingZone(self)

    def isStockingDoorUValueFacingZoneDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isStockingDoorUValueFacingZoneDefaulted(self)

    def stockingDoorOpeningScheduleFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_stockingDoorOpeningScheduleFacingZone(self)

    def stockingDoorOpeningProtectionTypeFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_stockingDoorOpeningProtectionTypeFacingZone(self)

    def isStockingDoorOpeningProtectionTypeFacingZoneDefaulted(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_isStockingDoorOpeningProtectionTypeFacingZoneDefaulted(self)

    def setThermalZone(self, thermalZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setThermalZone(self, thermalZone)

    def resetThermalZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetThermalZone(self)

    def setTotalInsulatedSurfaceAreaFacingZone(self, totalInsulatedSurfaceAreaFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setTotalInsulatedSurfaceAreaFacingZone(self, totalInsulatedSurfaceAreaFacingZone)

    def setInsulatedSurfaceUValueFacingZone(self, insulatedSurfaceUValueFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setInsulatedSurfaceUValueFacingZone(self, insulatedSurfaceUValueFacingZone)

    def resetInsulatedSurfaceUValueFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetInsulatedSurfaceUValueFacingZone(self)

    def setAreaofGlassReachInDoorsFacingZone(self, areaofGlassReachInDoorsFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setAreaofGlassReachInDoorsFacingZone(self, areaofGlassReachInDoorsFacingZone)

    def resetAreaofGlassReachInDoorsFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetAreaofGlassReachInDoorsFacingZone(self)

    def setHeightofGlassReachInDoorsFacingZone(self, heightofGlassReachInDoorsFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setHeightofGlassReachInDoorsFacingZone(self, heightofGlassReachInDoorsFacingZone)

    def resetHeightofGlassReachInDoorsFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetHeightofGlassReachInDoorsFacingZone(self)

    def setGlassReachInDoorUValueFacingZone(self, glassReachInDoorUValueFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setGlassReachInDoorUValueFacingZone(self, glassReachInDoorUValueFacingZone)

    def resetGlassReachInDoorUValueFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetGlassReachInDoorUValueFacingZone(self)

    def setGlassReachInDoorOpeningScheduleFacingZone(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setGlassReachInDoorOpeningScheduleFacingZone(self, schedule)

    def resetGlassReachInDoorOpeningScheduleFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetGlassReachInDoorOpeningScheduleFacingZone(self)

    def setAreaofStockingDoorsFacingZone(self, areaofStockingDoorsFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setAreaofStockingDoorsFacingZone(self, areaofStockingDoorsFacingZone)

    def resetAreaofStockingDoorsFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetAreaofStockingDoorsFacingZone(self)

    def setHeightofStockingDoorsFacingZone(self, heightofStockingDoorsFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setHeightofStockingDoorsFacingZone(self, heightofStockingDoorsFacingZone)

    def resetHeightofStockingDoorsFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetHeightofStockingDoorsFacingZone(self)

    def setStockingDoorUValueFacingZone(self, stockingDoorUValueFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setStockingDoorUValueFacingZone(self, stockingDoorUValueFacingZone)

    def resetStockingDoorUValueFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetStockingDoorUValueFacingZone(self)

    def setStockingDoorOpeningScheduleFacingZone(self, schedule):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setStockingDoorOpeningScheduleFacingZone(self, schedule)

    def resetStockingDoorOpeningScheduleFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetStockingDoorOpeningScheduleFacingZone(self)

    def setStockingDoorOpeningProtectionTypeFacingZone(self, stockingDoorOpeningProtectionTypeFacingZone):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_setStockingDoorOpeningProtectionTypeFacingZone(self, stockingDoorOpeningProtectionTypeFacingZone)

    def resetStockingDoorOpeningProtectionTypeFacingZone(self):
        return _openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_resetStockingDoorOpeningProtectionTypeFacingZone(self)

# Register RefrigerationWalkInZoneBoundary in _openstudiomodelrefrigeration:
_openstudiomodelrefrigeration.RefrigerationWalkInZoneBoundary_swigregister(RefrigerationWalkInZoneBoundary)

def toRefrigerationWalkInZoneBoundary(idfObject):
    return _openstudiomodelrefrigeration.toRefrigerationWalkInZoneBoundary(idfObject)

def getRefrigerationWalkInZoneBoundary(t_model, t_handle):
    return _openstudiomodelrefrigeration.getRefrigerationWalkInZoneBoundary(t_model, t_handle)

def getRefrigerationWalkInZoneBoundarys(t_model):
    return _openstudiomodelrefrigeration.getRefrigerationWalkInZoneBoundarys(t_model)

def getRefrigerationWalkInZoneBoundaryByName(t_model, t_name):
    return _openstudiomodelrefrigeration.getRefrigerationWalkInZoneBoundaryByName(t_model, t_name)

def getRefrigerationWalkInZoneBoundarysByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelrefrigeration.getRefrigerationWalkInZoneBoundarysByName(t_model, t_name, t_exactMatch)

def _to_RefrigerationWalkInZoneBoundary(self) -> OptionalRefrigerationWalkInZoneBoundary:
    """Try to cast the ModelObject to a RefrigerationWalkInZoneBoundary.

    :return: An Optional RefrigerationWalkInZoneBoundary.
    """
    return toRefrigerationWalkInZoneBoundary(self)
openstudioutilitiesidf.IdfObject.to_RefrigerationWalkInZoneBoundary = _to_RefrigerationWalkInZoneBoundary

def _getRefrigerationWalkInZoneBoundary(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefrigerationWalkInZoneBoundary:
    """Try to get an object of type RefrigerationWalkInZoneBoundary referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefrigerationWalkInZoneBoundary.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefrigerationWalkInZoneBoundary(self, t_handle)
Model.getRefrigerationWalkInZoneBoundary = _getRefrigerationWalkInZoneBoundary

def _getRefrigerationWalkInZoneBoundarys(self) -> RefrigerationWalkInZoneBoundaryVector:
    """Get a vector of all objects of type RefrigerationWalkInZoneBoundary in the model.

    :return: A vector of RefrigerationWalkInZoneBoundary.
    """
    return getRefrigerationWalkInZoneBoundarys(self)
Model.getRefrigerationWalkInZoneBoundarys = _getRefrigerationWalkInZoneBoundarys

def _getRefrigerationWalkInZoneBoundaryByName(self, t_name: str) -> OptionalRefrigerationWalkInZoneBoundary:
    """Try to get an object of type RefrigerationWalkInZoneBoundary that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefrigerationWalkInZoneBoundary.
    """
    return getRefrigerationWalkInZoneBoundaryByName(self, t_name)
Model.getRefrigerationWalkInZoneBoundaryByName = _getRefrigerationWalkInZoneBoundaryByName

def _getRefrigerationWalkInZoneBoundarysByName(self, t_name: str, t_exactMatch: bool) -> RefrigerationWalkInZoneBoundaryVector:
    """Returns all objects of type RefrigerationWalkInZoneBoundary named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefrigerationWalkInZoneBoundarysByName(self, t_name, t_exactMatch)
Model.getRefrigerationWalkInZoneBoundarysByName = _getRefrigerationWalkInZoneBoundarysByName


