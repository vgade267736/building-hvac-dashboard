# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudioosversion
else:
    import _openstudioosversion

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioosversion.delete_SwigPyIterator

    def value(self):
        return _openstudioosversion.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudioosversion.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudioosversion.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudioosversion.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudioosversion.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudioosversion.SwigPyIterator_copy(self)

    def next(self):
        return _openstudioosversion.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudioosversion.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudioosversion.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudioosversion.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudioosversion.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudioosversion.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudioosversion.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudioosversion.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudioosversion.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudioosversion.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudioosversion:
_openstudioosversion.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudioosversion.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudioutilitiesxml
from .import openstudiomodel
class RefactoredObjectDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioosversion.RefactoredObjectDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioosversion.RefactoredObjectDataVector___nonzero__(self)

    def __bool__(self):
        return _openstudioosversion.RefactoredObjectDataVector___bool__(self)

    def __len__(self):
        return _openstudioosversion.RefactoredObjectDataVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioosversion.RefactoredObjectDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioosversion.RefactoredObjectDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioosversion.RefactoredObjectDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioosversion.RefactoredObjectDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioosversion.RefactoredObjectDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioosversion.RefactoredObjectDataVector___setitem__(self, *args)

    def pop(self):
        return _openstudioosversion.RefactoredObjectDataVector_pop(self)

    def append(self, x):
        return _openstudioosversion.RefactoredObjectDataVector_append(self, x)

    def empty(self):
        return _openstudioosversion.RefactoredObjectDataVector_empty(self)

    def size(self):
        return _openstudioosversion.RefactoredObjectDataVector_size(self)

    def swap(self, v):
        return _openstudioosversion.RefactoredObjectDataVector_swap(self, v)

    def begin(self):
        return _openstudioosversion.RefactoredObjectDataVector_begin(self)

    def end(self):
        return _openstudioosversion.RefactoredObjectDataVector_end(self)

    def rbegin(self):
        return _openstudioosversion.RefactoredObjectDataVector_rbegin(self)

    def rend(self):
        return _openstudioosversion.RefactoredObjectDataVector_rend(self)

    def clear(self):
        return _openstudioosversion.RefactoredObjectDataVector_clear(self)

    def get_allocator(self):
        return _openstudioosversion.RefactoredObjectDataVector_get_allocator(self)

    def pop_back(self):
        return _openstudioosversion.RefactoredObjectDataVector_pop_back(self)

    def erase(self, *args):
        return _openstudioosversion.RefactoredObjectDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioosversion.RefactoredObjectDataVector_swiginit(self, _openstudioosversion.new_RefactoredObjectDataVector(*args))

    def push_back(self, x):
        return _openstudioosversion.RefactoredObjectDataVector_push_back(self, x)

    def front(self):
        return _openstudioosversion.RefactoredObjectDataVector_front(self)

    def back(self):
        return _openstudioosversion.RefactoredObjectDataVector_back(self)

    def assign(self, n, x):
        return _openstudioosversion.RefactoredObjectDataVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioosversion.RefactoredObjectDataVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioosversion.RefactoredObjectDataVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioosversion.RefactoredObjectDataVector_reserve(self, n)

    def capacity(self):
        return _openstudioosversion.RefactoredObjectDataVector_capacity(self)
    __swig_destroy__ = _openstudioosversion.delete_RefactoredObjectDataVector

# Register RefactoredObjectDataVector in _openstudioosversion:
_openstudioosversion.RefactoredObjectDataVector_swigregister(RefactoredObjectDataVector)
class RefactoredObjectData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioosversion.RefactoredObjectData_swiginit(self, _openstudioosversion.new_RefactoredObjectData(*args))

    def oldObject(self):
        return _openstudioosversion.RefactoredObjectData_oldObject(self)

    def newObject(self):
        return _openstudioosversion.RefactoredObjectData_newObject(self)
    __swig_destroy__ = _openstudioosversion.delete_RefactoredObjectData

# Register RefactoredObjectData in _openstudioosversion:
_openstudioosversion.RefactoredObjectData_swigregister(RefactoredObjectData)
class VersionTranslator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioosversion.VersionTranslator_swiginit(self, _openstudioosversion.new_VersionTranslator())

    def loadModel(self, *args):
        return _openstudioosversion.VersionTranslator_loadModel(self, *args)

    def loadModelFromString(self, str, progressBar=None):
        return _openstudioosversion.VersionTranslator_loadModelFromString(self, str, progressBar)

    def loadComponent(self, *args):
        return _openstudioosversion.VersionTranslator_loadComponent(self, *args)

    def originalVersion(self):
        return _openstudioosversion.VersionTranslator_originalVersion(self)

    def warnings(self):
        return _openstudioosversion.VersionTranslator_warnings(self)

    def errors(self):
        return _openstudioosversion.VersionTranslator_errors(self)

    def deprecatedObjects(self):
        return _openstudioosversion.VersionTranslator_deprecatedObjects(self)

    def untranslatedObjects(self):
        return _openstudioosversion.VersionTranslator_untranslatedObjects(self)

    def newObjects(self):
        return _openstudioosversion.VersionTranslator_newObjects(self)

    def refactoredObjects(self):
        return _openstudioosversion.VersionTranslator_refactoredObjects(self)

    def allowNewerVersions(self):
        return _openstudioosversion.VersionTranslator_allowNewerVersions(self)

    def setAllowNewerVersions(self, allowNewerVersions):
        return _openstudioosversion.VersionTranslator_setAllowNewerVersions(self, allowNewerVersions)
    __swig_destroy__ = _openstudioosversion.delete_VersionTranslator

# Register VersionTranslator in _openstudioosversion:
_openstudioosversion.VersionTranslator_swigregister(VersionTranslator)

