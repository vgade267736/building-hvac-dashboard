# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelgenerators
else:
    import _openstudiomodelgenerators

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_SwigPyIterator

    def value(self):
        return _openstudiomodelgenerators.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudiomodelgenerators.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudiomodelgenerators.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudiomodelgenerators.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudiomodelgenerators.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudiomodelgenerators.SwigPyIterator_copy(self)

    def next(self):
        return _openstudiomodelgenerators.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudiomodelgenerators.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudiomodelgenerators.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudiomodelgenerators.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudiomodelgenerators.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudiomodelgenerators.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudiomodelgenerators.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudiomodelgenerators.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudiomodelgenerators.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudiomodelgenerators.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelgenerators:
_openstudiomodelgenerators.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudiomodelgenerators.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudioutilitiesxml

# Import common modules
import typing
import warnings

from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources
from .import openstudiomodelgeometry
from .import openstudiomodelhvac
from .import openstudiomodelstraightcomponent
from .import openstudiomodelzonehvac
class FloorplanJSForwardTranslator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudiomodelgenerators.FloorplanJSForwardTranslator_swiginit(self, _openstudiomodelgenerators.new_FloorplanJSForwardTranslator())

    def updateFloorplanJS(self, floorplan, model, removeMissingObjects):
        return _openstudiomodelgenerators.FloorplanJSForwardTranslator_updateFloorplanJS(self, floorplan, model, removeMissingObjects)

    def warnings(self):
        return _openstudiomodelgenerators.FloorplanJSForwardTranslator_warnings(self)

    def errors(self):
        return _openstudiomodelgenerators.FloorplanJSForwardTranslator_errors(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_FloorplanJSForwardTranslator

# Register FloorplanJSForwardTranslator in _openstudiomodelgenerators:
_openstudiomodelgenerators.FloorplanJSForwardTranslator_swigregister(FloorplanJSForwardTranslator)
class ThreeJSForwardTranslator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudiomodelgenerators.ThreeJSForwardTranslator_swiginit(self, _openstudiomodelgenerators.new_ThreeJSForwardTranslator())

    def modelToThreeJS(self, model, triangulateSurfaces):
        return _openstudiomodelgenerators.ThreeJSForwardTranslator_modelToThreeJS(self, model, triangulateSurfaces)

    def warnings(self):
        return _openstudiomodelgenerators.ThreeJSForwardTranslator_warnings(self)

    def errors(self):
        return _openstudiomodelgenerators.ThreeJSForwardTranslator_errors(self)

    def includeGeometryDiagnostics(self):
        return _openstudiomodelgenerators.ThreeJSForwardTranslator_includeGeometryDiagnostics(self)

    def setIncludeGeometryDiagnostics(self, includeGeometryDiagnostics):
        return _openstudiomodelgenerators.ThreeJSForwardTranslator_setIncludeGeometryDiagnostics(self, includeGeometryDiagnostics)
    __swig_destroy__ = _openstudiomodelgenerators.delete_ThreeJSForwardTranslator

# Register ThreeJSForwardTranslator in _openstudiomodelgenerators:
_openstudiomodelgenerators.ThreeJSForwardTranslator_swigregister(ThreeJSForwardTranslator)
class ThreeJSReverseTranslator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudiomodelgenerators.ThreeJSReverseTranslator_swiginit(self, _openstudiomodelgenerators.new_ThreeJSReverseTranslator())

    def modelFromThreeJS(self, scene):
        return _openstudiomodelgenerators.ThreeJSReverseTranslator_modelFromThreeJS(self, scene)

    def handleMapping(self):
        return _openstudiomodelgenerators.ThreeJSReverseTranslator_handleMapping(self)

    def warnings(self):
        return _openstudiomodelgenerators.ThreeJSReverseTranslator_warnings(self)

    def errors(self):
        return _openstudiomodelgenerators.ThreeJSReverseTranslator_errors(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_ThreeJSReverseTranslator

# Register ThreeJSReverseTranslator in _openstudiomodelgenerators:
_openstudiomodelgenerators.ThreeJSReverseTranslator_swigregister(ThreeJSReverseTranslator)
class FloorspaceReverseTranslator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudiomodelgenerators.FloorspaceReverseTranslator_swiginit(self, _openstudiomodelgenerators.new_FloorspaceReverseTranslator())

    def modelFromFloorspace(self, jsonOrpath):
        return _openstudiomodelgenerators.FloorspaceReverseTranslator_modelFromFloorspace(self, jsonOrpath)

    def warnings(self):
        return _openstudiomodelgenerators.FloorspaceReverseTranslator_warnings(self)

    def errors(self):
        return _openstudiomodelgenerators.FloorspaceReverseTranslator_errors(self)

    def handleMapping(self):
        return _openstudiomodelgenerators.FloorspaceReverseTranslator_handleMapping(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_FloorspaceReverseTranslator

# Register FloorspaceReverseTranslator in _openstudiomodelgenerators:
_openstudiomodelgenerators.FloorspaceReverseTranslator_swigregister(FloorspaceReverseTranslator)
class ModelMerger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudiomodelgenerators.ModelMerger_swiginit(self, _openstudiomodelgenerators.new_ModelMerger())

    def mergeModels(self, currentModel, newModel, handleMapping):
        return _openstudiomodelgenerators.ModelMerger_mergeModels(self, currentModel, newModel, handleMapping)

    def iddObjectTypesToMerge(self):
        return _openstudiomodelgenerators.ModelMerger_iddObjectTypesToMerge(self)

    def setIddObjectTypesToMerge(self, iddObjectTypesToMerge):
        return _openstudiomodelgenerators.ModelMerger_setIddObjectTypesToMerge(self, iddObjectTypesToMerge)

    def suggestHandleMapping(self, currentModel, newModel):
        return _openstudiomodelgenerators.ModelMerger_suggestHandleMapping(self, currentModel, newModel)

    def warnings(self):
        return _openstudiomodelgenerators.ModelMerger_warnings(self)

    def errors(self):
        return _openstudiomodelgenerators.ModelMerger_errors(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_ModelMerger

# Register ModelMerger in _openstudiomodelgenerators:
_openstudiomodelgenerators.ModelMerger_swigregister(ModelMerger)

Model = openstudiomodelcore.Model

class PhotovoltaicPerformanceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.PhotovoltaicPerformanceVector_swiginit(self, _openstudiomodelgenerators.new_PhotovoltaicPerformanceVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_PhotovoltaicPerformanceVector

# Register PhotovoltaicPerformanceVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.PhotovoltaicPerformanceVector_swigregister(PhotovoltaicPerformanceVector)
class OptionalPhotovoltaicPerformance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalPhotovoltaicPerformance_swiginit(self, _openstudiomodelgenerators.new_OptionalPhotovoltaicPerformance(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformance_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalPhotovoltaicPerformance

# Register OptionalPhotovoltaicPerformance in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalPhotovoltaicPerformance_swigregister(OptionalPhotovoltaicPerformance)
class GeneratorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorVector

# Register GeneratorVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorVector_swigregister(GeneratorVector)
class OptionalGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGenerator_swiginit(self, _openstudiomodelgenerators.new_OptionalGenerator(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGenerator_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGenerator___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGenerator___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGenerator_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGenerator_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGenerator_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGenerator_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGenerator_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGenerator_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGenerator

# Register OptionalGenerator in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGenerator_swigregister(OptionalGenerator)
class InverterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.InverterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.InverterVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.InverterVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.InverterVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.InverterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.InverterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.InverterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.InverterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.InverterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.InverterVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.InverterVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.InverterVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.InverterVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.InverterVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.InverterVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.InverterVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.InverterVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.InverterVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.InverterVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.InverterVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.InverterVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.InverterVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.InverterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.InverterVector_swiginit(self, _openstudiomodelgenerators.new_InverterVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.InverterVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.InverterVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.InverterVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.InverterVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.InverterVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.InverterVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.InverterVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.InverterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_InverterVector

# Register InverterVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.InverterVector_swigregister(InverterVector)
class OptionalInverter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalInverter_swiginit(self, _openstudiomodelgenerators.new_OptionalInverter(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalInverter_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalInverter___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalInverter___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalInverter_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalInverter_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalInverter_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalInverter_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalInverter_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalInverter_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalInverter

# Register OptionalInverter in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalInverter_swigregister(OptionalInverter)
class ElectricalStorageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.ElectricalStorageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.ElectricalStorageVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.ElectricalStorageVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.ElectricalStorageVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricalStorageVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.ElectricalStorageVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricalStorageVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.ElectricalStorageVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.ElectricalStorageVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.ElectricalStorageVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.ElectricalStorageVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.ElectricalStorageVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.ElectricalStorageVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.ElectricalStorageVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.ElectricalStorageVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.ElectricalStorageVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.ElectricalStorageVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.ElectricalStorageVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.ElectricalStorageVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.ElectricalStorageVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.ElectricalStorageVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.ElectricalStorageVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.ElectricalStorageVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricalStorageVector_swiginit(self, _openstudiomodelgenerators.new_ElectricalStorageVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.ElectricalStorageVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.ElectricalStorageVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.ElectricalStorageVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.ElectricalStorageVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.ElectricalStorageVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.ElectricalStorageVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.ElectricalStorageVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.ElectricalStorageVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricalStorageVector

# Register ElectricalStorageVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricalStorageVector_swigregister(ElectricalStorageVector)
class OptionalElectricalStorage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalElectricalStorage_swiginit(self, _openstudiomodelgenerators.new_OptionalElectricalStorage(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalElectricalStorage_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalElectricalStorage___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalElectricalStorage___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalElectricalStorage_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalElectricalStorage_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalElectricalStorage_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalElectricalStorage_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalElectricalStorage_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalElectricalStorage_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricalStorage

# Register OptionalElectricalStorage in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalElectricalStorage_swigregister(OptionalElectricalStorage)
class AirSupplyConstituentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.AirSupplyConstituentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.AirSupplyConstituentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.AirSupplyConstituentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.AirSupplyConstituentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.AirSupplyConstituentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.AirSupplyConstituentVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.AirSupplyConstituentVector_swiginit(self, _openstudiomodelgenerators.new_AirSupplyConstituentVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.AirSupplyConstituentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_AirSupplyConstituentVector

# Register AirSupplyConstituentVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.AirSupplyConstituentVector_swigregister(AirSupplyConstituentVector)
class OptionalAirSupplyConstituent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalAirSupplyConstituent_swiginit(self, _openstudiomodelgenerators.new_OptionalAirSupplyConstituent(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalAirSupplyConstituent_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalAirSupplyConstituent___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalAirSupplyConstituent___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalAirSupplyConstituent_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalAirSupplyConstituent_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalAirSupplyConstituent_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalAirSupplyConstituent_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalAirSupplyConstituent_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalAirSupplyConstituent_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalAirSupplyConstituent

# Register OptionalAirSupplyConstituent in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalAirSupplyConstituent_swigregister(OptionalAirSupplyConstituent)
class GeneratorFuelCellAirSupplyVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellAirSupplyVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellAirSupplyVector

# Register GeneratorFuelCellAirSupplyVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellAirSupplyVector_swigregister(GeneratorFuelCellAirSupplyVector)
class OptionalGeneratorFuelCellAirSupply(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorFuelCellAirSupply(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellAirSupply

# Register OptionalGeneratorFuelCellAirSupply in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorFuelCellAirSupply_swigregister(OptionalGeneratorFuelCellAirSupply)
class GeneratorFuelCellAuxiliaryHeaterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellAuxiliaryHeaterVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellAuxiliaryHeaterVector

# Register GeneratorFuelCellAuxiliaryHeaterVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeaterVector_swigregister(GeneratorFuelCellAuxiliaryHeaterVector)
class OptionalGeneratorFuelCellAuxiliaryHeater(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorFuelCellAuxiliaryHeater(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellAuxiliaryHeater

# Register OptionalGeneratorFuelCellAuxiliaryHeater in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorFuelCellAuxiliaryHeater_swigregister(OptionalGeneratorFuelCellAuxiliaryHeater)
class GeneratorFuelCellElectricalStorageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellElectricalStorageVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellElectricalStorageVector

# Register GeneratorFuelCellElectricalStorageVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellElectricalStorageVector_swigregister(GeneratorFuelCellElectricalStorageVector)
class OptionalGeneratorFuelCellElectricalStorage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorFuelCellElectricalStorage(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellElectricalStorage

# Register OptionalGeneratorFuelCellElectricalStorage in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorFuelCellElectricalStorage_swigregister(OptionalGeneratorFuelCellElectricalStorage)
class GeneratorFuelCellExhaustGasToWaterHeatExchangerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellExhaustGasToWaterHeatExchangerVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellExhaustGasToWaterHeatExchangerVector

# Register GeneratorFuelCellExhaustGasToWaterHeatExchangerVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchangerVector_swigregister(GeneratorFuelCellExhaustGasToWaterHeatExchangerVector)
class OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger

# Register OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger_swigregister(OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger)
class GeneratorFuelCellInverterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellInverterVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellInverterVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellInverterVector

# Register GeneratorFuelCellInverterVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellInverterVector_swigregister(GeneratorFuelCellInverterVector)
class OptionalGeneratorFuelCellInverter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorFuelCellInverter(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellInverter

# Register OptionalGeneratorFuelCellInverter in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorFuelCellInverter_swigregister(OptionalGeneratorFuelCellInverter)
class GeneratorFuelCellPowerModuleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellPowerModuleVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellPowerModuleVector

# Register GeneratorFuelCellPowerModuleVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellPowerModuleVector_swigregister(GeneratorFuelCellPowerModuleVector)
class OptionalGeneratorFuelCellPowerModule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorFuelCellPowerModule(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellPowerModule

# Register OptionalGeneratorFuelCellPowerModule in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorFuelCellPowerModule_swigregister(OptionalGeneratorFuelCellPowerModule)
class GeneratorFuelCellStackCoolerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellStackCoolerVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellStackCoolerVector

# Register GeneratorFuelCellStackCoolerVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellStackCoolerVector_swigregister(GeneratorFuelCellStackCoolerVector)
class OptionalGeneratorFuelCellStackCooler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorFuelCellStackCooler(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellStackCooler

# Register OptionalGeneratorFuelCellStackCooler in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorFuelCellStackCooler_swigregister(OptionalGeneratorFuelCellStackCooler)
class GeneratorFuelCellWaterSupplyVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellWaterSupplyVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellWaterSupplyVector

# Register GeneratorFuelCellWaterSupplyVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellWaterSupplyVector_swigregister(GeneratorFuelCellWaterSupplyVector)
class OptionalGeneratorFuelCellWaterSupply(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorFuelCellWaterSupply(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCellWaterSupply

# Register OptionalGeneratorFuelCellWaterSupply in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorFuelCellWaterSupply_swigregister(OptionalGeneratorFuelCellWaterSupply)
class FuelSupplyConstituentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.FuelSupplyConstituentVector_swiginit(self, _openstudiomodelgenerators.new_FuelSupplyConstituentVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.FuelSupplyConstituentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_FuelSupplyConstituentVector

# Register FuelSupplyConstituentVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.FuelSupplyConstituentVector_swigregister(FuelSupplyConstituentVector)
class OptionalFuelSupplyConstituent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalFuelSupplyConstituent_swiginit(self, _openstudiomodelgenerators.new_OptionalFuelSupplyConstituent(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalFuelSupplyConstituent_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalFuelSupplyConstituent___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalFuelSupplyConstituent___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalFuelSupplyConstituent_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalFuelSupplyConstituent_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalFuelSupplyConstituent_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalFuelSupplyConstituent_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalFuelSupplyConstituent_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalFuelSupplyConstituent_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalFuelSupplyConstituent

# Register OptionalFuelSupplyConstituent in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalFuelSupplyConstituent_swigregister(OptionalFuelSupplyConstituent)
class GeneratorFuelSupplyVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelSupplyVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelSupplyVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorFuelSupplyVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelSupplyVector

# Register GeneratorFuelSupplyVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelSupplyVector_swigregister(GeneratorFuelSupplyVector)
class OptionalGeneratorFuelSupply(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorFuelSupply_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorFuelSupply(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorFuelSupply_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelSupply

# Register OptionalGeneratorFuelSupply in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorFuelSupply_swigregister(OptionalGeneratorFuelSupply)
class GeneratorFuelCellVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorFuelCellVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorFuelCellVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellVector

# Register GeneratorFuelCellVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellVector_swigregister(GeneratorFuelCellVector)
class OptionalGeneratorFuelCell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorFuelCell_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorFuelCell(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCell_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCell___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCell___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCell_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCell_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCell_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCell_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCell_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorFuelCell_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorFuelCell

# Register OptionalGeneratorFuelCell in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorFuelCell_swigregister(OptionalGeneratorFuelCell)
class GeneratorPhotovoltaicVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorPhotovoltaicVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorPhotovoltaicVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaicVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorPhotovoltaicVector

# Register GeneratorPhotovoltaicVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorPhotovoltaicVector_swigregister(GeneratorPhotovoltaicVector)
class OptionalGeneratorPhotovoltaic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorPhotovoltaic(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorPhotovoltaic

# Register OptionalGeneratorPhotovoltaic in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorPhotovoltaic_swigregister(OptionalGeneratorPhotovoltaic)
class GeneratorMicroTurbineHeatRecoveryVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorMicroTurbineHeatRecoveryVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorMicroTurbineHeatRecoveryVector

# Register GeneratorMicroTurbineHeatRecoveryVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorMicroTurbineHeatRecoveryVector_swigregister(GeneratorMicroTurbineHeatRecoveryVector)
class OptionalGeneratorMicroTurbineHeatRecovery(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorMicroTurbineHeatRecovery(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorMicroTurbineHeatRecovery

# Register OptionalGeneratorMicroTurbineHeatRecovery in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorMicroTurbineHeatRecovery_swigregister(OptionalGeneratorMicroTurbineHeatRecovery)
class GeneratorMicroTurbineVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorMicroTurbineVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorMicroTurbineVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorMicroTurbineVector

# Register GeneratorMicroTurbineVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorMicroTurbineVector_swigregister(GeneratorMicroTurbineVector)
class OptionalGeneratorMicroTurbine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorMicroTurbine_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorMicroTurbine(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorMicroTurbine_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorMicroTurbine

# Register OptionalGeneratorMicroTurbine in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorMicroTurbine_swigregister(OptionalGeneratorMicroTurbine)
class GeneratorPVWattsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorPVWattsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorPVWattsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorPVWattsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorPVWattsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorPVWattsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorPVWattsVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorPVWattsVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorPVWattsVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorPVWattsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorPVWattsVector

# Register GeneratorPVWattsVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorPVWattsVector_swigregister(GeneratorPVWattsVector)
class OptionalGeneratorPVWatts(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorPVWatts_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorPVWatts(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorPVWatts_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorPVWatts___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorPVWatts___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorPVWatts_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorPVWatts_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorPVWatts_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorPVWatts_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorPVWatts_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorPVWatts_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorPVWatts

# Register OptionalGeneratorPVWatts in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorPVWatts_swigregister(OptionalGeneratorPVWatts)
class GeneratorWindTurbineVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorWindTurbineVector_swiginit(self, _openstudiomodelgenerators.new_GeneratorWindTurbineVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.GeneratorWindTurbineVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorWindTurbineVector

# Register GeneratorWindTurbineVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorWindTurbineVector_swigregister(GeneratorWindTurbineVector)
class OptionalGeneratorWindTurbine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalGeneratorWindTurbine_swiginit(self, _openstudiomodelgenerators.new_OptionalGeneratorWindTurbine(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalGeneratorWindTurbine_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalGeneratorWindTurbine___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalGeneratorWindTurbine___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalGeneratorWindTurbine_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalGeneratorWindTurbine_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalGeneratorWindTurbine_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalGeneratorWindTurbine_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalGeneratorWindTurbine_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalGeneratorWindTurbine_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalGeneratorWindTurbine

# Register OptionalGeneratorWindTurbine in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalGeneratorWindTurbine_swigregister(OptionalGeneratorWindTurbine)
class ElectricLoadCenterTransformerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterTransformerVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterTransformerVector

# Register ElectricLoadCenterTransformerVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterTransformerVector_swigregister(ElectricLoadCenterTransformerVector)
class OptionalElectricLoadCenterTransformer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_swiginit(self, _openstudiomodelgenerators.new_OptionalElectricLoadCenterTransformer(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterTransformer

# Register OptionalElectricLoadCenterTransformer in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalElectricLoadCenterTransformer_swigregister(OptionalElectricLoadCenterTransformer)
class ElectricLoadCenterDistributionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterDistributionVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistributionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterDistributionVector

# Register ElectricLoadCenterDistributionVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterDistributionVector_swigregister(ElectricLoadCenterDistributionVector)
class OptionalElectricLoadCenterDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_swiginit(self, _openstudiomodelgenerators.new_OptionalElectricLoadCenterDistribution(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterDistribution

# Register OptionalElectricLoadCenterDistribution in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalElectricLoadCenterDistribution_swigregister(OptionalElectricLoadCenterDistribution)
class ElectricLoadCenterInverterLookUpTableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterInverterLookUpTableVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterInverterLookUpTableVector

# Register ElectricLoadCenterInverterLookUpTableVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTableVector_swigregister(ElectricLoadCenterInverterLookUpTableVector)
class OptionalElectricLoadCenterInverterLookUpTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_swiginit(self, _openstudiomodelgenerators.new_OptionalElectricLoadCenterInverterLookUpTable(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterInverterLookUpTable

# Register OptionalElectricLoadCenterInverterLookUpTable in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalElectricLoadCenterInverterLookUpTable_swigregister(OptionalElectricLoadCenterInverterLookUpTable)
class ElectricLoadCenterInverterSimpleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterInverterSimpleVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterInverterSimpleVector

# Register ElectricLoadCenterInverterSimpleVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterInverterSimpleVector_swigregister(ElectricLoadCenterInverterSimpleVector)
class OptionalElectricLoadCenterInverterSimple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_swiginit(self, _openstudiomodelgenerators.new_OptionalElectricLoadCenterInverterSimple(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterInverterSimple

# Register OptionalElectricLoadCenterInverterSimple in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalElectricLoadCenterInverterSimple_swigregister(OptionalElectricLoadCenterInverterSimple)
class ElectricLoadCenterInverterPVWattsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterInverterPVWattsVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterInverterPVWattsVector

# Register ElectricLoadCenterInverterPVWattsVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterInverterPVWattsVector_swigregister(ElectricLoadCenterInverterPVWattsVector)
class OptionalElectricLoadCenterInverterPVWatts(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_swiginit(self, _openstudiomodelgenerators.new_OptionalElectricLoadCenterInverterPVWatts(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterInverterPVWatts

# Register OptionalElectricLoadCenterInverterPVWatts in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalElectricLoadCenterInverterPVWatts_swigregister(OptionalElectricLoadCenterInverterPVWatts)
class ElectricLoadCenterStorageSimpleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterStorageSimpleVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterStorageSimpleVector

# Register ElectricLoadCenterStorageSimpleVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterStorageSimpleVector_swigregister(ElectricLoadCenterStorageSimpleVector)
class OptionalElectricLoadCenterStorageSimple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_swiginit(self, _openstudiomodelgenerators.new_OptionalElectricLoadCenterStorageSimple(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterStorageSimple

# Register OptionalElectricLoadCenterStorageSimple in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalElectricLoadCenterStorageSimple_swigregister(OptionalElectricLoadCenterStorageSimple)
class ElectricLoadCenterStorageConverterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterStorageConverterVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterStorageConverterVector

# Register ElectricLoadCenterStorageConverterVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterStorageConverterVector_swigregister(ElectricLoadCenterStorageConverterVector)
class OptionalElectricLoadCenterStorageConverter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_swiginit(self, _openstudiomodelgenerators.new_OptionalElectricLoadCenterStorageConverter(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterStorageConverter

# Register OptionalElectricLoadCenterStorageConverter in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalElectricLoadCenterStorageConverter_swigregister(OptionalElectricLoadCenterStorageConverter)
class ElectricLoadCenterStorageLiIonNMCBatteryVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterStorageLiIonNMCBatteryVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterStorageLiIonNMCBatteryVector

# Register ElectricLoadCenterStorageLiIonNMCBatteryVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBatteryVector_swigregister(ElectricLoadCenterStorageLiIonNMCBatteryVector)
class OptionalElectricLoadCenterStorageLiIonNMCBattery(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalElectricLoadCenterStorageLiIonNMCBattery_swiginit(self, _openstudiomodelgenerators.new_OptionalElectricLoadCenterStorageLiIonNMCBattery(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageLiIonNMCBattery_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageLiIonNMCBattery___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageLiIonNMCBattery___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageLiIonNMCBattery_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageLiIonNMCBattery_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageLiIonNMCBattery_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageLiIonNMCBattery_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageLiIonNMCBattery_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalElectricLoadCenterStorageLiIonNMCBattery_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalElectricLoadCenterStorageLiIonNMCBattery

# Register OptionalElectricLoadCenterStorageLiIonNMCBattery in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalElectricLoadCenterStorageLiIonNMCBattery_swigregister(OptionalElectricLoadCenterStorageLiIonNMCBattery)
class PhotovoltaicPerformanceEquivalentOneDiodeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_swiginit(self, _openstudiomodelgenerators.new_PhotovoltaicPerformanceEquivalentOneDiodeVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_PhotovoltaicPerformanceEquivalentOneDiodeVector

# Register PhotovoltaicPerformanceEquivalentOneDiodeVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiodeVector_swigregister(PhotovoltaicPerformanceEquivalentOneDiodeVector)
class OptionalPhotovoltaicPerformanceEquivalentOneDiode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_swiginit(self, _openstudiomodelgenerators.new_OptionalPhotovoltaicPerformanceEquivalentOneDiode(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalPhotovoltaicPerformanceEquivalentOneDiode

# Register OptionalPhotovoltaicPerformanceEquivalentOneDiode in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalPhotovoltaicPerformanceEquivalentOneDiode_swigregister(OptionalPhotovoltaicPerformanceEquivalentOneDiode)
class PhotovoltaicPerformanceSimpleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_swiginit(self, _openstudiomodelgenerators.new_PhotovoltaicPerformanceSimpleVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_PhotovoltaicPerformanceSimpleVector

# Register PhotovoltaicPerformanceSimpleVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.PhotovoltaicPerformanceSimpleVector_swigregister(PhotovoltaicPerformanceSimpleVector)
class OptionalPhotovoltaicPerformanceSimple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_swiginit(self, _openstudiomodelgenerators.new_OptionalPhotovoltaicPerformanceSimple(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalPhotovoltaicPerformanceSimple

# Register OptionalPhotovoltaicPerformanceSimple in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSimple_swigregister(OptionalPhotovoltaicPerformanceSimple)
class PhotovoltaicPerformanceSandiaVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_pop(self)

    def append(self, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_append(self, x)

    def empty(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_empty(self)

    def size(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_size(self)

    def swap(self, v):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_begin(self)

    def end(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_end(self)

    def rbegin(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_rend(self)

    def clear(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_swiginit(self, _openstudiomodelgenerators.new_PhotovoltaicPerformanceSandiaVector(*args))

    def push_back(self, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_front(self)

    def back(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_PhotovoltaicPerformanceSandiaVector

# Register PhotovoltaicPerformanceSandiaVector in _openstudiomodelgenerators:
_openstudiomodelgenerators.PhotovoltaicPerformanceSandiaVector_swigregister(PhotovoltaicPerformanceSandiaVector)
class OptionalPhotovoltaicPerformanceSandia(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSandia_swiginit(self, _openstudiomodelgenerators.new_OptionalPhotovoltaicPerformanceSandia(*args))

    def reset(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSandia_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSandia___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSandia___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSandia_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSandia_isNull(self)

    def empty(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSandia_empty(self)

    def get(self):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSandia_get(self)

    def set(self, t):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSandia_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSandia_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgenerators.delete_OptionalPhotovoltaicPerformanceSandia

# Register OptionalPhotovoltaicPerformanceSandia in _openstudiomodelgenerators:
_openstudiomodelgenerators.OptionalPhotovoltaicPerformanceSandia_swigregister(OptionalPhotovoltaicPerformanceSandia)
class PhotovoltaicPerformance(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_PhotovoltaicPerformance

    def __init__(self, *args):
        _openstudiomodelgenerators.PhotovoltaicPerformance_swiginit(self, _openstudiomodelgenerators.new_PhotovoltaicPerformance(*args))

# Register PhotovoltaicPerformance in _openstudiomodelgenerators:
_openstudiomodelgenerators.PhotovoltaicPerformance_swigregister(PhotovoltaicPerformance)

def toPhotovoltaicPerformance(idfObject):
    return _openstudiomodelgenerators.toPhotovoltaicPerformance(idfObject)

def getPhotovoltaicPerformance(t_model, t_handle):
    return _openstudiomodelgenerators.getPhotovoltaicPerformance(t_model, t_handle)

def getPhotovoltaicPerformances(t_model):
    return _openstudiomodelgenerators.getPhotovoltaicPerformances(t_model)

def getPhotovoltaicPerformanceByName(t_model, t_name):
    return _openstudiomodelgenerators.getPhotovoltaicPerformanceByName(t_model, t_name)

def getPhotovoltaicPerformancesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getPhotovoltaicPerformancesByName(t_model, t_name, t_exactMatch)

def _to_PhotovoltaicPerformance(self) -> OptionalPhotovoltaicPerformance:
    """Try to cast the ModelObject to a PhotovoltaicPerformance.

    :return: An Optional PhotovoltaicPerformance.
    """
    return toPhotovoltaicPerformance(self)
openstudioutilitiesidf.IdfObject.to_PhotovoltaicPerformance = _to_PhotovoltaicPerformance

def _getPhotovoltaicPerformance(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPhotovoltaicPerformance:
    """Try to get an object of type PhotovoltaicPerformance referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PhotovoltaicPerformance.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPhotovoltaicPerformance(self, t_handle)
Model.getPhotovoltaicPerformance = _getPhotovoltaicPerformance

def _getPhotovoltaicPerformances(self) -> PhotovoltaicPerformanceVector:
    """Get a vector of all objects of type PhotovoltaicPerformance in the model.

    :return: A vector of PhotovoltaicPerformance.
    """
    return getPhotovoltaicPerformances(self)
Model.getPhotovoltaicPerformances = _getPhotovoltaicPerformances

def _getPhotovoltaicPerformanceByName(self, t_name: str) -> OptionalPhotovoltaicPerformance:
    """Try to get an object of type PhotovoltaicPerformance that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PhotovoltaicPerformance.
    """
    return getPhotovoltaicPerformanceByName(self, t_name)
Model.getPhotovoltaicPerformanceByName = _getPhotovoltaicPerformanceByName

def _getPhotovoltaicPerformancesByName(self, t_name: str, t_exactMatch: bool) -> PhotovoltaicPerformanceVector:
    """Returns all objects of type PhotovoltaicPerformance named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPhotovoltaicPerformancesByName(self, t_name, t_exactMatch)
Model.getPhotovoltaicPerformancesByName = _getPhotovoltaicPerformancesByName

class Generator(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_Generator

    def __init__(self, *args):
        _openstudiomodelgenerators.Generator_swiginit(self, _openstudiomodelgenerators.new_Generator(*args))

    def generatorObjectType(self):
        return _openstudiomodelgenerators.Generator_generatorObjectType(self)

    def ratedElectricPowerOutput(self):
        return _openstudiomodelgenerators.Generator_ratedElectricPowerOutput(self)

    def availabilitySchedule(self):
        return _openstudiomodelgenerators.Generator_availabilitySchedule(self)

    def ratedThermaltoElectricalPowerRatio(self):
        return _openstudiomodelgenerators.Generator_ratedThermaltoElectricalPowerRatio(self)

    def electricLoadCenterDistribution(self):
        return _openstudiomodelgenerators.Generator_electricLoadCenterDistribution(self)

# Register Generator in _openstudiomodelgenerators:
_openstudiomodelgenerators.Generator_swigregister(Generator)

def toGenerator(idfObject):
    return _openstudiomodelgenerators.toGenerator(idfObject)

def getGenerator(t_model, t_handle):
    return _openstudiomodelgenerators.getGenerator(t_model, t_handle)

def getGenerators(t_model):
    return _openstudiomodelgenerators.getGenerators(t_model)

def getGeneratorByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorByName(t_model, t_name)

def getGeneratorsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorsByName(t_model, t_name, t_exactMatch)

def _to_Generator(self) -> OptionalGenerator:
    """Try to cast the ModelObject to a Generator.

    :return: An Optional Generator.
    """
    return toGenerator(self)
openstudioutilitiesidf.IdfObject.to_Generator = _to_Generator

def _getGenerator(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGenerator:
    """Try to get an object of type Generator referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Generator.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGenerator(self, t_handle)
Model.getGenerator = _getGenerator

def _getGenerators(self) -> GeneratorVector:
    """Get a vector of all objects of type Generator in the model.

    :return: A vector of Generator.
    """
    return getGenerators(self)
Model.getGenerators = _getGenerators

def _getGeneratorByName(self, t_name: str) -> OptionalGenerator:
    """Try to get an object of type Generator that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Generator.
    """
    return getGeneratorByName(self, t_name)
Model.getGeneratorByName = _getGeneratorByName

def _getGeneratorsByName(self, t_name: str, t_exactMatch: bool) -> GeneratorVector:
    """Returns all objects of type Generator named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorsByName(self, t_name, t_exactMatch)
Model.getGeneratorsByName = _getGeneratorsByName

class Inverter(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_Inverter

    def __init__(self, *args):
        _openstudiomodelgenerators.Inverter_swiginit(self, _openstudiomodelgenerators.new_Inverter(*args))

    def electricLoadCenterDistribution(self):
        return _openstudiomodelgenerators.Inverter_electricLoadCenterDistribution(self)

    def thermalZone(self):
        return _openstudiomodelgenerators.Inverter_thermalZone(self)

    def setThermalZone(self, thermalZone):
        return _openstudiomodelgenerators.Inverter_setThermalZone(self, thermalZone)

    def resetThermalZone(self):
        return _openstudiomodelgenerators.Inverter_resetThermalZone(self)

# Register Inverter in _openstudiomodelgenerators:
_openstudiomodelgenerators.Inverter_swigregister(Inverter)

def toInverter(idfObject):
    return _openstudiomodelgenerators.toInverter(idfObject)

def getInverter(t_model, t_handle):
    return _openstudiomodelgenerators.getInverter(t_model, t_handle)

def getInverters(t_model):
    return _openstudiomodelgenerators.getInverters(t_model)

def getInverterByName(t_model, t_name):
    return _openstudiomodelgenerators.getInverterByName(t_model, t_name)

def getInvertersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getInvertersByName(t_model, t_name, t_exactMatch)

def _to_Inverter(self) -> OptionalInverter:
    """Try to cast the ModelObject to a Inverter.

    :return: An Optional Inverter.
    """
    return toInverter(self)
openstudioutilitiesidf.IdfObject.to_Inverter = _to_Inverter

def _getInverter(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalInverter:
    """Try to get an object of type Inverter referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Inverter.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getInverter(self, t_handle)
Model.getInverter = _getInverter

def _getInverters(self) -> InverterVector:
    """Get a vector of all objects of type Inverter in the model.

    :return: A vector of Inverter.
    """
    return getInverters(self)
Model.getInverters = _getInverters

def _getInverterByName(self, t_name: str) -> OptionalInverter:
    """Try to get an object of type Inverter that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Inverter.
    """
    return getInverterByName(self, t_name)
Model.getInverterByName = _getInverterByName

def _getInvertersByName(self, t_name: str, t_exactMatch: bool) -> InverterVector:
    """Returns all objects of type Inverter named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getInvertersByName(self, t_name, t_exactMatch)
Model.getInvertersByName = _getInvertersByName

class ElectricalStorage(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricalStorage

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricalStorage_swiginit(self, _openstudiomodelgenerators.new_ElectricalStorage(*args))

    def electricLoadCenterDistribution(self):
        return _openstudiomodelgenerators.ElectricalStorage_electricLoadCenterDistribution(self)

    def thermalZone(self):
        return _openstudiomodelgenerators.ElectricalStorage_thermalZone(self)

    def setThermalZone(self, thermalZone):
        return _openstudiomodelgenerators.ElectricalStorage_setThermalZone(self, thermalZone)

    def resetThermalZone(self):
        return _openstudiomodelgenerators.ElectricalStorage_resetThermalZone(self)

# Register ElectricalStorage in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricalStorage_swigregister(ElectricalStorage)

def toElectricalStorage(idfObject):
    return _openstudiomodelgenerators.toElectricalStorage(idfObject)

def getElectricalStorage(t_model, t_handle):
    return _openstudiomodelgenerators.getElectricalStorage(t_model, t_handle)

def getElectricalStorages(t_model):
    return _openstudiomodelgenerators.getElectricalStorages(t_model)

def getElectricalStorageByName(t_model, t_name):
    return _openstudiomodelgenerators.getElectricalStorageByName(t_model, t_name)

def getElectricalStoragesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getElectricalStoragesByName(t_model, t_name, t_exactMatch)

def _to_ElectricalStorage(self) -> OptionalElectricalStorage:
    """Try to cast the ModelObject to a ElectricalStorage.

    :return: An Optional ElectricalStorage.
    """
    return toElectricalStorage(self)
openstudioutilitiesidf.IdfObject.to_ElectricalStorage = _to_ElectricalStorage

def _getElectricalStorage(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalElectricalStorage:
    """Try to get an object of type ElectricalStorage referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ElectricalStorage.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getElectricalStorage(self, t_handle)
Model.getElectricalStorage = _getElectricalStorage

def _getElectricalStorages(self) -> ElectricalStorageVector:
    """Get a vector of all objects of type ElectricalStorage in the model.

    :return: A vector of ElectricalStorage.
    """
    return getElectricalStorages(self)
Model.getElectricalStorages = _getElectricalStorages

def _getElectricalStorageByName(self, t_name: str) -> OptionalElectricalStorage:
    """Try to get an object of type ElectricalStorage that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ElectricalStorage.
    """
    return getElectricalStorageByName(self, t_name)
Model.getElectricalStorageByName = _getElectricalStorageByName

def _getElectricalStoragesByName(self, t_name: str, t_exactMatch: bool) -> ElectricalStorageVector:
    """Returns all objects of type ElectricalStorage named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getElectricalStoragesByName(self, t_name, t_exactMatch)
Model.getElectricalStoragesByName = _getElectricalStoragesByName

class AirSupplyConstituent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, constituentName, molarFraction):
        _openstudiomodelgenerators.AirSupplyConstituent_swiginit(self, _openstudiomodelgenerators.new_AirSupplyConstituent(constituentName, molarFraction))

    def constituentName(self):
        return _openstudiomodelgenerators.AirSupplyConstituent_constituentName(self)

    def molarFraction(self):
        return _openstudiomodelgenerators.AirSupplyConstituent_molarFraction(self)

    @staticmethod
    def isValid(constituentName):
        return _openstudiomodelgenerators.AirSupplyConstituent_isValid(constituentName)

    @staticmethod
    def constituentNameValues():
        return _openstudiomodelgenerators.AirSupplyConstituent_constituentNameValues()

    @staticmethod
    def validConstituentNameValues():
        return _openstudiomodelgenerators.AirSupplyConstituent_validConstituentNameValues()

    def __str__(self):
        return _openstudiomodelgenerators.AirSupplyConstituent___str__(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_AirSupplyConstituent

# Register AirSupplyConstituent in _openstudiomodelgenerators:
_openstudiomodelgenerators.AirSupplyConstituent_swigregister(AirSupplyConstituent)
class GeneratorFuelCellAirSupply(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellAirSupply

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellAirSupply_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellAirSupply(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_iddObjectType()

    @staticmethod
    def airSupplyRateCalculationModeValues():
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airSupplyRateCalculationModeValues()

    @staticmethod
    def airIntakeHeatRecoveryModeValues():
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airIntakeHeatRecoveryModeValues()

    @staticmethod
    def airSupplyConstituentModeValues():
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airSupplyConstituentModeValues()

    def addConstituent(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_addConstituent(self, *args)

    def removeConstituent(self, groupIndex):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_removeConstituent(self, groupIndex)

    def removeAllConstituents(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_removeAllConstituents(self)

    def constituents(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_constituents(self)

    def airInletNode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airInletNode(self)

    def blowerPowerCurve(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_blowerPowerCurve(self)

    def blowerHeatLossFactor(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_blowerHeatLossFactor(self)

    def airSupplyRateCalculationMode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airSupplyRateCalculationMode(self)

    def stoichiometricRatio(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_stoichiometricRatio(self)

    def airRateFunctionofElectricPowerCurve(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airRateFunctionofElectricPowerCurve(self)

    def airRateAirTemperatureCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airRateAirTemperatureCoefficient(self)

    def airRateFunctionofFuelRateCurve(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airRateFunctionofFuelRateCurve(self)

    def airIntakeHeatRecoveryMode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airIntakeHeatRecoveryMode(self)

    def airSupplyConstituentMode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_airSupplyConstituentMode(self)

    def numberofUserDefinedConstituents(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_numberofUserDefinedConstituents(self)

    def sumofConstituentsMolarFractions(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_sumofConstituentsMolarFractions(self)

    def fuelCell(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_fuelCell(self)

    def setAirInletNode(self, connection):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setAirInletNode(self, connection)

    def resetAirInletNode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetAirInletNode(self)

    def setBlowerPowerCurve(self, cubicCurves):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setBlowerPowerCurve(self, cubicCurves)

    def resetBlowerPowerCurve(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetBlowerPowerCurve(self)

    def setBlowerHeatLossFactor(self, blowerHeatLossFactor):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setBlowerHeatLossFactor(self, blowerHeatLossFactor)

    def resetBlowerHeatLossFactor(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetBlowerHeatLossFactor(self)

    def setAirSupplyRateCalculationMode(self, airSupplyRateCalculationMode):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setAirSupplyRateCalculationMode(self, airSupplyRateCalculationMode)

    def setStoichiometricRatio(self, stoichiometricRatio):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setStoichiometricRatio(self, stoichiometricRatio)

    def resetStoichiometricRatio(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetStoichiometricRatio(self)

    def setAirRateFunctionofElectricPowerCurve(self, quadraticCurves):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setAirRateFunctionofElectricPowerCurve(self, quadraticCurves)

    def resetAirRateFunctionofElectricPowerCurve(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetAirRateFunctionofElectricPowerCurve(self)

    def setAirRateAirTemperatureCoefficient(self, airRateAirTemperatureCoefficient):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setAirRateAirTemperatureCoefficient(self, airRateAirTemperatureCoefficient)

    def resetAirRateAirTemperatureCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetAirRateAirTemperatureCoefficient(self)

    def setAirRateFunctionofFuelRateCurve(self, quadraticCurves):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setAirRateFunctionofFuelRateCurve(self, quadraticCurves)

    def resetAirRateFunctionofFuelRateCurve(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_resetAirRateFunctionofFuelRateCurve(self)

    def setAirIntakeHeatRecoveryMode(self, airIntakeHeatRecoveryMode):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setAirIntakeHeatRecoveryMode(self, airIntakeHeatRecoveryMode)

    def setAirSupplyConstituentMode(self, airSupplyConstituentMode):
        return _openstudiomodelgenerators.GeneratorFuelCellAirSupply_setAirSupplyConstituentMode(self, airSupplyConstituentMode)

# Register GeneratorFuelCellAirSupply in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellAirSupply_swigregister(GeneratorFuelCellAirSupply)

def toGeneratorFuelCellAirSupply(idfObject):
    return _openstudiomodelgenerators.toGeneratorFuelCellAirSupply(idfObject)

def getGeneratorFuelCellAirSupply(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorFuelCellAirSupply(t_model, t_handle)

def getGeneratorFuelCellAirSupplys(t_model):
    return _openstudiomodelgenerators.getGeneratorFuelCellAirSupplys(t_model)

def getGeneratorFuelCellAirSupplyByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorFuelCellAirSupplyByName(t_model, t_name)

def getGeneratorFuelCellAirSupplysByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorFuelCellAirSupplysByName(t_model, t_name, t_exactMatch)

def _to_GeneratorFuelCellAirSupply(self) -> OptionalGeneratorFuelCellAirSupply:
    """Try to cast the ModelObject to a GeneratorFuelCellAirSupply.

    :return: An Optional GeneratorFuelCellAirSupply.
    """
    return toGeneratorFuelCellAirSupply(self)
openstudioutilitiesidf.IdfObject.to_GeneratorFuelCellAirSupply = _to_GeneratorFuelCellAirSupply

def _getGeneratorFuelCellAirSupply(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorFuelCellAirSupply:
    """Try to get an object of type GeneratorFuelCellAirSupply referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorFuelCellAirSupply.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorFuelCellAirSupply(self, t_handle)
Model.getGeneratorFuelCellAirSupply = _getGeneratorFuelCellAirSupply

def _getGeneratorFuelCellAirSupplys(self) -> GeneratorFuelCellAirSupplyVector:
    """Get a vector of all objects of type GeneratorFuelCellAirSupply in the model.

    :return: A vector of GeneratorFuelCellAirSupply.
    """
    return getGeneratorFuelCellAirSupplys(self)
Model.getGeneratorFuelCellAirSupplys = _getGeneratorFuelCellAirSupplys

def _getGeneratorFuelCellAirSupplyByName(self, t_name: str) -> OptionalGeneratorFuelCellAirSupply:
    """Try to get an object of type GeneratorFuelCellAirSupply that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorFuelCellAirSupply.
    """
    return getGeneratorFuelCellAirSupplyByName(self, t_name)
Model.getGeneratorFuelCellAirSupplyByName = _getGeneratorFuelCellAirSupplyByName

def _getGeneratorFuelCellAirSupplysByName(self, t_name: str, t_exactMatch: bool) -> GeneratorFuelCellAirSupplyVector:
    """Returns all objects of type GeneratorFuelCellAirSupply named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorFuelCellAirSupplysByName(self, t_name, t_exactMatch)
Model.getGeneratorFuelCellAirSupplysByName = _getGeneratorFuelCellAirSupplysByName

class GeneratorFuelCellAuxiliaryHeater(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellAuxiliaryHeater

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellAuxiliaryHeater(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_iddObjectType()

    @staticmethod
    def skinLossDestinationValues():
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_skinLossDestinationValues()

    @staticmethod
    def heatingCapacityUnitsValues():
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_heatingCapacityUnitsValues()

    def excessAirRatio(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_excessAirRatio(self)

    def ancillaryPowerConstantTerm(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_ancillaryPowerConstantTerm(self)

    def ancillaryPowerLinearTerm(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_ancillaryPowerLinearTerm(self)

    def skinLossUFactorTimesAreaValue(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_skinLossUFactorTimesAreaValue(self)

    def skinLossDestination(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_skinLossDestination(self)

    def zonetoReceiveSkinLosses(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_zonetoReceiveSkinLosses(self)

    def heatingCapacityUnits(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_heatingCapacityUnits(self)

    def maximumHeatingCapacityinWatts(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_maximumHeatingCapacityinWatts(self)

    def minimumHeatingCapacityinWatts(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_minimumHeatingCapacityinWatts(self)

    def maximumHeatingCapacityinKmolperSecond(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_maximumHeatingCapacityinKmolperSecond(self)

    def minimumHeatingCapacityinKmolperSecond(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_minimumHeatingCapacityinKmolperSecond(self)

    def fuelCell(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_fuelCell(self)

    def setExcessAirRatio(self, excessAirRatio):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setExcessAirRatio(self, excessAirRatio)

    def resetExcessAirRatio(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetExcessAirRatio(self)

    def setAncillaryPowerConstantTerm(self, ancillaryPowerConstantTerm):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setAncillaryPowerConstantTerm(self, ancillaryPowerConstantTerm)

    def resetAncillaryPowerConstantTerm(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetAncillaryPowerConstantTerm(self)

    def setAncillaryPowerLinearTerm(self, ancillaryPowerLinearTerm):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setAncillaryPowerLinearTerm(self, ancillaryPowerLinearTerm)

    def resetAncillaryPowerLinearTerm(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetAncillaryPowerLinearTerm(self)

    def setSkinLossUFactorTimesAreaValue(self, skinLossUFactorTimesAreaValue):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setSkinLossUFactorTimesAreaValue(self, skinLossUFactorTimesAreaValue)

    def resetSkinLossUFactorTimesAreaValue(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetSkinLossUFactorTimesAreaValue(self)

    def setSkinLossDestination(self, skinLossDestination):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setSkinLossDestination(self, skinLossDestination)

    def resetSkinLossDestination(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetSkinLossDestination(self)

    def setZonetoReceiveSkinLosses(self, zone):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setZonetoReceiveSkinLosses(self, zone)

    def resetZonetoReceiveSkinLosses(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetZonetoReceiveSkinLosses(self)

    def setHeatingCapacityUnits(self, heatingCapacityUnits):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setHeatingCapacityUnits(self, heatingCapacityUnits)

    def resetHeatingCapacityUnits(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetHeatingCapacityUnits(self)

    def setMaximumHeatingCapacityinWatts(self, maximumHeatingCapacityinWatts):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setMaximumHeatingCapacityinWatts(self, maximumHeatingCapacityinWatts)

    def resetMaximumHeatingCapacityinWatts(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetMaximumHeatingCapacityinWatts(self)

    def setMinimumHeatingCapacityinWatts(self, minimumHeatingCapacityinWatts):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setMinimumHeatingCapacityinWatts(self, minimumHeatingCapacityinWatts)

    def resetMinimumHeatingCapacityinWatts(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetMinimumHeatingCapacityinWatts(self)

    def setMaximumHeatingCapacityinKmolperSecond(self, maximumHeatingCapacityinKmolperSecond):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setMaximumHeatingCapacityinKmolperSecond(self, maximumHeatingCapacityinKmolperSecond)

    def resetMaximumHeatingCapacityinKmolperSecond(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetMaximumHeatingCapacityinKmolperSecond(self)

    def setMinimumHeatingCapacityinKmolperSecond(self, minimumHeatingCapacityinKmolperSecond):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_setMinimumHeatingCapacityinKmolperSecond(self, minimumHeatingCapacityinKmolperSecond)

    def resetMinimumHeatingCapacityinKmolperSecond(self):
        return _openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_resetMinimumHeatingCapacityinKmolperSecond(self)

# Register GeneratorFuelCellAuxiliaryHeater in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellAuxiliaryHeater_swigregister(GeneratorFuelCellAuxiliaryHeater)

def toGeneratorFuelCellAuxiliaryHeater(idfObject):
    return _openstudiomodelgenerators.toGeneratorFuelCellAuxiliaryHeater(idfObject)

def getGeneratorFuelCellAuxiliaryHeater(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorFuelCellAuxiliaryHeater(t_model, t_handle)

def getGeneratorFuelCellAuxiliaryHeaters(t_model):
    return _openstudiomodelgenerators.getGeneratorFuelCellAuxiliaryHeaters(t_model)

def getGeneratorFuelCellAuxiliaryHeaterByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorFuelCellAuxiliaryHeaterByName(t_model, t_name)

def getGeneratorFuelCellAuxiliaryHeatersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorFuelCellAuxiliaryHeatersByName(t_model, t_name, t_exactMatch)

def _to_GeneratorFuelCellAuxiliaryHeater(self) -> OptionalGeneratorFuelCellAuxiliaryHeater:
    """Try to cast the ModelObject to a GeneratorFuelCellAuxiliaryHeater.

    :return: An Optional GeneratorFuelCellAuxiliaryHeater.
    """
    return toGeneratorFuelCellAuxiliaryHeater(self)
openstudioutilitiesidf.IdfObject.to_GeneratorFuelCellAuxiliaryHeater = _to_GeneratorFuelCellAuxiliaryHeater

def _getGeneratorFuelCellAuxiliaryHeater(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorFuelCellAuxiliaryHeater:
    """Try to get an object of type GeneratorFuelCellAuxiliaryHeater referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorFuelCellAuxiliaryHeater.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorFuelCellAuxiliaryHeater(self, t_handle)
Model.getGeneratorFuelCellAuxiliaryHeater = _getGeneratorFuelCellAuxiliaryHeater

def _getGeneratorFuelCellAuxiliaryHeaters(self) -> GeneratorFuelCellAuxiliaryHeaterVector:
    """Get a vector of all objects of type GeneratorFuelCellAuxiliaryHeater in the model.

    :return: A vector of GeneratorFuelCellAuxiliaryHeater.
    """
    return getGeneratorFuelCellAuxiliaryHeaters(self)
Model.getGeneratorFuelCellAuxiliaryHeaters = _getGeneratorFuelCellAuxiliaryHeaters

def _getGeneratorFuelCellAuxiliaryHeaterByName(self, t_name: str) -> OptionalGeneratorFuelCellAuxiliaryHeater:
    """Try to get an object of type GeneratorFuelCellAuxiliaryHeater that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorFuelCellAuxiliaryHeater.
    """
    return getGeneratorFuelCellAuxiliaryHeaterByName(self, t_name)
Model.getGeneratorFuelCellAuxiliaryHeaterByName = _getGeneratorFuelCellAuxiliaryHeaterByName

def _getGeneratorFuelCellAuxiliaryHeatersByName(self, t_name: str, t_exactMatch: bool) -> GeneratorFuelCellAuxiliaryHeaterVector:
    """Returns all objects of type GeneratorFuelCellAuxiliaryHeater named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorFuelCellAuxiliaryHeatersByName(self, t_name, t_exactMatch)
Model.getGeneratorFuelCellAuxiliaryHeatersByName = _getGeneratorFuelCellAuxiliaryHeatersByName

class GeneratorFuelCellElectricalStorage(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellElectricalStorage

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellElectricalStorage(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_iddObjectType()

    @staticmethod
    def choiceofModelValues():
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_choiceofModelValues()

    def choiceofModel(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_choiceofModel(self)

    def nominalChargingEnergeticEfficiency(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_nominalChargingEnergeticEfficiency(self)

    def nominalDischargingEnergeticEfficiency(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_nominalDischargingEnergeticEfficiency(self)

    def simpleMaximumCapacity(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_simpleMaximumCapacity(self)

    def simpleMaximumPowerDraw(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_simpleMaximumPowerDraw(self)

    def simpleMaximumPowerStore(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_simpleMaximumPowerStore(self)

    def initialChargeState(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_initialChargeState(self)

    def fuelCell(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_fuelCell(self)

    def setChoiceofModel(self, choiceofModel):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_setChoiceofModel(self, choiceofModel)

    def resetChoiceofModel(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_resetChoiceofModel(self)

    def setNominalChargingEnergeticEfficiency(self, nominalChargingEnergeticEfficiency):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_setNominalChargingEnergeticEfficiency(self, nominalChargingEnergeticEfficiency)

    def resetNominalChargingEnergeticEfficiency(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_resetNominalChargingEnergeticEfficiency(self)

    def setNominalDischargingEnergeticEfficiency(self, nominalDischargingEnergeticEfficiency):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_setNominalDischargingEnergeticEfficiency(self, nominalDischargingEnergeticEfficiency)

    def resetNominalDischargingEnergeticEfficiency(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_resetNominalDischargingEnergeticEfficiency(self)

    def setSimpleMaximumCapacity(self, simpleMaximumCapacity):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_setSimpleMaximumCapacity(self, simpleMaximumCapacity)

    def resetSimpleMaximumCapacity(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_resetSimpleMaximumCapacity(self)

    def setSimpleMaximumPowerDraw(self, simpleMaximumPowerDraw):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_setSimpleMaximumPowerDraw(self, simpleMaximumPowerDraw)

    def resetSimpleMaximumPowerDraw(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_resetSimpleMaximumPowerDraw(self)

    def setSimpleMaximumPowerStore(self, simpleMaximumPowerStore):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_setSimpleMaximumPowerStore(self, simpleMaximumPowerStore)

    def resetSimpleMaximumPowerStore(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_resetSimpleMaximumPowerStore(self)

    def setInitialChargeState(self, initialChargeState):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_setInitialChargeState(self, initialChargeState)

    def resetInitialChargeState(self):
        return _openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_resetInitialChargeState(self)

# Register GeneratorFuelCellElectricalStorage in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellElectricalStorage_swigregister(GeneratorFuelCellElectricalStorage)

def toGeneratorFuelCellElectricalStorage(idfObject):
    return _openstudiomodelgenerators.toGeneratorFuelCellElectricalStorage(idfObject)

def getGeneratorFuelCellElectricalStorage(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorFuelCellElectricalStorage(t_model, t_handle)

def getGeneratorFuelCellElectricalStorages(t_model):
    return _openstudiomodelgenerators.getGeneratorFuelCellElectricalStorages(t_model)

def getGeneratorFuelCellElectricalStorageByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorFuelCellElectricalStorageByName(t_model, t_name)

def getGeneratorFuelCellElectricalStoragesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorFuelCellElectricalStoragesByName(t_model, t_name, t_exactMatch)

def _to_GeneratorFuelCellElectricalStorage(self) -> OptionalGeneratorFuelCellElectricalStorage:
    """Try to cast the ModelObject to a GeneratorFuelCellElectricalStorage.

    :return: An Optional GeneratorFuelCellElectricalStorage.
    """
    return toGeneratorFuelCellElectricalStorage(self)
openstudioutilitiesidf.IdfObject.to_GeneratorFuelCellElectricalStorage = _to_GeneratorFuelCellElectricalStorage

def _getGeneratorFuelCellElectricalStorage(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorFuelCellElectricalStorage:
    """Try to get an object of type GeneratorFuelCellElectricalStorage referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorFuelCellElectricalStorage.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorFuelCellElectricalStorage(self, t_handle)
Model.getGeneratorFuelCellElectricalStorage = _getGeneratorFuelCellElectricalStorage

def _getGeneratorFuelCellElectricalStorages(self) -> GeneratorFuelCellElectricalStorageVector:
    """Get a vector of all objects of type GeneratorFuelCellElectricalStorage in the model.

    :return: A vector of GeneratorFuelCellElectricalStorage.
    """
    return getGeneratorFuelCellElectricalStorages(self)
Model.getGeneratorFuelCellElectricalStorages = _getGeneratorFuelCellElectricalStorages

def _getGeneratorFuelCellElectricalStorageByName(self, t_name: str) -> OptionalGeneratorFuelCellElectricalStorage:
    """Try to get an object of type GeneratorFuelCellElectricalStorage that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorFuelCellElectricalStorage.
    """
    return getGeneratorFuelCellElectricalStorageByName(self, t_name)
Model.getGeneratorFuelCellElectricalStorageByName = _getGeneratorFuelCellElectricalStorageByName

def _getGeneratorFuelCellElectricalStoragesByName(self, t_name: str, t_exactMatch: bool) -> GeneratorFuelCellElectricalStorageVector:
    """Returns all objects of type GeneratorFuelCellElectricalStorage named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorFuelCellElectricalStoragesByName(self, t_name, t_exactMatch)
Model.getGeneratorFuelCellElectricalStoragesByName = _getGeneratorFuelCellElectricalStoragesByName

class GeneratorFuelCellExhaustGasToWaterHeatExchanger(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellExhaustGasToWaterHeatExchanger

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellExhaustGasToWaterHeatExchanger(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_iddObjectType()

    @staticmethod
    def heatExchangerCalculationMethodValues():
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_heatExchangerCalculationMethodValues()

    def heatRecoveryWaterMaximumFlowRate(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_heatRecoveryWaterMaximumFlowRate(self)

    def exhaustOutletAirNode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_exhaustOutletAirNode(self)

    def heatExchangerCalculationMethod(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_heatExchangerCalculationMethod(self)

    def method1HeatExchangerEffectiveness(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method1HeatExchangerEffectiveness(self)

    def method2Parameterhxs0(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method2Parameterhxs0(self)

    def method2Parameterhxs1(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method2Parameterhxs1(self)

    def method2Parameterhxs2(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method2Parameterhxs2(self)

    def method2Parameterhxs3(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method2Parameterhxs3(self)

    def method2Parameterhxs4(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method2Parameterhxs4(self)

    def method3h0GasCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3h0GasCoefficient(self)

    def method3NdotGasRefCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3NdotGasRefCoefficient(self)

    def method3nCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3nCoefficient(self)

    def method3GasArea(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3GasArea(self)

    def method3h0WaterCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3h0WaterCoefficient(self)

    def method3NdotWaterrefCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3NdotWaterrefCoefficient(self)

    def method3mCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3mCoefficient(self)

    def method3WaterArea(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3WaterArea(self)

    def method3FAdjustmentFactor(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method3FAdjustmentFactor(self)

    def method4hxl1Coefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method4hxl1Coefficient(self)

    def method4hxl2Coefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method4hxl2Coefficient(self)

    def method4CondensationThreshold(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_method4CondensationThreshold(self)

    def fuelCell(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_fuelCell(self)

    def setHeatRecoveryWaterMaximumFlowRate(self, heatRecoveryWaterMaximumFlowRate):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setHeatRecoveryWaterMaximumFlowRate(self, heatRecoveryWaterMaximumFlowRate)

    def resetHeatRecoveryWaterMaximumFlowRate(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetHeatRecoveryWaterMaximumFlowRate(self)

    def setExhaustOutletAirNode(self, node):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setExhaustOutletAirNode(self, node)

    def resetExhaustOutletAirNode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetExhaustOutletAirNode(self)

    def setHeatExchangerCalculationMethod(self, heatExchangerCalculationMethod):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setHeatExchangerCalculationMethod(self, heatExchangerCalculationMethod)

    def resetHeatExchangerCalculationMethod(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetHeatExchangerCalculationMethod(self)

    def setMethod1HeatExchangerEffectiveness(self, method1HeatExchangerEffectiveness):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod1HeatExchangerEffectiveness(self, method1HeatExchangerEffectiveness)

    def resetMethod1HeatExchangerEffectiveness(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod1HeatExchangerEffectiveness(self)

    def setMethod2Parameterhxs0(self, method2Parameterhxs0):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod2Parameterhxs0(self, method2Parameterhxs0)

    def resetMethod2Parameterhxs0(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod2Parameterhxs0(self)

    def setMethod2Parameterhxs1(self, method2Parameterhxs1):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod2Parameterhxs1(self, method2Parameterhxs1)

    def resetMethod2Parameterhxs1(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod2Parameterhxs1(self)

    def setMethod2Parameterhxs2(self, method2Parameterhxs2):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod2Parameterhxs2(self, method2Parameterhxs2)

    def resetMethod2Parameterhxs2(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod2Parameterhxs2(self)

    def setMethod2Parameterhxs3(self, method2Parameterhxs3):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod2Parameterhxs3(self, method2Parameterhxs3)

    def resetMethod2Parameterhxs3(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod2Parameterhxs3(self)

    def setMethod2Parameterhxs4(self, method2Parameterhxs4):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod2Parameterhxs4(self, method2Parameterhxs4)

    def resetMethod2Parameterhxs4(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod2Parameterhxs4(self)

    def setMethod3h0GasCoefficient(self, method3h0GasCoefficient):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3h0GasCoefficient(self, method3h0GasCoefficient)

    def resetMethod3h0GasCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3h0GasCoefficient(self)

    def setMethod3NdotGasRefCoefficient(self, method3NdotGasRefCoefficient):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3NdotGasRefCoefficient(self, method3NdotGasRefCoefficient)

    def resetMethod3NdotGasRefCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3NdotGasRefCoefficient(self)

    def setMethod3nCoefficient(self, method3nCoefficient):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3nCoefficient(self, method3nCoefficient)

    def resetMethod3nCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3nCoefficient(self)

    def setMethod3GasArea(self, method3GasArea):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3GasArea(self, method3GasArea)

    def resetMethod3GasArea(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3GasArea(self)

    def setMethod3h0WaterCoefficient(self, method3h0WaterCoefficient):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3h0WaterCoefficient(self, method3h0WaterCoefficient)

    def resetMethod3h0WaterCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3h0WaterCoefficient(self)

    def setMethod3NdotWaterrefCoefficient(self, method3NdotWaterrefCoefficient):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3NdotWaterrefCoefficient(self, method3NdotWaterrefCoefficient)

    def resetMethod3NdotWaterrefCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3NdotWaterrefCoefficient(self)

    def setMethod3mCoefficient(self, method3mCoefficient):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3mCoefficient(self, method3mCoefficient)

    def resetMethod3mCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3mCoefficient(self)

    def setMethod3WaterArea(self, method3WaterArea):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3WaterArea(self, method3WaterArea)

    def resetMethod3WaterArea(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3WaterArea(self)

    def setMethod3FAdjustmentFactor(self, method3FAdjustmentFactor):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod3FAdjustmentFactor(self, method3FAdjustmentFactor)

    def resetMethod3FAdjustmentFactor(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod3FAdjustmentFactor(self)

    def setMethod4hxl1Coefficient(self, method4hxl1Coefficient):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod4hxl1Coefficient(self, method4hxl1Coefficient)

    def resetMethod4hxl1Coefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod4hxl1Coefficient(self)

    def setMethod4hxl2Coefficient(self, method4hxl2Coefficient):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod4hxl2Coefficient(self, method4hxl2Coefficient)

    def resetMethod4hxl2Coefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod4hxl2Coefficient(self)

    def setMethod4CondensationThreshold(self, method4CondensationThreshold):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_setMethod4CondensationThreshold(self, method4CondensationThreshold)

    def resetMethod4CondensationThreshold(self):
        return _openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_resetMethod4CondensationThreshold(self)

# Register GeneratorFuelCellExhaustGasToWaterHeatExchanger in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellExhaustGasToWaterHeatExchanger_swigregister(GeneratorFuelCellExhaustGasToWaterHeatExchanger)

def toGeneratorFuelCellExhaustGasToWaterHeatExchanger(idfObject):
    return _openstudiomodelgenerators.toGeneratorFuelCellExhaustGasToWaterHeatExchanger(idfObject)

def getGeneratorFuelCellExhaustGasToWaterHeatExchanger(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorFuelCellExhaustGasToWaterHeatExchanger(t_model, t_handle)

def getGeneratorFuelCellExhaustGasToWaterHeatExchangers(t_model):
    return _openstudiomodelgenerators.getGeneratorFuelCellExhaustGasToWaterHeatExchangers(t_model)

def getGeneratorFuelCellExhaustGasToWaterHeatExchangerByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorFuelCellExhaustGasToWaterHeatExchangerByName(t_model, t_name)

def getGeneratorFuelCellExhaustGasToWaterHeatExchangersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorFuelCellExhaustGasToWaterHeatExchangersByName(t_model, t_name, t_exactMatch)

def _to_GeneratorFuelCellExhaustGasToWaterHeatExchanger(self) -> OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger:
    """Try to cast the ModelObject to a GeneratorFuelCellExhaustGasToWaterHeatExchanger.

    :return: An Optional GeneratorFuelCellExhaustGasToWaterHeatExchanger.
    """
    return toGeneratorFuelCellExhaustGasToWaterHeatExchanger(self)
openstudioutilitiesidf.IdfObject.to_GeneratorFuelCellExhaustGasToWaterHeatExchanger = _to_GeneratorFuelCellExhaustGasToWaterHeatExchanger

def _getGeneratorFuelCellExhaustGasToWaterHeatExchanger(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger:
    """Try to get an object of type GeneratorFuelCellExhaustGasToWaterHeatExchanger referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorFuelCellExhaustGasToWaterHeatExchanger.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorFuelCellExhaustGasToWaterHeatExchanger(self, t_handle)
Model.getGeneratorFuelCellExhaustGasToWaterHeatExchanger = _getGeneratorFuelCellExhaustGasToWaterHeatExchanger

def _getGeneratorFuelCellExhaustGasToWaterHeatExchangers(self) -> GeneratorFuelCellExhaustGasToWaterHeatExchangerVector:
    """Get a vector of all objects of type GeneratorFuelCellExhaustGasToWaterHeatExchanger in the model.

    :return: A vector of GeneratorFuelCellExhaustGasToWaterHeatExchanger.
    """
    return getGeneratorFuelCellExhaustGasToWaterHeatExchangers(self)
Model.getGeneratorFuelCellExhaustGasToWaterHeatExchangers = _getGeneratorFuelCellExhaustGasToWaterHeatExchangers

def _getGeneratorFuelCellExhaustGasToWaterHeatExchangerByName(self, t_name: str) -> OptionalGeneratorFuelCellExhaustGasToWaterHeatExchanger:
    """Try to get an object of type GeneratorFuelCellExhaustGasToWaterHeatExchanger that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorFuelCellExhaustGasToWaterHeatExchanger.
    """
    return getGeneratorFuelCellExhaustGasToWaterHeatExchangerByName(self, t_name)
Model.getGeneratorFuelCellExhaustGasToWaterHeatExchangerByName = _getGeneratorFuelCellExhaustGasToWaterHeatExchangerByName

def _getGeneratorFuelCellExhaustGasToWaterHeatExchangersByName(self, t_name: str, t_exactMatch: bool) -> GeneratorFuelCellExhaustGasToWaterHeatExchangerVector:
    """Returns all objects of type GeneratorFuelCellExhaustGasToWaterHeatExchanger named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorFuelCellExhaustGasToWaterHeatExchangersByName(self, t_name, t_exactMatch)
Model.getGeneratorFuelCellExhaustGasToWaterHeatExchangersByName = _getGeneratorFuelCellExhaustGasToWaterHeatExchangersByName

class GeneratorFuelCellInverter(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellInverter

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellInverter_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellInverter(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorFuelCellInverter_iddObjectType()

    @staticmethod
    def inverterEfficiencyCalculationModeValues():
        return _openstudiomodelgenerators.GeneratorFuelCellInverter_inverterEfficiencyCalculationModeValues()

    def inverterEfficiencyCalculationMode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverter_inverterEfficiencyCalculationMode(self)

    def inverterEfficiency(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverter_inverterEfficiency(self)

    def efficiencyFunctionofDCPowerCurve(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverter_efficiencyFunctionofDCPowerCurve(self)

    def fuelCell(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverter_fuelCell(self)

    def setInverterEfficiencyCalculationMode(self, inverterEfficiencyCalculationMode):
        return _openstudiomodelgenerators.GeneratorFuelCellInverter_setInverterEfficiencyCalculationMode(self, inverterEfficiencyCalculationMode)

    def resetInverterEfficiencyCalculationMode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverter_resetInverterEfficiencyCalculationMode(self)

    def setInverterEfficiency(self, inverterEfficiency):
        return _openstudiomodelgenerators.GeneratorFuelCellInverter_setInverterEfficiency(self, inverterEfficiency)

    def resetInverterEfficiency(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverter_resetInverterEfficiency(self)

    def setEfficiencyFunctionofDCPowerCurve(self, quadraticCurves):
        return _openstudiomodelgenerators.GeneratorFuelCellInverter_setEfficiencyFunctionofDCPowerCurve(self, quadraticCurves)

    def resetEfficiencyFunctionofDCPowerCurve(self):
        return _openstudiomodelgenerators.GeneratorFuelCellInverter_resetEfficiencyFunctionofDCPowerCurve(self)

# Register GeneratorFuelCellInverter in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellInverter_swigregister(GeneratorFuelCellInverter)

def toGeneratorFuelCellInverter(idfObject):
    return _openstudiomodelgenerators.toGeneratorFuelCellInverter(idfObject)

def getGeneratorFuelCellInverter(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorFuelCellInverter(t_model, t_handle)

def getGeneratorFuelCellInverters(t_model):
    return _openstudiomodelgenerators.getGeneratorFuelCellInverters(t_model)

def getGeneratorFuelCellInverterByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorFuelCellInverterByName(t_model, t_name)

def getGeneratorFuelCellInvertersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorFuelCellInvertersByName(t_model, t_name, t_exactMatch)

def _to_GeneratorFuelCellInverter(self) -> OptionalGeneratorFuelCellInverter:
    """Try to cast the ModelObject to a GeneratorFuelCellInverter.

    :return: An Optional GeneratorFuelCellInverter.
    """
    return toGeneratorFuelCellInverter(self)
openstudioutilitiesidf.IdfObject.to_GeneratorFuelCellInverter = _to_GeneratorFuelCellInverter

def _getGeneratorFuelCellInverter(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorFuelCellInverter:
    """Try to get an object of type GeneratorFuelCellInverter referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorFuelCellInverter.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorFuelCellInverter(self, t_handle)
Model.getGeneratorFuelCellInverter = _getGeneratorFuelCellInverter

def _getGeneratorFuelCellInverters(self) -> GeneratorFuelCellInverterVector:
    """Get a vector of all objects of type GeneratorFuelCellInverter in the model.

    :return: A vector of GeneratorFuelCellInverter.
    """
    return getGeneratorFuelCellInverters(self)
Model.getGeneratorFuelCellInverters = _getGeneratorFuelCellInverters

def _getGeneratorFuelCellInverterByName(self, t_name: str) -> OptionalGeneratorFuelCellInverter:
    """Try to get an object of type GeneratorFuelCellInverter that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorFuelCellInverter.
    """
    return getGeneratorFuelCellInverterByName(self, t_name)
Model.getGeneratorFuelCellInverterByName = _getGeneratorFuelCellInverterByName

def _getGeneratorFuelCellInvertersByName(self, t_name: str, t_exactMatch: bool) -> GeneratorFuelCellInverterVector:
    """Returns all objects of type GeneratorFuelCellInverter named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorFuelCellInvertersByName(self, t_name, t_exactMatch)
Model.getGeneratorFuelCellInvertersByName = _getGeneratorFuelCellInvertersByName

class GeneratorFuelCellPowerModule(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellPowerModule

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellPowerModule_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellPowerModule(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_iddObjectType()

    @staticmethod
    def efficiencyCurveModeValues():
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_efficiencyCurveModeValues()

    @staticmethod
    def skinLossCalculationModeValues():
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_skinLossCalculationModeValues()

    def efficiencyCurveMode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_efficiencyCurveMode(self)

    def efficiencyCurve(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_efficiencyCurve(self)

    def nominalEfficiency(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_nominalEfficiency(self)

    def nominalElectricalPower(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_nominalElectricalPower(self)

    def numberofStopsatStartofSimulation(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_numberofStopsatStartofSimulation(self)

    def cyclingPerformanceDegradationCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_cyclingPerformanceDegradationCoefficient(self)

    def numberofRunHoursatBeginningofSimulation(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_numberofRunHoursatBeginningofSimulation(self)

    def accumulatedRunTimeDegradationCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_accumulatedRunTimeDegradationCoefficient(self)

    def runTimeDegradationInitiationTimeThreshold(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_runTimeDegradationInitiationTimeThreshold(self)

    def powerUpTransientLimit(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_powerUpTransientLimit(self)

    def powerDownTransientLimit(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_powerDownTransientLimit(self)

    def startUpTime(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_startUpTime(self)

    def startUpFuel(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_startUpFuel(self)

    def startUpElectricityConsumption(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_startUpElectricityConsumption(self)

    def startUpElectricityProduced(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_startUpElectricityProduced(self)

    def shutDownTime(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_shutDownTime(self)

    def shutDownFuel(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_shutDownFuel(self)

    def shutDownElectricityConsumption(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_shutDownElectricityConsumption(self)

    def ancillaryElectricityConstantTerm(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_ancillaryElectricityConstantTerm(self)

    def ancillaryElectricityLinearTerm(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_ancillaryElectricityLinearTerm(self)

    def skinLossCalculationMode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_skinLossCalculationMode(self)

    def zone(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_zone(self)

    def skinLossRadiativeFraction(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_skinLossRadiativeFraction(self)

    def constantSkinLossRate(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_constantSkinLossRate(self)

    def skinLossUFactorTimesAreaTerm(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_skinLossUFactorTimesAreaTerm(self)

    def skinLossQuadraticCurve(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_skinLossQuadraticCurve(self)

    def dilutionAirFlowRate(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_dilutionAirFlowRate(self)

    def stackHeatlosstoDilutionAir(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_stackHeatlosstoDilutionAir(self)

    def dilutionInletAirNode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_dilutionInletAirNode(self)

    def dilutionOutletAirNode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_dilutionOutletAirNode(self)

    def minimumOperatingPoint(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_minimumOperatingPoint(self)

    def maximumOperatingPoint(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_maximumOperatingPoint(self)

    def fuelCell(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_fuelCell(self)

    def setEfficiencyCurveMode(self, efficiencyCurveMode):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setEfficiencyCurveMode(self, efficiencyCurveMode)

    def resetEfficiencyCurveMode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetEfficiencyCurveMode(self)

    def setEfficiencyCurve(self, quadraticCurve):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setEfficiencyCurve(self, quadraticCurve)

    def setNominalEfficiency(self, nominalEfficiency):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setNominalEfficiency(self, nominalEfficiency)

    def resetNominalEfficiency(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetNominalEfficiency(self)

    def setNominalElectricalPower(self, nominalElectricalPower):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setNominalElectricalPower(self, nominalElectricalPower)

    def resetNominalElectricalPower(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetNominalElectricalPower(self)

    def setNumberofStopsatStartofSimulation(self, numberofStopsatStartofSimulation):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setNumberofStopsatStartofSimulation(self, numberofStopsatStartofSimulation)

    def resetNumberofStopsatStartofSimulation(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetNumberofStopsatStartofSimulation(self)

    def setCyclingPerformanceDegradationCoefficient(self, cyclingPerformanceDegradationCoefficient):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setCyclingPerformanceDegradationCoefficient(self, cyclingPerformanceDegradationCoefficient)

    def resetCyclingPerformanceDegradationCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetCyclingPerformanceDegradationCoefficient(self)

    def setNumberofRunHoursatBeginningofSimulation(self, numberofRunHoursatBeginningofSimulation):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setNumberofRunHoursatBeginningofSimulation(self, numberofRunHoursatBeginningofSimulation)

    def resetNumberofRunHoursatBeginningofSimulation(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetNumberofRunHoursatBeginningofSimulation(self)

    def setAccumulatedRunTimeDegradationCoefficient(self, accumulatedRunTimeDegradationCoefficient):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setAccumulatedRunTimeDegradationCoefficient(self, accumulatedRunTimeDegradationCoefficient)

    def resetAccumulatedRunTimeDegradationCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetAccumulatedRunTimeDegradationCoefficient(self)

    def setRunTimeDegradationInitiationTimeThreshold(self, runTimeDegradationInitiationTimeThreshold):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setRunTimeDegradationInitiationTimeThreshold(self, runTimeDegradationInitiationTimeThreshold)

    def resetRunTimeDegradationInitiationTimeThreshold(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetRunTimeDegradationInitiationTimeThreshold(self)

    def setPowerUpTransientLimit(self, powerUpTransientLimit):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setPowerUpTransientLimit(self, powerUpTransientLimit)

    def resetPowerUpTransientLimit(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetPowerUpTransientLimit(self)

    def setPowerDownTransientLimit(self, powerDownTransientLimit):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setPowerDownTransientLimit(self, powerDownTransientLimit)

    def resetPowerDownTransientLimit(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetPowerDownTransientLimit(self)

    def setStartUpTime(self, startUpTime):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setStartUpTime(self, startUpTime)

    def resetStartUpTime(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetStartUpTime(self)

    def setStartUpFuel(self, startUpFuel):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setStartUpFuel(self, startUpFuel)

    def resetStartUpFuel(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetStartUpFuel(self)

    def setStartUpElectricityConsumption(self, startUpElectricityConsumption):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setStartUpElectricityConsumption(self, startUpElectricityConsumption)

    def resetStartUpElectricityConsumption(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetStartUpElectricityConsumption(self)

    def setStartUpElectricityProduced(self, startUpElectricityProduced):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setStartUpElectricityProduced(self, startUpElectricityProduced)

    def resetStartUpElectricityProduced(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetStartUpElectricityProduced(self)

    def setShutDownTime(self, shutDownTime):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setShutDownTime(self, shutDownTime)

    def resetShutDownTime(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetShutDownTime(self)

    def setShutDownFuel(self, shutDownFuel):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setShutDownFuel(self, shutDownFuel)

    def resetShutDownFuel(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetShutDownFuel(self)

    def setShutDownElectricityConsumption(self, shutDownElectricityConsumption):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setShutDownElectricityConsumption(self, shutDownElectricityConsumption)

    def resetShutDownElectricityConsumption(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetShutDownElectricityConsumption(self)

    def setAncillaryElectricityConstantTerm(self, ancillaryElectricityConstantTerm):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setAncillaryElectricityConstantTerm(self, ancillaryElectricityConstantTerm)

    def resetAncillaryElectricityConstantTerm(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetAncillaryElectricityConstantTerm(self)

    def setAncillaryElectricityLinearTerm(self, ancillaryElectricityLinearTerm):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setAncillaryElectricityLinearTerm(self, ancillaryElectricityLinearTerm)

    def resetAncillaryElectricityLinearTerm(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetAncillaryElectricityLinearTerm(self)

    def setSkinLossCalculationMode(self, skinLossCalculationMode):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setSkinLossCalculationMode(self, skinLossCalculationMode)

    def resetSkinLossCalculationMode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetSkinLossCalculationMode(self)

    def setZone(self, zone):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setZone(self, zone)

    def resetZone(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetZone(self)

    def setSkinLossRadiativeFraction(self, skinLossRadiativeFraction):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setSkinLossRadiativeFraction(self, skinLossRadiativeFraction)

    def resetSkinLossRadiativeFraction(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetSkinLossRadiativeFraction(self)

    def setConstantSkinLossRate(self, constantSkinLossRate):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setConstantSkinLossRate(self, constantSkinLossRate)

    def resetConstantSkinLossRate(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetConstantSkinLossRate(self)

    def setSkinLossUFactorTimesAreaTerm(self, skinLossUFactorTimesAreaTerm):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setSkinLossUFactorTimesAreaTerm(self, skinLossUFactorTimesAreaTerm)

    def resetSkinLossUFactorTimesAreaTerm(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetSkinLossUFactorTimesAreaTerm(self)

    def setSkinLossQuadraticCurve(self, quadraticCurves):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setSkinLossQuadraticCurve(self, quadraticCurves)

    def resetSkinLossQuadraticCurve(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetSkinLossQuadraticCurve(self)

    def setDilutionAirFlowRate(self, dilutionAirFlowRate):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setDilutionAirFlowRate(self, dilutionAirFlowRate)

    def resetDilutionAirFlowRate(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetDilutionAirFlowRate(self)

    def setStackHeatlosstoDilutionAir(self, stackHeatlosstoDilutionAir):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setStackHeatlosstoDilutionAir(self, stackHeatlosstoDilutionAir)

    def resetStackHeatlosstoDilutionAir(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetStackHeatlosstoDilutionAir(self)

    def setDilutionInletAirNode(self, connection):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setDilutionInletAirNode(self, connection)

    def resetDilutionInletAirNode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetDilutionInletAirNode(self)

    def setDilutionOutletAirNode(self, connection):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setDilutionOutletAirNode(self, connection)

    def resetDilutionOutletAirNode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetDilutionOutletAirNode(self)

    def setMinimumOperatingPoint(self, minimumOperatingPoint):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setMinimumOperatingPoint(self, minimumOperatingPoint)

    def resetMinimumOperatingPoint(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetMinimumOperatingPoint(self)

    def setMaximumOperatingPoint(self, maximumOperatingPoint):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_setMaximumOperatingPoint(self, maximumOperatingPoint)

    def resetMaximumOperatingPoint(self):
        return _openstudiomodelgenerators.GeneratorFuelCellPowerModule_resetMaximumOperatingPoint(self)

# Register GeneratorFuelCellPowerModule in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellPowerModule_swigregister(GeneratorFuelCellPowerModule)

def toGeneratorFuelCellPowerModule(idfObject):
    return _openstudiomodelgenerators.toGeneratorFuelCellPowerModule(idfObject)

def getGeneratorFuelCellPowerModule(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorFuelCellPowerModule(t_model, t_handle)

def getGeneratorFuelCellPowerModules(t_model):
    return _openstudiomodelgenerators.getGeneratorFuelCellPowerModules(t_model)

def getGeneratorFuelCellPowerModuleByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorFuelCellPowerModuleByName(t_model, t_name)

def getGeneratorFuelCellPowerModulesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorFuelCellPowerModulesByName(t_model, t_name, t_exactMatch)

def _to_GeneratorFuelCellPowerModule(self) -> OptionalGeneratorFuelCellPowerModule:
    """Try to cast the ModelObject to a GeneratorFuelCellPowerModule.

    :return: An Optional GeneratorFuelCellPowerModule.
    """
    return toGeneratorFuelCellPowerModule(self)
openstudioutilitiesidf.IdfObject.to_GeneratorFuelCellPowerModule = _to_GeneratorFuelCellPowerModule

def _getGeneratorFuelCellPowerModule(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorFuelCellPowerModule:
    """Try to get an object of type GeneratorFuelCellPowerModule referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorFuelCellPowerModule.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorFuelCellPowerModule(self, t_handle)
Model.getGeneratorFuelCellPowerModule = _getGeneratorFuelCellPowerModule

def _getGeneratorFuelCellPowerModules(self) -> GeneratorFuelCellPowerModuleVector:
    """Get a vector of all objects of type GeneratorFuelCellPowerModule in the model.

    :return: A vector of GeneratorFuelCellPowerModule.
    """
    return getGeneratorFuelCellPowerModules(self)
Model.getGeneratorFuelCellPowerModules = _getGeneratorFuelCellPowerModules

def _getGeneratorFuelCellPowerModuleByName(self, t_name: str) -> OptionalGeneratorFuelCellPowerModule:
    """Try to get an object of type GeneratorFuelCellPowerModule that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorFuelCellPowerModule.
    """
    return getGeneratorFuelCellPowerModuleByName(self, t_name)
Model.getGeneratorFuelCellPowerModuleByName = _getGeneratorFuelCellPowerModuleByName

def _getGeneratorFuelCellPowerModulesByName(self, t_name: str, t_exactMatch: bool) -> GeneratorFuelCellPowerModuleVector:
    """Returns all objects of type GeneratorFuelCellPowerModule named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorFuelCellPowerModulesByName(self, t_name, t_exactMatch)
Model.getGeneratorFuelCellPowerModulesByName = _getGeneratorFuelCellPowerModulesByName

class GeneratorFuelCellStackCooler(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellStackCooler

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellStackCooler_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellStackCooler(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_iddObjectType()

    def nominalStackTemperature(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_nominalStackTemperature(self)

    def actualStackTemperature(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_actualStackTemperature(self)

    def coefficientr0(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_coefficientr0(self)

    def coefficientr1(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_coefficientr1(self)

    def coefficientr2(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_coefficientr2(self)

    def coefficientr3(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_coefficientr3(self)

    def stackCoolantFlowRate(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCoolantFlowRate(self)

    def stackCoolerUFactorTimesAreaValue(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCoolerUFactorTimesAreaValue(self)

    def fscogenAdjustmentFactor(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_fscogenAdjustmentFactor(self)

    def stackCogenerationExchangerArea(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCogenerationExchangerArea(self)

    def stackCogenerationExchangerNominalFlowRate(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCogenerationExchangerNominalFlowRate(self)

    def stackCogenerationExchangerNominalHeatTransferCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCogenerationExchangerNominalHeatTransferCoefficient(self)

    def stackCogenerationExchangerNominalHeatTransferCoefficientExponent(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCogenerationExchangerNominalHeatTransferCoefficientExponent(self)

    def stackCoolerPumpPower(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCoolerPumpPower(self)

    def stackCoolerPumpHeatLossFraction(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackCoolerPumpHeatLossFraction(self)

    def stackAirCoolerFanCoefficientf0(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackAirCoolerFanCoefficientf0(self)

    def stackAirCoolerFanCoefficientf1(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackAirCoolerFanCoefficientf1(self)

    def stackAirCoolerFanCoefficientf2(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_stackAirCoolerFanCoefficientf2(self)

    def fuelCell(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_fuelCell(self)

    def setNominalStackTemperature(self, nominalStackTemperature):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setNominalStackTemperature(self, nominalStackTemperature)

    def resetNominalStackTemperature(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetNominalStackTemperature(self)

    def setActualStackTemperature(self, actualStackTemperature):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setActualStackTemperature(self, actualStackTemperature)

    def resetActualStackTemperature(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetActualStackTemperature(self)

    def setCoefficientr0(self, coefficientr0):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setCoefficientr0(self, coefficientr0)

    def resetCoefficientr0(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetCoefficientr0(self)

    def setCoefficientr1(self, coefficientr1):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setCoefficientr1(self, coefficientr1)

    def resetCoefficientr1(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetCoefficientr1(self)

    def setCoefficientr2(self, coefficientr2):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setCoefficientr2(self, coefficientr2)

    def resetCoefficientr2(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetCoefficientr2(self)

    def setCoefficientr3(self, coefficientr3):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setCoefficientr3(self, coefficientr3)

    def resetCoefficientr3(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetCoefficientr3(self)

    def setStackCoolantFlowRate(self, stackCoolantFlowRate):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCoolantFlowRate(self, stackCoolantFlowRate)

    def resetStackCoolantFlowRate(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCoolantFlowRate(self)

    def setStackCoolerUFactorTimesAreaValue(self, stackCoolerUFactorTimesAreaValue):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCoolerUFactorTimesAreaValue(self, stackCoolerUFactorTimesAreaValue)

    def resetStackCoolerUFactorTimesAreaValue(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCoolerUFactorTimesAreaValue(self)

    def setFscogenAdjustmentFactor(self, fscogenAdjustmentFactor):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setFscogenAdjustmentFactor(self, fscogenAdjustmentFactor)

    def resetFscogenAdjustmentFactor(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetFscogenAdjustmentFactor(self)

    def setStackCogenerationExchangerArea(self, stackCogenerationExchangerArea):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCogenerationExchangerArea(self, stackCogenerationExchangerArea)

    def resetStackCogenerationExchangerArea(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCogenerationExchangerArea(self)

    def setStackCogenerationExchangerNominalFlowRate(self, stackCogenerationExchangerNominalFlowRate):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCogenerationExchangerNominalFlowRate(self, stackCogenerationExchangerNominalFlowRate)

    def resetStackCogenerationExchangerNominalFlowRate(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCogenerationExchangerNominalFlowRate(self)

    def setStackCogenerationExchangerNominalHeatTransferCoefficient(self, stackCogenerationExchangerNominalHeatTransferCoefficient):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCogenerationExchangerNominalHeatTransferCoefficient(self, stackCogenerationExchangerNominalHeatTransferCoefficient)

    def resetStackCogenerationExchangerNominalHeatTransferCoefficient(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCogenerationExchangerNominalHeatTransferCoefficient(self)

    def setStackCogenerationExchangerNominalHeatTransferCoefficientExponent(self, stackCogenerationExchangerNominalHeatTransferCoefficientExponent):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCogenerationExchangerNominalHeatTransferCoefficientExponent(self, stackCogenerationExchangerNominalHeatTransferCoefficientExponent)

    def resetStackCogenerationExchangerNominalHeatTransferCoefficientExponent(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCogenerationExchangerNominalHeatTransferCoefficientExponent(self)

    def setStackCoolerPumpPower(self, stackCoolerPumpPower):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCoolerPumpPower(self, stackCoolerPumpPower)

    def resetStackCoolerPumpPower(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCoolerPumpPower(self)

    def setStackCoolerPumpHeatLossFraction(self, stackCoolerPumpHeatLossFraction):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackCoolerPumpHeatLossFraction(self, stackCoolerPumpHeatLossFraction)

    def resetStackCoolerPumpHeatLossFraction(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackCoolerPumpHeatLossFraction(self)

    def setStackAirCoolerFanCoefficientf0(self, stackAirCoolerFanCoefficientf0):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackAirCoolerFanCoefficientf0(self, stackAirCoolerFanCoefficientf0)

    def resetStackAirCoolerFanCoefficientf0(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackAirCoolerFanCoefficientf0(self)

    def setStackAirCoolerFanCoefficientf1(self, stackAirCoolerFanCoefficientf1):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackAirCoolerFanCoefficientf1(self, stackAirCoolerFanCoefficientf1)

    def resetStackAirCoolerFanCoefficientf1(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackAirCoolerFanCoefficientf1(self)

    def setStackAirCoolerFanCoefficientf2(self, stackAirCoolerFanCoefficientf2):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_setStackAirCoolerFanCoefficientf2(self, stackAirCoolerFanCoefficientf2)

    def resetStackAirCoolerFanCoefficientf2(self):
        return _openstudiomodelgenerators.GeneratorFuelCellStackCooler_resetStackAirCoolerFanCoefficientf2(self)

# Register GeneratorFuelCellStackCooler in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellStackCooler_swigregister(GeneratorFuelCellStackCooler)

def toGeneratorFuelCellStackCooler(idfObject):
    return _openstudiomodelgenerators.toGeneratorFuelCellStackCooler(idfObject)

def getGeneratorFuelCellStackCooler(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorFuelCellStackCooler(t_model, t_handle)

def getGeneratorFuelCellStackCoolers(t_model):
    return _openstudiomodelgenerators.getGeneratorFuelCellStackCoolers(t_model)

def getGeneratorFuelCellStackCoolerByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorFuelCellStackCoolerByName(t_model, t_name)

def getGeneratorFuelCellStackCoolersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorFuelCellStackCoolersByName(t_model, t_name, t_exactMatch)

def _to_GeneratorFuelCellStackCooler(self) -> OptionalGeneratorFuelCellStackCooler:
    """Try to cast the ModelObject to a GeneratorFuelCellStackCooler.

    :return: An Optional GeneratorFuelCellStackCooler.
    """
    return toGeneratorFuelCellStackCooler(self)
openstudioutilitiesidf.IdfObject.to_GeneratorFuelCellStackCooler = _to_GeneratorFuelCellStackCooler

def _getGeneratorFuelCellStackCooler(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorFuelCellStackCooler:
    """Try to get an object of type GeneratorFuelCellStackCooler referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorFuelCellStackCooler.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorFuelCellStackCooler(self, t_handle)
Model.getGeneratorFuelCellStackCooler = _getGeneratorFuelCellStackCooler

def _getGeneratorFuelCellStackCoolers(self) -> GeneratorFuelCellStackCoolerVector:
    """Get a vector of all objects of type GeneratorFuelCellStackCooler in the model.

    :return: A vector of GeneratorFuelCellStackCooler.
    """
    return getGeneratorFuelCellStackCoolers(self)
Model.getGeneratorFuelCellStackCoolers = _getGeneratorFuelCellStackCoolers

def _getGeneratorFuelCellStackCoolerByName(self, t_name: str) -> OptionalGeneratorFuelCellStackCooler:
    """Try to get an object of type GeneratorFuelCellStackCooler that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorFuelCellStackCooler.
    """
    return getGeneratorFuelCellStackCoolerByName(self, t_name)
Model.getGeneratorFuelCellStackCoolerByName = _getGeneratorFuelCellStackCoolerByName

def _getGeneratorFuelCellStackCoolersByName(self, t_name: str, t_exactMatch: bool) -> GeneratorFuelCellStackCoolerVector:
    """Returns all objects of type GeneratorFuelCellStackCooler named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorFuelCellStackCoolersByName(self, t_name, t_exactMatch)
Model.getGeneratorFuelCellStackCoolersByName = _getGeneratorFuelCellStackCoolersByName

class GeneratorFuelCellWaterSupply(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCellWaterSupply

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCellWaterSupply(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_iddObjectType()

    @staticmethod
    def waterTemperatureModelingModeValues():
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_waterTemperatureModelingModeValues()

    def reformerWaterFlowRateFunctionofFuelRateCurve(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_reformerWaterFlowRateFunctionofFuelRateCurve(self)

    def reformerWaterPumpPowerFunctionofFuelRateCurve(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_reformerWaterPumpPowerFunctionofFuelRateCurve(self)

    def pumpHeatLossFactor(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_pumpHeatLossFactor(self)

    def waterTemperatureModelingMode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_waterTemperatureModelingMode(self)

    def waterTemperatureReferenceNode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_waterTemperatureReferenceNode(self)

    def waterTemperatureSchedule(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_waterTemperatureSchedule(self)

    def fuelCell(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_fuelCell(self)

    def setReformerWaterFlowRateFunctionofFuelRateCurve(self, quadraticCurves):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_setReformerWaterFlowRateFunctionofFuelRateCurve(self, quadraticCurves)

    def setReformerWaterPumpPowerFunctionofFuelRateCurve(self, cubicCurves):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_setReformerWaterPumpPowerFunctionofFuelRateCurve(self, cubicCurves)

    def setPumpHeatLossFactor(self, pumpHeatLossFactor):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_setPumpHeatLossFactor(self, pumpHeatLossFactor)

    def resetPumpHeatLossFactor(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_resetPumpHeatLossFactor(self)

    def setWaterTemperatureModelingMode(self, waterTemperatureModelingMode):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_setWaterTemperatureModelingMode(self, waterTemperatureModelingMode)

    def resetWaterTemperatureModelingMode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_resetWaterTemperatureModelingMode(self)

    def setWaterTemperatureReferenceNode(self, connection):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_setWaterTemperatureReferenceNode(self, connection)

    def resetWaterTemperatureReferenceNode(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_resetWaterTemperatureReferenceNode(self)

    def setWaterTemperatureSchedule(self, schedule):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_setWaterTemperatureSchedule(self, schedule)

    def resetWaterTemperatureSchedule(self):
        return _openstudiomodelgenerators.GeneratorFuelCellWaterSupply_resetWaterTemperatureSchedule(self)

# Register GeneratorFuelCellWaterSupply in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCellWaterSupply_swigregister(GeneratorFuelCellWaterSupply)

def toGeneratorFuelCellWaterSupply(idfObject):
    return _openstudiomodelgenerators.toGeneratorFuelCellWaterSupply(idfObject)

def getGeneratorFuelCellWaterSupply(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorFuelCellWaterSupply(t_model, t_handle)

def getGeneratorFuelCellWaterSupplys(t_model):
    return _openstudiomodelgenerators.getGeneratorFuelCellWaterSupplys(t_model)

def getGeneratorFuelCellWaterSupplyByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorFuelCellWaterSupplyByName(t_model, t_name)

def getGeneratorFuelCellWaterSupplysByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorFuelCellWaterSupplysByName(t_model, t_name, t_exactMatch)

def _to_GeneratorFuelCellWaterSupply(self) -> OptionalGeneratorFuelCellWaterSupply:
    """Try to cast the ModelObject to a GeneratorFuelCellWaterSupply.

    :return: An Optional GeneratorFuelCellWaterSupply.
    """
    return toGeneratorFuelCellWaterSupply(self)
openstudioutilitiesidf.IdfObject.to_GeneratorFuelCellWaterSupply = _to_GeneratorFuelCellWaterSupply

def _getGeneratorFuelCellWaterSupply(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorFuelCellWaterSupply:
    """Try to get an object of type GeneratorFuelCellWaterSupply referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorFuelCellWaterSupply.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorFuelCellWaterSupply(self, t_handle)
Model.getGeneratorFuelCellWaterSupply = _getGeneratorFuelCellWaterSupply

def _getGeneratorFuelCellWaterSupplys(self) -> GeneratorFuelCellWaterSupplyVector:
    """Get a vector of all objects of type GeneratorFuelCellWaterSupply in the model.

    :return: A vector of GeneratorFuelCellWaterSupply.
    """
    return getGeneratorFuelCellWaterSupplys(self)
Model.getGeneratorFuelCellWaterSupplys = _getGeneratorFuelCellWaterSupplys

def _getGeneratorFuelCellWaterSupplyByName(self, t_name: str) -> OptionalGeneratorFuelCellWaterSupply:
    """Try to get an object of type GeneratorFuelCellWaterSupply that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorFuelCellWaterSupply.
    """
    return getGeneratorFuelCellWaterSupplyByName(self, t_name)
Model.getGeneratorFuelCellWaterSupplyByName = _getGeneratorFuelCellWaterSupplyByName

def _getGeneratorFuelCellWaterSupplysByName(self, t_name: str, t_exactMatch: bool) -> GeneratorFuelCellWaterSupplyVector:
    """Returns all objects of type GeneratorFuelCellWaterSupply named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorFuelCellWaterSupplysByName(self, t_name, t_exactMatch)
Model.getGeneratorFuelCellWaterSupplysByName = _getGeneratorFuelCellWaterSupplysByName

class FuelSupplyConstituent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, constituentName, molarFraction):
        _openstudiomodelgenerators.FuelSupplyConstituent_swiginit(self, _openstudiomodelgenerators.new_FuelSupplyConstituent(constituentName, molarFraction))

    def constituentName(self):
        return _openstudiomodelgenerators.FuelSupplyConstituent_constituentName(self)

    def molarFraction(self):
        return _openstudiomodelgenerators.FuelSupplyConstituent_molarFraction(self)

    @staticmethod
    def isValid(constituentName):
        return _openstudiomodelgenerators.FuelSupplyConstituent_isValid(constituentName)

    @staticmethod
    def constituentNameValues():
        return _openstudiomodelgenerators.FuelSupplyConstituent_constituentNameValues()

    @staticmethod
    def validConstituentNameValues():
        return _openstudiomodelgenerators.FuelSupplyConstituent_validConstituentNameValues()

    def __str__(self):
        return _openstudiomodelgenerators.FuelSupplyConstituent___str__(self)
    __swig_destroy__ = _openstudiomodelgenerators.delete_FuelSupplyConstituent

# Register FuelSupplyConstituent in _openstudiomodelgenerators:
_openstudiomodelgenerators.FuelSupplyConstituent_swigregister(FuelSupplyConstituent)

def __lshift__(*args):
    return _openstudiomodelgenerators.__lshift__(*args)
class GeneratorFuelSupply(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelSupply

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelSupply_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelSupply(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorFuelSupply_iddObjectType()

    @staticmethod
    def fuelTemperatureModelingModeValues():
        return _openstudiomodelgenerators.GeneratorFuelSupply_fuelTemperatureModelingModeValues()

    @staticmethod
    def fuelTypeValues():
        return _openstudiomodelgenerators.GeneratorFuelSupply_fuelTypeValues()

    def addConstituent(self, *args):
        return _openstudiomodelgenerators.GeneratorFuelSupply_addConstituent(self, *args)

    def removeConstituent(self, groupIndex):
        return _openstudiomodelgenerators.GeneratorFuelSupply_removeConstituent(self, groupIndex)

    def removeAllConstituents(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_removeAllConstituents(self)

    def constituents(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_constituents(self)

    def fuelTemperatureModelingMode(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_fuelTemperatureModelingMode(self)

    def fuelTemperatureReferenceNode(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_fuelTemperatureReferenceNode(self)

    def fuelTemperatureSchedule(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_fuelTemperatureSchedule(self)

    def compressorPowerMultiplierFunctionofFuelRateCurve(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_compressorPowerMultiplierFunctionofFuelRateCurve(self)

    def compressorHeatLossFactor(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_compressorHeatLossFactor(self)

    def fuelType(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_fuelType(self)

    def liquidGenericFuelLowerHeatingValue(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_liquidGenericFuelLowerHeatingValue(self)

    def liquidGenericFuelHigherHeatingValue(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_liquidGenericFuelHigherHeatingValue(self)

    def liquidGenericFuelMolecularWeight(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_liquidGenericFuelMolecularWeight(self)

    def liquidGenericFuelCO2EmissionFactor(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_liquidGenericFuelCO2EmissionFactor(self)

    def numberofConstituentsinGaseousConstituentFuelSupply(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_numberofConstituentsinGaseousConstituentFuelSupply(self)

    def sumofConstituentsMolarFractions(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_sumofConstituentsMolarFractions(self)

    def fuelCell(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_fuelCell(self)

    def setFuelTemperatureModelingMode(self, fuelTemperatureModelingMode):
        return _openstudiomodelgenerators.GeneratorFuelSupply_setFuelTemperatureModelingMode(self, fuelTemperatureModelingMode)

    def resetFuelTemperatureModelingMode(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_resetFuelTemperatureModelingMode(self)

    def setFuelTemperatureReferenceNode(self, connection):
        return _openstudiomodelgenerators.GeneratorFuelSupply_setFuelTemperatureReferenceNode(self, connection)

    def resetFuelTemperatureReferenceNode(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_resetFuelTemperatureReferenceNode(self)

    def setFuelTemperatureSchedule(self, schedule):
        return _openstudiomodelgenerators.GeneratorFuelSupply_setFuelTemperatureSchedule(self, schedule)

    def resetFuelTemperatureSchedule(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_resetFuelTemperatureSchedule(self)

    def setCompressorPowerMultiplierFunctionofFuelRateCurve(self, cubicCurves):
        return _openstudiomodelgenerators.GeneratorFuelSupply_setCompressorPowerMultiplierFunctionofFuelRateCurve(self, cubicCurves)

    def setCompressorHeatLossFactor(self, compressorHeatLossFactor):
        return _openstudiomodelgenerators.GeneratorFuelSupply_setCompressorHeatLossFactor(self, compressorHeatLossFactor)

    def resetCompressorHeatLossFactor(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_resetCompressorHeatLossFactor(self)

    def setFuelType(self, fuelType):
        return _openstudiomodelgenerators.GeneratorFuelSupply_setFuelType(self, fuelType)

    def resetFuelType(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_resetFuelType(self)

    def setLiquidGenericFuelLowerHeatingValue(self, liquidGenericFuelLowerHeatingValue):
        return _openstudiomodelgenerators.GeneratorFuelSupply_setLiquidGenericFuelLowerHeatingValue(self, liquidGenericFuelLowerHeatingValue)

    def resetLiquidGenericFuelLowerHeatingValue(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_resetLiquidGenericFuelLowerHeatingValue(self)

    def setLiquidGenericFuelHigherHeatingValue(self, liquidGenericFuelHigherHeatingValue):
        return _openstudiomodelgenerators.GeneratorFuelSupply_setLiquidGenericFuelHigherHeatingValue(self, liquidGenericFuelHigherHeatingValue)

    def resetLiquidGenericFuelHigherHeatingValue(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_resetLiquidGenericFuelHigherHeatingValue(self)

    def setLiquidGenericFuelMolecularWeight(self, liquidGenericFuelMolecularWeight):
        return _openstudiomodelgenerators.GeneratorFuelSupply_setLiquidGenericFuelMolecularWeight(self, liquidGenericFuelMolecularWeight)

    def resetLiquidGenericFuelMolecularWeight(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_resetLiquidGenericFuelMolecularWeight(self)

    def setLiquidGenericFuelCO2EmissionFactor(self, liquidGenericFuelCO2EmissionFactor):
        return _openstudiomodelgenerators.GeneratorFuelSupply_setLiquidGenericFuelCO2EmissionFactor(self, liquidGenericFuelCO2EmissionFactor)

    def resetLiquidGenericFuelCO2EmissionFactor(self):
        return _openstudiomodelgenerators.GeneratorFuelSupply_resetLiquidGenericFuelCO2EmissionFactor(self)

# Register GeneratorFuelSupply in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelSupply_swigregister(GeneratorFuelSupply)

def toGeneratorFuelSupply(idfObject):
    return _openstudiomodelgenerators.toGeneratorFuelSupply(idfObject)

def getGeneratorFuelSupply(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorFuelSupply(t_model, t_handle)

def getGeneratorFuelSupplys(t_model):
    return _openstudiomodelgenerators.getGeneratorFuelSupplys(t_model)

def getGeneratorFuelSupplyByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorFuelSupplyByName(t_model, t_name)

def getGeneratorFuelSupplysByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorFuelSupplysByName(t_model, t_name, t_exactMatch)

def _to_GeneratorFuelSupply(self) -> OptionalGeneratorFuelSupply:
    """Try to cast the ModelObject to a GeneratorFuelSupply.

    :return: An Optional GeneratorFuelSupply.
    """
    return toGeneratorFuelSupply(self)
openstudioutilitiesidf.IdfObject.to_GeneratorFuelSupply = _to_GeneratorFuelSupply

def _getGeneratorFuelSupply(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorFuelSupply:
    """Try to get an object of type GeneratorFuelSupply referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorFuelSupply.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorFuelSupply(self, t_handle)
Model.getGeneratorFuelSupply = _getGeneratorFuelSupply

def _getGeneratorFuelSupplys(self) -> GeneratorFuelSupplyVector:
    """Get a vector of all objects of type GeneratorFuelSupply in the model.

    :return: A vector of GeneratorFuelSupply.
    """
    return getGeneratorFuelSupplys(self)
Model.getGeneratorFuelSupplys = _getGeneratorFuelSupplys

def _getGeneratorFuelSupplyByName(self, t_name: str) -> OptionalGeneratorFuelSupply:
    """Try to get an object of type GeneratorFuelSupply that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorFuelSupply.
    """
    return getGeneratorFuelSupplyByName(self, t_name)
Model.getGeneratorFuelSupplyByName = _getGeneratorFuelSupplyByName

def _getGeneratorFuelSupplysByName(self, t_name: str, t_exactMatch: bool) -> GeneratorFuelSupplyVector:
    """Returns all objects of type GeneratorFuelSupply named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorFuelSupplysByName(self, t_name, t_exactMatch)
Model.getGeneratorFuelSupplysByName = _getGeneratorFuelSupplysByName

class GeneratorFuelCell(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorFuelCell

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorFuelCell_swiginit(self, _openstudiomodelgenerators.new_GeneratorFuelCell(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorFuelCell_iddObjectType()

    def powerModule(self):
        return _openstudiomodelgenerators.GeneratorFuelCell_powerModule(self)

    def airSupply(self):
        return _openstudiomodelgenerators.GeneratorFuelCell_airSupply(self)

    def fuelSupply(self):
        return _openstudiomodelgenerators.GeneratorFuelCell_fuelSupply(self)

    def waterSupply(self):
        return _openstudiomodelgenerators.GeneratorFuelCell_waterSupply(self)

    def auxiliaryHeater(self):
        return _openstudiomodelgenerators.GeneratorFuelCell_auxiliaryHeater(self)

    def heatExchanger(self):
        return _openstudiomodelgenerators.GeneratorFuelCell_heatExchanger(self)

    def electricalStorage(self):
        return _openstudiomodelgenerators.GeneratorFuelCell_electricalStorage(self)

    def inverter(self):
        return _openstudiomodelgenerators.GeneratorFuelCell_inverter(self)

    def stackCooler(self):
        return _openstudiomodelgenerators.GeneratorFuelCell_stackCooler(self)

    def setPowerModule(self, fCPM):
        return _openstudiomodelgenerators.GeneratorFuelCell_setPowerModule(self, fCPM)

    def setAirSupply(self, fCAirSup):
        return _openstudiomodelgenerators.GeneratorFuelCell_setAirSupply(self, fCAirSup)

    def setFuelSupply(self, genFuelSup):
        return _openstudiomodelgenerators.GeneratorFuelCell_setFuelSupply(self, genFuelSup)

    def setWaterSupply(self, fCWaterSup):
        return _openstudiomodelgenerators.GeneratorFuelCell_setWaterSupply(self, fCWaterSup)

    def setAuxiliaryHeater(self, fCAuxHeat):
        return _openstudiomodelgenerators.GeneratorFuelCell_setAuxiliaryHeater(self, fCAuxHeat)

    def setHeatExchanger(self, fCExhaustHX):
        return _openstudiomodelgenerators.GeneratorFuelCell_setHeatExchanger(self, fCExhaustHX)

    def setElectricalStorage(self, fCStorage):
        return _openstudiomodelgenerators.GeneratorFuelCell_setElectricalStorage(self, fCStorage)

    def setInverter(self, fCInverter):
        return _openstudiomodelgenerators.GeneratorFuelCell_setInverter(self, fCInverter)

    def setStackCooler(self, fCStackCooler):
        return _openstudiomodelgenerators.GeneratorFuelCell_setStackCooler(self, fCStackCooler)

    def resetStackCooler(self):
        return _openstudiomodelgenerators.GeneratorFuelCell_resetStackCooler(self)

# Register GeneratorFuelCell in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorFuelCell_swigregister(GeneratorFuelCell)

def toGeneratorFuelCell(idfObject):
    return _openstudiomodelgenerators.toGeneratorFuelCell(idfObject)

def getGeneratorFuelCell(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorFuelCell(t_model, t_handle)

def getGeneratorFuelCells(t_model):
    return _openstudiomodelgenerators.getGeneratorFuelCells(t_model)

def getGeneratorFuelCellByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorFuelCellByName(t_model, t_name)

def getGeneratorFuelCellsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorFuelCellsByName(t_model, t_name, t_exactMatch)

def _to_GeneratorFuelCell(self) -> OptionalGeneratorFuelCell:
    """Try to cast the ModelObject to a GeneratorFuelCell.

    :return: An Optional GeneratorFuelCell.
    """
    return toGeneratorFuelCell(self)
openstudioutilitiesidf.IdfObject.to_GeneratorFuelCell = _to_GeneratorFuelCell

def _getGeneratorFuelCell(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorFuelCell:
    """Try to get an object of type GeneratorFuelCell referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorFuelCell.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorFuelCell(self, t_handle)
Model.getGeneratorFuelCell = _getGeneratorFuelCell

def _getGeneratorFuelCells(self) -> GeneratorFuelCellVector:
    """Get a vector of all objects of type GeneratorFuelCell in the model.

    :return: A vector of GeneratorFuelCell.
    """
    return getGeneratorFuelCells(self)
Model.getGeneratorFuelCells = _getGeneratorFuelCells

def _getGeneratorFuelCellByName(self, t_name: str) -> OptionalGeneratorFuelCell:
    """Try to get an object of type GeneratorFuelCell that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorFuelCell.
    """
    return getGeneratorFuelCellByName(self, t_name)
Model.getGeneratorFuelCellByName = _getGeneratorFuelCellByName

def _getGeneratorFuelCellsByName(self, t_name: str, t_exactMatch: bool) -> GeneratorFuelCellVector:
    """Returns all objects of type GeneratorFuelCell named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorFuelCellsByName(self, t_name, t_exactMatch)
Model.getGeneratorFuelCellsByName = _getGeneratorFuelCellsByName

class GeneratorPhotovoltaic(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def simple(model):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_simple(model)

    @staticmethod
    def equivalentOneDiode(model):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_equivalentOneDiode(model)

    @staticmethod
    def sandia(model):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_sandia(model)

    @staticmethod
    def fromSandiaDatabase(model, sandiaModulePerformanceName):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_fromSandiaDatabase(model, sandiaModulePerformanceName)
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorPhotovoltaic

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorPhotovoltaic_swiginit(self, _openstudiomodelgenerators.new_GeneratorPhotovoltaic(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_iddObjectType()

    @staticmethod
    def heatTransferIntegrationModeValues():
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_heatTransferIntegrationModeValues()

    def surface(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_surface(self)

    def photovoltaicPerformance(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_photovoltaicPerformance(self)

    def heatTransferIntegrationMode(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_heatTransferIntegrationMode(self)

    def isHeatTransferIntegrationModeDefaulted(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_isHeatTransferIntegrationModeDefaulted(self)

    def numberOfModulesInParallel(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_numberOfModulesInParallel(self)

    def isNumberOfModulesInParallelDefaulted(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_isNumberOfModulesInParallelDefaulted(self)

    def numberOfModulesInSeries(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_numberOfModulesInSeries(self)

    def isNumberOfModulesInSeriesDefaulted(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_isNumberOfModulesInSeriesDefaulted(self)

    def ratedElectricPowerOutput(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_ratedElectricPowerOutput(self)

    def availabilitySchedule(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_availabilitySchedule(self)

    def setSurface(self, surface):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_setSurface(self, surface)

    def resetSurface(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_resetSurface(self)

    def setHeatTransferIntegrationMode(self, heatTransferIntegrationMode):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_setHeatTransferIntegrationMode(self, heatTransferIntegrationMode)

    def resetHeatTransferIntegrationMode(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_resetHeatTransferIntegrationMode(self)

    def setNumberOfModulesInParallel(self, numberOfModulesInParallel):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_setNumberOfModulesInParallel(self, numberOfModulesInParallel)

    def resetNumberOfModulesInParallel(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_resetNumberOfModulesInParallel(self)

    def setNumberOfModulesInSeries(self, numberOfModulesInSeries):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_setNumberOfModulesInSeries(self, numberOfModulesInSeries)

    def resetNumberOfModulesInSeries(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_resetNumberOfModulesInSeries(self)

    def setRatedElectricPowerOutput(self, ratedElectricPowerOutput):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_setRatedElectricPowerOutput(self, ratedElectricPowerOutput)

    def resetRatedElectricPowerOutput(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_resetRatedElectricPowerOutput(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelgenerators.GeneratorPhotovoltaic_resetAvailabilitySchedule(self)

# Register GeneratorPhotovoltaic in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorPhotovoltaic_swigregister(GeneratorPhotovoltaic)

def toGeneratorPhotovoltaic(idfObject):
    return _openstudiomodelgenerators.toGeneratorPhotovoltaic(idfObject)

def getGeneratorPhotovoltaic(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorPhotovoltaic(t_model, t_handle)

def getGeneratorPhotovoltaics(t_model):
    return _openstudiomodelgenerators.getGeneratorPhotovoltaics(t_model)

def getGeneratorPhotovoltaicByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorPhotovoltaicByName(t_model, t_name)

def getGeneratorPhotovoltaicsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorPhotovoltaicsByName(t_model, t_name, t_exactMatch)

def _to_GeneratorPhotovoltaic(self) -> OptionalGeneratorPhotovoltaic:
    """Try to cast the ModelObject to a GeneratorPhotovoltaic.

    :return: An Optional GeneratorPhotovoltaic.
    """
    return toGeneratorPhotovoltaic(self)
openstudioutilitiesidf.IdfObject.to_GeneratorPhotovoltaic = _to_GeneratorPhotovoltaic

def _getGeneratorPhotovoltaic(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorPhotovoltaic:
    """Try to get an object of type GeneratorPhotovoltaic referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorPhotovoltaic.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorPhotovoltaic(self, t_handle)
Model.getGeneratorPhotovoltaic = _getGeneratorPhotovoltaic

def _getGeneratorPhotovoltaics(self) -> GeneratorPhotovoltaicVector:
    """Get a vector of all objects of type GeneratorPhotovoltaic in the model.

    :return: A vector of GeneratorPhotovoltaic.
    """
    return getGeneratorPhotovoltaics(self)
Model.getGeneratorPhotovoltaics = _getGeneratorPhotovoltaics

def _getGeneratorPhotovoltaicByName(self, t_name: str) -> OptionalGeneratorPhotovoltaic:
    """Try to get an object of type GeneratorPhotovoltaic that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorPhotovoltaic.
    """
    return getGeneratorPhotovoltaicByName(self, t_name)
Model.getGeneratorPhotovoltaicByName = _getGeneratorPhotovoltaicByName

def _getGeneratorPhotovoltaicsByName(self, t_name: str, t_exactMatch: bool) -> GeneratorPhotovoltaicVector:
    """Returns all objects of type GeneratorPhotovoltaic named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorPhotovoltaicsByName(self, t_name, t_exactMatch)
Model.getGeneratorPhotovoltaicsByName = _getGeneratorPhotovoltaicsByName

class GeneratorMicroTurbineHeatRecovery(openstudiomodelhvac.StraightComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorMicroTurbineHeatRecovery

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_swiginit(self, _openstudiomodelgenerators.new_GeneratorMicroTurbineHeatRecovery(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_iddObjectType()

    @staticmethod
    def validHeatRecoveryWaterFlowOperatingModeValues():
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_validHeatRecoveryWaterFlowOperatingModeValues()

    def referenceThermalEfficiencyUsingLowerHeatValue(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_referenceThermalEfficiencyUsingLowerHeatValue(self)

    def isReferenceThermalEfficiencyUsingLowerHeatValueDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_isReferenceThermalEfficiencyUsingLowerHeatValueDefaulted(self)

    def referenceInletWaterTemperature(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_referenceInletWaterTemperature(self)

    def heatRecoveryWaterFlowOperatingMode(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_heatRecoveryWaterFlowOperatingMode(self)

    def isHeatRecoveryWaterFlowOperatingModeDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_isHeatRecoveryWaterFlowOperatingModeDefaulted(self)

    def referenceHeatRecoveryWaterFlowRate(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_referenceHeatRecoveryWaterFlowRate(self)

    def heatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_heatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve(self)

    def thermalEfficiencyFunctionofTemperatureandElevationCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_thermalEfficiencyFunctionofTemperatureandElevationCurve(self)

    def heatRecoveryRateFunctionofPartLoadRatioCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_heatRecoveryRateFunctionofPartLoadRatioCurve(self)

    def heatRecoveryRateFunctionofInletWaterTemperatureCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_heatRecoveryRateFunctionofInletWaterTemperatureCurve(self)

    def heatRecoveryRateFunctionofWaterFlowRateCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_heatRecoveryRateFunctionofWaterFlowRateCurve(self)

    def minimumHeatRecoveryWaterFlowRate(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_minimumHeatRecoveryWaterFlowRate(self)

    def isMinimumHeatRecoveryWaterFlowRateDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_isMinimumHeatRecoveryWaterFlowRateDefaulted(self)

    def maximumHeatRecoveryWaterFlowRate(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_maximumHeatRecoveryWaterFlowRate(self)

    def isMaximumHeatRecoveryWaterFlowRateDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_isMaximumHeatRecoveryWaterFlowRateDefaulted(self)

    def maximumHeatRecoveryWaterTemperature(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_maximumHeatRecoveryWaterTemperature(self)

    def ratedThermaltoElectricalPowerRatio(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_ratedThermaltoElectricalPowerRatio(self)

    def isRatedThermaltoElectricalPowerRatioDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_isRatedThermaltoElectricalPowerRatioDefaulted(self)

    def generatorMicroTurbine(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_generatorMicroTurbine(self)

    def setReferenceThermalEfficiencyUsingLowerHeatValue(self, referenceThermalEfficiencyUsingLowerHeatValue):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setReferenceThermalEfficiencyUsingLowerHeatValue(self, referenceThermalEfficiencyUsingLowerHeatValue)

    def resetReferenceThermalEfficiencyUsingLowerHeatValue(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetReferenceThermalEfficiencyUsingLowerHeatValue(self)

    def setReferenceInletWaterTemperature(self, referenceInletWaterTemperature):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setReferenceInletWaterTemperature(self, referenceInletWaterTemperature)

    def setHeatRecoveryWaterFlowOperatingMode(self, heatRecoveryWaterFlowOperatingMode):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setHeatRecoveryWaterFlowOperatingMode(self, heatRecoveryWaterFlowOperatingMode)

    def resetHeatRecoveryWaterFlowOperatingMode(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetHeatRecoveryWaterFlowOperatingMode(self)

    def setReferenceHeatRecoveryWaterFlowRate(self, referenceHeatRecoveryWaterFlowRate):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setReferenceHeatRecoveryWaterFlowRate(self, referenceHeatRecoveryWaterFlowRate)

    def setHeatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve(self, heatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setHeatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve(self, heatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve)

    def resetHeatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetHeatRecoveryWaterFlowRateFunctionofTemperatureandPowerCurve(self)

    def setThermalEfficiencyFunctionofTemperatureandElevationCurve(self, thermalEfficiencyFunctionofTemperatureandElevationCurve):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setThermalEfficiencyFunctionofTemperatureandElevationCurve(self, thermalEfficiencyFunctionofTemperatureandElevationCurve)

    def resetThermalEfficiencyFunctionofTemperatureandElevationCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetThermalEfficiencyFunctionofTemperatureandElevationCurve(self)

    def setHeatRecoveryRateFunctionofPartLoadRatioCurve(self, heatRecoveryRateFunctionofPartLoadRatioCurve):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setHeatRecoveryRateFunctionofPartLoadRatioCurve(self, heatRecoveryRateFunctionofPartLoadRatioCurve)

    def resetHeatRecoveryRateFunctionofPartLoadRatioCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetHeatRecoveryRateFunctionofPartLoadRatioCurve(self)

    def setHeatRecoveryRateFunctionofInletWaterTemperatureCurve(self, heatRecoveryRateFunctionofInletWaterTemperatureCurve):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setHeatRecoveryRateFunctionofInletWaterTemperatureCurve(self, heatRecoveryRateFunctionofInletWaterTemperatureCurve)

    def resetHeatRecoveryRateFunctionofInletWaterTemperatureCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetHeatRecoveryRateFunctionofInletWaterTemperatureCurve(self)

    def setHeatRecoveryRateFunctionofWaterFlowRateCurve(self, heatRecoveryRateFunctionofWaterFlowRateCurve):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setHeatRecoveryRateFunctionofWaterFlowRateCurve(self, heatRecoveryRateFunctionofWaterFlowRateCurve)

    def resetHeatRecoveryRateFunctionofWaterFlowRateCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetHeatRecoveryRateFunctionofWaterFlowRateCurve(self)

    def setMinimumHeatRecoveryWaterFlowRate(self, minimumHeatRecoveryWaterFlowRate):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setMinimumHeatRecoveryWaterFlowRate(self, minimumHeatRecoveryWaterFlowRate)

    def resetMinimumHeatRecoveryWaterFlowRate(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetMinimumHeatRecoveryWaterFlowRate(self)

    def setMaximumHeatRecoveryWaterFlowRate(self, maximumHeatRecoveryWaterFlowRate):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setMaximumHeatRecoveryWaterFlowRate(self, maximumHeatRecoveryWaterFlowRate)

    def resetMaximumHeatRecoveryWaterFlowRate(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetMaximumHeatRecoveryWaterFlowRate(self)

    def setMaximumHeatRecoveryWaterTemperature(self, maximumHeatRecoveryWaterTemperature):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setMaximumHeatRecoveryWaterTemperature(self, maximumHeatRecoveryWaterTemperature)

    def resetMaximumHeatRecoveryWaterTemperature(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetMaximumHeatRecoveryWaterTemperature(self)

    def setRatedThermaltoElectricalPowerRatio(self, ratedThermaltoElectricalPowerRatio):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_setRatedThermaltoElectricalPowerRatio(self, ratedThermaltoElectricalPowerRatio)

    def resetRatedThermaltoElectricalPowerRatio(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_resetRatedThermaltoElectricalPowerRatio(self)

# Register GeneratorMicroTurbineHeatRecovery in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorMicroTurbineHeatRecovery_swigregister(GeneratorMicroTurbineHeatRecovery)

def toGeneratorMicroTurbineHeatRecovery(idfObject):
    return _openstudiomodelgenerators.toGeneratorMicroTurbineHeatRecovery(idfObject)

def getGeneratorMicroTurbineHeatRecovery(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorMicroTurbineHeatRecovery(t_model, t_handle)

def getGeneratorMicroTurbineHeatRecoverys(t_model):
    return _openstudiomodelgenerators.getGeneratorMicroTurbineHeatRecoverys(t_model)

def getGeneratorMicroTurbineHeatRecoveryByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorMicroTurbineHeatRecoveryByName(t_model, t_name)

def getGeneratorMicroTurbineHeatRecoverysByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorMicroTurbineHeatRecoverysByName(t_model, t_name, t_exactMatch)

def _to_GeneratorMicroTurbineHeatRecovery(self) -> OptionalGeneratorMicroTurbineHeatRecovery:
    """Try to cast the ModelObject to a GeneratorMicroTurbineHeatRecovery.

    :return: An Optional GeneratorMicroTurbineHeatRecovery.
    """
    return toGeneratorMicroTurbineHeatRecovery(self)
openstudioutilitiesidf.IdfObject.to_GeneratorMicroTurbineHeatRecovery = _to_GeneratorMicroTurbineHeatRecovery

def _getGeneratorMicroTurbineHeatRecovery(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorMicroTurbineHeatRecovery:
    """Try to get an object of type GeneratorMicroTurbineHeatRecovery referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorMicroTurbineHeatRecovery.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorMicroTurbineHeatRecovery(self, t_handle)
Model.getGeneratorMicroTurbineHeatRecovery = _getGeneratorMicroTurbineHeatRecovery

def _getGeneratorMicroTurbineHeatRecoverys(self) -> GeneratorMicroTurbineHeatRecoveryVector:
    """Get a vector of all objects of type GeneratorMicroTurbineHeatRecovery in the model.

    :return: A vector of GeneratorMicroTurbineHeatRecovery.
    """
    return getGeneratorMicroTurbineHeatRecoverys(self)
Model.getGeneratorMicroTurbineHeatRecoverys = _getGeneratorMicroTurbineHeatRecoverys

def _getGeneratorMicroTurbineHeatRecoveryByName(self, t_name: str) -> OptionalGeneratorMicroTurbineHeatRecovery:
    """Try to get an object of type GeneratorMicroTurbineHeatRecovery that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorMicroTurbineHeatRecovery.
    """
    return getGeneratorMicroTurbineHeatRecoveryByName(self, t_name)
Model.getGeneratorMicroTurbineHeatRecoveryByName = _getGeneratorMicroTurbineHeatRecoveryByName

def _getGeneratorMicroTurbineHeatRecoverysByName(self, t_name: str, t_exactMatch: bool) -> GeneratorMicroTurbineHeatRecoveryVector:
    """Returns all objects of type GeneratorMicroTurbineHeatRecovery named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorMicroTurbineHeatRecoverysByName(self, t_name, t_exactMatch)
Model.getGeneratorMicroTurbineHeatRecoverysByName = _getGeneratorMicroTurbineHeatRecoverysByName

class GeneratorMicroTurbine(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorMicroTurbine

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorMicroTurbine_swiginit(self, _openstudiomodelgenerators.new_GeneratorMicroTurbine(*args))

    def ratedThermaltoElectricalPowerRatio(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_ratedThermaltoElectricalPowerRatio(self)

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorMicroTurbine_iddObjectType()

    @staticmethod
    def validFuelTypeValues():
        return _openstudiomodelgenerators.GeneratorMicroTurbine_validFuelTypeValues()

    def availabilitySchedule(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_availabilitySchedule(self)

    def referenceElectricalPowerOutput(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_referenceElectricalPowerOutput(self)

    def minimumFullLoadElectricalPowerOutput(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_minimumFullLoadElectricalPowerOutput(self)

    def isMinimumFullLoadElectricalPowerOutputDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_isMinimumFullLoadElectricalPowerOutputDefaulted(self)

    def maximumFullLoadElectricalPowerOutput(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_maximumFullLoadElectricalPowerOutput(self)

    def isMaximumFullLoadElectricalPowerOutputDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_isMaximumFullLoadElectricalPowerOutputDefaulted(self)

    def referenceElectricalEfficiencyUsingLowerHeatingValue(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_referenceElectricalEfficiencyUsingLowerHeatingValue(self)

    def referenceCombustionAirInletTemperature(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_referenceCombustionAirInletTemperature(self)

    def isReferenceCombustionAirInletTemperatureDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_isReferenceCombustionAirInletTemperatureDefaulted(self)

    def referenceCombustionAirInletHumidityRatio(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_referenceCombustionAirInletHumidityRatio(self)

    def isReferenceCombustionAirInletHumidityRatioDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_isReferenceCombustionAirInletHumidityRatioDefaulted(self)

    def referenceElevation(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_referenceElevation(self)

    def isReferenceElevationDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_isReferenceElevationDefaulted(self)

    def electricalPowerFunctionofTemperatureandElevationCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_electricalPowerFunctionofTemperatureandElevationCurve(self)

    def electricalEfficiencyFunctionofTemperatureCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_electricalEfficiencyFunctionofTemperatureCurve(self)

    def electricalEfficiencyFunctionofPartLoadRatioCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_electricalEfficiencyFunctionofPartLoadRatioCurve(self)

    def fuelType(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_fuelType(self)

    def isFuelTypeDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_isFuelTypeDefaulted(self)

    def fuelHigherHeatingValue(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_fuelHigherHeatingValue(self)

    def isFuelHigherHeatingValueDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_isFuelHigherHeatingValueDefaulted(self)

    def fuelLowerHeatingValue(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_fuelLowerHeatingValue(self)

    def isFuelLowerHeatingValueDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_isFuelLowerHeatingValueDefaulted(self)

    def standbyPower(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_standbyPower(self)

    def isStandbyPowerDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_isStandbyPowerDefaulted(self)

    def ancillaryPower(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_ancillaryPower(self)

    def isAncillaryPowerDefaulted(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_isAncillaryPowerDefaulted(self)

    def ancillaryPowerFunctionofFuelInputCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_ancillaryPowerFunctionofFuelInputCurve(self)

    def generatorMicroTurbineHeatRecovery(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_generatorMicroTurbineHeatRecovery(self)

    def referenceExhaustAirMassFlowRate(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_referenceExhaustAirMassFlowRate(self)

    def exhaustAirFlowRateFunctionofTemperatureCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_exhaustAirFlowRateFunctionofTemperatureCurve(self)

    def exhaustAirFlowRateFunctionofPartLoadRatioCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_exhaustAirFlowRateFunctionofPartLoadRatioCurve(self)

    def nominalExhaustAirOutletTemperature(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_nominalExhaustAirOutletTemperature(self)

    def exhaustAirTemperatureFunctionofTemperatureCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_exhaustAirTemperatureFunctionofTemperatureCurve(self)

    def exhaustAirTemperatureFunctionofPartLoadRatioCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_exhaustAirTemperatureFunctionofPartLoadRatioCurve(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetAvailabilitySchedule(self)

    def setReferenceElectricalPowerOutput(self, referenceElectricalPowerOutput):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setReferenceElectricalPowerOutput(self, referenceElectricalPowerOutput)

    def setMinimumFullLoadElectricalPowerOutput(self, minimumFullLoadElectricalPowerOutput):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setMinimumFullLoadElectricalPowerOutput(self, minimumFullLoadElectricalPowerOutput)

    def resetMinimumFullLoadElectricalPowerOutput(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetMinimumFullLoadElectricalPowerOutput(self)

    def setMaximumFullLoadElectricalPowerOutput(self, maximumFullLoadElectricalPowerOutput):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setMaximumFullLoadElectricalPowerOutput(self, maximumFullLoadElectricalPowerOutput)

    def resetMaximumFullLoadElectricalPowerOutput(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetMaximumFullLoadElectricalPowerOutput(self)

    def setReferenceElectricalEfficiencyUsingLowerHeatingValue(self, referenceElectricalEfficiencyUsingLowerHeatingValue):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setReferenceElectricalEfficiencyUsingLowerHeatingValue(self, referenceElectricalEfficiencyUsingLowerHeatingValue)

    def setReferenceCombustionAirInletTemperature(self, referenceCombustionAirInletTemperature):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setReferenceCombustionAirInletTemperature(self, referenceCombustionAirInletTemperature)

    def resetReferenceCombustionAirInletTemperature(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetReferenceCombustionAirInletTemperature(self)

    def setReferenceCombustionAirInletHumidityRatio(self, referenceCombustionAirInletHumidityRatio):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setReferenceCombustionAirInletHumidityRatio(self, referenceCombustionAirInletHumidityRatio)

    def resetReferenceCombustionAirInletHumidityRatio(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetReferenceCombustionAirInletHumidityRatio(self)

    def setReferenceElevation(self, referenceElevation):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setReferenceElevation(self, referenceElevation)

    def resetReferenceElevation(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetReferenceElevation(self)

    def setElectricalPowerFunctionofTemperatureandElevationCurve(self, electricalPowerFunctionofTemperatureandElevationCurve):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setElectricalPowerFunctionofTemperatureandElevationCurve(self, electricalPowerFunctionofTemperatureandElevationCurve)

    def setElectricalEfficiencyFunctionofTemperatureCurve(self, electricalEfficiencyFunctionofTemperatureCurve):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setElectricalEfficiencyFunctionofTemperatureCurve(self, electricalEfficiencyFunctionofTemperatureCurve)

    def setElectricalEfficiencyFunctionofPartLoadRatioCurve(self, electricalEfficiencyFunctionofPartLoadRatioCurve):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setElectricalEfficiencyFunctionofPartLoadRatioCurve(self, electricalEfficiencyFunctionofPartLoadRatioCurve)

    def setFuelType(self, fuelType):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setFuelType(self, fuelType)

    def resetFuelType(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetFuelType(self)

    def setFuelHigherHeatingValue(self, fuelHigherHeatingValue):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setFuelHigherHeatingValue(self, fuelHigherHeatingValue)

    def resetFuelHigherHeatingValue(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetFuelHigherHeatingValue(self)

    def setFuelLowerHeatingValue(self, fuelLowerHeatingValue):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setFuelLowerHeatingValue(self, fuelLowerHeatingValue)

    def resetFuelLowerHeatingValue(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetFuelLowerHeatingValue(self)

    def setStandbyPower(self, standbyPower):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setStandbyPower(self, standbyPower)

    def resetStandbyPower(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetStandbyPower(self)

    def setAncillaryPower(self, ancillaryPower):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setAncillaryPower(self, ancillaryPower)

    def resetAncillaryPower(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetAncillaryPower(self)

    def setAncillaryPowerFunctionofFuelInputCurve(self, ancillaryPowerFunctionofFuelInputCurve):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setAncillaryPowerFunctionofFuelInputCurve(self, ancillaryPowerFunctionofFuelInputCurve)

    def resetAncillaryPowerFunctionofFuelInputCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetAncillaryPowerFunctionofFuelInputCurve(self)

    def setReferenceExhaustAirMassFlowRate(self, referenceExhaustAirMassFlowRate):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setReferenceExhaustAirMassFlowRate(self, referenceExhaustAirMassFlowRate)

    def resetReferenceExhaustAirMassFlowRate(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetReferenceExhaustAirMassFlowRate(self)

    def setExhaustAirFlowRateFunctionofTemperatureCurve(self, exhaustAirFlowRateFunctionofTemperatureCurve):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setExhaustAirFlowRateFunctionofTemperatureCurve(self, exhaustAirFlowRateFunctionofTemperatureCurve)

    def resetExhaustAirFlowRateFunctionofTemperatureCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetExhaustAirFlowRateFunctionofTemperatureCurve(self)

    def setExhaustAirFlowRateFunctionofPartLoadRatioCurve(self, exhaustAirFlowRateFunctionofPartLoadRatioCurve):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setExhaustAirFlowRateFunctionofPartLoadRatioCurve(self, exhaustAirFlowRateFunctionofPartLoadRatioCurve)

    def resetExhaustAirFlowRateFunctionofPartLoadRatioCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetExhaustAirFlowRateFunctionofPartLoadRatioCurve(self)

    def setNominalExhaustAirOutletTemperature(self, nominalExhaustAirOutletTemperature):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setNominalExhaustAirOutletTemperature(self, nominalExhaustAirOutletTemperature)

    def resetNominalExhaustAirOutletTemperature(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetNominalExhaustAirOutletTemperature(self)

    def setExhaustAirTemperatureFunctionofTemperatureCurve(self, exhaustAirTemperatureFunctionofTemperatureCurve):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setExhaustAirTemperatureFunctionofTemperatureCurve(self, exhaustAirTemperatureFunctionofTemperatureCurve)

    def resetExhaustAirTemperatureFunctionofTemperatureCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetExhaustAirTemperatureFunctionofTemperatureCurve(self)

    def setExhaustAirTemperatureFunctionofPartLoadRatioCurve(self, exhaustAirTemperatureFunctionofPartLoadRatioCurve):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_setExhaustAirTemperatureFunctionofPartLoadRatioCurve(self, exhaustAirTemperatureFunctionofPartLoadRatioCurve)

    def resetExhaustAirTemperatureFunctionofPartLoadRatioCurve(self):
        return _openstudiomodelgenerators.GeneratorMicroTurbine_resetExhaustAirTemperatureFunctionofPartLoadRatioCurve(self)

# Register GeneratorMicroTurbine in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorMicroTurbine_swigregister(GeneratorMicroTurbine)

def toGeneratorMicroTurbine(idfObject):
    return _openstudiomodelgenerators.toGeneratorMicroTurbine(idfObject)

def getGeneratorMicroTurbine(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorMicroTurbine(t_model, t_handle)

def getGeneratorMicroTurbines(t_model):
    return _openstudiomodelgenerators.getGeneratorMicroTurbines(t_model)

def getGeneratorMicroTurbineByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorMicroTurbineByName(t_model, t_name)

def getGeneratorMicroTurbinesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorMicroTurbinesByName(t_model, t_name, t_exactMatch)

def _to_GeneratorMicroTurbine(self) -> OptionalGeneratorMicroTurbine:
    """Try to cast the ModelObject to a GeneratorMicroTurbine.

    :return: An Optional GeneratorMicroTurbine.
    """
    return toGeneratorMicroTurbine(self)
openstudioutilitiesidf.IdfObject.to_GeneratorMicroTurbine = _to_GeneratorMicroTurbine

def _getGeneratorMicroTurbine(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorMicroTurbine:
    """Try to get an object of type GeneratorMicroTurbine referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorMicroTurbine.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorMicroTurbine(self, t_handle)
Model.getGeneratorMicroTurbine = _getGeneratorMicroTurbine

def _getGeneratorMicroTurbines(self) -> GeneratorMicroTurbineVector:
    """Get a vector of all objects of type GeneratorMicroTurbine in the model.

    :return: A vector of GeneratorMicroTurbine.
    """
    return getGeneratorMicroTurbines(self)
Model.getGeneratorMicroTurbines = _getGeneratorMicroTurbines

def _getGeneratorMicroTurbineByName(self, t_name: str) -> OptionalGeneratorMicroTurbine:
    """Try to get an object of type GeneratorMicroTurbine that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorMicroTurbine.
    """
    return getGeneratorMicroTurbineByName(self, t_name)
Model.getGeneratorMicroTurbineByName = _getGeneratorMicroTurbineByName

def _getGeneratorMicroTurbinesByName(self, t_name: str, t_exactMatch: bool) -> GeneratorMicroTurbineVector:
    """Returns all objects of type GeneratorMicroTurbine named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorMicroTurbinesByName(self, t_name, t_exactMatch)
Model.getGeneratorMicroTurbinesByName = _getGeneratorMicroTurbinesByName

class GeneratorPVWatts(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorPVWatts

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorPVWatts_swiginit(self, _openstudiomodelgenerators.new_GeneratorPVWatts(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorPVWatts_iddObjectType()

    def pvWattsVersion(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_pvWattsVersion(self)

    def dcSystemCapacity(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_dcSystemCapacity(self)

    def moduleType(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_moduleType(self)

    def isModuleTypeDefaulted(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_isModuleTypeDefaulted(self)

    def arrayType(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_arrayType(self)

    def isArrayTypeDefaulted(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_isArrayTypeDefaulted(self)

    def systemLosses(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_systemLosses(self)

    def isSystemLossesDefaulted(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_isSystemLossesDefaulted(self)

    def tiltAngle(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_tiltAngle(self)

    def isTiltAngleDefaulted(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_isTiltAngleDefaulted(self)

    def azimuthAngle(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_azimuthAngle(self)

    def isAzimuthAngleDefaulted(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_isAzimuthAngleDefaulted(self)

    def surface(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_surface(self)

    def groundCoverageRatio(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_groundCoverageRatio(self)

    def isGroundCoverageRatioDefaulted(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_isGroundCoverageRatioDefaulted(self)

    def setDCSystemCapacity(self, dcSystemCapacity):
        return _openstudiomodelgenerators.GeneratorPVWatts_setDCSystemCapacity(self, dcSystemCapacity)

    def setModuleType(self, moduleType):
        return _openstudiomodelgenerators.GeneratorPVWatts_setModuleType(self, moduleType)

    def resetModuleType(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_resetModuleType(self)

    def setArrayType(self, arrayType):
        return _openstudiomodelgenerators.GeneratorPVWatts_setArrayType(self, arrayType)

    def resetArrayType(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_resetArrayType(self)

    def setSystemLosses(self, systemLosses):
        return _openstudiomodelgenerators.GeneratorPVWatts_setSystemLosses(self, systemLosses)

    def resetSystemLosses(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_resetSystemLosses(self)

    def setTiltAngle(self, tiltAngle):
        return _openstudiomodelgenerators.GeneratorPVWatts_setTiltAngle(self, tiltAngle)

    def resetTiltAngle(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_resetTiltAngle(self)

    def setAzimuthAngle(self, azimuthAngle):
        return _openstudiomodelgenerators.GeneratorPVWatts_setAzimuthAngle(self, azimuthAngle)

    def resetAzimuthAngle(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_resetAzimuthAngle(self)

    def setSurface(self, surface):
        return _openstudiomodelgenerators.GeneratorPVWatts_setSurface(self, surface)

    def resetSurface(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_resetSurface(self)

    def setGroundCoverageRatio(self, groundCoverageRatio):
        return _openstudiomodelgenerators.GeneratorPVWatts_setGroundCoverageRatio(self, groundCoverageRatio)

    def resetGroundCoverageRatio(self):
        return _openstudiomodelgenerators.GeneratorPVWatts_resetGroundCoverageRatio(self)

# Register GeneratorPVWatts in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorPVWatts_swigregister(GeneratorPVWatts)

def toGeneratorPVWatts(idfObject):
    return _openstudiomodelgenerators.toGeneratorPVWatts(idfObject)

def getGeneratorPVWatts(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorPVWatts(t_model, t_handle)

def getGeneratorPVWattss(t_model):
    return _openstudiomodelgenerators.getGeneratorPVWattss(t_model)

def getGeneratorPVWattsByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorPVWattsByName(t_model, t_name)

def getGeneratorPVWattssByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorPVWattssByName(t_model, t_name, t_exactMatch)

def _to_GeneratorPVWatts(self) -> OptionalGeneratorPVWatts:
    """Try to cast the ModelObject to a GeneratorPVWatts.

    :return: An Optional GeneratorPVWatts.
    """
    return toGeneratorPVWatts(self)
openstudioutilitiesidf.IdfObject.to_GeneratorPVWatts = _to_GeneratorPVWatts

def _getGeneratorPVWatts(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorPVWatts:
    """Try to get an object of type GeneratorPVWatts referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorPVWatts.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorPVWatts(self, t_handle)
Model.getGeneratorPVWatts = _getGeneratorPVWatts

def _getGeneratorPVWattss(self) -> GeneratorPVWattsVector:
    """Get a vector of all objects of type GeneratorPVWatts in the model.

    :return: A vector of GeneratorPVWatts.
    """
    return getGeneratorPVWattss(self)
Model.getGeneratorPVWattss = _getGeneratorPVWattss

def _getGeneratorPVWattsByName(self, t_name: str) -> OptionalGeneratorPVWatts:
    """Try to get an object of type GeneratorPVWatts that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorPVWatts.
    """
    return getGeneratorPVWattsByName(self, t_name)
Model.getGeneratorPVWattsByName = _getGeneratorPVWattsByName

def _getGeneratorPVWattssByName(self, t_name: str, t_exactMatch: bool) -> GeneratorPVWattsVector:
    """Returns all objects of type GeneratorPVWatts named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorPVWattssByName(self, t_name, t_exactMatch)
Model.getGeneratorPVWattssByName = _getGeneratorPVWattssByName

class GeneratorWindTurbine(Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_GeneratorWindTurbine

    def __init__(self, *args):
        _openstudiomodelgenerators.GeneratorWindTurbine_swiginit(self, _openstudiomodelgenerators.new_GeneratorWindTurbine(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.GeneratorWindTurbine_iddObjectType()

    def rotorType(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_rotorType(self)

    def powerControl(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_powerControl(self)

    def ratedRotorSpeed(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_ratedRotorSpeed(self)

    def rotorDiameter(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_rotorDiameter(self)

    def overallHeight(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_overallHeight(self)

    def numberofBlades(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_numberofBlades(self)

    def ratedPower(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_ratedPower(self)

    def ratedWindSpeed(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_ratedWindSpeed(self)

    def cutInWindSpeed(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_cutInWindSpeed(self)

    def cutOutWindSpeed(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_cutOutWindSpeed(self)

    def fractionSystemEfficiency(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_fractionSystemEfficiency(self)

    def maximumTipSpeedRatio(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_maximumTipSpeedRatio(self)

    def maximumPowerCoefficient(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_maximumPowerCoefficient(self)

    def annualLocalAverageWindSpeed(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_annualLocalAverageWindSpeed(self)

    def heightforLocalAverageWindSpeed(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_heightforLocalAverageWindSpeed(self)

    def bladeChordArea(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_bladeChordArea(self)

    def bladeDragCoefficient(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_bladeDragCoefficient(self)

    def bladeLiftCoefficient(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_bladeLiftCoefficient(self)

    def powerCoefficientC1(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_powerCoefficientC1(self)

    def powerCoefficientC2(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_powerCoefficientC2(self)

    def powerCoefficientC3(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_powerCoefficientC3(self)

    def powerCoefficientC4(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_powerCoefficientC4(self)

    def powerCoefficientC5(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_powerCoefficientC5(self)

    def powerCoefficientC6(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_powerCoefficientC6(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setAvailabilitySchedule(self, schedule)

    def setRotorType(self, rotorType):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setRotorType(self, rotorType)

    def setPowerControl(self, powerControl):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setPowerControl(self, powerControl)

    def setRatedRotorSpeed(self, ratedRotorSpeed):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setRatedRotorSpeed(self, ratedRotorSpeed)

    def setRotorDiameter(self, rotorDiameter):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setRotorDiameter(self, rotorDiameter)

    def setOverallHeight(self, overallHeight):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setOverallHeight(self, overallHeight)

    def setNumberofBlades(self, numberofBlades):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setNumberofBlades(self, numberofBlades)

    def setRatedPower(self, ratedPower):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setRatedPower(self, ratedPower)

    def setRatedWindSpeed(self, ratedWindSpeed):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setRatedWindSpeed(self, ratedWindSpeed)

    def setCutInWindSpeed(self, cutInWindSpeed):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setCutInWindSpeed(self, cutInWindSpeed)

    def setCutOutWindSpeed(self, cutOutWindSpeed):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setCutOutWindSpeed(self, cutOutWindSpeed)

    def setFractionSystemEfficiency(self, fractionSystemEfficiency):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setFractionSystemEfficiency(self, fractionSystemEfficiency)

    def setMaximumTipSpeedRatio(self, maximumTipSpeedRatio):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setMaximumTipSpeedRatio(self, maximumTipSpeedRatio)

    def setMaximumPowerCoefficient(self, maximumPowerCoefficient):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setMaximumPowerCoefficient(self, maximumPowerCoefficient)

    def setAnnualLocalAverageWindSpeed(self, annualLocalAverageWindSpeed):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setAnnualLocalAverageWindSpeed(self, annualLocalAverageWindSpeed)

    def resetAnnualLocalAverageWindSpeed(self):
        return _openstudiomodelgenerators.GeneratorWindTurbine_resetAnnualLocalAverageWindSpeed(self)

    def setHeightforLocalAverageWindSpeed(self, heightforLocalAverageWindSpeed):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setHeightforLocalAverageWindSpeed(self, heightforLocalAverageWindSpeed)

    def setBladeChordArea(self, bladeChordArea):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setBladeChordArea(self, bladeChordArea)

    def setBladeDragCoefficient(self, bladeDragCoefficient):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setBladeDragCoefficient(self, bladeDragCoefficient)

    def setBladeLiftCoefficient(self, bladeLiftCoefficient):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setBladeLiftCoefficient(self, bladeLiftCoefficient)

    def setPowerCoefficientC1(self, powerCoefficientC1):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setPowerCoefficientC1(self, powerCoefficientC1)

    def setPowerCoefficientC2(self, powerCoefficientC2):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setPowerCoefficientC2(self, powerCoefficientC2)

    def setPowerCoefficientC3(self, powerCoefficientC3):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setPowerCoefficientC3(self, powerCoefficientC3)

    def setPowerCoefficientC4(self, powerCoefficientC4):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setPowerCoefficientC4(self, powerCoefficientC4)

    def setPowerCoefficientC5(self, powerCoefficientC5):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setPowerCoefficientC5(self, powerCoefficientC5)

    def setPowerCoefficientC6(self, powerCoefficientC6):
        return _openstudiomodelgenerators.GeneratorWindTurbine_setPowerCoefficientC6(self, powerCoefficientC6)

# Register GeneratorWindTurbine in _openstudiomodelgenerators:
_openstudiomodelgenerators.GeneratorWindTurbine_swigregister(GeneratorWindTurbine)

def toGeneratorWindTurbine(idfObject):
    return _openstudiomodelgenerators.toGeneratorWindTurbine(idfObject)

def getGeneratorWindTurbine(t_model, t_handle):
    return _openstudiomodelgenerators.getGeneratorWindTurbine(t_model, t_handle)

def getGeneratorWindTurbines(t_model):
    return _openstudiomodelgenerators.getGeneratorWindTurbines(t_model)

def getGeneratorWindTurbineByName(t_model, t_name):
    return _openstudiomodelgenerators.getGeneratorWindTurbineByName(t_model, t_name)

def getGeneratorWindTurbinesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getGeneratorWindTurbinesByName(t_model, t_name, t_exactMatch)

def _to_GeneratorWindTurbine(self) -> OptionalGeneratorWindTurbine:
    """Try to cast the ModelObject to a GeneratorWindTurbine.

    :return: An Optional GeneratorWindTurbine.
    """
    return toGeneratorWindTurbine(self)
openstudioutilitiesidf.IdfObject.to_GeneratorWindTurbine = _to_GeneratorWindTurbine

def _getGeneratorWindTurbine(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGeneratorWindTurbine:
    """Try to get an object of type GeneratorWindTurbine referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GeneratorWindTurbine.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGeneratorWindTurbine(self, t_handle)
Model.getGeneratorWindTurbine = _getGeneratorWindTurbine

def _getGeneratorWindTurbines(self) -> GeneratorWindTurbineVector:
    """Get a vector of all objects of type GeneratorWindTurbine in the model.

    :return: A vector of GeneratorWindTurbine.
    """
    return getGeneratorWindTurbines(self)
Model.getGeneratorWindTurbines = _getGeneratorWindTurbines

def _getGeneratorWindTurbineByName(self, t_name: str) -> OptionalGeneratorWindTurbine:
    """Try to get an object of type GeneratorWindTurbine that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GeneratorWindTurbine.
    """
    return getGeneratorWindTurbineByName(self, t_name)
Model.getGeneratorWindTurbineByName = _getGeneratorWindTurbineByName

def _getGeneratorWindTurbinesByName(self, t_name: str, t_exactMatch: bool) -> GeneratorWindTurbineVector:
    """Returns all objects of type GeneratorWindTurbine named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGeneratorWindTurbinesByName(self, t_name, t_exactMatch)
Model.getGeneratorWindTurbinesByName = _getGeneratorWindTurbinesByName

class ElectricLoadCenterTransformer(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterTransformer

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterTransformer_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterTransformer(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_iddObjectType()

    @staticmethod
    def transformerUsageValues():
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_transformerUsageValues()

    @staticmethod
    def phaseValues():
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_phaseValues()

    @staticmethod
    def conductorMaterialValues():
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_conductorMaterialValues()

    @staticmethod
    def performanceInputMethodValues():
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_performanceInputMethodValues()

    def availabilitySchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_availabilitySchedule(self)

    def transformerUsage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_transformerUsage(self)

    def isTransformerUsageDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isTransformerUsageDefaulted(self)

    def zone(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_zone(self)

    def radiativeFraction(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_radiativeFraction(self)

    def isRadiativeFractionDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isRadiativeFractionDefaulted(self)

    def ratedCapacity(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_ratedCapacity(self)

    def phase(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_phase(self)

    def isPhaseDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isPhaseDefaulted(self)

    def conductorMaterial(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_conductorMaterial(self)

    def isConductorMaterialDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isConductorMaterialDefaulted(self)

    def fullLoadTemperatureRise(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_fullLoadTemperatureRise(self)

    def isFullLoadTemperatureRiseDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isFullLoadTemperatureRiseDefaulted(self)

    def fractionofEddyCurrentLosses(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_fractionofEddyCurrentLosses(self)

    def isFractionofEddyCurrentLossesDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isFractionofEddyCurrentLossesDefaulted(self)

    def performanceInputMethod(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_performanceInputMethod(self)

    def isPerformanceInputMethodDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isPerformanceInputMethodDefaulted(self)

    def ratedNoLoadLoss(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_ratedNoLoadLoss(self)

    def ratedLoadLoss(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_ratedLoadLoss(self)

    def nameplateEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_nameplateEfficiency(self)

    def isNameplateEfficiencyDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isNameplateEfficiencyDefaulted(self)

    def perUnitLoadforNameplateEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_perUnitLoadforNameplateEfficiency(self)

    def isPerUnitLoadforNameplateEfficiencyDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isPerUnitLoadforNameplateEfficiencyDefaulted(self)

    def referenceTemperatureforNameplateEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_referenceTemperatureforNameplateEfficiency(self)

    def isReferenceTemperatureforNameplateEfficiencyDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isReferenceTemperatureforNameplateEfficiencyDefaulted(self)

    def perUnitLoadforMaximumEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_perUnitLoadforMaximumEfficiency(self)

    def considerTransformerLossforUtilityCost(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_considerTransformerLossforUtilityCost(self)

    def isConsiderTransformerLossforUtilityCostDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_isConsiderTransformerLossforUtilityCostDefaulted(self)

    def meters(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_meters(self)

    def getMeter(self, index):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_getMeter(self, index)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetAvailabilitySchedule(self)

    def setTransformerUsage(self, transformerUsage):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setTransformerUsage(self, transformerUsage)

    def resetTransformerUsage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetTransformerUsage(self)

    def setZone(self, thermalZone):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setZone(self, thermalZone)

    def resetZone(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetZone(self)

    def setRadiativeFraction(self, radiativeFraction):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setRadiativeFraction(self, radiativeFraction)

    def resetRadiativeFraction(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetRadiativeFraction(self)

    def setRatedCapacity(self, ratedCapacity):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setRatedCapacity(self, ratedCapacity)

    def resetRatedCapacity(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetRatedCapacity(self)

    def setPhase(self, phase):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setPhase(self, phase)

    def resetPhase(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetPhase(self)

    def setConductorMaterial(self, conductorMaterial):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setConductorMaterial(self, conductorMaterial)

    def resetConductorMaterial(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetConductorMaterial(self)

    def setFullLoadTemperatureRise(self, fullLoadTemperatureRise):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setFullLoadTemperatureRise(self, fullLoadTemperatureRise)

    def resetFullLoadTemperatureRise(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetFullLoadTemperatureRise(self)

    def setFractionofEddyCurrentLosses(self, fractionofEddyCurrentLosses):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setFractionofEddyCurrentLosses(self, fractionofEddyCurrentLosses)

    def resetFractionofEddyCurrentLosses(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetFractionofEddyCurrentLosses(self)

    def setPerformanceInputMethod(self, performanceInputMethod):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setPerformanceInputMethod(self, performanceInputMethod)

    def resetPerformanceInputMethod(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetPerformanceInputMethod(self)

    def setRatedNoLoadLoss(self, ratedNoLoadLoss):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setRatedNoLoadLoss(self, ratedNoLoadLoss)

    def resetRatedNoLoadLoss(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetRatedNoLoadLoss(self)

    def setRatedLoadLoss(self, ratedLoadLoss):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setRatedLoadLoss(self, ratedLoadLoss)

    def resetRatedLoadLoss(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetRatedLoadLoss(self)

    def setNameplateEfficiency(self, nameplateEfficiency):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setNameplateEfficiency(self, nameplateEfficiency)

    def resetNameplateEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetNameplateEfficiency(self)

    def setPerUnitLoadforNameplateEfficiency(self, perUnitLoadforNameplateEfficiency):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setPerUnitLoadforNameplateEfficiency(self, perUnitLoadforNameplateEfficiency)

    def resetPerUnitLoadforNameplateEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetPerUnitLoadforNameplateEfficiency(self)

    def setReferenceTemperatureforNameplateEfficiency(self, referenceTemperatureforNameplateEfficiency):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setReferenceTemperatureforNameplateEfficiency(self, referenceTemperatureforNameplateEfficiency)

    def resetReferenceTemperatureforNameplateEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetReferenceTemperatureforNameplateEfficiency(self)

    def setPerUnitLoadforMaximumEfficiency(self, perUnitLoadforMaximumEfficiency):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setPerUnitLoadforMaximumEfficiency(self, perUnitLoadforMaximumEfficiency)

    def resetPerUnitLoadforMaximumEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetPerUnitLoadforMaximumEfficiency(self)

    def setConsiderTransformerLossforUtilityCost(self, considerTransformerLossforUtilityCost):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setConsiderTransformerLossforUtilityCost(self, considerTransformerLossforUtilityCost)

    def resetConsiderTransformerLossforUtilityCost(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_resetConsiderTransformerLossforUtilityCost(self)

    def eraseMeters(self):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_eraseMeters(self)

    def eraseMeter(self, index):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_eraseMeter(self, index)

    def addMeter(self, meterName):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_addMeter(self, meterName)

    def setMeter(self, meterName, index):
        return _openstudiomodelgenerators.ElectricLoadCenterTransformer_setMeter(self, meterName, index)

# Register ElectricLoadCenterTransformer in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterTransformer_swigregister(ElectricLoadCenterTransformer)

def toElectricLoadCenterTransformer(idfObject):
    return _openstudiomodelgenerators.toElectricLoadCenterTransformer(idfObject)

def getElectricLoadCenterTransformer(t_model, t_handle):
    return _openstudiomodelgenerators.getElectricLoadCenterTransformer(t_model, t_handle)

def getElectricLoadCenterTransformers(t_model):
    return _openstudiomodelgenerators.getElectricLoadCenterTransformers(t_model)

def getElectricLoadCenterTransformerByName(t_model, t_name):
    return _openstudiomodelgenerators.getElectricLoadCenterTransformerByName(t_model, t_name)

def getElectricLoadCenterTransformersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getElectricLoadCenterTransformersByName(t_model, t_name, t_exactMatch)

def _to_ElectricLoadCenterTransformer(self) -> OptionalElectricLoadCenterTransformer:
    """Try to cast the ModelObject to a ElectricLoadCenterTransformer.

    :return: An Optional ElectricLoadCenterTransformer.
    """
    return toElectricLoadCenterTransformer(self)
openstudioutilitiesidf.IdfObject.to_ElectricLoadCenterTransformer = _to_ElectricLoadCenterTransformer

def _getElectricLoadCenterTransformer(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalElectricLoadCenterTransformer:
    """Try to get an object of type ElectricLoadCenterTransformer referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ElectricLoadCenterTransformer.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getElectricLoadCenterTransformer(self, t_handle)
Model.getElectricLoadCenterTransformer = _getElectricLoadCenterTransformer

def _getElectricLoadCenterTransformers(self) -> ElectricLoadCenterTransformerVector:
    """Get a vector of all objects of type ElectricLoadCenterTransformer in the model.

    :return: A vector of ElectricLoadCenterTransformer.
    """
    return getElectricLoadCenterTransformers(self)
Model.getElectricLoadCenterTransformers = _getElectricLoadCenterTransformers

def _getElectricLoadCenterTransformerByName(self, t_name: str) -> OptionalElectricLoadCenterTransformer:
    """Try to get an object of type ElectricLoadCenterTransformer that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ElectricLoadCenterTransformer.
    """
    return getElectricLoadCenterTransformerByName(self, t_name)
Model.getElectricLoadCenterTransformerByName = _getElectricLoadCenterTransformerByName

def _getElectricLoadCenterTransformersByName(self, t_name: str, t_exactMatch: bool) -> ElectricLoadCenterTransformerVector:
    """Returns all objects of type ElectricLoadCenterTransformer named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getElectricLoadCenterTransformersByName(self, t_name, t_exactMatch)
Model.getElectricLoadCenterTransformersByName = _getElectricLoadCenterTransformersByName

class ElectricLoadCenterDistribution(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterDistribution

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterDistribution_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterDistribution(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_iddObjectType()

    @staticmethod
    def generatorOperationSchemeTypeValues():
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_generatorOperationSchemeTypeValues()

    @staticmethod
    def electricalBussTypeValues():
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_electricalBussTypeValues()

    @staticmethod
    def storageOperationSchemeValues():
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageOperationSchemeValues()

    def generators(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_generators(self)

    def generatorOperationSchemeType(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_generatorOperationSchemeType(self)

    def isGeneratorOperationSchemeTypeDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_isGeneratorOperationSchemeTypeDefaulted(self)

    def demandLimitSchemePurchasedElectricDemandLimit(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_demandLimitSchemePurchasedElectricDemandLimit(self)

    def trackScheduleSchemeSchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_trackScheduleSchemeSchedule(self)

    def trackMeterSchemeMeterName(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_trackMeterSchemeMeterName(self)

    def electricalBussType(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_electricalBussType(self)

    def isElectricalBussTypeDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_isElectricalBussTypeDefaulted(self)

    def inverter(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_inverter(self)

    def electricalStorage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_electricalStorage(self)

    def transformer(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_transformer(self)

    def storageOperationScheme(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageOperationScheme(self)

    def isStorageOperationSchemeDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_isStorageOperationSchemeDefaulted(self)

    def storageControlTrackMeterName(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageControlTrackMeterName(self)

    def storageConverter(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageConverter(self)

    def maximumStorageStateofChargeFraction(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_maximumStorageStateofChargeFraction(self)

    def isMaximumStorageStateofChargeFractionDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_isMaximumStorageStateofChargeFractionDefaulted(self)

    def minimumStorageStateofChargeFraction(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_minimumStorageStateofChargeFraction(self)

    def isMinimumStorageStateofChargeFractionDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_isMinimumStorageStateofChargeFractionDefaulted(self)

    def designStorageControlChargePower(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_designStorageControlChargePower(self)

    def storageChargePowerFractionSchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageChargePowerFractionSchedule(self)

    def designStorageControlDischargePower(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_designStorageControlDischargePower(self)

    def storageDischargePowerFractionSchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageDischargePowerFractionSchedule(self)

    def storageControlUtilityDemandTarget(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageControlUtilityDemandTarget(self)

    def storageControlUtilityDemandTargetFractionSchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_storageControlUtilityDemandTargetFractionSchedule(self)

    def isStorageControlUtilityDemandTargetFractionScheduleDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_isStorageControlUtilityDemandTargetFractionScheduleDefaulted(self)

    def addGenerator(self, generator):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_addGenerator(self, generator)

    def removeGenerator(self, generator):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_removeGenerator(self, generator)

    def resetGenerators(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetGenerators(self)

    def setGeneratorOperationSchemeType(self, generatorOperationSchemeType):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setGeneratorOperationSchemeType(self, generatorOperationSchemeType)

    def resetGeneratorOperationSchemeType(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetGeneratorOperationSchemeType(self)

    def setDemandLimitSchemePurchasedElectricDemandLimit(self, demandLimitSchemePurchasedElectricDemandLimit):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setDemandLimitSchemePurchasedElectricDemandLimit(self, demandLimitSchemePurchasedElectricDemandLimit)

    def resetDemandLimitSchemePurchasedElectricDemandLimit(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetDemandLimitSchemePurchasedElectricDemandLimit(self)

    def setTrackScheduleSchemeSchedule(self, schedule):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setTrackScheduleSchemeSchedule(self, schedule)

    def resetTrackScheduleSchemeSchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetTrackScheduleSchemeSchedule(self)

    def setTrackMeterSchemeMeterName(self, trackMeterSchemeMeterName):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setTrackMeterSchemeMeterName(self, trackMeterSchemeMeterName)

    def resetTrackMeterSchemeMeterName(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetTrackMeterSchemeMeterName(self)

    def setElectricalBussType(self, electricalBussType):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setElectricalBussType(self, electricalBussType)

    def resetElectricalBussType(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetElectricalBussType(self)

    def setInverter(self, inverter):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setInverter(self, inverter)

    def resetInverter(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetInverter(self)

    def setElectricalStorage(self, electricalStorage):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setElectricalStorage(self, electricalStorage)

    def resetElectricalStorage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetElectricalStorage(self)

    def setTransformer(self, transformer):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setTransformer(self, transformer)

    def resetTransformer(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetTransformer(self)

    def setStorageOperationScheme(self, operationScheme):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setStorageOperationScheme(self, operationScheme)

    def resetStorageOperationScheme(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetStorageOperationScheme(self)

    def setStorageControlTrackMeterName(self, meterName):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setStorageControlTrackMeterName(self, meterName)

    def resetStorageControlTrackMeterName(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetStorageControlTrackMeterName(self)

    def setStorageConverter(self, converter):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setStorageConverter(self, converter)

    def resetStorageConverter(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetStorageConverter(self)

    def setMaximumStorageStateofChargeFraction(self, maxStateofCharge):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setMaximumStorageStateofChargeFraction(self, maxStateofCharge)

    def resetMaximumStorageStateofChargeFraction(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetMaximumStorageStateofChargeFraction(self)

    def setMinimumStorageStateofChargeFraction(self, minStateofCharge):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setMinimumStorageStateofChargeFraction(self, minStateofCharge)

    def resetMinimumStorageStateofChargeFraction(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetMinimumStorageStateofChargeFraction(self)

    def setDesignStorageControlChargePower(self, designStorageControlChargePower):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setDesignStorageControlChargePower(self, designStorageControlChargePower)

    def resetDesignStorageControlChargePower(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetDesignStorageControlChargePower(self)

    def setStorageChargePowerFractionSchedule(self, schedule):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setStorageChargePowerFractionSchedule(self, schedule)

    def resetStorageChargePowerFractionSchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetStorageChargePowerFractionSchedule(self)

    def setDesignStorageControlDischargePower(self, designStorageControlDischargePower):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setDesignStorageControlDischargePower(self, designStorageControlDischargePower)

    def resetDesignStorageControlDischargePower(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetDesignStorageControlDischargePower(self)

    def setStorageDischargePowerFractionSchedule(self, schedule):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setStorageDischargePowerFractionSchedule(self, schedule)

    def resetStorageDischargePowerFractionSchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetStorageDischargePowerFractionSchedule(self)

    def setStorageControlUtilityDemandTarget(self, storageControlUtilityDemandTarget):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setStorageControlUtilityDemandTarget(self, storageControlUtilityDemandTarget)

    def resetStorageControlUtilityDemandTarget(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetStorageControlUtilityDemandTarget(self)

    def setStorageControlUtilityDemandTargetFractionSchedule(self, schedule):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_setStorageControlUtilityDemandTargetFractionSchedule(self, schedule)

    def resetStorageControlUtilityDemandTargetFractionSchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_resetStorageControlUtilityDemandTargetFractionSchedule(self)

    def validityCheck(self):
        return _openstudiomodelgenerators.ElectricLoadCenterDistribution_validityCheck(self)

# Register ElectricLoadCenterDistribution in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterDistribution_swigregister(ElectricLoadCenterDistribution)

def toElectricLoadCenterDistribution(idfObject):
    return _openstudiomodelgenerators.toElectricLoadCenterDistribution(idfObject)

def getElectricLoadCenterDistribution(t_model, t_handle):
    return _openstudiomodelgenerators.getElectricLoadCenterDistribution(t_model, t_handle)

def getElectricLoadCenterDistributions(t_model):
    return _openstudiomodelgenerators.getElectricLoadCenterDistributions(t_model)

def getElectricLoadCenterDistributionByName(t_model, t_name):
    return _openstudiomodelgenerators.getElectricLoadCenterDistributionByName(t_model, t_name)

def getElectricLoadCenterDistributionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getElectricLoadCenterDistributionsByName(t_model, t_name, t_exactMatch)

def _to_ElectricLoadCenterDistribution(self) -> OptionalElectricLoadCenterDistribution:
    """Try to cast the ModelObject to a ElectricLoadCenterDistribution.

    :return: An Optional ElectricLoadCenterDistribution.
    """
    return toElectricLoadCenterDistribution(self)
openstudioutilitiesidf.IdfObject.to_ElectricLoadCenterDistribution = _to_ElectricLoadCenterDistribution

def _getElectricLoadCenterDistribution(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalElectricLoadCenterDistribution:
    """Try to get an object of type ElectricLoadCenterDistribution referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ElectricLoadCenterDistribution.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getElectricLoadCenterDistribution(self, t_handle)
Model.getElectricLoadCenterDistribution = _getElectricLoadCenterDistribution

def _getElectricLoadCenterDistributions(self) -> ElectricLoadCenterDistributionVector:
    """Get a vector of all objects of type ElectricLoadCenterDistribution in the model.

    :return: A vector of ElectricLoadCenterDistribution.
    """
    return getElectricLoadCenterDistributions(self)
Model.getElectricLoadCenterDistributions = _getElectricLoadCenterDistributions

def _getElectricLoadCenterDistributionByName(self, t_name: str) -> OptionalElectricLoadCenterDistribution:
    """Try to get an object of type ElectricLoadCenterDistribution that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ElectricLoadCenterDistribution.
    """
    return getElectricLoadCenterDistributionByName(self, t_name)
Model.getElectricLoadCenterDistributionByName = _getElectricLoadCenterDistributionByName

def _getElectricLoadCenterDistributionsByName(self, t_name: str, t_exactMatch: bool) -> ElectricLoadCenterDistributionVector:
    """Returns all objects of type ElectricLoadCenterDistribution named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getElectricLoadCenterDistributionsByName(self, t_name, t_exactMatch)
Model.getElectricLoadCenterDistributionsByName = _getElectricLoadCenterDistributionsByName

class ElectricLoadCenterInverterLookUpTable(Inverter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterInverterLookUpTable

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterInverterLookUpTable(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_iddObjectType()

    def availabilitySchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_availabilitySchedule(self)

    def radiativeFraction(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_radiativeFraction(self)

    def ratedMaximumContinuousOutputPower(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_ratedMaximumContinuousOutputPower(self)

    def nightTareLossPower(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_nightTareLossPower(self)

    def nominalVoltageInput(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_nominalVoltageInput(self)

    def efficiencyAt10PowerAndNominalVoltage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_efficiencyAt10PowerAndNominalVoltage(self)

    def efficiencyAt20PowerAndNominalVoltage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_efficiencyAt20PowerAndNominalVoltage(self)

    def efficiencyAt30PowerAndNominalVoltage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_efficiencyAt30PowerAndNominalVoltage(self)

    def efficiencyAt50PowerAndNominalVoltage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_efficiencyAt50PowerAndNominalVoltage(self)

    def efficiencyAt75PowerAndNominalVoltage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_efficiencyAt75PowerAndNominalVoltage(self)

    def efficiencyAt100PowerAndNominalVoltage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_efficiencyAt100PowerAndNominalVoltage(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetAvailabilitySchedule(self)

    def setRadiativeFraction(self, radiativeFraction):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setRadiativeFraction(self, radiativeFraction)

    def resetRadiativeFraction(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetRadiativeFraction(self)

    def setRatedMaximumContinuousOutputPower(self, ratedMaximumContinuousOutputPower):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setRatedMaximumContinuousOutputPower(self, ratedMaximumContinuousOutputPower)

    def resetRatedMaximumContinuousOutputPower(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetRatedMaximumContinuousOutputPower(self)

    def setNightTareLossPower(self, nightTareLossPower):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setNightTareLossPower(self, nightTareLossPower)

    def resetNightTareLossPower(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetNightTareLossPower(self)

    def setNominalVoltageInput(self, nominalVoltageInput):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setNominalVoltageInput(self, nominalVoltageInput)

    def resetNominalVoltageInput(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetNominalVoltageInput(self)

    def setEfficiencyAt10PowerAndNominalVoltage(self, efficiencyAt10PowerAndNominalVoltage):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setEfficiencyAt10PowerAndNominalVoltage(self, efficiencyAt10PowerAndNominalVoltage)

    def resetEfficiencyAt10PowerAndNominalVoltage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetEfficiencyAt10PowerAndNominalVoltage(self)

    def setEfficiencyAt20PowerAndNominalVoltage(self, efficiencyAt20PowerAndNominalVoltage):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setEfficiencyAt20PowerAndNominalVoltage(self, efficiencyAt20PowerAndNominalVoltage)

    def resetEfficiencyAt20PowerAndNominalVoltage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetEfficiencyAt20PowerAndNominalVoltage(self)

    def setEfficiencyAt30PowerAndNominalVoltage(self, efficiencyAt30PowerAndNominalVoltage):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setEfficiencyAt30PowerAndNominalVoltage(self, efficiencyAt30PowerAndNominalVoltage)

    def resetEfficiencyAt30PowerAndNominalVoltage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetEfficiencyAt30PowerAndNominalVoltage(self)

    def setEfficiencyAt50PowerAndNominalVoltage(self, efficiencyAt50PowerAndNominalVoltage):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setEfficiencyAt50PowerAndNominalVoltage(self, efficiencyAt50PowerAndNominalVoltage)

    def resetEfficiencyAt50PowerAndNominalVoltage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetEfficiencyAt50PowerAndNominalVoltage(self)

    def setEfficiencyAt75PowerAndNominalVoltage(self, efficiencyAt75PowerAndNominalVoltage):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setEfficiencyAt75PowerAndNominalVoltage(self, efficiencyAt75PowerAndNominalVoltage)

    def resetEfficiencyAt75PowerAndNominalVoltage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetEfficiencyAt75PowerAndNominalVoltage(self)

    def setEfficiencyAt100PowerAndNominalVoltage(self, efficiencyAt100PowerAndNominalVoltage):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_setEfficiencyAt100PowerAndNominalVoltage(self, efficiencyAt100PowerAndNominalVoltage)

    def resetEfficiencyAt100PowerAndNominalVoltage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_resetEfficiencyAt100PowerAndNominalVoltage(self)

# Register ElectricLoadCenterInverterLookUpTable in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterInverterLookUpTable_swigregister(ElectricLoadCenterInverterLookUpTable)

def toElectricLoadCenterInverterLookUpTable(idfObject):
    return _openstudiomodelgenerators.toElectricLoadCenterInverterLookUpTable(idfObject)

def getElectricLoadCenterInverterLookUpTable(t_model, t_handle):
    return _openstudiomodelgenerators.getElectricLoadCenterInverterLookUpTable(t_model, t_handle)

def getElectricLoadCenterInverterLookUpTables(t_model):
    return _openstudiomodelgenerators.getElectricLoadCenterInverterLookUpTables(t_model)

def getElectricLoadCenterInverterLookUpTableByName(t_model, t_name):
    return _openstudiomodelgenerators.getElectricLoadCenterInverterLookUpTableByName(t_model, t_name)

def getElectricLoadCenterInverterLookUpTablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getElectricLoadCenterInverterLookUpTablesByName(t_model, t_name, t_exactMatch)

def _to_ElectricLoadCenterInverterLookUpTable(self) -> OptionalElectricLoadCenterInverterLookUpTable:
    """Try to cast the ModelObject to a ElectricLoadCenterInverterLookUpTable.

    :return: An Optional ElectricLoadCenterInverterLookUpTable.
    """
    return toElectricLoadCenterInverterLookUpTable(self)
openstudioutilitiesidf.IdfObject.to_ElectricLoadCenterInverterLookUpTable = _to_ElectricLoadCenterInverterLookUpTable

def _getElectricLoadCenterInverterLookUpTable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalElectricLoadCenterInverterLookUpTable:
    """Try to get an object of type ElectricLoadCenterInverterLookUpTable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ElectricLoadCenterInverterLookUpTable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getElectricLoadCenterInverterLookUpTable(self, t_handle)
Model.getElectricLoadCenterInverterLookUpTable = _getElectricLoadCenterInverterLookUpTable

def _getElectricLoadCenterInverterLookUpTables(self) -> ElectricLoadCenterInverterLookUpTableVector:
    """Get a vector of all objects of type ElectricLoadCenterInverterLookUpTable in the model.

    :return: A vector of ElectricLoadCenterInverterLookUpTable.
    """
    return getElectricLoadCenterInverterLookUpTables(self)
Model.getElectricLoadCenterInverterLookUpTables = _getElectricLoadCenterInverterLookUpTables

def _getElectricLoadCenterInverterLookUpTableByName(self, t_name: str) -> OptionalElectricLoadCenterInverterLookUpTable:
    """Try to get an object of type ElectricLoadCenterInverterLookUpTable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ElectricLoadCenterInverterLookUpTable.
    """
    return getElectricLoadCenterInverterLookUpTableByName(self, t_name)
Model.getElectricLoadCenterInverterLookUpTableByName = _getElectricLoadCenterInverterLookUpTableByName

def _getElectricLoadCenterInverterLookUpTablesByName(self, t_name: str, t_exactMatch: bool) -> ElectricLoadCenterInverterLookUpTableVector:
    """Returns all objects of type ElectricLoadCenterInverterLookUpTable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getElectricLoadCenterInverterLookUpTablesByName(self, t_name, t_exactMatch)
Model.getElectricLoadCenterInverterLookUpTablesByName = _getElectricLoadCenterInverterLookUpTablesByName

class ElectricLoadCenterInverterSimple(Inverter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterInverterSimple

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterInverterSimple(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_iddObjectType()

    def availabilitySchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_availabilitySchedule(self)

    def radiativeFraction(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_radiativeFraction(self)

    def inverterEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_inverterEfficiency(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_resetAvailabilitySchedule(self)

    def setRadiativeFraction(self, radiativeFraction):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_setRadiativeFraction(self, radiativeFraction)

    def resetRadiativeFraction(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_resetRadiativeFraction(self)

    def setInverterEfficiency(self, inverterEfficiency):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_setInverterEfficiency(self, inverterEfficiency)

    def resetInverterEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterSimple_resetInverterEfficiency(self)

# Register ElectricLoadCenterInverterSimple in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterInverterSimple_swigregister(ElectricLoadCenterInverterSimple)

def toElectricLoadCenterInverterSimple(idfObject):
    return _openstudiomodelgenerators.toElectricLoadCenterInverterSimple(idfObject)

def getElectricLoadCenterInverterSimple(t_model, t_handle):
    return _openstudiomodelgenerators.getElectricLoadCenterInverterSimple(t_model, t_handle)

def getElectricLoadCenterInverterSimples(t_model):
    return _openstudiomodelgenerators.getElectricLoadCenterInverterSimples(t_model)

def getElectricLoadCenterInverterSimpleByName(t_model, t_name):
    return _openstudiomodelgenerators.getElectricLoadCenterInverterSimpleByName(t_model, t_name)

def getElectricLoadCenterInverterSimplesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getElectricLoadCenterInverterSimplesByName(t_model, t_name, t_exactMatch)

def _to_ElectricLoadCenterInverterSimple(self) -> OptionalElectricLoadCenterInverterSimple:
    """Try to cast the ModelObject to a ElectricLoadCenterInverterSimple.

    :return: An Optional ElectricLoadCenterInverterSimple.
    """
    return toElectricLoadCenterInverterSimple(self)
openstudioutilitiesidf.IdfObject.to_ElectricLoadCenterInverterSimple = _to_ElectricLoadCenterInverterSimple

def _getElectricLoadCenterInverterSimple(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalElectricLoadCenterInverterSimple:
    """Try to get an object of type ElectricLoadCenterInverterSimple referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ElectricLoadCenterInverterSimple.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getElectricLoadCenterInverterSimple(self, t_handle)
Model.getElectricLoadCenterInverterSimple = _getElectricLoadCenterInverterSimple

def _getElectricLoadCenterInverterSimples(self) -> ElectricLoadCenterInverterSimpleVector:
    """Get a vector of all objects of type ElectricLoadCenterInverterSimple in the model.

    :return: A vector of ElectricLoadCenterInverterSimple.
    """
    return getElectricLoadCenterInverterSimples(self)
Model.getElectricLoadCenterInverterSimples = _getElectricLoadCenterInverterSimples

def _getElectricLoadCenterInverterSimpleByName(self, t_name: str) -> OptionalElectricLoadCenterInverterSimple:
    """Try to get an object of type ElectricLoadCenterInverterSimple that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ElectricLoadCenterInverterSimple.
    """
    return getElectricLoadCenterInverterSimpleByName(self, t_name)
Model.getElectricLoadCenterInverterSimpleByName = _getElectricLoadCenterInverterSimpleByName

def _getElectricLoadCenterInverterSimplesByName(self, t_name: str, t_exactMatch: bool) -> ElectricLoadCenterInverterSimpleVector:
    """Returns all objects of type ElectricLoadCenterInverterSimple named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getElectricLoadCenterInverterSimplesByName(self, t_name, t_exactMatch)
Model.getElectricLoadCenterInverterSimplesByName = _getElectricLoadCenterInverterSimplesByName

class ElectricLoadCenterInverterPVWatts(Inverter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterInverterPVWatts

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterInverterPVWatts(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_iddObjectType()

    def dcToACSizeRatio(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_dcToACSizeRatio(self)

    def isDCToACSizeRatioDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_isDCToACSizeRatioDefaulted(self)

    def inverterEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_inverterEfficiency(self)

    def isInverterEfficiencyDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_isInverterEfficiencyDefaulted(self)

    def setDCToACSizeRatio(self, dcToACSizeRatio):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_setDCToACSizeRatio(self, dcToACSizeRatio)

    def resetDCToACSizeRatio(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_resetDCToACSizeRatio(self)

    def setInverterEfficiency(self, inverterEfficiency):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_setInverterEfficiency(self, inverterEfficiency)

    def resetInverterEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_resetInverterEfficiency(self)

# Register ElectricLoadCenterInverterPVWatts in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterInverterPVWatts_swigregister(ElectricLoadCenterInverterPVWatts)

def toElectricLoadCenterInverterPVWatts(idfObject):
    return _openstudiomodelgenerators.toElectricLoadCenterInverterPVWatts(idfObject)

def getElectricLoadCenterInverterPVWatts(t_model, t_handle):
    return _openstudiomodelgenerators.getElectricLoadCenterInverterPVWatts(t_model, t_handle)

def getElectricLoadCenterInverterPVWattss(t_model):
    return _openstudiomodelgenerators.getElectricLoadCenterInverterPVWattss(t_model)

def getElectricLoadCenterInverterPVWattsByName(t_model, t_name):
    return _openstudiomodelgenerators.getElectricLoadCenterInverterPVWattsByName(t_model, t_name)

def getElectricLoadCenterInverterPVWattssByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getElectricLoadCenterInverterPVWattssByName(t_model, t_name, t_exactMatch)

def _to_ElectricLoadCenterInverterPVWatts(self) -> OptionalElectricLoadCenterInverterPVWatts:
    """Try to cast the ModelObject to a ElectricLoadCenterInverterPVWatts.

    :return: An Optional ElectricLoadCenterInverterPVWatts.
    """
    return toElectricLoadCenterInverterPVWatts(self)
openstudioutilitiesidf.IdfObject.to_ElectricLoadCenterInverterPVWatts = _to_ElectricLoadCenterInverterPVWatts

def _getElectricLoadCenterInverterPVWatts(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalElectricLoadCenterInverterPVWatts:
    """Try to get an object of type ElectricLoadCenterInverterPVWatts referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ElectricLoadCenterInverterPVWatts.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getElectricLoadCenterInverterPVWatts(self, t_handle)
Model.getElectricLoadCenterInverterPVWatts = _getElectricLoadCenterInverterPVWatts

def _getElectricLoadCenterInverterPVWattss(self) -> ElectricLoadCenterInverterPVWattsVector:
    """Get a vector of all objects of type ElectricLoadCenterInverterPVWatts in the model.

    :return: A vector of ElectricLoadCenterInverterPVWatts.
    """
    return getElectricLoadCenterInverterPVWattss(self)
Model.getElectricLoadCenterInverterPVWattss = _getElectricLoadCenterInverterPVWattss

def _getElectricLoadCenterInverterPVWattsByName(self, t_name: str) -> OptionalElectricLoadCenterInverterPVWatts:
    """Try to get an object of type ElectricLoadCenterInverterPVWatts that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ElectricLoadCenterInverterPVWatts.
    """
    return getElectricLoadCenterInverterPVWattsByName(self, t_name)
Model.getElectricLoadCenterInverterPVWattsByName = _getElectricLoadCenterInverterPVWattsByName

def _getElectricLoadCenterInverterPVWattssByName(self, t_name: str, t_exactMatch: bool) -> ElectricLoadCenterInverterPVWattsVector:
    """Returns all objects of type ElectricLoadCenterInverterPVWatts named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getElectricLoadCenterInverterPVWattssByName(self, t_name, t_exactMatch)
Model.getElectricLoadCenterInverterPVWattssByName = _getElectricLoadCenterInverterPVWattssByName

class ElectricLoadCenterStorageSimple(ElectricalStorage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterStorageSimple

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterStorageSimple(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_iddObjectType()

    def availabilitySchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_availabilitySchedule(self)

    def isAvailabilityScheduleDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_isAvailabilityScheduleDefaulted(self)

    def radiativeFractionforZoneHeatGains(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_radiativeFractionforZoneHeatGains(self)

    def isRadiativeFractionforZoneHeatGainsDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_isRadiativeFractionforZoneHeatGainsDefaulted(self)

    def nominalEnergeticEfficiencyforCharging(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_nominalEnergeticEfficiencyforCharging(self)

    def isNominalEnergeticEfficiencyforChargingDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_isNominalEnergeticEfficiencyforChargingDefaulted(self)

    def nominalDischargingEnergeticEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_nominalDischargingEnergeticEfficiency(self)

    def isNominalDischargingEnergeticEfficiencyDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_isNominalDischargingEnergeticEfficiencyDefaulted(self)

    def maximumStorageCapacity(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_maximumStorageCapacity(self)

    def maximumPowerforDischarging(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_maximumPowerforDischarging(self)

    def maximumPowerforCharging(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_maximumPowerforCharging(self)

    def initialStateofCharge(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_initialStateofCharge(self)

    def isInitialStateofChargeDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_isInitialStateofChargeDefaulted(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_resetAvailabilitySchedule(self)

    def setRadiativeFractionforZoneHeatGains(self, radiativeFractionforZoneHeatGains):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setRadiativeFractionforZoneHeatGains(self, radiativeFractionforZoneHeatGains)

    def resetRadiativeFractionforZoneHeatGains(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_resetRadiativeFractionforZoneHeatGains(self)

    def setNominalEnergeticEfficiencyforCharging(self, nominalEnergeticEfficiencyforCharging):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setNominalEnergeticEfficiencyforCharging(self, nominalEnergeticEfficiencyforCharging)

    def resetNominalEnergeticEfficiencyforCharging(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_resetNominalEnergeticEfficiencyforCharging(self)

    def setNominalDischargingEnergeticEfficiency(self, nominalDischargingEnergeticEfficiency):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setNominalDischargingEnergeticEfficiency(self, nominalDischargingEnergeticEfficiency)

    def resetNominalDischargingEnergeticEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_resetNominalDischargingEnergeticEfficiency(self)

    def setMaximumStorageCapacity(self, maximumStorageCapacity):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setMaximumStorageCapacity(self, maximumStorageCapacity)

    def setMaximumPowerforDischarging(self, maximumPowerforDischarging):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setMaximumPowerforDischarging(self, maximumPowerforDischarging)

    def setMaximumPowerforCharging(self, maximumPowerforCharging):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setMaximumPowerforCharging(self, maximumPowerforCharging)

    def setInitialStateofCharge(self, initialStateofCharge):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_setInitialStateofCharge(self, initialStateofCharge)

    def resetInitialStateofCharge(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageSimple_resetInitialStateofCharge(self)

# Register ElectricLoadCenterStorageSimple in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterStorageSimple_swigregister(ElectricLoadCenterStorageSimple)

def toElectricLoadCenterStorageSimple(idfObject):
    return _openstudiomodelgenerators.toElectricLoadCenterStorageSimple(idfObject)

def getElectricLoadCenterStorageSimple(t_model, t_handle):
    return _openstudiomodelgenerators.getElectricLoadCenterStorageSimple(t_model, t_handle)

def getElectricLoadCenterStorageSimples(t_model):
    return _openstudiomodelgenerators.getElectricLoadCenterStorageSimples(t_model)

def getElectricLoadCenterStorageSimpleByName(t_model, t_name):
    return _openstudiomodelgenerators.getElectricLoadCenterStorageSimpleByName(t_model, t_name)

def getElectricLoadCenterStorageSimplesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getElectricLoadCenterStorageSimplesByName(t_model, t_name, t_exactMatch)

def _to_ElectricLoadCenterStorageSimple(self) -> OptionalElectricLoadCenterStorageSimple:
    """Try to cast the ModelObject to a ElectricLoadCenterStorageSimple.

    :return: An Optional ElectricLoadCenterStorageSimple.
    """
    return toElectricLoadCenterStorageSimple(self)
openstudioutilitiesidf.IdfObject.to_ElectricLoadCenterStorageSimple = _to_ElectricLoadCenterStorageSimple

def _getElectricLoadCenterStorageSimple(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalElectricLoadCenterStorageSimple:
    """Try to get an object of type ElectricLoadCenterStorageSimple referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ElectricLoadCenterStorageSimple.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getElectricLoadCenterStorageSimple(self, t_handle)
Model.getElectricLoadCenterStorageSimple = _getElectricLoadCenterStorageSimple

def _getElectricLoadCenterStorageSimples(self) -> ElectricLoadCenterStorageSimpleVector:
    """Get a vector of all objects of type ElectricLoadCenterStorageSimple in the model.

    :return: A vector of ElectricLoadCenterStorageSimple.
    """
    return getElectricLoadCenterStorageSimples(self)
Model.getElectricLoadCenterStorageSimples = _getElectricLoadCenterStorageSimples

def _getElectricLoadCenterStorageSimpleByName(self, t_name: str) -> OptionalElectricLoadCenterStorageSimple:
    """Try to get an object of type ElectricLoadCenterStorageSimple that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ElectricLoadCenterStorageSimple.
    """
    return getElectricLoadCenterStorageSimpleByName(self, t_name)
Model.getElectricLoadCenterStorageSimpleByName = _getElectricLoadCenterStorageSimpleByName

def _getElectricLoadCenterStorageSimplesByName(self, t_name: str, t_exactMatch: bool) -> ElectricLoadCenterStorageSimpleVector:
    """Returns all objects of type ElectricLoadCenterStorageSimple named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getElectricLoadCenterStorageSimplesByName(self, t_name, t_exactMatch)
Model.getElectricLoadCenterStorageSimplesByName = _getElectricLoadCenterStorageSimplesByName

class ElectricLoadCenterStorageConverter(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterStorageConverter

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterStorageConverter(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_iddObjectType()

    @staticmethod
    def powerConversionEfficiencyMethodValues():
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_powerConversionEfficiencyMethodValues()

    def electricLoadCenterDistribution(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_electricLoadCenterDistribution(self)

    def availabilitySchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_availabilitySchedule(self)

    def isAvailabilityScheduleDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_isAvailabilityScheduleDefaulted(self)

    def powerConversionEfficiencyMethod(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_powerConversionEfficiencyMethod(self)

    def simpleFixedEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_simpleFixedEfficiency(self)

    def designMaximumContinuousInputPower(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_designMaximumContinuousInputPower(self)

    def efficiencyFunctionofPowerCurve(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_efficiencyFunctionofPowerCurve(self)

    def ancillaryPowerConsumedInStandby(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_ancillaryPowerConsumedInStandby(self)

    def isAncillaryPowerConsumedInStandbyDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_isAncillaryPowerConsumedInStandbyDefaulted(self)

    def thermalZone(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_thermalZone(self)

    def radiativeFraction(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_radiativeFraction(self)

    def isRadiativeFractionDefaulted(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_isRadiativeFractionDefaulted(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_resetAvailabilitySchedule(self)

    def setSimpleFixedEfficiency(self, simpleFixedEfficiency):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_setSimpleFixedEfficiency(self, simpleFixedEfficiency)

    def setDesignMaximumContinuousInputPower(self, designMaximumContinuousInputPower):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_setDesignMaximumContinuousInputPower(self, designMaximumContinuousInputPower)

    def setEfficiencyFunctionofPowerCurve(self, efficiencyFunctionofPowerCurve):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_setEfficiencyFunctionofPowerCurve(self, efficiencyFunctionofPowerCurve)

    def setAncillaryPowerConsumedInStandby(self, ancillaryPowerConsumedInStandby):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_setAncillaryPowerConsumedInStandby(self, ancillaryPowerConsumedInStandby)

    def resetAncillaryPowerConsumedInStandby(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_resetAncillaryPowerConsumedInStandby(self)

    def setThermalZone(self, thermalZone):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_setThermalZone(self, thermalZone)

    def resetThermalZone(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_resetThermalZone(self)

    def setRadiativeFraction(self, radiativeFraction):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_setRadiativeFraction(self, radiativeFraction)

    def resetRadiativeFraction(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageConverter_resetRadiativeFraction(self)

# Register ElectricLoadCenterStorageConverter in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterStorageConverter_swigregister(ElectricLoadCenterStorageConverter)

def toElectricLoadCenterStorageConverter(idfObject):
    return _openstudiomodelgenerators.toElectricLoadCenterStorageConverter(idfObject)

def getElectricLoadCenterStorageConverter(t_model, t_handle):
    return _openstudiomodelgenerators.getElectricLoadCenterStorageConverter(t_model, t_handle)

def getElectricLoadCenterStorageConverters(t_model):
    return _openstudiomodelgenerators.getElectricLoadCenterStorageConverters(t_model)

def getElectricLoadCenterStorageConverterByName(t_model, t_name):
    return _openstudiomodelgenerators.getElectricLoadCenterStorageConverterByName(t_model, t_name)

def getElectricLoadCenterStorageConvertersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getElectricLoadCenterStorageConvertersByName(t_model, t_name, t_exactMatch)

def _to_ElectricLoadCenterStorageConverter(self) -> OptionalElectricLoadCenterStorageConverter:
    """Try to cast the ModelObject to a ElectricLoadCenterStorageConverter.

    :return: An Optional ElectricLoadCenterStorageConverter.
    """
    return toElectricLoadCenterStorageConverter(self)
openstudioutilitiesidf.IdfObject.to_ElectricLoadCenterStorageConverter = _to_ElectricLoadCenterStorageConverter

def _getElectricLoadCenterStorageConverter(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalElectricLoadCenterStorageConverter:
    """Try to get an object of type ElectricLoadCenterStorageConverter referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ElectricLoadCenterStorageConverter.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getElectricLoadCenterStorageConverter(self, t_handle)
Model.getElectricLoadCenterStorageConverter = _getElectricLoadCenterStorageConverter

def _getElectricLoadCenterStorageConverters(self) -> ElectricLoadCenterStorageConverterVector:
    """Get a vector of all objects of type ElectricLoadCenterStorageConverter in the model.

    :return: A vector of ElectricLoadCenterStorageConverter.
    """
    return getElectricLoadCenterStorageConverters(self)
Model.getElectricLoadCenterStorageConverters = _getElectricLoadCenterStorageConverters

def _getElectricLoadCenterStorageConverterByName(self, t_name: str) -> OptionalElectricLoadCenterStorageConverter:
    """Try to get an object of type ElectricLoadCenterStorageConverter that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ElectricLoadCenterStorageConverter.
    """
    return getElectricLoadCenterStorageConverterByName(self, t_name)
Model.getElectricLoadCenterStorageConverterByName = _getElectricLoadCenterStorageConverterByName

def _getElectricLoadCenterStorageConvertersByName(self, t_name: str, t_exactMatch: bool) -> ElectricLoadCenterStorageConverterVector:
    """Returns all objects of type ElectricLoadCenterStorageConverter named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getElectricLoadCenterStorageConvertersByName(self, t_name, t_exactMatch)
Model.getElectricLoadCenterStorageConvertersByName = _getElectricLoadCenterStorageConvertersByName

class ElectricLoadCenterStorageLiIonNMCBattery(ElectricalStorage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_ElectricLoadCenterStorageLiIonNMCBattery

    def __init__(self, *args):
        _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_swiginit(self, _openstudiomodelgenerators.new_ElectricLoadCenterStorageLiIonNMCBattery(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_iddObjectType()

    @staticmethod
    def lifetimeModelValues():
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_lifetimeModelValues()

    def availabilitySchedule(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_availabilitySchedule(self)

    def radiativeFraction(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_radiativeFraction(self)

    def lifetimeModel(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_lifetimeModel(self)

    def numberofCellsinSeries(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_numberofCellsinSeries(self)

    def numberofStringsinParallel(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_numberofStringsinParallel(self)

    def initialFractionalStateofCharge(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_initialFractionalStateofCharge(self)

    def dctoDCChargingEfficiency(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_dctoDCChargingEfficiency(self)

    def batteryMass(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_batteryMass(self)

    def batterySurfaceArea(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_batterySurfaceArea(self)

    def batterySpecificHeatCapacity(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_batterySpecificHeatCapacity(self)

    def heatTransferCoefficientBetweenBatteryandAmbient(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_heatTransferCoefficientBetweenBatteryandAmbient(self)

    def fullyChargedCellVoltage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_fullyChargedCellVoltage(self)

    def cellVoltageatEndofExponentialZone(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_cellVoltageatEndofExponentialZone(self)

    def cellVoltageatEndofNominalZone(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_cellVoltageatEndofNominalZone(self)

    def defaultNominalCellVoltage(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_defaultNominalCellVoltage(self)

    def fullyChargedCellCapacity(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_fullyChargedCellCapacity(self)

    def fractionofCellCapacityRemovedattheEndofExponentialZone(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_fractionofCellCapacityRemovedattheEndofExponentialZone(self)

    def fractionofCellCapacityRemovedattheEndofNominalZone(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_fractionofCellCapacityRemovedattheEndofNominalZone(self)

    def chargeRateatWhichVoltagevsCapacityCurveWasGenerated(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_chargeRateatWhichVoltagevsCapacityCurveWasGenerated(self)

    def batteryCellInternalElectricalResistance(self):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_batteryCellInternalElectricalResistance(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setAvailabilitySchedule(self, schedule)

    def setRadiativeFraction(self, radiativeFraction):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setRadiativeFraction(self, radiativeFraction)

    def setLifetimeModel(self, lifetimeModel):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setLifetimeModel(self, lifetimeModel)

    def setNumberofCellsinSeries(self, numberofCellsinSeries):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setNumberofCellsinSeries(self, numberofCellsinSeries)

    def setNumberofStringsinParallel(self, numberofStringsinParallel):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setNumberofStringsinParallel(self, numberofStringsinParallel)

    def setInitialFractionalStateofCharge(self, initialFractionalStateofCharge):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setInitialFractionalStateofCharge(self, initialFractionalStateofCharge)

    def setDCtoDCChargingEfficiency(self, dctoDCChargingEfficiency):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setDCtoDCChargingEfficiency(self, dctoDCChargingEfficiency)

    def setBatteryMass(self, batteryMass):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setBatteryMass(self, batteryMass)

    def setBatterySurfaceArea(self, batterySurfaceArea):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setBatterySurfaceArea(self, batterySurfaceArea)

    def setBatterySpecificHeatCapacity(self, batterySpecificHeatCapacity):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setBatterySpecificHeatCapacity(self, batterySpecificHeatCapacity)

    def setHeatTransferCoefficientBetweenBatteryandAmbient(self, heatTransferCoefficientBetweenBatteryandAmbient):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setHeatTransferCoefficientBetweenBatteryandAmbient(self, heatTransferCoefficientBetweenBatteryandAmbient)

    def setFullyChargedCellVoltage(self, fullyChargedCellCapacity):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setFullyChargedCellVoltage(self, fullyChargedCellCapacity)

    def setCellVoltageatEndofExponentialZone(self, cellVoltageatEndofExponentialZone):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setCellVoltageatEndofExponentialZone(self, cellVoltageatEndofExponentialZone)

    def setCellVoltageatEndofNominalZone(self, cellVoltageatEndofNominalZone):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setCellVoltageatEndofNominalZone(self, cellVoltageatEndofNominalZone)

    def setDefaultNominalCellVoltage(self, defaultNominalCellVoltage):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setDefaultNominalCellVoltage(self, defaultNominalCellVoltage)

    def setFullyChargedCellCapacity(self, fullyChargedCellCapacity):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setFullyChargedCellCapacity(self, fullyChargedCellCapacity)

    def setFractionofCellCapacityRemovedattheEndofExponentialZone(self, fractionofCellCapacityRemovedattheEndofExponentialZone):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setFractionofCellCapacityRemovedattheEndofExponentialZone(self, fractionofCellCapacityRemovedattheEndofExponentialZone)

    def setFractionofCellCapacityRemovedattheEndofNominalZone(self, fractionofCellCapacityRemovedattheEndofNominalZone):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setFractionofCellCapacityRemovedattheEndofNominalZone(self, fractionofCellCapacityRemovedattheEndofNominalZone)

    def setChargeRateatWhichVoltagevsCapacityCurveWasGenerated(self, chargeRateatWhichVoltagevsCapacityCurveWasGenerated):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setChargeRateatWhichVoltagevsCapacityCurveWasGenerated(self, chargeRateatWhichVoltagevsCapacityCurveWasGenerated)

    def setBatteryCellInternalElectricalResistance(self, batteryCellInternalElectricalResistance):
        return _openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_setBatteryCellInternalElectricalResistance(self, batteryCellInternalElectricalResistance)

# Register ElectricLoadCenterStorageLiIonNMCBattery in _openstudiomodelgenerators:
_openstudiomodelgenerators.ElectricLoadCenterStorageLiIonNMCBattery_swigregister(ElectricLoadCenterStorageLiIonNMCBattery)

def toElectricLoadCenterStorageLiIonNMCBattery(idfObject):
    return _openstudiomodelgenerators.toElectricLoadCenterStorageLiIonNMCBattery(idfObject)

def getElectricLoadCenterStorageLiIonNMCBattery(t_model, t_handle):
    return _openstudiomodelgenerators.getElectricLoadCenterStorageLiIonNMCBattery(t_model, t_handle)

def getElectricLoadCenterStorageLiIonNMCBatterys(t_model):
    return _openstudiomodelgenerators.getElectricLoadCenterStorageLiIonNMCBatterys(t_model)

def getElectricLoadCenterStorageLiIonNMCBatteryByName(t_model, t_name):
    return _openstudiomodelgenerators.getElectricLoadCenterStorageLiIonNMCBatteryByName(t_model, t_name)

def getElectricLoadCenterStorageLiIonNMCBatterysByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getElectricLoadCenterStorageLiIonNMCBatterysByName(t_model, t_name, t_exactMatch)

def _to_ElectricLoadCenterStorageLiIonNMCBattery(self) -> OptionalElectricLoadCenterStorageLiIonNMCBattery:
    """Try to cast the ModelObject to a ElectricLoadCenterStorageLiIonNMCBattery.

    :return: An Optional ElectricLoadCenterStorageLiIonNMCBattery.
    """
    return toElectricLoadCenterStorageLiIonNMCBattery(self)
openstudioutilitiesidf.IdfObject.to_ElectricLoadCenterStorageLiIonNMCBattery = _to_ElectricLoadCenterStorageLiIonNMCBattery

def _getElectricLoadCenterStorageLiIonNMCBattery(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalElectricLoadCenterStorageLiIonNMCBattery:
    """Try to get an object of type ElectricLoadCenterStorageLiIonNMCBattery referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ElectricLoadCenterStorageLiIonNMCBattery.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getElectricLoadCenterStorageLiIonNMCBattery(self, t_handle)
Model.getElectricLoadCenterStorageLiIonNMCBattery = _getElectricLoadCenterStorageLiIonNMCBattery

def _getElectricLoadCenterStorageLiIonNMCBatterys(self) -> ElectricLoadCenterStorageLiIonNMCBatteryVector:
    """Get a vector of all objects of type ElectricLoadCenterStorageLiIonNMCBattery in the model.

    :return: A vector of ElectricLoadCenterStorageLiIonNMCBattery.
    """
    return getElectricLoadCenterStorageLiIonNMCBatterys(self)
Model.getElectricLoadCenterStorageLiIonNMCBatterys = _getElectricLoadCenterStorageLiIonNMCBatterys

def _getElectricLoadCenterStorageLiIonNMCBatteryByName(self, t_name: str) -> OptionalElectricLoadCenterStorageLiIonNMCBattery:
    """Try to get an object of type ElectricLoadCenterStorageLiIonNMCBattery that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ElectricLoadCenterStorageLiIonNMCBattery.
    """
    return getElectricLoadCenterStorageLiIonNMCBatteryByName(self, t_name)
Model.getElectricLoadCenterStorageLiIonNMCBatteryByName = _getElectricLoadCenterStorageLiIonNMCBatteryByName

def _getElectricLoadCenterStorageLiIonNMCBatterysByName(self, t_name: str, t_exactMatch: bool) -> ElectricLoadCenterStorageLiIonNMCBatteryVector:
    """Returns all objects of type ElectricLoadCenterStorageLiIonNMCBattery named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getElectricLoadCenterStorageLiIonNMCBatterysByName(self, t_name, t_exactMatch)
Model.getElectricLoadCenterStorageLiIonNMCBatterysByName = _getElectricLoadCenterStorageLiIonNMCBatterysByName

class PhotovoltaicPerformanceEquivalentOneDiode(PhotovoltaicPerformance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_PhotovoltaicPerformanceEquivalentOneDiode

    def __init__(self, *args):
        _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_swiginit(self, _openstudiomodelgenerators.new_PhotovoltaicPerformanceEquivalentOneDiode(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_iddObjectType()

    @staticmethod
    def celltypeValues():
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_celltypeValues()

    def celltype(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_celltype(self)

    def isCelltypeDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isCelltypeDefaulted(self)

    def numberOfCellsInSeries(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_numberOfCellsInSeries(self)

    def isNumberOfCellsInSeriesDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isNumberOfCellsInSeriesDefaulted(self)

    def activeArea(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_activeArea(self)

    def isActiveAreaDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isActiveAreaDefaulted(self)

    def transmittanceAbsorptanceProduct(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_transmittanceAbsorptanceProduct(self)

    def isTransmittanceAbsorptanceProductDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isTransmittanceAbsorptanceProductDefaulted(self)

    def semiconductorBandgap(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_semiconductorBandgap(self)

    def isSemiconductorBandgapDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isSemiconductorBandgapDefaulted(self)

    def shuntResistance(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_shuntResistance(self)

    def isShuntResistanceDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isShuntResistanceDefaulted(self)

    def shortCircuitCurrent(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_shortCircuitCurrent(self)

    def isShortCircuitCurrentDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isShortCircuitCurrentDefaulted(self)

    def openCircuitVoltage(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_openCircuitVoltage(self)

    def isOpenCircuitVoltageDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isOpenCircuitVoltageDefaulted(self)

    def referenceTemperature(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_referenceTemperature(self)

    def isReferenceTemperatureDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isReferenceTemperatureDefaulted(self)

    def referenceInsolation(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_referenceInsolation(self)

    def isReferenceInsolationDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isReferenceInsolationDefaulted(self)

    def moduleCurrentatMaximumPower(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_moduleCurrentatMaximumPower(self)

    def isModuleCurrentatMaximumPowerDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isModuleCurrentatMaximumPowerDefaulted(self)

    def moduleVoltageatMaximumPower(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_moduleVoltageatMaximumPower(self)

    def isModuleVoltageatMaximumPowerDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isModuleVoltageatMaximumPowerDefaulted(self)

    def temperatureCoefficientofShortCircuitCurrent(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_temperatureCoefficientofShortCircuitCurrent(self)

    def isTemperatureCoefficientofShortCircuitCurrentDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isTemperatureCoefficientofShortCircuitCurrentDefaulted(self)

    def temperatureCoefficientofOpenCircuitVoltage(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_temperatureCoefficientofOpenCircuitVoltage(self)

    def isTemperatureCoefficientofOpenCircuitVoltageDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isTemperatureCoefficientofOpenCircuitVoltageDefaulted(self)

    def nominalOperatingCellTemperatureTestAmbientTemperature(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_nominalOperatingCellTemperatureTestAmbientTemperature(self)

    def isNominalOperatingCellTemperatureTestAmbientTemperatureDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isNominalOperatingCellTemperatureTestAmbientTemperatureDefaulted(self)

    def nominalOperatingCellTemperatureTestCellTemperature(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_nominalOperatingCellTemperatureTestCellTemperature(self)

    def isNominalOperatingCellTemperatureTestCellTemperatureDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isNominalOperatingCellTemperatureTestCellTemperatureDefaulted(self)

    def nominalOperatingCellTemperatureTestInsolation(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_nominalOperatingCellTemperatureTestInsolation(self)

    def isNominalOperatingCellTemperatureTestInsolationDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isNominalOperatingCellTemperatureTestInsolationDefaulted(self)

    def moduleHeatLossCoefficient(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_moduleHeatLossCoefficient(self)

    def isModuleHeatLossCoefficientDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isModuleHeatLossCoefficientDefaulted(self)

    def totalHeatCapacity(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_totalHeatCapacity(self)

    def isTotalHeatCapacityDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_isTotalHeatCapacityDefaulted(self)

    def setCelltype(self, celltype):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setCelltype(self, celltype)

    def resetCelltype(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetCelltype(self)

    def setNumberofCellsinSeries(self, numberOfCellsInSeries):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setNumberofCellsinSeries(self, numberOfCellsInSeries)

    def resetNumberofCellsinSeries(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetNumberofCellsinSeries(self)

    def setActiveArea(self, activeArea):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setActiveArea(self, activeArea)

    def resetActiveArea(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetActiveArea(self)

    def setTransmittanceAbsorptanceProduct(self, transmittanceAbsorptanceProduct):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setTransmittanceAbsorptanceProduct(self, transmittanceAbsorptanceProduct)

    def resetTransmittanceAbsorptanceProduct(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetTransmittanceAbsorptanceProduct(self)

    def setSemiconductorBandgap(self, semiconductorBandgap):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setSemiconductorBandgap(self, semiconductorBandgap)

    def resetSemiconductorBandgap(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetSemiconductorBandgap(self)

    def setShuntResistance(self, shuntResistance):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setShuntResistance(self, shuntResistance)

    def resetShuntResistance(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetShuntResistance(self)

    def setShortCircuitCurrent(self, shortCircuitCurrent):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setShortCircuitCurrent(self, shortCircuitCurrent)

    def resetShortCircuitCurrent(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetShortCircuitCurrent(self)

    def setOpenCircuitVoltage(self, openCircuitVoltage):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setOpenCircuitVoltage(self, openCircuitVoltage)

    def resetOpenCircuitVoltage(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetOpenCircuitVoltage(self)

    def setReferenceTemperature(self, referenceTemperature):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setReferenceTemperature(self, referenceTemperature)

    def resetReferenceTemperature(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetReferenceTemperature(self)

    def setReferenceInsolation(self, referenceInsolation):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setReferenceInsolation(self, referenceInsolation)

    def resetReferenceInsolation(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetReferenceInsolation(self)

    def setModuleCurrentatMaximumPower(self, moduleCurrentatMaximumPower):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setModuleCurrentatMaximumPower(self, moduleCurrentatMaximumPower)

    def resetModuleCurrentatMaximumPower(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetModuleCurrentatMaximumPower(self)

    def setModuleVoltageatMaximumPower(self, moduleVoltageatMaximumPower):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setModuleVoltageatMaximumPower(self, moduleVoltageatMaximumPower)

    def resetModuleVoltageatMaximumPower(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetModuleVoltageatMaximumPower(self)

    def setTemperatureCoefficientofShortCircuitCurrent(self, temperatureCoefficientofShortCircuitCurrent):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setTemperatureCoefficientofShortCircuitCurrent(self, temperatureCoefficientofShortCircuitCurrent)

    def resetTemperatureCoefficientofShortCircuitCurrent(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetTemperatureCoefficientofShortCircuitCurrent(self)

    def setTemperatureCoefficientofOpenCircuitVoltage(self, temperatureCoefficientofOpenCircuitVoltage):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setTemperatureCoefficientofOpenCircuitVoltage(self, temperatureCoefficientofOpenCircuitVoltage)

    def resetTemperatureCoefficientofOpenCircuitVoltage(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetTemperatureCoefficientofOpenCircuitVoltage(self)

    def setNominalOperatingCellTemperatureTestAmbientTemperature(self, nominalOperatingCellTemperatureTestAmbientTemperature):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setNominalOperatingCellTemperatureTestAmbientTemperature(self, nominalOperatingCellTemperatureTestAmbientTemperature)

    def resetNominalOperatingCellTemperatureTestAmbientTemperature(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetNominalOperatingCellTemperatureTestAmbientTemperature(self)

    def setNominalOperatingCellTemperatureTestCellTemperature(self, nominalOperatingCellTemperatureTestCellTemperature):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setNominalOperatingCellTemperatureTestCellTemperature(self, nominalOperatingCellTemperatureTestCellTemperature)

    def resetNominalOperatingCellTemperatureTestCellTemperature(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetNominalOperatingCellTemperatureTestCellTemperature(self)

    def setNominalOperatingCellTemperatureTestInsolation(self, nominalOperatingCellTemperatureTestInsolation):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setNominalOperatingCellTemperatureTestInsolation(self, nominalOperatingCellTemperatureTestInsolation)

    def resetNominalOperatingCellTemperatureTestInsolation(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetNominalOperatingCellTemperatureTestInsolation(self)

    def setModuleHeatLossCoefficient(self, moduleHeatLossCoefficient):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setModuleHeatLossCoefficient(self, moduleHeatLossCoefficient)

    def resetModuleHeatLossCoefficient(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetModuleHeatLossCoefficient(self)

    def setTotalHeatCapacity(self, totalHeatCapacity):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_setTotalHeatCapacity(self, totalHeatCapacity)

    def resetTotalHeatCapacity(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_resetTotalHeatCapacity(self)

# Register PhotovoltaicPerformanceEquivalentOneDiode in _openstudiomodelgenerators:
_openstudiomodelgenerators.PhotovoltaicPerformanceEquivalentOneDiode_swigregister(PhotovoltaicPerformanceEquivalentOneDiode)

def toPhotovoltaicPerformanceEquivalentOneDiode(idfObject):
    return _openstudiomodelgenerators.toPhotovoltaicPerformanceEquivalentOneDiode(idfObject)

def getPhotovoltaicPerformanceEquivalentOneDiode(t_model, t_handle):
    return _openstudiomodelgenerators.getPhotovoltaicPerformanceEquivalentOneDiode(t_model, t_handle)

def getPhotovoltaicPerformanceEquivalentOneDiodes(t_model):
    return _openstudiomodelgenerators.getPhotovoltaicPerformanceEquivalentOneDiodes(t_model)

def getPhotovoltaicPerformanceEquivalentOneDiodeByName(t_model, t_name):
    return _openstudiomodelgenerators.getPhotovoltaicPerformanceEquivalentOneDiodeByName(t_model, t_name)

def getPhotovoltaicPerformanceEquivalentOneDiodesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getPhotovoltaicPerformanceEquivalentOneDiodesByName(t_model, t_name, t_exactMatch)

def _to_PhotovoltaicPerformanceEquivalentOneDiode(self) -> OptionalPhotovoltaicPerformanceEquivalentOneDiode:
    """Try to cast the ModelObject to a PhotovoltaicPerformanceEquivalentOneDiode.

    :return: An Optional PhotovoltaicPerformanceEquivalentOneDiode.
    """
    return toPhotovoltaicPerformanceEquivalentOneDiode(self)
openstudioutilitiesidf.IdfObject.to_PhotovoltaicPerformanceEquivalentOneDiode = _to_PhotovoltaicPerformanceEquivalentOneDiode

def _getPhotovoltaicPerformanceEquivalentOneDiode(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPhotovoltaicPerformanceEquivalentOneDiode:
    """Try to get an object of type PhotovoltaicPerformanceEquivalentOneDiode referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PhotovoltaicPerformanceEquivalentOneDiode.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPhotovoltaicPerformanceEquivalentOneDiode(self, t_handle)
Model.getPhotovoltaicPerformanceEquivalentOneDiode = _getPhotovoltaicPerformanceEquivalentOneDiode

def _getPhotovoltaicPerformanceEquivalentOneDiodes(self) -> PhotovoltaicPerformanceEquivalentOneDiodeVector:
    """Get a vector of all objects of type PhotovoltaicPerformanceEquivalentOneDiode in the model.

    :return: A vector of PhotovoltaicPerformanceEquivalentOneDiode.
    """
    return getPhotovoltaicPerformanceEquivalentOneDiodes(self)
Model.getPhotovoltaicPerformanceEquivalentOneDiodes = _getPhotovoltaicPerformanceEquivalentOneDiodes

def _getPhotovoltaicPerformanceEquivalentOneDiodeByName(self, t_name: str) -> OptionalPhotovoltaicPerformanceEquivalentOneDiode:
    """Try to get an object of type PhotovoltaicPerformanceEquivalentOneDiode that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PhotovoltaicPerformanceEquivalentOneDiode.
    """
    return getPhotovoltaicPerformanceEquivalentOneDiodeByName(self, t_name)
Model.getPhotovoltaicPerformanceEquivalentOneDiodeByName = _getPhotovoltaicPerformanceEquivalentOneDiodeByName

def _getPhotovoltaicPerformanceEquivalentOneDiodesByName(self, t_name: str, t_exactMatch: bool) -> PhotovoltaicPerformanceEquivalentOneDiodeVector:
    """Returns all objects of type PhotovoltaicPerformanceEquivalentOneDiode named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPhotovoltaicPerformanceEquivalentOneDiodesByName(self, t_name, t_exactMatch)
Model.getPhotovoltaicPerformanceEquivalentOneDiodesByName = _getPhotovoltaicPerformanceEquivalentOneDiodesByName

class PhotovoltaicPerformanceSimple(PhotovoltaicPerformance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgenerators.delete_PhotovoltaicPerformanceSimple

    def __init__(self, *args):
        _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_swiginit(self, _openstudiomodelgenerators.new_PhotovoltaicPerformanceSimple(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_iddObjectType()

    def fractionOfSurfaceAreaWithActiveSolarCells(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_fractionOfSurfaceAreaWithActiveSolarCells(self)

    def isfractionOfSurfaceAreaWithActiveSolarCellsDefaulted(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_isfractionOfSurfaceAreaWithActiveSolarCellsDefaulted(self)

    def conversionEfficiencyInputMode(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_conversionEfficiencyInputMode(self)

    def fixedEfficiency(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_fixedEfficiency(self)

    def efficiencySchedule(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_efficiencySchedule(self)

    def setFractionOfSurfaceAreaWithActiveSolarCells(self, fractionOfSurfaceAreaWithActiveSolarCells):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_setFractionOfSurfaceAreaWithActiveSolarCells(self, fractionOfSurfaceAreaWithActiveSolarCells)

    def resetFractionOfSurfaceAreaWithActiveSolarCells(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_resetFractionOfSurfaceAreaWithActiveSolarCells(self)

    def setFixedEfficiency(self, fixedEfficiency):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_setFixedEfficiency(self, fixedEfficiency)

    def resetFixedEfficiency(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_resetFixedEfficiency(self)

    def setEfficiencySchedule(self, schedule):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_setEfficiencySchedule(self, schedule)

    def resetEfficiencySchedule(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSimple_resetEfficiencySchedule(self)

# Register PhotovoltaicPerformanceSimple in _openstudiomodelgenerators:
_openstudiomodelgenerators.PhotovoltaicPerformanceSimple_swigregister(PhotovoltaicPerformanceSimple)

def toPhotovoltaicPerformanceSimple(idfObject):
    return _openstudiomodelgenerators.toPhotovoltaicPerformanceSimple(idfObject)

def getPhotovoltaicPerformanceSimple(t_model, t_handle):
    return _openstudiomodelgenerators.getPhotovoltaicPerformanceSimple(t_model, t_handle)

def getPhotovoltaicPerformanceSimples(t_model):
    return _openstudiomodelgenerators.getPhotovoltaicPerformanceSimples(t_model)

def getPhotovoltaicPerformanceSimpleByName(t_model, t_name):
    return _openstudiomodelgenerators.getPhotovoltaicPerformanceSimpleByName(t_model, t_name)

def getPhotovoltaicPerformanceSimplesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getPhotovoltaicPerformanceSimplesByName(t_model, t_name, t_exactMatch)

def _to_PhotovoltaicPerformanceSimple(self) -> OptionalPhotovoltaicPerformanceSimple:
    """Try to cast the ModelObject to a PhotovoltaicPerformanceSimple.

    :return: An Optional PhotovoltaicPerformanceSimple.
    """
    return toPhotovoltaicPerformanceSimple(self)
openstudioutilitiesidf.IdfObject.to_PhotovoltaicPerformanceSimple = _to_PhotovoltaicPerformanceSimple

def _getPhotovoltaicPerformanceSimple(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPhotovoltaicPerformanceSimple:
    """Try to get an object of type PhotovoltaicPerformanceSimple referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PhotovoltaicPerformanceSimple.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPhotovoltaicPerformanceSimple(self, t_handle)
Model.getPhotovoltaicPerformanceSimple = _getPhotovoltaicPerformanceSimple

def _getPhotovoltaicPerformanceSimples(self) -> PhotovoltaicPerformanceSimpleVector:
    """Get a vector of all objects of type PhotovoltaicPerformanceSimple in the model.

    :return: A vector of PhotovoltaicPerformanceSimple.
    """
    return getPhotovoltaicPerformanceSimples(self)
Model.getPhotovoltaicPerformanceSimples = _getPhotovoltaicPerformanceSimples

def _getPhotovoltaicPerformanceSimpleByName(self, t_name: str) -> OptionalPhotovoltaicPerformanceSimple:
    """Try to get an object of type PhotovoltaicPerformanceSimple that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PhotovoltaicPerformanceSimple.
    """
    return getPhotovoltaicPerformanceSimpleByName(self, t_name)
Model.getPhotovoltaicPerformanceSimpleByName = _getPhotovoltaicPerformanceSimpleByName

def _getPhotovoltaicPerformanceSimplesByName(self, t_name: str, t_exactMatch: bool) -> PhotovoltaicPerformanceSimpleVector:
    """Returns all objects of type PhotovoltaicPerformanceSimple named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPhotovoltaicPerformanceSimplesByName(self, t_name, t_exactMatch)
Model.getPhotovoltaicPerformanceSimplesByName = _getPhotovoltaicPerformanceSimplesByName

class PhotovoltaicPerformanceSandia(PhotovoltaicPerformance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromSandiaDatabase(model, sandiaModulePerformanceName):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_fromSandiaDatabase(model, sandiaModulePerformanceName)
    __swig_destroy__ = _openstudiomodelgenerators.delete_PhotovoltaicPerformanceSandia

    def __init__(self, *args):
        _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_swiginit(self, _openstudiomodelgenerators.new_PhotovoltaicPerformanceSandia(*args))

    @staticmethod
    def sandiaModulePerformanceNames():
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaModulePerformanceNames()

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_iddObjectType()

    def activeArea(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_activeArea(self)

    def numberofCellsinSeries(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_numberofCellsinSeries(self)

    def numberofCellsinParallel(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_numberofCellsinParallel(self)

    def shortCircuitCurrent(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_shortCircuitCurrent(self)

    def openCircuitVoltage(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_openCircuitVoltage(self)

    def currentatMaximumPowerPoint(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_currentatMaximumPowerPoint(self)

    def voltageatMaximumPowerPoint(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_voltageatMaximumPowerPoint(self)

    def sandiaDatabaseParameteraIsc(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameteraIsc(self)

    def sandiaDatabaseParameteraImp(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameteraImp(self)

    def sandiaDatabaseParameterc0(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterc0(self)

    def sandiaDatabaseParameterc1(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterc1(self)

    def sandiaDatabaseParameterBVoc0(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterBVoc0(self)

    def sandiaDatabaseParametermBVoc(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParametermBVoc(self)

    def sandiaDatabaseParameterBVmp0(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterBVmp0(self)

    def sandiaDatabaseParametermBVmp(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParametermBVmp(self)

    def diodeFactor(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_diodeFactor(self)

    def sandiaDatabaseParameterc2(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterc2(self)

    def sandiaDatabaseParameterc3(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterc3(self)

    def sandiaDatabaseParametera0(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParametera0(self)

    def sandiaDatabaseParametera1(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParametera1(self)

    def sandiaDatabaseParametera2(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParametera2(self)

    def sandiaDatabaseParametera3(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParametera3(self)

    def sandiaDatabaseParametera4(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParametera4(self)

    def sandiaDatabaseParameterb0(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterb0(self)

    def sandiaDatabaseParameterb1(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterb1(self)

    def sandiaDatabaseParameterb2(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterb2(self)

    def sandiaDatabaseParameterb3(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterb3(self)

    def sandiaDatabaseParameterb4(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterb4(self)

    def sandiaDatabaseParameterb5(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterb5(self)

    def sandiaDatabaseParameterDeltaTc(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterDeltaTc(self)

    def sandiaDatabaseParameterfd(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterfd(self)

    def sandiaDatabaseParametera(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParametera(self)

    def sandiaDatabaseParameterb(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterb(self)

    def sandiaDatabaseParameterc4(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterc4(self)

    def sandiaDatabaseParameterc5(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterc5(self)

    def sandiaDatabaseParameterIx0(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterIx0(self)

    def sandiaDatabaseParameterIxx0(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterIxx0(self)

    def sandiaDatabaseParameterc6(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterc6(self)

    def sandiaDatabaseParameterc7(self):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_sandiaDatabaseParameterc7(self)

    def setActiveArea(self, activeArea):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setActiveArea(self, activeArea)

    def setNumberofCellsinSeries(self, numberofCellsinSeries):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setNumberofCellsinSeries(self, numberofCellsinSeries)

    def setNumberofCellsinParallel(self, numberofCellsinParallel):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setNumberofCellsinParallel(self, numberofCellsinParallel)

    def setShortCircuitCurrent(self, shortCircuitCurrent):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setShortCircuitCurrent(self, shortCircuitCurrent)

    def setOpenCircuitVoltage(self, openCircuitVoltage):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setOpenCircuitVoltage(self, openCircuitVoltage)

    def setCurrentatMaximumPowerPoint(self, currentatMaximumPowerPoint):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setCurrentatMaximumPowerPoint(self, currentatMaximumPowerPoint)

    def setVoltageatMaximumPowerPoint(self, voltageatMaximumPowerPoint):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setVoltageatMaximumPowerPoint(self, voltageatMaximumPowerPoint)

    def setSandiaDatabaseParameteraIsc(self, sandiaDatabaseParameteraIsc):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameteraIsc(self, sandiaDatabaseParameteraIsc)

    def setSandiaDatabaseParameteraImp(self, sandiaDatabaseParameteraImp):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameteraImp(self, sandiaDatabaseParameteraImp)

    def setSandiaDatabaseParameterc0(self, sandiaDatabaseParameterc0):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterc0(self, sandiaDatabaseParameterc0)

    def setSandiaDatabaseParameterc1(self, sandiaDatabaseParameterc1):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterc1(self, sandiaDatabaseParameterc1)

    def setSandiaDatabaseParameterBVoc0(self, sandiaDatabaseParameterBVoc0):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterBVoc0(self, sandiaDatabaseParameterBVoc0)

    def setSandiaDatabaseParametermBVoc(self, sandiaDatabaseParametermBVoc):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParametermBVoc(self, sandiaDatabaseParametermBVoc)

    def setSandiaDatabaseParameterBVmp0(self, sandiaDatabaseParameterBVmp0):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterBVmp0(self, sandiaDatabaseParameterBVmp0)

    def setSandiaDatabaseParametermBVmp(self, sandiaDatabaseParametermBVmp):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParametermBVmp(self, sandiaDatabaseParametermBVmp)

    def setDiodeFactor(self, diodeFactor):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setDiodeFactor(self, diodeFactor)

    def setSandiaDatabaseParameterc2(self, sandiaDatabaseParameterc2):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterc2(self, sandiaDatabaseParameterc2)

    def setSandiaDatabaseParameterc3(self, sandiaDatabaseParameterc3):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterc3(self, sandiaDatabaseParameterc3)

    def setSandiaDatabaseParametera0(self, sandiaDatabaseParametera0):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParametera0(self, sandiaDatabaseParametera0)

    def setSandiaDatabaseParametera1(self, sandiaDatabaseParametera1):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParametera1(self, sandiaDatabaseParametera1)

    def setSandiaDatabaseParametera2(self, sandiaDatabaseParametera2):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParametera2(self, sandiaDatabaseParametera2)

    def setSandiaDatabaseParametera3(self, sandiaDatabaseParametera3):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParametera3(self, sandiaDatabaseParametera3)

    def setSandiaDatabaseParametera4(self, sandiaDatabaseParametera4):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParametera4(self, sandiaDatabaseParametera4)

    def setSandiaDatabaseParameterb0(self, sandiaDatabaseParameterb0):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterb0(self, sandiaDatabaseParameterb0)

    def setSandiaDatabaseParameterb1(self, sandiaDatabaseParameterb1):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterb1(self, sandiaDatabaseParameterb1)

    def setSandiaDatabaseParameterb2(self, sandiaDatabaseParameterb2):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterb2(self, sandiaDatabaseParameterb2)

    def setSandiaDatabaseParameterb3(self, sandiaDatabaseParameterb3):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterb3(self, sandiaDatabaseParameterb3)

    def setSandiaDatabaseParameterb4(self, sandiaDatabaseParameterb4):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterb4(self, sandiaDatabaseParameterb4)

    def setSandiaDatabaseParameterb5(self, sandiaDatabaseParameterb5):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterb5(self, sandiaDatabaseParameterb5)

    def setSandiaDatabaseParameterDeltaTc(self, sandiaDatabaseParameterDeltaTc):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterDeltaTc(self, sandiaDatabaseParameterDeltaTc)

    def setSandiaDatabaseParameterfd(self, sandiaDatabaseParameterfd):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterfd(self, sandiaDatabaseParameterfd)

    def setSandiaDatabaseParametera(self, sandiaDatabaseParametera):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParametera(self, sandiaDatabaseParametera)

    def setSandiaDatabaseParameterb(self, sandiaDatabaseParameterb):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterb(self, sandiaDatabaseParameterb)

    def setSandiaDatabaseParameterc4(self, sandiaDatabaseParameterc4):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterc4(self, sandiaDatabaseParameterc4)

    def setSandiaDatabaseParameterc5(self, sandiaDatabaseParameterc5):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterc5(self, sandiaDatabaseParameterc5)

    def setSandiaDatabaseParameterIx0(self, sandiaDatabaseParameterIx0):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterIx0(self, sandiaDatabaseParameterIx0)

    def setSandiaDatabaseParameterIxx0(self, sandiaDatabaseParameterIxx0):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterIxx0(self, sandiaDatabaseParameterIxx0)

    def setSandiaDatabaseParameterc6(self, sandiaDatabaseParameterc6):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterc6(self, sandiaDatabaseParameterc6)

    def setSandiaDatabaseParameterc7(self, sandiaDatabaseParameterc7):
        return _openstudiomodelgenerators.PhotovoltaicPerformanceSandia_setSandiaDatabaseParameterc7(self, sandiaDatabaseParameterc7)

# Register PhotovoltaicPerformanceSandia in _openstudiomodelgenerators:
_openstudiomodelgenerators.PhotovoltaicPerformanceSandia_swigregister(PhotovoltaicPerformanceSandia)

def toPhotovoltaicPerformanceSandia(idfObject):
    return _openstudiomodelgenerators.toPhotovoltaicPerformanceSandia(idfObject)

def getPhotovoltaicPerformanceSandia(t_model, t_handle):
    return _openstudiomodelgenerators.getPhotovoltaicPerformanceSandia(t_model, t_handle)

def getPhotovoltaicPerformanceSandias(t_model):
    return _openstudiomodelgenerators.getPhotovoltaicPerformanceSandias(t_model)

def getPhotovoltaicPerformanceSandiaByName(t_model, t_name):
    return _openstudiomodelgenerators.getPhotovoltaicPerformanceSandiaByName(t_model, t_name)

def getPhotovoltaicPerformanceSandiasByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgenerators.getPhotovoltaicPerformanceSandiasByName(t_model, t_name, t_exactMatch)

def _to_PhotovoltaicPerformanceSandia(self) -> OptionalPhotovoltaicPerformanceSandia:
    """Try to cast the ModelObject to a PhotovoltaicPerformanceSandia.

    :return: An Optional PhotovoltaicPerformanceSandia.
    """
    return toPhotovoltaicPerformanceSandia(self)
openstudioutilitiesidf.IdfObject.to_PhotovoltaicPerformanceSandia = _to_PhotovoltaicPerformanceSandia

def _getPhotovoltaicPerformanceSandia(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPhotovoltaicPerformanceSandia:
    """Try to get an object of type PhotovoltaicPerformanceSandia referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PhotovoltaicPerformanceSandia.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPhotovoltaicPerformanceSandia(self, t_handle)
Model.getPhotovoltaicPerformanceSandia = _getPhotovoltaicPerformanceSandia

def _getPhotovoltaicPerformanceSandias(self) -> PhotovoltaicPerformanceSandiaVector:
    """Get a vector of all objects of type PhotovoltaicPerformanceSandia in the model.

    :return: A vector of PhotovoltaicPerformanceSandia.
    """
    return getPhotovoltaicPerformanceSandias(self)
Model.getPhotovoltaicPerformanceSandias = _getPhotovoltaicPerformanceSandias

def _getPhotovoltaicPerformanceSandiaByName(self, t_name: str) -> OptionalPhotovoltaicPerformanceSandia:
    """Try to get an object of type PhotovoltaicPerformanceSandia that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PhotovoltaicPerformanceSandia.
    """
    return getPhotovoltaicPerformanceSandiaByName(self, t_name)
Model.getPhotovoltaicPerformanceSandiaByName = _getPhotovoltaicPerformanceSandiaByName

def _getPhotovoltaicPerformanceSandiasByName(self, t_name: str, t_exactMatch: bool) -> PhotovoltaicPerformanceSandiaVector:
    """Returns all objects of type PhotovoltaicPerformanceSandia named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPhotovoltaicPerformanceSandiasByName(self, t_name, t_exactMatch)
Model.getPhotovoltaicPerformanceSandiasByName = _getPhotovoltaicPerformanceSandiasByName


