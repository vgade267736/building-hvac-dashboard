# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudioutilitiesidd
else:
    import _openstudioutilitiesidd

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesidd.delete_SwigPyIterator

    def value(self):
        return _openstudioutilitiesidd.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudioutilitiesidd.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudioutilitiesidd.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudioutilitiesidd.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudioutilitiesidd.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudioutilitiesidd.SwigPyIterator_copy(self)

    def next(self):
        return _openstudioutilitiesidd.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudioutilitiesidd.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudioutilitiesidd.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudioutilitiesidd.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudioutilitiesidd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudioutilitiesidd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudioutilitiesidd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudioutilitiesidd.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudioutilitiesidd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudioutilitiesidd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudioutilitiesidd:
_openstudioutilitiesidd.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudioutilitiesidd.SHARED_PTR_DISOWN
from .import openstudioutilitiescore
from .import openstudioutilitiesunits

def makeComment(str):
    return _openstudioutilitiesidd.makeComment(str)

def makeIdfEditorComment(str):
    return _openstudioutilitiesidd.makeIdfEditorComment(str)
class IddFieldType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidd.IddFieldType_swiginit(self, _openstudioutilitiesidd.new_IddFieldType(*args))

    def valueName(self):
        return _openstudioutilitiesidd.IddFieldType_valueName(self)

    def value(self):
        return _openstudioutilitiesidd.IddFieldType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesidd.IddFieldType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesidd.IddFieldType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidd.IddFieldType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesidd.IddFieldType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesidd.IddFieldType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesidd.IddFieldType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesidd.IddFieldType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesidd.IddFieldType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesidd.IddFieldType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesidd.IddFieldType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesidd.IddFieldType___str__(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddFieldType

# Register IddFieldType in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddFieldType_swigregister(IddFieldType)
class IddFieldProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioutilitiesidd.IddFieldProperties_swiginit(self, _openstudioutilitiesidd.new_IddFieldProperties())

    def isGeneric(self):
        return _openstudioutilitiesidd.IddFieldProperties_isGeneric(self)

    def __eq__(self, other):
        return _openstudioutilitiesidd.IddFieldProperties___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidd.IddFieldProperties___ne__(self, other)
    type = property(_openstudioutilitiesidd.IddFieldProperties_type_get, _openstudioutilitiesidd.IddFieldProperties_type_set)
    note = property(_openstudioutilitiesidd.IddFieldProperties_note_get, _openstudioutilitiesidd.IddFieldProperties_note_set)
    required = property(_openstudioutilitiesidd.IddFieldProperties_required_get, _openstudioutilitiesidd.IddFieldProperties_required_set)
    autosizable = property(_openstudioutilitiesidd.IddFieldProperties_autosizable_get, _openstudioutilitiesidd.IddFieldProperties_autosizable_set)
    autocalculatable = property(_openstudioutilitiesidd.IddFieldProperties_autocalculatable_get, _openstudioutilitiesidd.IddFieldProperties_autocalculatable_set)
    retaincase = property(_openstudioutilitiesidd.IddFieldProperties_retaincase_get, _openstudioutilitiesidd.IddFieldProperties_retaincase_set)
    deprecated = property(_openstudioutilitiesidd.IddFieldProperties_deprecated_get, _openstudioutilitiesidd.IddFieldProperties_deprecated_set)
    beginExtensible = property(_openstudioutilitiesidd.IddFieldProperties_beginExtensible_get, _openstudioutilitiesidd.IddFieldProperties_beginExtensible_set)
    units = property(_openstudioutilitiesidd.IddFieldProperties_units_get, _openstudioutilitiesidd.IddFieldProperties_units_set)
    ipUnits = property(_openstudioutilitiesidd.IddFieldProperties_ipUnits_get, _openstudioutilitiesidd.IddFieldProperties_ipUnits_set)
    Unbounded = _openstudioutilitiesidd.IddFieldProperties_Unbounded
    InclusiveBound = _openstudioutilitiesidd.IddFieldProperties_InclusiveBound
    ExclusiveBound = _openstudioutilitiesidd.IddFieldProperties_ExclusiveBound
    minBoundType = property(_openstudioutilitiesidd.IddFieldProperties_minBoundType_get, _openstudioutilitiesidd.IddFieldProperties_minBoundType_set)
    minBoundValue = property(_openstudioutilitiesidd.IddFieldProperties_minBoundValue_get, _openstudioutilitiesidd.IddFieldProperties_minBoundValue_set)
    minBoundText = property(_openstudioutilitiesidd.IddFieldProperties_minBoundText_get, _openstudioutilitiesidd.IddFieldProperties_minBoundText_set)
    maxBoundType = property(_openstudioutilitiesidd.IddFieldProperties_maxBoundType_get, _openstudioutilitiesidd.IddFieldProperties_maxBoundType_set)
    maxBoundValue = property(_openstudioutilitiesidd.IddFieldProperties_maxBoundValue_get, _openstudioutilitiesidd.IddFieldProperties_maxBoundValue_set)
    maxBoundText = property(_openstudioutilitiesidd.IddFieldProperties_maxBoundText_get, _openstudioutilitiesidd.IddFieldProperties_maxBoundText_set)
    stringDefault = property(_openstudioutilitiesidd.IddFieldProperties_stringDefault_get, _openstudioutilitiesidd.IddFieldProperties_stringDefault_set)
    numericDefault = property(_openstudioutilitiesidd.IddFieldProperties_numericDefault_get, _openstudioutilitiesidd.IddFieldProperties_numericDefault_set)
    objectLists = property(_openstudioutilitiesidd.IddFieldProperties_objectLists_get, _openstudioutilitiesidd.IddFieldProperties_objectLists_set)
    references = property(_openstudioutilitiesidd.IddFieldProperties_references_get, _openstudioutilitiesidd.IddFieldProperties_references_set)
    referenceClassNames = property(_openstudioutilitiesidd.IddFieldProperties_referenceClassNames_get, _openstudioutilitiesidd.IddFieldProperties_referenceClassNames_set)
    externalLists = property(_openstudioutilitiesidd.IddFieldProperties_externalLists_get, _openstudioutilitiesidd.IddFieldProperties_externalLists_set)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddFieldProperties

# Register IddFieldProperties in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddFieldProperties_swigregister(IddFieldProperties)

def intersectReferenceLists(list1, list2):
    return _openstudioutilitiesidd.intersectReferenceLists(list1, list2)
class ExtensibleIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, groupIndex, fieldIndex):
        _openstudioutilitiesidd.ExtensibleIndex_swiginit(self, _openstudioutilitiesidd.new_ExtensibleIndex(groupIndex, fieldIndex))
    group = property(_openstudioutilitiesidd.ExtensibleIndex_group_get, _openstudioutilitiesidd.ExtensibleIndex_group_set)
    field = property(_openstudioutilitiesidd.ExtensibleIndex_field_get, _openstudioutilitiesidd.ExtensibleIndex_field_set)
    __swig_destroy__ = _openstudioutilitiesidd.delete_ExtensibleIndex

# Register ExtensibleIndex in _openstudioutilitiesidd:
_openstudioutilitiesidd.ExtensibleIndex_swigregister(ExtensibleIndex)
class IddObjectProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioutilitiesidd.IddObjectProperties_swiginit(self, _openstudioutilitiesidd.new_IddObjectProperties())

    def __eq__(self, other):
        return _openstudioutilitiesidd.IddObjectProperties___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidd.IddObjectProperties___ne__(self, other)
    memo = property(_openstudioutilitiesidd.IddObjectProperties_memo_get, _openstudioutilitiesidd.IddObjectProperties_memo_set)
    unique = property(_openstudioutilitiesidd.IddObjectProperties_unique_get, _openstudioutilitiesidd.IddObjectProperties_unique_set)
    required = property(_openstudioutilitiesidd.IddObjectProperties_required_get, _openstudioutilitiesidd.IddObjectProperties_required_set)
    obsolete = property(_openstudioutilitiesidd.IddObjectProperties_obsolete_get, _openstudioutilitiesidd.IddObjectProperties_obsolete_set)
    hasURL = property(_openstudioutilitiesidd.IddObjectProperties_hasURL_get, _openstudioutilitiesidd.IddObjectProperties_hasURL_set)
    extensible = property(_openstudioutilitiesidd.IddObjectProperties_extensible_get, _openstudioutilitiesidd.IddObjectProperties_extensible_set)
    numExtensible = property(_openstudioutilitiesidd.IddObjectProperties_numExtensible_get, _openstudioutilitiesidd.IddObjectProperties_numExtensible_set)
    numExtensibleGroupsRequired = property(_openstudioutilitiesidd.IddObjectProperties_numExtensibleGroupsRequired_get, _openstudioutilitiesidd.IddObjectProperties_numExtensibleGroupsRequired_set)
    format = property(_openstudioutilitiesidd.IddObjectProperties_format_get, _openstudioutilitiesidd.IddObjectProperties_format_set)
    minFields = property(_openstudioutilitiesidd.IddObjectProperties_minFields_get, _openstudioutilitiesidd.IddObjectProperties_minFields_set)
    maxFields = property(_openstudioutilitiesidd.IddObjectProperties_maxFields_get, _openstudioutilitiesidd.IddObjectProperties_maxFields_set)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddObjectProperties

# Register IddObjectProperties in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddObjectProperties_swigregister(IddObjectProperties)
class OptionalIddFileType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidd.OptionalIddFileType_swiginit(self, _openstudioutilitiesidd.new_OptionalIddFileType(*args))

    def reset(self):
        return _openstudioutilitiesidd.OptionalIddFileType_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesidd.OptionalIddFileType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesidd.OptionalIddFileType___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesidd.OptionalIddFileType_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesidd.OptionalIddFileType_isNull(self)

    def empty(self):
        return _openstudioutilitiesidd.OptionalIddFileType_empty(self)

    def get(self):
        return _openstudioutilitiesidd.OptionalIddFileType_get(self)

    def set(self, t):
        return _openstudioutilitiesidd.OptionalIddFileType_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesidd.OptionalIddFileType_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesidd.delete_OptionalIddFileType

# Register OptionalIddFileType in _openstudioutilitiesidd:
_openstudioutilitiesidd.OptionalIddFileType_swigregister(OptionalIddFileType)
class OptionalIddObjectType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidd.OptionalIddObjectType_swiginit(self, _openstudioutilitiesidd.new_OptionalIddObjectType(*args))

    def reset(self):
        return _openstudioutilitiesidd.OptionalIddObjectType_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesidd.OptionalIddObjectType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesidd.OptionalIddObjectType___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesidd.OptionalIddObjectType_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesidd.OptionalIddObjectType_isNull(self)

    def empty(self):
        return _openstudioutilitiesidd.OptionalIddObjectType_empty(self)

    def get(self):
        return _openstudioutilitiesidd.OptionalIddObjectType_get(self)

    def set(self, t):
        return _openstudioutilitiesidd.OptionalIddObjectType_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesidd.OptionalIddObjectType_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesidd.delete_OptionalIddObjectType

# Register OptionalIddObjectType in _openstudioutilitiesidd:
_openstudioutilitiesidd.OptionalIddObjectType_swigregister(OptionalIddObjectType)
class OptionalIddKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidd.OptionalIddKey_swiginit(self, _openstudioutilitiesidd.new_OptionalIddKey(*args))

    def reset(self):
        return _openstudioutilitiesidd.OptionalIddKey_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesidd.OptionalIddKey___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesidd.OptionalIddKey___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesidd.OptionalIddKey_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesidd.OptionalIddKey_isNull(self)

    def empty(self):
        return _openstudioutilitiesidd.OptionalIddKey_empty(self)

    def get(self):
        return _openstudioutilitiesidd.OptionalIddKey_get(self)

    def set(self, t):
        return _openstudioutilitiesidd.OptionalIddKey_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesidd.OptionalIddKey_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesidd.delete_OptionalIddKey

# Register OptionalIddKey in _openstudioutilitiesidd:
_openstudioutilitiesidd.OptionalIddKey_swigregister(OptionalIddKey)
class OptionalIddField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidd.OptionalIddField_swiginit(self, _openstudioutilitiesidd.new_OptionalIddField(*args))

    def reset(self):
        return _openstudioutilitiesidd.OptionalIddField_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesidd.OptionalIddField___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesidd.OptionalIddField___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesidd.OptionalIddField_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesidd.OptionalIddField_isNull(self)

    def empty(self):
        return _openstudioutilitiesidd.OptionalIddField_empty(self)

    def get(self):
        return _openstudioutilitiesidd.OptionalIddField_get(self)

    def set(self, t):
        return _openstudioutilitiesidd.OptionalIddField_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesidd.OptionalIddField_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesidd.delete_OptionalIddField

# Register OptionalIddField in _openstudioutilitiesidd:
_openstudioutilitiesidd.OptionalIddField_swigregister(OptionalIddField)
class OptionalIddObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidd.OptionalIddObject_swiginit(self, _openstudioutilitiesidd.new_OptionalIddObject(*args))

    def reset(self):
        return _openstudioutilitiesidd.OptionalIddObject_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesidd.OptionalIddObject___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesidd.OptionalIddObject___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesidd.OptionalIddObject_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesidd.OptionalIddObject_isNull(self)

    def empty(self):
        return _openstudioutilitiesidd.OptionalIddObject_empty(self)

    def get(self):
        return _openstudioutilitiesidd.OptionalIddObject_get(self)

    def set(self, t):
        return _openstudioutilitiesidd.OptionalIddObject_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesidd.OptionalIddObject_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesidd.delete_OptionalIddObject

# Register OptionalIddObject in _openstudioutilitiesidd:
_openstudioutilitiesidd.OptionalIddObject_swigregister(OptionalIddObject)
class OptionalIddFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidd.OptionalIddFile_swiginit(self, _openstudioutilitiesidd.new_OptionalIddFile(*args))

    def reset(self):
        return _openstudioutilitiesidd.OptionalIddFile_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesidd.OptionalIddFile___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesidd.OptionalIddFile___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesidd.OptionalIddFile_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesidd.OptionalIddFile_isNull(self)

    def empty(self):
        return _openstudioutilitiesidd.OptionalIddFile_empty(self)

    def get(self):
        return _openstudioutilitiesidd.OptionalIddFile_get(self)

    def set(self, t):
        return _openstudioutilitiesidd.OptionalIddFile_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesidd.OptionalIddFile_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesidd.delete_OptionalIddFile

# Register OptionalIddFile in _openstudioutilitiesidd:
_openstudioutilitiesidd.OptionalIddFile_swigregister(OptionalIddFile)
class IddKeyVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesidd.IddKeyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesidd.IddKeyVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesidd.IddKeyVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesidd.IddKeyVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesidd.IddKeyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesidd.IddKeyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesidd.IddKeyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesidd.IddKeyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesidd.IddKeyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesidd.IddKeyVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesidd.IddKeyVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesidd.IddKeyVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesidd.IddKeyVector_empty(self)

    def size(self):
        return _openstudioutilitiesidd.IddKeyVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesidd.IddKeyVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesidd.IddKeyVector_begin(self)

    def end(self):
        return _openstudioutilitiesidd.IddKeyVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesidd.IddKeyVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesidd.IddKeyVector_rend(self)

    def clear(self):
        return _openstudioutilitiesidd.IddKeyVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesidd.IddKeyVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesidd.IddKeyVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesidd.IddKeyVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesidd.IddKeyVector_swiginit(self, _openstudioutilitiesidd.new_IddKeyVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesidd.IddKeyVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesidd.IddKeyVector_front(self)

    def back(self):
        return _openstudioutilitiesidd.IddKeyVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesidd.IddKeyVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesidd.IddKeyVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesidd.IddKeyVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesidd.IddKeyVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesidd.IddKeyVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddKeyVector

# Register IddKeyVector in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddKeyVector_swigregister(IddKeyVector)
class IddFieldVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesidd.IddFieldVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesidd.IddFieldVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesidd.IddFieldVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesidd.IddFieldVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesidd.IddFieldVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesidd.IddFieldVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesidd.IddFieldVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesidd.IddFieldVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesidd.IddFieldVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesidd.IddFieldVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesidd.IddFieldVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesidd.IddFieldVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesidd.IddFieldVector_empty(self)

    def size(self):
        return _openstudioutilitiesidd.IddFieldVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesidd.IddFieldVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesidd.IddFieldVector_begin(self)

    def end(self):
        return _openstudioutilitiesidd.IddFieldVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesidd.IddFieldVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesidd.IddFieldVector_rend(self)

    def clear(self):
        return _openstudioutilitiesidd.IddFieldVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesidd.IddFieldVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesidd.IddFieldVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesidd.IddFieldVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesidd.IddFieldVector_swiginit(self, _openstudioutilitiesidd.new_IddFieldVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesidd.IddFieldVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesidd.IddFieldVector_front(self)

    def back(self):
        return _openstudioutilitiesidd.IddFieldVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesidd.IddFieldVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesidd.IddFieldVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesidd.IddFieldVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesidd.IddFieldVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesidd.IddFieldVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddFieldVector

# Register IddFieldVector in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddFieldVector_swigregister(IddFieldVector)
class IddObjectVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesidd.IddObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesidd.IddObjectVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesidd.IddObjectVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesidd.IddObjectVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesidd.IddObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesidd.IddObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesidd.IddObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesidd.IddObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesidd.IddObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesidd.IddObjectVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesidd.IddObjectVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesidd.IddObjectVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesidd.IddObjectVector_empty(self)

    def size(self):
        return _openstudioutilitiesidd.IddObjectVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesidd.IddObjectVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesidd.IddObjectVector_begin(self)

    def end(self):
        return _openstudioutilitiesidd.IddObjectVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesidd.IddObjectVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesidd.IddObjectVector_rend(self)

    def clear(self):
        return _openstudioutilitiesidd.IddObjectVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesidd.IddObjectVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesidd.IddObjectVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesidd.IddObjectVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesidd.IddObjectVector_swiginit(self, _openstudioutilitiesidd.new_IddObjectVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesidd.IddObjectVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesidd.IddObjectVector_front(self)

    def back(self):
        return _openstudioutilitiesidd.IddObjectVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesidd.IddObjectVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesidd.IddObjectVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesidd.IddObjectVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesidd.IddObjectVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesidd.IddObjectVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddObjectVector

# Register IddObjectVector in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddObjectVector_swigregister(IddObjectVector)
class IddFileVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesidd.IddFileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesidd.IddFileVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesidd.IddFileVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesidd.IddFileVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesidd.IddFileVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesidd.IddFileVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesidd.IddFileVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesidd.IddFileVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesidd.IddFileVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesidd.IddFileVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesidd.IddFileVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesidd.IddFileVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesidd.IddFileVector_empty(self)

    def size(self):
        return _openstudioutilitiesidd.IddFileVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesidd.IddFileVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesidd.IddFileVector_begin(self)

    def end(self):
        return _openstudioutilitiesidd.IddFileVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesidd.IddFileVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesidd.IddFileVector_rend(self)

    def clear(self):
        return _openstudioutilitiesidd.IddFileVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesidd.IddFileVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesidd.IddFileVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesidd.IddFileVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesidd.IddFileVector_swiginit(self, _openstudioutilitiesidd.new_IddFileVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesidd.IddFileVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesidd.IddFileVector_front(self)

    def back(self):
        return _openstudioutilitiesidd.IddFileVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesidd.IddFileVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesidd.IddFileVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesidd.IddFileVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesidd.IddFileVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesidd.IddFileVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddFileVector

# Register IddFileVector in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddFileVector_swigregister(IddFileVector)
class IddObjectTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesidd.IddObjectTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesidd.IddObjectTypeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesidd.IddObjectTypeVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesidd.IddObjectTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesidd.IddObjectTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesidd.IddObjectTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesidd.IddObjectTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesidd.IddObjectTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesidd.IddObjectTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesidd.IddObjectTypeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesidd.IddObjectTypeVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesidd.IddObjectTypeVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesidd.IddObjectTypeVector_empty(self)

    def size(self):
        return _openstudioutilitiesidd.IddObjectTypeVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesidd.IddObjectTypeVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesidd.IddObjectTypeVector_begin(self)

    def end(self):
        return _openstudioutilitiesidd.IddObjectTypeVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesidd.IddObjectTypeVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesidd.IddObjectTypeVector_rend(self)

    def clear(self):
        return _openstudioutilitiesidd.IddObjectTypeVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesidd.IddObjectTypeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesidd.IddObjectTypeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesidd.IddObjectTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesidd.IddObjectTypeVector_swiginit(self, _openstudioutilitiesidd.new_IddObjectTypeVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesidd.IddObjectTypeVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesidd.IddObjectTypeVector_front(self)

    def back(self):
        return _openstudioutilitiesidd.IddObjectTypeVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesidd.IddObjectTypeVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesidd.IddObjectTypeVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesidd.IddObjectTypeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesidd.IddObjectTypeVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesidd.IddObjectTypeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddObjectTypeVector

# Register IddObjectTypeVector in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddObjectTypeVector_swigregister(IddObjectTypeVector)
class OptionalIddObjectTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidd.OptionalIddObjectTypeVector_swiginit(self, _openstudioutilitiesidd.new_OptionalIddObjectTypeVector(*args))

    def reset(self):
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector_isNull(self)

    def empty(self):
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector_empty(self)

    def get(self):
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector_get(self)

    def set(self, t):
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesidd.OptionalIddObjectTypeVector_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesidd.delete_OptionalIddObjectTypeVector

# Register OptionalIddObjectTypeVector in _openstudioutilitiesidd:
_openstudioutilitiesidd.OptionalIddObjectTypeVector_swigregister(OptionalIddObjectTypeVector)
class IddFileType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidd.IddFileType_swiginit(self, _openstudioutilitiesidd.new_IddFileType(*args))

    def valueName(self):
        return _openstudioutilitiesidd.IddFileType_valueName(self)

    def value(self):
        return _openstudioutilitiesidd.IddFileType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesidd.IddFileType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesidd.IddFileType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidd.IddFileType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesidd.IddFileType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesidd.IddFileType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesidd.IddFileType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesidd.IddFileType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesidd.IddFileType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesidd.IddFileType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesidd.IddFileType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesidd.IddFileType___str__(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddFileType

# Register IddFileType in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddFileType_swigregister(IddFileType)
class IddObjectType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidd.IddObjectType_swiginit(self, _openstudioutilitiesidd.new_IddObjectType(*args))

    def valueName(self):
        return _openstudioutilitiesidd.IddObjectType_valueName(self)

    def value(self):
        return _openstudioutilitiesidd.IddObjectType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesidd.IddObjectType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesidd.IddObjectType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidd.IddObjectType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesidd.IddObjectType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesidd.IddObjectType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesidd.IddObjectType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesidd.IddObjectType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesidd.IddObjectType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesidd.IddObjectType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesidd.IddObjectType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesidd.IddObjectType___str__(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddObjectType

# Register IddObjectType in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddObjectType_swigregister(IddObjectType)
class IddObjectTypeSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesidd.IddObjectTypeSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesidd.IddObjectTypeSet___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesidd.IddObjectTypeSet___bool__(self)

    def __len__(self):
        return _openstudioutilitiesidd.IddObjectTypeSet___len__(self)

    def append(self, x):
        return _openstudioutilitiesidd.IddObjectTypeSet_append(self, x)

    def __contains__(self, x):
        return _openstudioutilitiesidd.IddObjectTypeSet___contains__(self, x)

    def __getitem__(self, i):
        return _openstudioutilitiesidd.IddObjectTypeSet___getitem__(self, i)

    def add(self, x):
        return _openstudioutilitiesidd.IddObjectTypeSet_add(self, x)

    def discard(self, x):
        return _openstudioutilitiesidd.IddObjectTypeSet_discard(self, x)

    def __init__(self, *args):
        _openstudioutilitiesidd.IddObjectTypeSet_swiginit(self, _openstudioutilitiesidd.new_IddObjectTypeSet(*args))

    def empty(self):
        return _openstudioutilitiesidd.IddObjectTypeSet_empty(self)

    def size(self):
        return _openstudioutilitiesidd.IddObjectTypeSet_size(self)

    def clear(self):
        return _openstudioutilitiesidd.IddObjectTypeSet_clear(self)

    def swap(self, v):
        return _openstudioutilitiesidd.IddObjectTypeSet_swap(self, v)

    def count(self, x):
        return _openstudioutilitiesidd.IddObjectTypeSet_count(self, x)

    def begin(self):
        return _openstudioutilitiesidd.IddObjectTypeSet_begin(self)

    def end(self):
        return _openstudioutilitiesidd.IddObjectTypeSet_end(self)

    def rbegin(self):
        return _openstudioutilitiesidd.IddObjectTypeSet_rbegin(self)

    def rend(self):
        return _openstudioutilitiesidd.IddObjectTypeSet_rend(self)

    def erase(self, *args):
        return _openstudioutilitiesidd.IddObjectTypeSet_erase(self, *args)

    def find(self, x):
        return _openstudioutilitiesidd.IddObjectTypeSet_find(self, x)

    def lower_bound(self, x):
        return _openstudioutilitiesidd.IddObjectTypeSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _openstudioutilitiesidd.IddObjectTypeSet_upper_bound(self, x)

    def equal_range(self, x):
        return _openstudioutilitiesidd.IddObjectTypeSet_equal_range(self, x)

    def insert(self, __x):
        return _openstudioutilitiesidd.IddObjectTypeSet_insert(self, __x)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddObjectTypeSet

# Register IddObjectTypeSet in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddObjectTypeSet_swigregister(IddObjectTypeSet)
class IddKeyProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidd.IddKeyProperties_swiginit(self, _openstudioutilitiesidd.new_IddKeyProperties(*args))

    def __eq__(self, other):
        return _openstudioutilitiesidd.IddKeyProperties___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidd.IddKeyProperties___ne__(self, other)
    note = property(_openstudioutilitiesidd.IddKeyProperties_note_get, _openstudioutilitiesidd.IddKeyProperties_note_set)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddKeyProperties

# Register IddKeyProperties in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddKeyProperties_swigregister(IddKeyProperties)
class IddKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidd.IddKey_swiginit(self, _openstudioutilitiesidd.new_IddKey(*args))

    def name(self):
        return _openstudioutilitiesidd.IddKey_name(self)

    def properties(self):
        return _openstudioutilitiesidd.IddKey_properties(self)

    def __eq__(self, other):
        return _openstudioutilitiesidd.IddKey___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidd.IddKey___ne__(self, other)

    @staticmethod
    def load(name, text):
        return _openstudioutilitiesidd.IddKey_load(name, text)

    def __str__(self):
        return _openstudioutilitiesidd.IddKey___str__(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddKey

# Register IddKey in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddKey_swigregister(IddKey)
class IddField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioutilitiesidd.IddField_swiginit(self, _openstudioutilitiesidd.new_IddField())

    def name(self):
        return _openstudioutilitiesidd.IddField_name(self)

    def fieldId(self):
        return _openstudioutilitiesidd.IddField_fieldId(self)

    def properties(self):
        return _openstudioutilitiesidd.IddField_properties(self)

    def getUnits(self, returnIP=False):
        return _openstudioutilitiesidd.IddField_getUnits(self, returnIP)

    def unitsBasedOnOtherField(self):
        return _openstudioutilitiesidd.IddField_unitsBasedOnOtherField(self)

    def getKey(self, keyName):
        return _openstudioutilitiesidd.IddField_getKey(self, keyName)

    def keys(self):
        return _openstudioutilitiesidd.IddField_keys(self)

    def setName(self, name):
        return _openstudioutilitiesidd.IddField_setName(self, name)

    def incrementFieldId(self, *args):
        return _openstudioutilitiesidd.IddField_incrementFieldId(self, *args)

    def isNameField(self):
        return _openstudioutilitiesidd.IddField_isNameField(self)

    def isObjectListField(self):
        return _openstudioutilitiesidd.IddField_isObjectListField(self)

    def __eq__(self, other):
        return _openstudioutilitiesidd.IddField___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidd.IddField___ne__(self, other)

    @staticmethod
    def load(name, text, objectName):
        return _openstudioutilitiesidd.IddField_load(name, text, objectName)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddField

# Register IddField in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddField_swigregister(IddField)

def referencesEqual(field1, field2):
    return _openstudioutilitiesidd.referencesEqual(field1, field2)
class IddObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidd.IddObject_swiginit(self, _openstudioutilitiesidd.new_IddObject(*args))

    def name(self):
        return _openstudioutilitiesidd.IddObject_name(self)

    def type(self):
        return _openstudioutilitiesidd.IddObject_type(self)

    def group(self):
        return _openstudioutilitiesidd.IddObject_group(self)

    def properties(self):
        return _openstudioutilitiesidd.IddObject_properties(self)

    def nonextensibleFields(self):
        return _openstudioutilitiesidd.IddObject_nonextensibleFields(self)

    def extensibleGroup(self):
        return _openstudioutilitiesidd.IddObject_extensibleGroup(self)

    def getField(self, *args):
        return _openstudioutilitiesidd.IddObject_getField(self, *args)

    def getFieldIndex(self, fieldName):
        return _openstudioutilitiesidd.IddObject_getFieldIndex(self, fieldName)

    def insertHandleField(self):
        return _openstudioutilitiesidd.IddObject_insertHandleField(self)

    def numFields(self):
        return _openstudioutilitiesidd.IddObject_numFields(self)

    def numFieldsInDefaultObject(self):
        return _openstudioutilitiesidd.IddObject_numFieldsInDefaultObject(self)

    def isVersionObject(self):
        return _openstudioutilitiesidd.IddObject_isVersionObject(self)

    def isNonextensibleField(self, index):
        return _openstudioutilitiesidd.IddObject_isNonextensibleField(self, index)

    def isExtensibleField(self, index):
        return _openstudioutilitiesidd.IddObject_isExtensibleField(self, index)

    def hasHandleField(self):
        return _openstudioutilitiesidd.IddObject_hasHandleField(self)

    def hasNameField(self):
        return _openstudioutilitiesidd.IddObject_hasNameField(self)

    def nameFieldIndex(self):
        return _openstudioutilitiesidd.IddObject_nameFieldIndex(self)

    def isRequiredField(self, index):
        return _openstudioutilitiesidd.IddObject_isRequiredField(self, index)

    def hasURL(self):
        return _openstudioutilitiesidd.IddObject_hasURL(self)

    def urlFields(self):
        return _openstudioutilitiesidd.IddObject_urlFields(self)

    def extensibleIndex(self, index):
        return _openstudioutilitiesidd.IddObject_extensibleIndex(self, index)

    def index(self, extensibleIndex):
        return _openstudioutilitiesidd.IddObject_index(self, extensibleIndex)

    def references(self):
        return _openstudioutilitiesidd.IddObject_references(self)

    def objectLists(self, *args):
        return _openstudioutilitiesidd.IddObject_objectLists(self, *args)

    def objectListFields(self):
        return _openstudioutilitiesidd.IddObject_objectListFields(self)

    def __eq__(self, other):
        return _openstudioutilitiesidd.IddObject___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidd.IddObject___ne__(self, other)

    @staticmethod
    def load(*args):
        return _openstudioutilitiesidd.IddObject_load(*args)

    def __str__(self):
        return _openstudioutilitiesidd.IddObject___str__(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddObject

# Register IddObject in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddObject_swigregister(IddObject)

def getIddObjectTypeVector(objects):
    return _openstudioutilitiesidd.getIddObjectTypeVector(objects)

def getIddObjectTypeSet(objects):
    return _openstudioutilitiesidd.getIddObjectTypeSet(objects)

def getIddKeyNames(object, index):
    return _openstudioutilitiesidd.getIddKeyNames(object, index)
class IddFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioutilitiesidd.IddFile_swiginit(self, _openstudioutilitiesidd.new_IddFile())

    @staticmethod
    def catchallIddFile():
        return _openstudioutilitiesidd.IddFile_catchallIddFile()

    def version(self):
        return _openstudioutilitiesidd.IddFile_version(self)

    def build(self):
        return _openstudioutilitiesidd.IddFile_build(self)

    def header(self):
        return _openstudioutilitiesidd.IddFile_header(self)

    def objects(self):
        return _openstudioutilitiesidd.IddFile_objects(self)

    def groups(self):
        return _openstudioutilitiesidd.IddFile_groups(self)

    def getObjectsInGroup(self, group):
        return _openstudioutilitiesidd.IddFile_getObjectsInGroup(self, group)

    def getObjects(self, objectRegex):
        return _openstudioutilitiesidd.IddFile_getObjects(self, objectRegex)

    def versionObject(self):
        return _openstudioutilitiesidd.IddFile_versionObject(self)

    def getObject(self, *args):
        return _openstudioutilitiesidd.IddFile_getObject(self, *args)

    def requiredObjects(self):
        return _openstudioutilitiesidd.IddFile_requiredObjects(self)

    def uniqueObjects(self):
        return _openstudioutilitiesidd.IddFile_uniqueObjects(self)

    @staticmethod
    def load(*args):
        return _openstudioutilitiesidd.IddFile_load(*args)

    def save(self, p, overwrite=False):
        return _openstudioutilitiesidd.IddFile_save(self, p, overwrite)

    @staticmethod
    def parseVersionBuild(p):
        return _openstudioutilitiesidd.IddFile_parseVersionBuild(p)

    def __str__(self):
        return _openstudioutilitiesidd.IddFile___str__(self)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddFile

# Register IddFile in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddFile_swigregister(IddFile)

def __lshift__(*args):
    return _openstudioutilitiesidd.__lshift__(*args)
class IddFileAndFactoryWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidd.IddFileAndFactoryWrapper_swiginit(self, _openstudioutilitiesidd.new_IddFileAndFactoryWrapper(*args))

    def version(self):
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_version(self)

    def header(self):
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_header(self)

    def objects(self):
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_objects(self)

    def groups(self):
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_groups(self)

    def getObjectsInGroup(self, group):
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_getObjectsInGroup(self, group)

    def getObjects(self, objectRegex):
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_getObjects(self, objectRegex)

    def versionObject(self):
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_versionObject(self)

    def getObject(self, *args):
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_getObject(self, *args)

    def requiredObjects(self):
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_requiredObjects(self)

    def uniqueObjects(self):
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_uniqueObjects(self)

    def iddFile(self):
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_iddFile(self)

    def iddFileType(self):
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_iddFileType(self)

    def setIddFile(self, *args):
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_setIddFile(self, *args)

    def isInFile(self, *args):
        return _openstudioutilitiesidd.IddFileAndFactoryWrapper_isInFile(self, *args)
    __swig_destroy__ = _openstudioutilitiesidd.delete_IddFileAndFactoryWrapper

# Register IddFileAndFactoryWrapper in _openstudioutilitiesidd:
_openstudioutilitiesidd.IddFileAndFactoryWrapper_swigregister(IddFileAndFactoryWrapper)

def get_1_9_0_CBECC_IddFile():
    return _openstudioutilitiesidd.get_1_9_0_CBECC_IddFile()

