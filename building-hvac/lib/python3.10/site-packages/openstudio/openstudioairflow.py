# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudioairflow
else:
    import _openstudioairflow

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioairflow.delete_SwigPyIterator

    def value(self):
        return _openstudioairflow.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudioairflow.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudioairflow.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudioairflow.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudioairflow.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudioairflow.SwigPyIterator_copy(self)

    def next(self):
        return _openstudioairflow.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudioairflow.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudioairflow.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudioairflow.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudioairflow.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudioairflow.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudioairflow.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudioairflow.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudioairflow.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudioairflow.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudioairflow:
_openstudioairflow.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudioairflow.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudioutilitiesxml
from .import openstudiomodel
from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources
from .import openstudiomodelgeometry
from .import openstudiomodelhvac
from .import openstudiomodelzonehvac
from .import openstudiomodelavailabilitymanager
from .import openstudiomodelplantequipmentoperationscheme
from .import openstudiomodelstraightcomponent
from .import openstudiomodelairflow
from .import openstudiomodelrefrigeration
from .import openstudiomodelgenerators
class OptionalContamIndexModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.OptionalContamIndexModel_swiginit(self, _openstudioairflow.new_OptionalContamIndexModel(*args))

    def reset(self):
        return _openstudioairflow.OptionalContamIndexModel_reset(self)

    def __nonzero__(self):
        return _openstudioairflow.OptionalContamIndexModel___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioairflow.OptionalContamIndexModel___ref__(self)

    def is_initialized(self):
        return _openstudioairflow.OptionalContamIndexModel_is_initialized(self)

    def isNull(self):
        return _openstudioairflow.OptionalContamIndexModel_isNull(self)

    def empty(self):
        return _openstudioairflow.OptionalContamIndexModel_empty(self)

    def get(self):
        return _openstudioairflow.OptionalContamIndexModel_get(self)

    def set(self, t):
        return _openstudioairflow.OptionalContamIndexModel_set(self, t)

    def value_or(self, default_value):
        return _openstudioairflow.OptionalContamIndexModel_value_or(self, default_value)
    __swig_destroy__ = _openstudioairflow.delete_OptionalContamIndexModel

# Register OptionalContamIndexModel in _openstudioairflow:
_openstudioairflow.OptionalContamIndexModel_swigregister(OptionalContamIndexModel)
class ContamSpeciesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamSpeciesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamSpeciesVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamSpeciesVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamSpeciesVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamSpeciesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamSpeciesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamSpeciesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamSpeciesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamSpeciesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamSpeciesVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamSpeciesVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamSpeciesVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamSpeciesVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamSpeciesVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamSpeciesVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamSpeciesVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamSpeciesVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamSpeciesVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamSpeciesVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamSpeciesVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamSpeciesVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamSpeciesVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamSpeciesVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamSpeciesVector_swiginit(self, _openstudioairflow.new_ContamSpeciesVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamSpeciesVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamSpeciesVector_front(self)

    def back(self):
        return _openstudioairflow.ContamSpeciesVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamSpeciesVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamSpeciesVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamSpeciesVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamSpeciesVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamSpeciesVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamSpeciesVector

# Register ContamSpeciesVector in _openstudioairflow:
_openstudioairflow.ContamSpeciesVector_swigregister(ContamSpeciesVector)
class ContamLevelVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamLevelVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamLevelVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamLevelVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamLevelVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamLevelVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamLevelVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamLevelVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamLevelVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamLevelVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamLevelVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamLevelVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamLevelVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamLevelVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamLevelVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamLevelVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamLevelVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamLevelVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamLevelVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamLevelVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamLevelVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamLevelVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamLevelVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamLevelVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamLevelVector_swiginit(self, _openstudioairflow.new_ContamLevelVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamLevelVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamLevelVector_front(self)

    def back(self):
        return _openstudioairflow.ContamLevelVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamLevelVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamLevelVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamLevelVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamLevelVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamLevelVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamLevelVector

# Register ContamLevelVector in _openstudioairflow:
_openstudioairflow.ContamLevelVector_swigregister(ContamLevelVector)
class ContamDayScheduleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamDayScheduleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamDayScheduleVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamDayScheduleVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamDayScheduleVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamDayScheduleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamDayScheduleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamDayScheduleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamDayScheduleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamDayScheduleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamDayScheduleVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamDayScheduleVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamDayScheduleVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamDayScheduleVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamDayScheduleVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamDayScheduleVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamDayScheduleVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamDayScheduleVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamDayScheduleVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamDayScheduleVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamDayScheduleVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamDayScheduleVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamDayScheduleVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamDayScheduleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamDayScheduleVector_swiginit(self, _openstudioairflow.new_ContamDayScheduleVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamDayScheduleVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamDayScheduleVector_front(self)

    def back(self):
        return _openstudioairflow.ContamDayScheduleVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamDayScheduleVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamDayScheduleVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamDayScheduleVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamDayScheduleVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamDayScheduleVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamDayScheduleVector

# Register ContamDayScheduleVector in _openstudioairflow:
_openstudioairflow.ContamDayScheduleVector_swigregister(ContamDayScheduleVector)
class ContamWeekScheduleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamWeekScheduleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamWeekScheduleVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamWeekScheduleVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamWeekScheduleVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamWeekScheduleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamWeekScheduleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamWeekScheduleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamWeekScheduleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamWeekScheduleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamWeekScheduleVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamWeekScheduleVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamWeekScheduleVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamWeekScheduleVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamWeekScheduleVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamWeekScheduleVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamWeekScheduleVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamWeekScheduleVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamWeekScheduleVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamWeekScheduleVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamWeekScheduleVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamWeekScheduleVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamWeekScheduleVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamWeekScheduleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamWeekScheduleVector_swiginit(self, _openstudioairflow.new_ContamWeekScheduleVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamWeekScheduleVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamWeekScheduleVector_front(self)

    def back(self):
        return _openstudioairflow.ContamWeekScheduleVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamWeekScheduleVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamWeekScheduleVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamWeekScheduleVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamWeekScheduleVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamWeekScheduleVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamWeekScheduleVector

# Register ContamWeekScheduleVector in _openstudioairflow:
_openstudioairflow.ContamWeekScheduleVector_swigregister(ContamWeekScheduleVector)
class ContamWindPressureProfileVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamWindPressureProfileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamWindPressureProfileVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamWindPressureProfileVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamWindPressureProfileVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamWindPressureProfileVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamWindPressureProfileVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamWindPressureProfileVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamWindPressureProfileVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamWindPressureProfileVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamWindPressureProfileVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamWindPressureProfileVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamWindPressureProfileVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamWindPressureProfileVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamWindPressureProfileVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamWindPressureProfileVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamWindPressureProfileVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamWindPressureProfileVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamWindPressureProfileVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamWindPressureProfileVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamWindPressureProfileVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamWindPressureProfileVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamWindPressureProfileVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamWindPressureProfileVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamWindPressureProfileVector_swiginit(self, _openstudioairflow.new_ContamWindPressureProfileVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamWindPressureProfileVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamWindPressureProfileVector_front(self)

    def back(self):
        return _openstudioairflow.ContamWindPressureProfileVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamWindPressureProfileVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamWindPressureProfileVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamWindPressureProfileVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamWindPressureProfileVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamWindPressureProfileVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamWindPressureProfileVector

# Register ContamWindPressureProfileVector in _openstudioairflow:
_openstudioairflow.ContamWindPressureProfileVector_swigregister(ContamWindPressureProfileVector)
class ContamPressureCoefficientPointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamPressureCoefficientPointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamPressureCoefficientPointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamPressureCoefficientPointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamPressureCoefficientPointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamPressureCoefficientPointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamPressureCoefficientPointVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamPressureCoefficientPointVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamPressureCoefficientPointVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamPressureCoefficientPointVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamPressureCoefficientPointVector_swiginit(self, _openstudioairflow.new_ContamPressureCoefficientPointVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamPressureCoefficientPointVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector_front(self)

    def back(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamPressureCoefficientPointVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamPressureCoefficientPointVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamPressureCoefficientPointVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamPressureCoefficientPointVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamPressureCoefficientPointVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamPressureCoefficientPointVector

# Register ContamPressureCoefficientPointVector in _openstudioairflow:
_openstudioairflow.ContamPressureCoefficientPointVector_swigregister(ContamPressureCoefficientPointVector)
class ContamPlrTest1Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamPlrTest1Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamPlrTest1Vector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamPlrTest1Vector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamPlrTest1Vector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamPlrTest1Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamPlrTest1Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamPlrTest1Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamPlrTest1Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamPlrTest1Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamPlrTest1Vector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamPlrTest1Vector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamPlrTest1Vector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamPlrTest1Vector_empty(self)

    def size(self):
        return _openstudioairflow.ContamPlrTest1Vector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamPlrTest1Vector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamPlrTest1Vector_begin(self)

    def end(self):
        return _openstudioairflow.ContamPlrTest1Vector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamPlrTest1Vector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamPlrTest1Vector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamPlrTest1Vector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamPlrTest1Vector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamPlrTest1Vector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamPlrTest1Vector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamPlrTest1Vector_swiginit(self, _openstudioairflow.new_ContamPlrTest1Vector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamPlrTest1Vector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamPlrTest1Vector_front(self)

    def back(self):
        return _openstudioairflow.ContamPlrTest1Vector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamPlrTest1Vector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamPlrTest1Vector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamPlrTest1Vector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamPlrTest1Vector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamPlrTest1Vector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamPlrTest1Vector

# Register ContamPlrTest1Vector in _openstudioairflow:
_openstudioairflow.ContamPlrTest1Vector_swigregister(ContamPlrTest1Vector)
class ContamPlrTest2Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamPlrTest2Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamPlrTest2Vector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamPlrTest2Vector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamPlrTest2Vector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamPlrTest2Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamPlrTest2Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamPlrTest2Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamPlrTest2Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamPlrTest2Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamPlrTest2Vector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamPlrTest2Vector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamPlrTest2Vector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamPlrTest2Vector_empty(self)

    def size(self):
        return _openstudioairflow.ContamPlrTest2Vector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamPlrTest2Vector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamPlrTest2Vector_begin(self)

    def end(self):
        return _openstudioairflow.ContamPlrTest2Vector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamPlrTest2Vector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamPlrTest2Vector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamPlrTest2Vector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamPlrTest2Vector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamPlrTest2Vector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamPlrTest2Vector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamPlrTest2Vector_swiginit(self, _openstudioairflow.new_ContamPlrTest2Vector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamPlrTest2Vector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamPlrTest2Vector_front(self)

    def back(self):
        return _openstudioairflow.ContamPlrTest2Vector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamPlrTest2Vector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamPlrTest2Vector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamPlrTest2Vector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamPlrTest2Vector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamPlrTest2Vector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamPlrTest2Vector

# Register ContamPlrTest2Vector in _openstudioairflow:
_openstudioairflow.ContamPlrTest2Vector_swigregister(ContamPlrTest2Vector)
class ContamCvfDatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamCvfDatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamCvfDatVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamCvfDatVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamCvfDatVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamCvfDatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamCvfDatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamCvfDatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamCvfDatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamCvfDatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamCvfDatVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamCvfDatVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamCvfDatVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamCvfDatVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamCvfDatVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamCvfDatVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamCvfDatVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamCvfDatVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamCvfDatVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamCvfDatVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamCvfDatVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamCvfDatVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamCvfDatVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamCvfDatVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamCvfDatVector_swiginit(self, _openstudioairflow.new_ContamCvfDatVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamCvfDatVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamCvfDatVector_front(self)

    def back(self):
        return _openstudioairflow.ContamCvfDatVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamCvfDatVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamCvfDatVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamCvfDatVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamCvfDatVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamCvfDatVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamCvfDatVector

# Register ContamCvfDatVector in _openstudioairflow:
_openstudioairflow.ContamCvfDatVector_swigregister(ContamCvfDatVector)
class ContamSimpleAhsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamSimpleAhsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamSimpleAhsVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamSimpleAhsVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamSimpleAhsVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamSimpleAhsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamSimpleAhsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamSimpleAhsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamSimpleAhsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamSimpleAhsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamSimpleAhsVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamSimpleAhsVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamSimpleAhsVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamSimpleAhsVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamSimpleAhsVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamSimpleAhsVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamSimpleAhsVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamSimpleAhsVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamSimpleAhsVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamSimpleAhsVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamSimpleAhsVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamSimpleAhsVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamSimpleAhsVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamSimpleAhsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamSimpleAhsVector_swiginit(self, _openstudioairflow.new_ContamSimpleAhsVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamSimpleAhsVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamSimpleAhsVector_front(self)

    def back(self):
        return _openstudioairflow.ContamSimpleAhsVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamSimpleAhsVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamSimpleAhsVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamSimpleAhsVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamSimpleAhsVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamSimpleAhsVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamSimpleAhsVector

# Register ContamSimpleAhsVector in _openstudioairflow:
_openstudioairflow.ContamSimpleAhsVector_swigregister(ContamSimpleAhsVector)
class ContamZoneVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamZoneVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamZoneVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamZoneVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamZoneVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamZoneVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamZoneVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamZoneVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamZoneVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamZoneVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamZoneVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamZoneVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamZoneVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamZoneVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamZoneVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamZoneVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamZoneVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamZoneVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamZoneVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamZoneVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamZoneVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamZoneVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamZoneVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamZoneVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamZoneVector_swiginit(self, _openstudioairflow.new_ContamZoneVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamZoneVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamZoneVector_front(self)

    def back(self):
        return _openstudioairflow.ContamZoneVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamZoneVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamZoneVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamZoneVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamZoneVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamZoneVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamZoneVector

# Register ContamZoneVector in _openstudioairflow:
_openstudioairflow.ContamZoneVector_swigregister(ContamZoneVector)
class ContamAirflowPathVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamAirflowPathVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamAirflowPathVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamAirflowPathVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamAirflowPathVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamAirflowPathVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamAirflowPathVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamAirflowPathVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamAirflowPathVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamAirflowPathVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamAirflowPathVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamAirflowPathVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamAirflowPathVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamAirflowPathVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamAirflowPathVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamAirflowPathVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamAirflowPathVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamAirflowPathVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamAirflowPathVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamAirflowPathVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamAirflowPathVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamAirflowPathVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamAirflowPathVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamAirflowPathVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamAirflowPathVector_swiginit(self, _openstudioairflow.new_ContamAirflowPathVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamAirflowPathVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamAirflowPathVector_front(self)

    def back(self):
        return _openstudioairflow.ContamAirflowPathVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamAirflowPathVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamAirflowPathVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamAirflowPathVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamAirflowPathVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamAirflowPathVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamAirflowPathVector

# Register ContamAirflowPathVector in _openstudioairflow:
_openstudioairflow.ContamAirflowPathVector_swigregister(ContamAirflowPathVector)
class ContamSketchPadIconVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamSketchPadIconVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamSketchPadIconVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamSketchPadIconVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamSketchPadIconVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamSketchPadIconVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamSketchPadIconVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamSketchPadIconVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamSketchPadIconVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamSketchPadIconVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamSketchPadIconVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamSketchPadIconVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamSketchPadIconVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamSketchPadIconVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamSketchPadIconVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamSketchPadIconVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamSketchPadIconVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamSketchPadIconVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamSketchPadIconVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamSketchPadIconVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamSketchPadIconVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamSketchPadIconVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamSketchPadIconVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamSketchPadIconVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamSketchPadIconVector_swiginit(self, _openstudioairflow.new_ContamSketchPadIconVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamSketchPadIconVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamSketchPadIconVector_front(self)

    def back(self):
        return _openstudioairflow.ContamSketchPadIconVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamSketchPadIconVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamSketchPadIconVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamSketchPadIconVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamSketchPadIconVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamSketchPadIconVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamSketchPadIconVector

# Register ContamSketchPadIconVector in _openstudioairflow:
_openstudioairflow.ContamSketchPadIconVector_swigregister(ContamSketchPadIconVector)
class ContamSchedulePointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamSchedulePointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamSchedulePointVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamSchedulePointVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamSchedulePointVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamSchedulePointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamSchedulePointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamSchedulePointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamSchedulePointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamSchedulePointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamSchedulePointVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamSchedulePointVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamSchedulePointVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamSchedulePointVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamSchedulePointVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamSchedulePointVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamSchedulePointVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamSchedulePointVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamSchedulePointVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamSchedulePointVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamSchedulePointVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamSchedulePointVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamSchedulePointVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamSchedulePointVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamSchedulePointVector_swiginit(self, _openstudioairflow.new_ContamSchedulePointVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamSchedulePointVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamSchedulePointVector_front(self)

    def back(self):
        return _openstudioairflow.ContamSchedulePointVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamSchedulePointVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamSchedulePointVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamSchedulePointVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamSchedulePointVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamSchedulePointVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamSchedulePointVector

# Register ContamSchedulePointVector in _openstudioairflow:
_openstudioairflow.ContamSchedulePointVector_swigregister(ContamSchedulePointVector)
class ContamFanDataPointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamFanDataPointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamFanDataPointVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamFanDataPointVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamFanDataPointVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamFanDataPointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamFanDataPointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamFanDataPointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamFanDataPointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamFanDataPointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamFanDataPointVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamFanDataPointVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamFanDataPointVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamFanDataPointVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamFanDataPointVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamFanDataPointVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamFanDataPointVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamFanDataPointVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamFanDataPointVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamFanDataPointVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamFanDataPointVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamFanDataPointVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamFanDataPointVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamFanDataPointVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamFanDataPointVector_swiginit(self, _openstudioairflow.new_ContamFanDataPointVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamFanDataPointVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamFanDataPointVector_front(self)

    def back(self):
        return _openstudioairflow.ContamFanDataPointVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamFanDataPointVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamFanDataPointVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamFanDataPointVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamFanDataPointVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamFanDataPointVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamFanDataPointVector

# Register ContamFanDataPointVector in _openstudioairflow:
_openstudioairflow.ContamFanDataPointVector_swigregister(ContamFanDataPointVector)
class ContamXyDataPointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamXyDataPointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamXyDataPointVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamXyDataPointVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamXyDataPointVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamXyDataPointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamXyDataPointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamXyDataPointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamXyDataPointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamXyDataPointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamXyDataPointVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamXyDataPointVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamXyDataPointVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamXyDataPointVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamXyDataPointVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamXyDataPointVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamXyDataPointVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamXyDataPointVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamXyDataPointVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamXyDataPointVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamXyDataPointVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamXyDataPointVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamXyDataPointVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamXyDataPointVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamXyDataPointVector_swiginit(self, _openstudioairflow.new_ContamXyDataPointVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamXyDataPointVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamXyDataPointVector_front(self)

    def back(self):
        return _openstudioairflow.ContamXyDataPointVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamXyDataPointVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamXyDataPointVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamXyDataPointVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamXyDataPointVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamXyDataPointVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamXyDataPointVector

# Register ContamXyDataPointVector in _openstudioairflow:
_openstudioairflow.ContamXyDataPointVector_swigregister(ContamXyDataPointVector)
class ContamAirflowSubelementDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ContamAirflowSubelementDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ContamAirflowSubelementDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ContamAirflowSubelementDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ContamAirflowSubelementDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ContamAirflowSubelementDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ContamAirflowSubelementDataVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ContamAirflowSubelementDataVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector_empty(self)

    def size(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ContamAirflowSubelementDataVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector_begin(self)

    def end(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector_rend(self)

    def clear(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ContamAirflowSubelementDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ContamAirflowSubelementDataVector_swiginit(self, _openstudioairflow.new_ContamAirflowSubelementDataVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ContamAirflowSubelementDataVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector_front(self)

    def back(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ContamAirflowSubelementDataVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ContamAirflowSubelementDataVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ContamAirflowSubelementDataVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ContamAirflowSubelementDataVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ContamAirflowSubelementDataVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ContamAirflowSubelementDataVector

# Register ContamAirflowSubelementDataVector in _openstudioairflow:
_openstudioairflow.ContamAirflowSubelementDataVector_swigregister(ContamAirflowSubelementDataVector)
class AirflowElementTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.AirflowElementTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.AirflowElementTypeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.AirflowElementTypeVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.AirflowElementTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.AirflowElementTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.AirflowElementTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.AirflowElementTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.AirflowElementTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.AirflowElementTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.AirflowElementTypeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.AirflowElementTypeVector_pop(self)

    def append(self, x):
        return _openstudioairflow.AirflowElementTypeVector_append(self, x)

    def empty(self):
        return _openstudioairflow.AirflowElementTypeVector_empty(self)

    def size(self):
        return _openstudioairflow.AirflowElementTypeVector_size(self)

    def swap(self, v):
        return _openstudioairflow.AirflowElementTypeVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.AirflowElementTypeVector_begin(self)

    def end(self):
        return _openstudioairflow.AirflowElementTypeVector_end(self)

    def rbegin(self):
        return _openstudioairflow.AirflowElementTypeVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.AirflowElementTypeVector_rend(self)

    def clear(self):
        return _openstudioairflow.AirflowElementTypeVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.AirflowElementTypeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.AirflowElementTypeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.AirflowElementTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.AirflowElementTypeVector_swiginit(self, _openstudioairflow.new_AirflowElementTypeVector(*args))

    def push_back(self, x):
        return _openstudioairflow.AirflowElementTypeVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.AirflowElementTypeVector_front(self)

    def back(self):
        return _openstudioairflow.AirflowElementTypeVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.AirflowElementTypeVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.AirflowElementTypeVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.AirflowElementTypeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.AirflowElementTypeVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.AirflowElementTypeVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_AirflowElementTypeVector

# Register AirflowElementTypeVector in _openstudioairflow:
_openstudioairflow.AirflowElementTypeVector_swigregister(AirflowElementTypeVector)
class OptionalAirflowElementType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.OptionalAirflowElementType_swiginit(self, _openstudioairflow.new_OptionalAirflowElementType(*args))

    def reset(self):
        return _openstudioairflow.OptionalAirflowElementType_reset(self)

    def __nonzero__(self):
        return _openstudioairflow.OptionalAirflowElementType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioairflow.OptionalAirflowElementType___ref__(self)

    def is_initialized(self):
        return _openstudioairflow.OptionalAirflowElementType_is_initialized(self)

    def isNull(self):
        return _openstudioairflow.OptionalAirflowElementType_isNull(self)

    def empty(self):
        return _openstudioairflow.OptionalAirflowElementType_empty(self)

    def get(self):
        return _openstudioairflow.OptionalAirflowElementType_get(self)

    def set(self, t):
        return _openstudioairflow.OptionalAirflowElementType_set(self, t)

    def value_or(self, default_value):
        return _openstudioairflow.OptionalAirflowElementType_value_or(self, default_value)
    __swig_destroy__ = _openstudioairflow.delete_OptionalAirflowElementType

# Register OptionalAirflowElementType in _openstudioairflow:
_openstudioairflow.OptionalAirflowElementType_swigregister(OptionalAirflowElementType)
class ControlNodeTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioairflow.ControlNodeTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioairflow.ControlNodeTypeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioairflow.ControlNodeTypeVector___bool__(self)

    def __len__(self):
        return _openstudioairflow.ControlNodeTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioairflow.ControlNodeTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioairflow.ControlNodeTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioairflow.ControlNodeTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioairflow.ControlNodeTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioairflow.ControlNodeTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioairflow.ControlNodeTypeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioairflow.ControlNodeTypeVector_pop(self)

    def append(self, x):
        return _openstudioairflow.ControlNodeTypeVector_append(self, x)

    def empty(self):
        return _openstudioairflow.ControlNodeTypeVector_empty(self)

    def size(self):
        return _openstudioairflow.ControlNodeTypeVector_size(self)

    def swap(self, v):
        return _openstudioairflow.ControlNodeTypeVector_swap(self, v)

    def begin(self):
        return _openstudioairflow.ControlNodeTypeVector_begin(self)

    def end(self):
        return _openstudioairflow.ControlNodeTypeVector_end(self)

    def rbegin(self):
        return _openstudioairflow.ControlNodeTypeVector_rbegin(self)

    def rend(self):
        return _openstudioairflow.ControlNodeTypeVector_rend(self)

    def clear(self):
        return _openstudioairflow.ControlNodeTypeVector_clear(self)

    def get_allocator(self):
        return _openstudioairflow.ControlNodeTypeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioairflow.ControlNodeTypeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioairflow.ControlNodeTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioairflow.ControlNodeTypeVector_swiginit(self, _openstudioairflow.new_ControlNodeTypeVector(*args))

    def push_back(self, x):
        return _openstudioairflow.ControlNodeTypeVector_push_back(self, x)

    def front(self):
        return _openstudioairflow.ControlNodeTypeVector_front(self)

    def back(self):
        return _openstudioairflow.ControlNodeTypeVector_back(self)

    def assign(self, n, x):
        return _openstudioairflow.ControlNodeTypeVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioairflow.ControlNodeTypeVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioairflow.ControlNodeTypeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioairflow.ControlNodeTypeVector_reserve(self, n)

    def capacity(self):
        return _openstudioairflow.ControlNodeTypeVector_capacity(self)
    __swig_destroy__ = _openstudioairflow.delete_ControlNodeTypeVector

# Register ControlNodeTypeVector in _openstudioairflow:
_openstudioairflow.ControlNodeTypeVector_swigregister(ControlNodeTypeVector)
class OptionalControlNodeType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.OptionalControlNodeType_swiginit(self, _openstudioairflow.new_OptionalControlNodeType(*args))

    def reset(self):
        return _openstudioairflow.OptionalControlNodeType_reset(self)

    def __nonzero__(self):
        return _openstudioairflow.OptionalControlNodeType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioairflow.OptionalControlNodeType___ref__(self)

    def is_initialized(self):
        return _openstudioairflow.OptionalControlNodeType_is_initialized(self)

    def isNull(self):
        return _openstudioairflow.OptionalControlNodeType_isNull(self)

    def empty(self):
        return _openstudioairflow.OptionalControlNodeType_empty(self)

    def get(self):
        return _openstudioairflow.OptionalControlNodeType_get(self)

    def set(self, t):
        return _openstudioairflow.OptionalControlNodeType_set(self, t)

    def value_or(self, default_value):
        return _openstudioairflow.OptionalControlNodeType_value_or(self, default_value)
    __swig_destroy__ = _openstudioairflow.delete_OptionalControlNodeType

# Register OptionalControlNodeType in _openstudioairflow:
_openstudioairflow.OptionalControlNodeType_swigregister(OptionalControlNodeType)
class AirflowElementType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.AirflowElementType_swiginit(self, _openstudioairflow.new_AirflowElementType(*args))

    def valueName(self):
        return _openstudioairflow.AirflowElementType_valueName(self)

    def value(self):
        return _openstudioairflow.AirflowElementType_value(self)

    def valueDescription(self):
        return _openstudioairflow.AirflowElementType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioairflow.AirflowElementType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.AirflowElementType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioairflow.AirflowElementType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioairflow.AirflowElementType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioairflow.AirflowElementType___lt__(self, other)

    def __le__(self, other):
        return _openstudioairflow.AirflowElementType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioairflow.AirflowElementType_enumName()

    @staticmethod
    def getValues():
        return _openstudioairflow.AirflowElementType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioairflow.AirflowElementType_getLookupMap()

    def __str__(self):
        return _openstudioairflow.AirflowElementType___str__(self)
    __swig_destroy__ = _openstudioairflow.delete_AirflowElementType

# Register AirflowElementType in _openstudioairflow:
_openstudioairflow.AirflowElementType_swigregister(AirflowElementType)
class ControlNodeType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.ControlNodeType_swiginit(self, _openstudioairflow.new_ControlNodeType(*args))

    def valueName(self):
        return _openstudioairflow.ControlNodeType_valueName(self)

    def value(self):
        return _openstudioairflow.ControlNodeType_value(self)

    def valueDescription(self):
        return _openstudioairflow.ControlNodeType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioairflow.ControlNodeType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.ControlNodeType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioairflow.ControlNodeType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioairflow.ControlNodeType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioairflow.ControlNodeType___lt__(self, other)

    def __le__(self, other):
        return _openstudioairflow.ControlNodeType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioairflow.ControlNodeType_enumName()

    @staticmethod
    def getValues():
        return _openstudioairflow.ControlNodeType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioairflow.ControlNodeType_getLookupMap()

    def __str__(self):
        return _openstudioairflow.ControlNodeType___str__(self)
    __swig_destroy__ = _openstudioairflow.delete_ControlNodeType

# Register ControlNodeType in _openstudioairflow:
_openstudioairflow.ControlNodeType_swigregister(ControlNodeType)

def __lshift__(*args):
    return _openstudioairflow.__lshift__(*args)
class WeatherData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.WeatherData_swiginit(self, _openstudioairflow.new_WeatherData(*args))
    __swig_destroy__ = _openstudioairflow.delete_WeatherData

    def __eq__(self, other):
        return _openstudioairflow.WeatherData___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.WeatherData___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.WeatherData_read(self, input)

    def write(self):
        return _openstudioairflow.WeatherData_write(self)

    def Tambt(self):
        return _openstudioairflow.WeatherData_Tambt(self)

    def setTambt(self, *args):
        return _openstudioairflow.WeatherData_setTambt(self, *args)

    def barpres(self):
        return _openstudioairflow.WeatherData_barpres(self)

    def setBarpres(self, *args):
        return _openstudioairflow.WeatherData_setBarpres(self, *args)

    def windspd(self):
        return _openstudioairflow.WeatherData_windspd(self)

    def setWindspd(self, *args):
        return _openstudioairflow.WeatherData_setWindspd(self, *args)

    def winddir(self):
        return _openstudioairflow.WeatherData_winddir(self)

    def setWinddir(self, *args):
        return _openstudioairflow.WeatherData_setWinddir(self, *args)

    def relhum(self):
        return _openstudioairflow.WeatherData_relhum(self)

    def setRelhum(self, *args):
        return _openstudioairflow.WeatherData_setRelhum(self, *args)

    def daytyp(self):
        return _openstudioairflow.WeatherData_daytyp(self)

    def setDaytyp(self, daytyp):
        return _openstudioairflow.WeatherData_setDaytyp(self, daytyp)

    def uTa(self):
        return _openstudioairflow.WeatherData_uTa(self)

    def setUTa(self, uTa):
        return _openstudioairflow.WeatherData_setUTa(self, uTa)

    def ubP(self):
        return _openstudioairflow.WeatherData_ubP(self)

    def setUbP(self, ubP):
        return _openstudioairflow.WeatherData_setUbP(self, ubP)

    def uws(self):
        return _openstudioairflow.WeatherData_uws(self)

    def setUws(self, uws):
        return _openstudioairflow.WeatherData_setUws(self, uws)

    def uwd(self):
        return _openstudioairflow.WeatherData_uwd(self)

    def setUwd(self, uwd):
        return _openstudioairflow.WeatherData_setUwd(self, uwd)

# Register WeatherData in _openstudioairflow:
_openstudioairflow.WeatherData_swigregister(WeatherData)
class Icon(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.Icon_swiginit(self, _openstudioairflow.new_Icon(*args))
    __swig_destroy__ = _openstudioairflow.delete_Icon

    def __eq__(self, other):
        return _openstudioairflow.Icon___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.Icon___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.Icon_read(self, input)

    def write(self):
        return _openstudioairflow.Icon_write(self)

    def icon(self):
        return _openstudioairflow.Icon_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.Icon_setIcon(self, icon)

    def col(self):
        return _openstudioairflow.Icon_col(self)

    def setCol(self, col):
        return _openstudioairflow.Icon_setCol(self, col)

    def row(self):
        return _openstudioairflow.Icon_row(self)

    def setRow(self, row):
        return _openstudioairflow.Icon_setRow(self, row)

    def nr(self):
        return _openstudioairflow.Icon_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.Icon_setNr(self, nr)

    def isWall(self):
        return _openstudioairflow.Icon_isWall(self)

# Register Icon in _openstudioairflow:
_openstudioairflow.Icon_swigregister(Icon)
class FanDataPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.FanDataPoint_swiginit(self, _openstudioairflow.new_FanDataPoint(*args))

    def read(self, reader):
        return _openstudioairflow.FanDataPoint_read(self, reader)

    def write(self):
        return _openstudioairflow.FanDataPoint_write(self)

    def mF(self):
        return _openstudioairflow.FanDataPoint_mF(self)

    def setMF(self, *args):
        return _openstudioairflow.FanDataPoint_setMF(self, *args)

    def u_mF(self):
        return _openstudioairflow.FanDataPoint_u_mF(self)

    def setU_mF(self, u_mF):
        return _openstudioairflow.FanDataPoint_setU_mF(self, u_mF)

    def dP(self):
        return _openstudioairflow.FanDataPoint_dP(self)

    def setDP(self, *args):
        return _openstudioairflow.FanDataPoint_setDP(self, *args)

    def u_dP(self):
        return _openstudioairflow.FanDataPoint_u_dP(self)

    def setU_dP(self, u_dP):
        return _openstudioairflow.FanDataPoint_setU_dP(self, u_dP)

    def rP(self):
        return _openstudioairflow.FanDataPoint_rP(self)

    def setRP(self, *args):
        return _openstudioairflow.FanDataPoint_setRP(self, *args)

    def u_rP(self):
        return _openstudioairflow.FanDataPoint_u_rP(self)

    def setU_rP(self, u_rP):
        return _openstudioairflow.FanDataPoint_setU_rP(self, u_rP)
    __swig_destroy__ = _openstudioairflow.delete_FanDataPoint

# Register FanDataPoint in _openstudioairflow:
_openstudioairflow.FanDataPoint_swigregister(FanDataPoint)
class XyDataPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.XyDataPoint_swiginit(self, _openstudioairflow.new_XyDataPoint(*args))

    def read(self, reader):
        return _openstudioairflow.XyDataPoint_read(self, reader)

    def write(self):
        return _openstudioairflow.XyDataPoint_write(self)

    def x(self):
        return _openstudioairflow.XyDataPoint_x(self)

    def setX(self, *args):
        return _openstudioairflow.XyDataPoint_setX(self, *args)

    def y(self):
        return _openstudioairflow.XyDataPoint_y(self)

    def setY(self, *args):
        return _openstudioairflow.XyDataPoint_setY(self, *args)
    __swig_destroy__ = _openstudioairflow.delete_XyDataPoint

# Register XyDataPoint in _openstudioairflow:
_openstudioairflow.XyDataPoint_swigregister(XyDataPoint)
class AirflowSubelementData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.AirflowSubelementData_swiginit(self, _openstudioairflow.new_AirflowSubelementData(*args))

    def read(self, reader):
        return _openstudioairflow.AirflowSubelementData_read(self, reader)

    def write(self):
        return _openstudioairflow.AirflowSubelementData_write(self)

    def nr(self):
        return _openstudioairflow.AirflowSubelementData_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.AirflowSubelementData_setNr(self, nr)

    def relHt(self):
        return _openstudioairflow.AirflowSubelementData_relHt(self)

    def setRelHt(self, *args):
        return _openstudioairflow.AirflowSubelementData_setRelHt(self, *args)

    def filt(self):
        return _openstudioairflow.AirflowSubelementData_filt(self)

    def setFilt(self, filt):
        return _openstudioairflow.AirflowSubelementData_setFilt(self, filt)
    __swig_destroy__ = _openstudioairflow.delete_AirflowSubelementData

# Register AirflowSubelementData in _openstudioairflow:
_openstudioairflow.AirflowSubelementData_swigregister(AirflowSubelementData)
class PressureCoefficientPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PressureCoefficientPoint_swiginit(self, _openstudioairflow.new_PressureCoefficientPoint(*args))

    def read(self, reader):
        return _openstudioairflow.PressureCoefficientPoint_read(self, reader)

    def write(self):
        return _openstudioairflow.PressureCoefficientPoint_write(self)

    def azm(self):
        return _openstudioairflow.PressureCoefficientPoint_azm(self)

    def setAzm(self, *args):
        return _openstudioairflow.PressureCoefficientPoint_setAzm(self, *args)

    def coef(self):
        return _openstudioairflow.PressureCoefficientPoint_coef(self)

    def setCoef(self, *args):
        return _openstudioairflow.PressureCoefficientPoint_setCoef(self, *args)
    __swig_destroy__ = _openstudioairflow.delete_PressureCoefficientPoint

# Register PressureCoefficientPoint in _openstudioairflow:
_openstudioairflow.PressureCoefficientPoint_swigregister(PressureCoefficientPoint)
class SchedulePoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.SchedulePoint_swiginit(self, _openstudioairflow.new_SchedulePoint(*args))

    def read(self, reader):
        return _openstudioairflow.SchedulePoint_read(self, reader)

    def write(self):
        return _openstudioairflow.SchedulePoint_write(self)

    def time(self):
        return _openstudioairflow.SchedulePoint_time(self)

    def setTime(self, time):
        return _openstudioairflow.SchedulePoint_setTime(self, time)

    def ctrl(self):
        return _openstudioairflow.SchedulePoint_ctrl(self)

    def setCtrl(self, *args):
        return _openstudioairflow.SchedulePoint_setCtrl(self, *args)
    __swig_destroy__ = _openstudioairflow.delete_SchedulePoint

# Register SchedulePoint in _openstudioairflow:
_openstudioairflow.SchedulePoint_swigregister(SchedulePoint)
class Zone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.Zone_swiginit(self, _openstudioairflow.new_Zone(*args))
    __swig_destroy__ = _openstudioairflow.delete_Zone

    def __eq__(self, other):
        return _openstudioairflow.Zone___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.Zone___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.Zone_read(self, input)

    def write(self):
        return _openstudioairflow.Zone_write(self)

    def nr(self):
        return _openstudioairflow.Zone_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.Zone_setNr(self, nr)

    def flags(self):
        return _openstudioairflow.Zone_flags(self)

    def setFlags(self, flags):
        return _openstudioairflow.Zone_setFlags(self, flags)

    def ps(self):
        return _openstudioairflow.Zone_ps(self)

    def setPs(self, ps):
        return _openstudioairflow.Zone_setPs(self, ps)

    def pc(self):
        return _openstudioairflow.Zone_pc(self)

    def setPc(self, pc):
        return _openstudioairflow.Zone_setPc(self, pc)

    def pk(self):
        return _openstudioairflow.Zone_pk(self)

    def setPk(self, pk):
        return _openstudioairflow.Zone_setPk(self, pk)

    def pl(self):
        return _openstudioairflow.Zone_pl(self)

    def setPl(self, pl):
        return _openstudioairflow.Zone_setPl(self, pl)

    def relHt(self):
        return _openstudioairflow.Zone_relHt(self)

    def setRelHt(self, *args):
        return _openstudioairflow.Zone_setRelHt(self, *args)

    def Vol(self):
        return _openstudioairflow.Zone_Vol(self)

    def setVol(self, *args):
        return _openstudioairflow.Zone_setVol(self, *args)

    def T0(self):
        return _openstudioairflow.Zone_T0(self)

    def setT0(self, *args):
        return _openstudioairflow.Zone_setT0(self, *args)

    def P0(self):
        return _openstudioairflow.Zone_P0(self)

    def setP0(self, *args):
        return _openstudioairflow.Zone_setP0(self, *args)

    def name(self):
        return _openstudioairflow.Zone_name(self)

    def setName(self, name):
        return _openstudioairflow.Zone_setName(self, name)

    def color(self):
        return _openstudioairflow.Zone_color(self)

    def setColor(self, color):
        return _openstudioairflow.Zone_setColor(self, color)

    def u_Ht(self):
        return _openstudioairflow.Zone_u_Ht(self)

    def setU_Ht(self, u_Ht):
        return _openstudioairflow.Zone_setU_Ht(self, u_Ht)

    def u_V(self):
        return _openstudioairflow.Zone_u_V(self)

    def setU_V(self, u_V):
        return _openstudioairflow.Zone_setU_V(self, u_V)

    def u_T(self):
        return _openstudioairflow.Zone_u_T(self)

    def setU_T(self, u_T):
        return _openstudioairflow.Zone_setU_T(self, u_T)

    def u_P(self):
        return _openstudioairflow.Zone_u_P(self)

    def setU_P(self, u_P):
        return _openstudioairflow.Zone_setU_P(self, u_P)

    def cdaxis(self):
        return _openstudioairflow.Zone_cdaxis(self)

    def setCdaxis(self, cdaxis):
        return _openstudioairflow.Zone_setCdaxis(self, cdaxis)

    def cfd(self):
        return _openstudioairflow.Zone_cfd(self)

    def setCfd(self, cfd):
        return _openstudioairflow.Zone_setCfd(self, cfd)

    def cfdname(self):
        return _openstudioairflow.Zone_cfdname(self)

    def setCfdname(self, cfdname):
        return _openstudioairflow.Zone_setCfdname(self, cfdname)

    def X1(self):
        return _openstudioairflow.Zone_X1(self)

    def setX1(self, *args):
        return _openstudioairflow.Zone_setX1(self, *args)

    def Y1(self):
        return _openstudioairflow.Zone_Y1(self)

    def setY1(self, *args):
        return _openstudioairflow.Zone_setY1(self, *args)

    def H1(self):
        return _openstudioairflow.Zone_H1(self)

    def setH1(self, *args):
        return _openstudioairflow.Zone_setH1(self, *args)

    def X2(self):
        return _openstudioairflow.Zone_X2(self)

    def setX2(self, *args):
        return _openstudioairflow.Zone_setX2(self, *args)

    def Y2(self):
        return _openstudioairflow.Zone_Y2(self)

    def setY2(self, *args):
        return _openstudioairflow.Zone_setY2(self, *args)

    def H2(self):
        return _openstudioairflow.Zone_H2(self)

    def setH2(self, *args):
        return _openstudioairflow.Zone_setH2(self, *args)

    def celldx(self):
        return _openstudioairflow.Zone_celldx(self)

    def setCelldx(self, *args):
        return _openstudioairflow.Zone_setCelldx(self, *args)

    def axialD(self):
        return _openstudioairflow.Zone_axialD(self)

    def setAxialD(self, *args):
        return _openstudioairflow.Zone_setAxialD(self, *args)

    def u_aD(self):
        return _openstudioairflow.Zone_u_aD(self)

    def setU_aD(self, u_aD):
        return _openstudioairflow.Zone_setU_aD(self, u_aD)

    def u_L(self):
        return _openstudioairflow.Zone_u_L(self)

    def setU_L(self, u_L):
        return _openstudioairflow.Zone_setU_L(self, u_L)

    def variablePressure(self):
        return _openstudioairflow.Zone_variablePressure(self)

    def setVariablePressure(self, b):
        return _openstudioairflow.Zone_setVariablePressure(self, b)

    def variableContaminants(self):
        return _openstudioairflow.Zone_variableContaminants(self)

    def setVariableContaminants(self, b):
        return _openstudioairflow.Zone_setVariableContaminants(self, b)

    def system(self):
        return _openstudioairflow.Zone_system(self)

    def setSystem(self, b):
        return _openstudioairflow.Zone_setSystem(self, b)

    def ic(self, *args):
        return _openstudioairflow.Zone_ic(self, *args)

    def setIc(self, *args):
        return _openstudioairflow.Zone_setIc(self, *args)

# Register Zone in _openstudioairflow:
_openstudioairflow.Zone_swigregister(Zone)
class Species(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.Species_swiginit(self, _openstudioairflow.new_Species(*args))
    __swig_destroy__ = _openstudioairflow.delete_Species

    def __eq__(self, other):
        return _openstudioairflow.Species___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.Species___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.Species_read(self, input)

    def write(self):
        return _openstudioairflow.Species_write(self)

    def nr(self):
        return _openstudioairflow.Species_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.Species_setNr(self, nr)

    def sflag(self):
        return _openstudioairflow.Species_sflag(self)

    def setSflag(self, sflag):
        return _openstudioairflow.Species_setSflag(self, sflag)

    def ntflag(self):
        return _openstudioairflow.Species_ntflag(self)

    def setNtflag(self, ntflag):
        return _openstudioairflow.Species_setNtflag(self, ntflag)

    def molwt(self):
        return _openstudioairflow.Species_molwt(self)

    def setMolwt(self, *args):
        return _openstudioairflow.Species_setMolwt(self, *args)

    def mdiam(self):
        return _openstudioairflow.Species_mdiam(self)

    def setMdiam(self, *args):
        return _openstudioairflow.Species_setMdiam(self, *args)

    def edens(self):
        return _openstudioairflow.Species_edens(self)

    def setEdens(self, *args):
        return _openstudioairflow.Species_setEdens(self, *args)

    def decay(self):
        return _openstudioairflow.Species_decay(self)

    def setDecay(self, *args):
        return _openstudioairflow.Species_setDecay(self, *args)

    def Dm(self):
        return _openstudioairflow.Species_Dm(self)

    def setDm(self, *args):
        return _openstudioairflow.Species_setDm(self, *args)

    def ccdef(self):
        return _openstudioairflow.Species_ccdef(self)

    def setCcdef(self, *args):
        return _openstudioairflow.Species_setCcdef(self, *args)

    def Cp(self):
        return _openstudioairflow.Species_Cp(self)

    def setCp(self, *args):
        return _openstudioairflow.Species_setCp(self, *args)

    def ucc(self):
        return _openstudioairflow.Species_ucc(self)

    def setUcc(self, ucc):
        return _openstudioairflow.Species_setUcc(self, ucc)

    def umd(self):
        return _openstudioairflow.Species_umd(self)

    def setUmd(self, umd):
        return _openstudioairflow.Species_setUmd(self, umd)

    def ued(self):
        return _openstudioairflow.Species_ued(self)

    def setUed(self, ued):
        return _openstudioairflow.Species_setUed(self, ued)

    def udm(self):
        return _openstudioairflow.Species_udm(self)

    def setUdm(self, udm):
        return _openstudioairflow.Species_setUdm(self, udm)

    def ucp(self):
        return _openstudioairflow.Species_ucp(self)

    def setUcp(self, ucp):
        return _openstudioairflow.Species_setUcp(self, ucp)

    def name(self):
        return _openstudioairflow.Species_name(self)

    def setName(self, name):
        return _openstudioairflow.Species_setName(self, name)

    def desc(self):
        return _openstudioairflow.Species_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.Species_setDesc(self, desc)

# Register Species in _openstudioairflow:
_openstudioairflow.Species_swigregister(Species)
class Ahs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.Ahs_swiginit(self, _openstudioairflow.new_Ahs(*args))
    __swig_destroy__ = _openstudioairflow.delete_Ahs

    def __eq__(self, other):
        return _openstudioairflow.Ahs___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.Ahs___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.Ahs_read(self, input)

    def write(self):
        return _openstudioairflow.Ahs_write(self)

    def nr(self):
        return _openstudioairflow.Ahs_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.Ahs_setNr(self, nr)

    def zone_r(self):
        return _openstudioairflow.Ahs_zone_r(self)

    def setZone_r(self, zone_r):
        return _openstudioairflow.Ahs_setZone_r(self, zone_r)

    def zone_s(self):
        return _openstudioairflow.Ahs_zone_s(self)

    def setZone_s(self, zone_s):
        return _openstudioairflow.Ahs_setZone_s(self, zone_s)

    def path_r(self):
        return _openstudioairflow.Ahs_path_r(self)

    def setPath_r(self, path_r):
        return _openstudioairflow.Ahs_setPath_r(self, path_r)

    def path_s(self):
        return _openstudioairflow.Ahs_path_s(self)

    def setPath_s(self, path_s):
        return _openstudioairflow.Ahs_setPath_s(self, path_s)

    def path_x(self):
        return _openstudioairflow.Ahs_path_x(self)

    def setPath_x(self, path_x):
        return _openstudioairflow.Ahs_setPath_x(self, path_x)

    def name(self):
        return _openstudioairflow.Ahs_name(self)

    def setName(self, name):
        return _openstudioairflow.Ahs_setName(self, name)

    def desc(self):
        return _openstudioairflow.Ahs_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.Ahs_setDesc(self, desc)

# Register Ahs in _openstudioairflow:
_openstudioairflow.Ahs_swigregister(Ahs)
class AirflowPath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.AirflowPath_swiginit(self, _openstudioairflow.new_AirflowPath(*args))
    __swig_destroy__ = _openstudioairflow.delete_AirflowPath

    def __eq__(self, other):
        return _openstudioairflow.AirflowPath___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.AirflowPath___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.AirflowPath_read(self, input)

    def write(self):
        return _openstudioairflow.AirflowPath_write(self)

    def nr(self):
        return _openstudioairflow.AirflowPath_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.AirflowPath_setNr(self, nr)

    def flags(self):
        return _openstudioairflow.AirflowPath_flags(self)

    def setFlags(self, flags):
        return _openstudioairflow.AirflowPath_setFlags(self, flags)

    def pzn(self):
        return _openstudioairflow.AirflowPath_pzn(self)

    def setPzn(self, pzn):
        return _openstudioairflow.AirflowPath_setPzn(self, pzn)

    def pzm(self):
        return _openstudioairflow.AirflowPath_pzm(self)

    def setPzm(self, pzm):
        return _openstudioairflow.AirflowPath_setPzm(self, pzm)

    def pe(self):
        return _openstudioairflow.AirflowPath_pe(self)

    def setPe(self, pe):
        return _openstudioairflow.AirflowPath_setPe(self, pe)

    def pf(self):
        return _openstudioairflow.AirflowPath_pf(self)

    def setPf(self, pf):
        return _openstudioairflow.AirflowPath_setPf(self, pf)

    def pw(self):
        return _openstudioairflow.AirflowPath_pw(self)

    def setPw(self, pw):
        return _openstudioairflow.AirflowPath_setPw(self, pw)

    def pa(self):
        return _openstudioairflow.AirflowPath_pa(self)

    def setPa(self, pa):
        return _openstudioairflow.AirflowPath_setPa(self, pa)

    def ps(self):
        return _openstudioairflow.AirflowPath_ps(self)

    def setPs(self, ps):
        return _openstudioairflow.AirflowPath_setPs(self, ps)

    def pc(self):
        return _openstudioairflow.AirflowPath_pc(self)

    def setPc(self, pc):
        return _openstudioairflow.AirflowPath_setPc(self, pc)

    def pld(self):
        return _openstudioairflow.AirflowPath_pld(self)

    def setPld(self, pld):
        return _openstudioairflow.AirflowPath_setPld(self, pld)

    def X(self):
        return _openstudioairflow.AirflowPath_X(self)

    def setX(self, *args):
        return _openstudioairflow.AirflowPath_setX(self, *args)

    def Y(self):
        return _openstudioairflow.AirflowPath_Y(self)

    def setY(self, *args):
        return _openstudioairflow.AirflowPath_setY(self, *args)

    def relHt(self):
        return _openstudioairflow.AirflowPath_relHt(self)

    def setRelHt(self, *args):
        return _openstudioairflow.AirflowPath_setRelHt(self, *args)

    def mult(self):
        return _openstudioairflow.AirflowPath_mult(self)

    def setMult(self, *args):
        return _openstudioairflow.AirflowPath_setMult(self, *args)

    def wPset(self):
        return _openstudioairflow.AirflowPath_wPset(self)

    def setWPset(self, *args):
        return _openstudioairflow.AirflowPath_setWPset(self, *args)

    def wPmod(self):
        return _openstudioairflow.AirflowPath_wPmod(self)

    def setWPmod(self, *args):
        return _openstudioairflow.AirflowPath_setWPmod(self, *args)

    def wazm(self):
        return _openstudioairflow.AirflowPath_wazm(self)

    def setWazm(self, *args):
        return _openstudioairflow.AirflowPath_setWazm(self, *args)

    def Fahs(self):
        return _openstudioairflow.AirflowPath_Fahs(self)

    def setFahs(self, *args):
        return _openstudioairflow.AirflowPath_setFahs(self, *args)

    def Xmax(self):
        return _openstudioairflow.AirflowPath_Xmax(self)

    def setXmax(self, *args):
        return _openstudioairflow.AirflowPath_setXmax(self, *args)

    def Xmin(self):
        return _openstudioairflow.AirflowPath_Xmin(self)

    def setXmin(self, *args):
        return _openstudioairflow.AirflowPath_setXmin(self, *args)

    def icon(self):
        return _openstudioairflow.AirflowPath_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.AirflowPath_setIcon(self, icon)

    def dir(self):
        return _openstudioairflow.AirflowPath_dir(self)

    def setDir(self, dir):
        return _openstudioairflow.AirflowPath_setDir(self, dir)

    def u_Ht(self):
        return _openstudioairflow.AirflowPath_u_Ht(self)

    def setU_Ht(self, u_Ht):
        return _openstudioairflow.AirflowPath_setU_Ht(self, u_Ht)

    def u_XY(self):
        return _openstudioairflow.AirflowPath_u_XY(self)

    def setU_XY(self, u_XY):
        return _openstudioairflow.AirflowPath_setU_XY(self, u_XY)

    def u_dP(self):
        return _openstudioairflow.AirflowPath_u_dP(self)

    def setU_dP(self, u_dP):
        return _openstudioairflow.AirflowPath_setU_dP(self, u_dP)

    def u_F(self):
        return _openstudioairflow.AirflowPath_u_F(self)

    def setU_F(self, u_F):
        return _openstudioairflow.AirflowPath_setU_F(self, u_F)

    def cfd(self):
        return _openstudioairflow.AirflowPath_cfd(self)

    def setCfd(self, cfd):
        return _openstudioairflow.AirflowPath_setCfd(self, cfd)

    def cfd_name(self):
        return _openstudioairflow.AirflowPath_cfd_name(self)

    def setCfd_name(self, cfd_name):
        return _openstudioairflow.AirflowPath_setCfd_name(self, cfd_name)

    def cfd_ptype(self):
        return _openstudioairflow.AirflowPath_cfd_ptype(self)

    def setCfd_ptype(self, cfd_ptype):
        return _openstudioairflow.AirflowPath_setCfd_ptype(self, cfd_ptype)

    def cfd_btype(self):
        return _openstudioairflow.AirflowPath_cfd_btype(self)

    def setCfd_btype(self, cfd_btype):
        return _openstudioairflow.AirflowPath_setCfd_btype(self, cfd_btype)

    def cfd_capp(self):
        return _openstudioairflow.AirflowPath_cfd_capp(self)

    def setCfd_capp(self, cfd_capp):
        return _openstudioairflow.AirflowPath_setCfd_capp(self, cfd_capp)

    def windPressure(self):
        return _openstudioairflow.AirflowPath_windPressure(self)

    def setWindPressure(self, b):
        return _openstudioairflow.AirflowPath_setWindPressure(self, b)

    def system(self):
        return _openstudioairflow.AirflowPath_system(self)

    def setSystem(self, b):
        return _openstudioairflow.AirflowPath_setSystem(self, b)

    def exhaust(self):
        return _openstudioairflow.AirflowPath_exhaust(self)

    def setExhaust(self, b):
        return _openstudioairflow.AirflowPath_setExhaust(self, b)

    def recirculation(self):
        return _openstudioairflow.AirflowPath_recirculation(self)

    def setRecirculation(self, b):
        return _openstudioairflow.AirflowPath_setRecirculation(self, b)

    def outsideAir(self):
        return _openstudioairflow.AirflowPath_outsideAir(self)

    def setOutsideAir(self, b):
        return _openstudioairflow.AirflowPath_setOutsideAir(self, b)

# Register AirflowPath in _openstudioairflow:
_openstudioairflow.AirflowPath_swigregister(AirflowPath)
class RunControl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.RunControl_swiginit(self, _openstudioairflow.new_RunControl(*args))
    __swig_destroy__ = _openstudioairflow.delete_RunControl

    def __eq__(self, other):
        return _openstudioairflow.RunControl___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.RunControl___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.RunControl_read(self, input)

    def write(self):
        return _openstudioairflow.RunControl_write(self)

    def sim_af(self):
        return _openstudioairflow.RunControl_sim_af(self)

    def setSim_af(self, sim_af):
        return _openstudioairflow.RunControl_setSim_af(self, sim_af)

    def afcalc(self):
        return _openstudioairflow.RunControl_afcalc(self)

    def setAfcalc(self, afcalc):
        return _openstudioairflow.RunControl_setAfcalc(self, afcalc)

    def afmaxi(self):
        return _openstudioairflow.RunControl_afmaxi(self)

    def setAfmaxi(self, afmaxi):
        return _openstudioairflow.RunControl_setAfmaxi(self, afmaxi)

    def afrcnvg(self):
        return _openstudioairflow.RunControl_afrcnvg(self)

    def setAfrcnvg(self, *args):
        return _openstudioairflow.RunControl_setAfrcnvg(self, *args)

    def afacnvg(self):
        return _openstudioairflow.RunControl_afacnvg(self)

    def setAfacnvg(self, *args):
        return _openstudioairflow.RunControl_setAfacnvg(self, *args)

    def afrelax(self):
        return _openstudioairflow.RunControl_afrelax(self)

    def setAfrelax(self, *args):
        return _openstudioairflow.RunControl_setAfrelax(self, *args)

    def uac2(self):
        return _openstudioairflow.RunControl_uac2(self)

    def setUac2(self, uac2):
        return _openstudioairflow.RunControl_setUac2(self, uac2)

    def Pres(self):
        return _openstudioairflow.RunControl_Pres(self)

    def setPres(self, *args):
        return _openstudioairflow.RunControl_setPres(self, *args)

    def uPres(self):
        return _openstudioairflow.RunControl_uPres(self)

    def setUPres(self, uPres):
        return _openstudioairflow.RunControl_setUPres(self, uPres)

    def afslae(self):
        return _openstudioairflow.RunControl_afslae(self)

    def setAfslae(self, afslae):
        return _openstudioairflow.RunControl_setAfslae(self, afslae)

    def afrseq(self):
        return _openstudioairflow.RunControl_afrseq(self)

    def setAfrseq(self, afrseq):
        return _openstudioairflow.RunControl_setAfrseq(self, afrseq)

    def aflmaxi(self):
        return _openstudioairflow.RunControl_aflmaxi(self)

    def setAflmaxi(self, aflmaxi):
        return _openstudioairflow.RunControl_setAflmaxi(self, aflmaxi)

    def aflcnvg(self):
        return _openstudioairflow.RunControl_aflcnvg(self)

    def setAflcnvg(self, *args):
        return _openstudioairflow.RunControl_setAflcnvg(self, *args)

    def aflinit(self):
        return _openstudioairflow.RunControl_aflinit(self)

    def setAflinit(self, aflinit):
        return _openstudioairflow.RunControl_setAflinit(self, aflinit)

    def Tadj(self):
        return _openstudioairflow.RunControl_Tadj(self)

    def setTadj(self, Tadj):
        return _openstudioairflow.RunControl_setTadj(self, Tadj)

    def sim_mf(self):
        return _openstudioairflow.RunControl_sim_mf(self)

    def setSim_mf(self, sim_mf):
        return _openstudioairflow.RunControl_setSim_mf(self, sim_mf)

    def ccmaxi(self):
        return _openstudioairflow.RunControl_ccmaxi(self)

    def setCcmaxi(self, ccmaxi):
        return _openstudioairflow.RunControl_setCcmaxi(self, ccmaxi)

    def ccrcnvg(self):
        return _openstudioairflow.RunControl_ccrcnvg(self)

    def setCcrcnvg(self, *args):
        return _openstudioairflow.RunControl_setCcrcnvg(self, *args)

    def ccacnvg(self):
        return _openstudioairflow.RunControl_ccacnvg(self)

    def setCcacnvg(self, *args):
        return _openstudioairflow.RunControl_setCcacnvg(self, *args)

    def ccrelax(self):
        return _openstudioairflow.RunControl_ccrelax(self)

    def setCcrelax(self, *args):
        return _openstudioairflow.RunControl_setCcrelax(self, *args)

    def uccc(self):
        return _openstudioairflow.RunControl_uccc(self)

    def setUccc(self, uccc):
        return _openstudioairflow.RunControl_setUccc(self, uccc)

    def mfnmthd(self):
        return _openstudioairflow.RunControl_mfnmthd(self)

    def setMfnmthd(self, mfnmthd):
        return _openstudioairflow.RunControl_setMfnmthd(self, mfnmthd)

    def mfnrseq(self):
        return _openstudioairflow.RunControl_mfnrseq(self)

    def setMfnrseq(self, mfnrseq):
        return _openstudioairflow.RunControl_setMfnrseq(self, mfnrseq)

    def mfnmaxi(self):
        return _openstudioairflow.RunControl_mfnmaxi(self)

    def setMfnmaxi(self, mfnmaxi):
        return _openstudioairflow.RunControl_setMfnmaxi(self, mfnmaxi)

    def mfnrcnvg(self):
        return _openstudioairflow.RunControl_mfnrcnvg(self)

    def setMfnrcnvg(self, *args):
        return _openstudioairflow.RunControl_setMfnrcnvg(self, *args)

    def mfnacnvg(self):
        return _openstudioairflow.RunControl_mfnacnvg(self)

    def setMfnacnvg(self, *args):
        return _openstudioairflow.RunControl_setMfnacnvg(self, *args)

    def mfnrelax(self):
        return _openstudioairflow.RunControl_mfnrelax(self)

    def setMfnrelax(self, *args):
        return _openstudioairflow.RunControl_setMfnrelax(self, *args)

    def mfngamma(self):
        return _openstudioairflow.RunControl_mfngamma(self)

    def setMfngamma(self, *args):
        return _openstudioairflow.RunControl_setMfngamma(self, *args)

    def uccn(self):
        return _openstudioairflow.RunControl_uccn(self)

    def setUccn(self, uccn):
        return _openstudioairflow.RunControl_setUccn(self, uccn)

    def mftmthd(self):
        return _openstudioairflow.RunControl_mftmthd(self)

    def setMftmthd(self, mftmthd):
        return _openstudioairflow.RunControl_setMftmthd(self, mftmthd)

    def mftrseq(self):
        return _openstudioairflow.RunControl_mftrseq(self)

    def setMftrseq(self, mftrseq):
        return _openstudioairflow.RunControl_setMftrseq(self, mftrseq)

    def mftmaxi(self):
        return _openstudioairflow.RunControl_mftmaxi(self)

    def setMftmaxi(self, mftmaxi):
        return _openstudioairflow.RunControl_setMftmaxi(self, mftmaxi)

    def mftrcnvg(self):
        return _openstudioairflow.RunControl_mftrcnvg(self)

    def setMftrcnvg(self, *args):
        return _openstudioairflow.RunControl_setMftrcnvg(self, *args)

    def mftacnvg(self):
        return _openstudioairflow.RunControl_mftacnvg(self)

    def setMftacnvg(self, *args):
        return _openstudioairflow.RunControl_setMftacnvg(self, *args)

    def mftrelax(self):
        return _openstudioairflow.RunControl_mftrelax(self)

    def setMftrelax(self, *args):
        return _openstudioairflow.RunControl_setMftrelax(self, *args)

    def mftgamma(self):
        return _openstudioairflow.RunControl_mftgamma(self)

    def setMftgamma(self, *args):
        return _openstudioairflow.RunControl_setMftgamma(self, *args)

    def ucct(self):
        return _openstudioairflow.RunControl_ucct(self)

    def setUcct(self, ucct):
        return _openstudioairflow.RunControl_setUcct(self, ucct)

    def mfvmthd(self):
        return _openstudioairflow.RunControl_mfvmthd(self)

    def setMfvmthd(self, mfvmthd):
        return _openstudioairflow.RunControl_setMfvmthd(self, mfvmthd)

    def mfvrseq(self):
        return _openstudioairflow.RunControl_mfvrseq(self)

    def setMfvrseq(self, mfvrseq):
        return _openstudioairflow.RunControl_setMfvrseq(self, mfvrseq)

    def mfvmaxi(self):
        return _openstudioairflow.RunControl_mfvmaxi(self)

    def setMfvmaxi(self, mfvmaxi):
        return _openstudioairflow.RunControl_setMfvmaxi(self, mfvmaxi)

    def mfvrcnvg(self):
        return _openstudioairflow.RunControl_mfvrcnvg(self)

    def setMfvrcnvg(self, *args):
        return _openstudioairflow.RunControl_setMfvrcnvg(self, *args)

    def mfvacnvg(self):
        return _openstudioairflow.RunControl_mfvacnvg(self)

    def setMfvacnvg(self, *args):
        return _openstudioairflow.RunControl_setMfvacnvg(self, *args)

    def mfvrelax(self):
        return _openstudioairflow.RunControl_mfvrelax(self)

    def setMfvrelax(self, *args):
        return _openstudioairflow.RunControl_setMfvrelax(self, *args)

    def uccv(self):
        return _openstudioairflow.RunControl_uccv(self)

    def setUccv(self, uccv):
        return _openstudioairflow.RunControl_setUccv(self, uccv)

    def mf_solver(self):
        return _openstudioairflow.RunControl_mf_solver(self)

    def setMf_solver(self, mf_solver):
        return _openstudioairflow.RunControl_setMf_solver(self, mf_solver)

    def sim_1dz(self):
        return _openstudioairflow.RunControl_sim_1dz(self)

    def setSim_1dz(self, sim_1dz):
        return _openstudioairflow.RunControl_setSim_1dz(self, sim_1dz)

    def sim_1dd(self):
        return _openstudioairflow.RunControl_sim_1dd(self)

    def setSim_1dd(self, sim_1dd):
        return _openstudioairflow.RunControl_setSim_1dd(self, sim_1dd)

    def celldx(self):
        return _openstudioairflow.RunControl_celldx(self)

    def setCelldx(self, *args):
        return _openstudioairflow.RunControl_setCelldx(self, *args)

    def sim_vjt(self):
        return _openstudioairflow.RunControl_sim_vjt(self)

    def setSim_vjt(self, sim_vjt):
        return _openstudioairflow.RunControl_setSim_vjt(self, sim_vjt)

    def udx(self):
        return _openstudioairflow.RunControl_udx(self)

    def setUdx(self, udx):
        return _openstudioairflow.RunControl_setUdx(self, udx)

    def cvode_mth(self):
        return _openstudioairflow.RunControl_cvode_mth(self)

    def setCvode_mth(self, cvode_mth):
        return _openstudioairflow.RunControl_setCvode_mth(self, cvode_mth)

    def cvode_rcnvg(self):
        return _openstudioairflow.RunControl_cvode_rcnvg(self)

    def setCvode_rcnvg(self, *args):
        return _openstudioairflow.RunControl_setCvode_rcnvg(self, *args)

    def cvode_acnvg(self):
        return _openstudioairflow.RunControl_cvode_acnvg(self)

    def setCvode_acnvg(self, *args):
        return _openstudioairflow.RunControl_setCvode_acnvg(self, *args)

    def cvode_dtmax(self):
        return _openstudioairflow.RunControl_cvode_dtmax(self)

    def setCvode_dtmax(self, *args):
        return _openstudioairflow.RunControl_setCvode_dtmax(self, *args)

    def tsdens(self):
        return _openstudioairflow.RunControl_tsdens(self)

    def setTsdens(self, tsdens):
        return _openstudioairflow.RunControl_setTsdens(self, tsdens)

    def tsrelax(self):
        return _openstudioairflow.RunControl_tsrelax(self)

    def setTsrelax(self, *args):
        return _openstudioairflow.RunControl_setTsrelax(self, *args)

    def tsmaxi(self):
        return _openstudioairflow.RunControl_tsmaxi(self)

    def setTsmaxi(self, tsmaxi):
        return _openstudioairflow.RunControl_setTsmaxi(self, tsmaxi)

    def cnvgSS(self):
        return _openstudioairflow.RunControl_cnvgSS(self)

    def setCnvgSS(self, cnvgSS):
        return _openstudioairflow.RunControl_setCnvgSS(self, cnvgSS)

    def densZP(self):
        return _openstudioairflow.RunControl_densZP(self)

    def setDensZP(self, densZP):
        return _openstudioairflow.RunControl_setDensZP(self, densZP)

    def stackD(self):
        return _openstudioairflow.RunControl_stackD(self)

    def setStackD(self, stackD):
        return _openstudioairflow.RunControl_setStackD(self, stackD)

    def dodMdt(self):
        return _openstudioairflow.RunControl_dodMdt(self)

    def setDodMdt(self, dodMdt):
        return _openstudioairflow.RunControl_setDodMdt(self, dodMdt)

    def date_st(self):
        return _openstudioairflow.RunControl_date_st(self)

    def setDate_st(self, date_st):
        return _openstudioairflow.RunControl_setDate_st(self, date_st)

    def time_st(self):
        return _openstudioairflow.RunControl_time_st(self)

    def setTime_st(self, time_st):
        return _openstudioairflow.RunControl_setTime_st(self, time_st)

    def date_0(self):
        return _openstudioairflow.RunControl_date_0(self)

    def setDate_0(self, date_0):
        return _openstudioairflow.RunControl_setDate_0(self, date_0)

    def time_0(self):
        return _openstudioairflow.RunControl_time_0(self)

    def setTime_0(self, time_0):
        return _openstudioairflow.RunControl_setTime_0(self, time_0)

    def date_1(self):
        return _openstudioairflow.RunControl_date_1(self)

    def setDate_1(self, date_1):
        return _openstudioairflow.RunControl_setDate_1(self, date_1)

    def time_1(self):
        return _openstudioairflow.RunControl_time_1(self)

    def setTime_1(self, time_1):
        return _openstudioairflow.RunControl_setTime_1(self, time_1)

    def time_step(self):
        return _openstudioairflow.RunControl_time_step(self)

    def setTime_step(self, time_step):
        return _openstudioairflow.RunControl_setTime_step(self, time_step)

    def time_list(self):
        return _openstudioairflow.RunControl_time_list(self)

    def setTime_list(self, time_list):
        return _openstudioairflow.RunControl_setTime_list(self, time_list)

    def time_scrn(self):
        return _openstudioairflow.RunControl_time_scrn(self)

    def setTime_scrn(self, time_scrn):
        return _openstudioairflow.RunControl_setTime_scrn(self, time_scrn)

    def restart(self):
        return _openstudioairflow.RunControl_restart(self)

    def setRestart(self, restart):
        return _openstudioairflow.RunControl_setRestart(self, restart)

    def rstdate(self):
        return _openstudioairflow.RunControl_rstdate(self)

    def setRstdate(self, rstdate):
        return _openstudioairflow.RunControl_setRstdate(self, rstdate)

    def rsttime(self):
        return _openstudioairflow.RunControl_rsttime(self)

    def setRsttime(self, rsttime):
        return _openstudioairflow.RunControl_setRsttime(self, rsttime)

    def list(self):
        return _openstudioairflow.RunControl_list(self)

    def setList(self, list):
        return _openstudioairflow.RunControl_setList(self, list)

    def doDlg(self):
        return _openstudioairflow.RunControl_doDlg(self)

    def setDoDlg(self, doDlg):
        return _openstudioairflow.RunControl_setDoDlg(self, doDlg)

    def pfsave(self):
        return _openstudioairflow.RunControl_pfsave(self)

    def setPfsave(self, pfsave):
        return _openstudioairflow.RunControl_setPfsave(self, pfsave)

    def zfsave(self):
        return _openstudioairflow.RunControl_zfsave(self)

    def setZfsave(self, zfsave):
        return _openstudioairflow.RunControl_setZfsave(self, zfsave)

    def zcsave(self):
        return _openstudioairflow.RunControl_zcsave(self)

    def setZcsave(self, zcsave):
        return _openstudioairflow.RunControl_setZcsave(self, zcsave)

    def achvol(self):
        return _openstudioairflow.RunControl_achvol(self)

    def setAchvol(self, achvol):
        return _openstudioairflow.RunControl_setAchvol(self, achvol)

    def achsave(self):
        return _openstudioairflow.RunControl_achsave(self)

    def setAchsave(self, achsave):
        return _openstudioairflow.RunControl_setAchsave(self, achsave)

    def abwsave(self):
        return _openstudioairflow.RunControl_abwsave(self)

    def setAbwsave(self, abwsave):
        return _openstudioairflow.RunControl_setAbwsave(self, abwsave)

    def cbwsave(self):
        return _openstudioairflow.RunControl_cbwsave(self)

    def setCbwsave(self, cbwsave):
        return _openstudioairflow.RunControl_setCbwsave(self, cbwsave)

    def expsave(self):
        return _openstudioairflow.RunControl_expsave(self)

    def setExpsave(self, expsave):
        return _openstudioairflow.RunControl_setExpsave(self, expsave)

    def ebwsave(self):
        return _openstudioairflow.RunControl_ebwsave(self)

    def setEbwsave(self, ebwsave):
        return _openstudioairflow.RunControl_setEbwsave(self, ebwsave)

    def zaasave(self):
        return _openstudioairflow.RunControl_zaasave(self)

    def setZaasave(self, zaasave):
        return _openstudioairflow.RunControl_setZaasave(self, zaasave)

    def zbwsave(self):
        return _openstudioairflow.RunControl_zbwsave(self)

    def setZbwsave(self, zbwsave):
        return _openstudioairflow.RunControl_setZbwsave(self, zbwsave)

    def rzfsave(self):
        return _openstudioairflow.RunControl_rzfsave(self)

    def setRzfsave(self, rzfsave):
        return _openstudioairflow.RunControl_setRzfsave(self, rzfsave)

    def rzmsave(self):
        return _openstudioairflow.RunControl_rzmsave(self)

    def setRzmsave(self, rzmsave):
        return _openstudioairflow.RunControl_setRzmsave(self, rzmsave)

    def rz1save(self):
        return _openstudioairflow.RunControl_rz1save(self)

    def setRz1save(self, rz1save):
        return _openstudioairflow.RunControl_setRz1save(self, rz1save)

    def csmsave(self):
        return _openstudioairflow.RunControl_csmsave(self)

    def setCsmsave(self, csmsave):
        return _openstudioairflow.RunControl_setCsmsave(self, csmsave)

    def srfsave(self):
        return _openstudioairflow.RunControl_srfsave(self)

    def setSrfsave(self, srfsave):
        return _openstudioairflow.RunControl_setSrfsave(self, srfsave)

    def logsave(self):
        return _openstudioairflow.RunControl_logsave(self)

    def setLogsave(self, logsave):
        return _openstudioairflow.RunControl_setLogsave(self, logsave)

    def save(self):
        return _openstudioairflow.RunControl_save(self)

    def setSave(self, save):
        return _openstudioairflow.RunControl_setSave(self, save)

    def rvals(self):
        return _openstudioairflow.RunControl_rvals(self)

    def setRvals(self, *args):
        return _openstudioairflow.RunControl_setRvals(self, *args)

    def BldgFlowZ(self):
        return _openstudioairflow.RunControl_BldgFlowZ(self)

    def setBldgFlowZ(self, BldgFlowZ):
        return _openstudioairflow.RunControl_setBldgFlowZ(self, BldgFlowZ)

    def BldgFlowD(self):
        return _openstudioairflow.RunControl_BldgFlowD(self)

    def setBldgFlowD(self, BldgFlowD):
        return _openstudioairflow.RunControl_setBldgFlowD(self, BldgFlowD)

    def BldgFlowC(self):
        return _openstudioairflow.RunControl_BldgFlowC(self)

    def setBldgFlowC(self, BldgFlowC):
        return _openstudioairflow.RunControl_setBldgFlowC(self, BldgFlowC)

    def cfd_ctype(self):
        return _openstudioairflow.RunControl_cfd_ctype(self)

    def setCfd_ctype(self, cfd_ctype):
        return _openstudioairflow.RunControl_setCfd_ctype(self, cfd_ctype)

    def cfd_convcpl(self):
        return _openstudioairflow.RunControl_cfd_convcpl(self)

    def setCfd_convcpl(self, *args):
        return _openstudioairflow.RunControl_setCfd_convcpl(self, *args)

    def cfd_var(self):
        return _openstudioairflow.RunControl_cfd_var(self)

    def setCfd_var(self, cfd_var):
        return _openstudioairflow.RunControl_setCfd_var(self, cfd_var)

    def cfd_zref(self):
        return _openstudioairflow.RunControl_cfd_zref(self)

    def setCfd_zref(self, cfd_zref):
        return _openstudioairflow.RunControl_setCfd_zref(self, cfd_zref)

    def cfd_imax(self):
        return _openstudioairflow.RunControl_cfd_imax(self)

    def setCfd_imax(self, cfd_imax):
        return _openstudioairflow.RunControl_setCfd_imax(self, cfd_imax)

    def cfd_dtcmo(self):
        return _openstudioairflow.RunControl_cfd_dtcmo(self)

    def setCfd_dtcmo(self, cfd_dtcmo):
        return _openstudioairflow.RunControl_setCfd_dtcmo(self, cfd_dtcmo)

# Register RunControl in _openstudioairflow:
_openstudioairflow.RunControl_swigregister(RunControl)
class Level(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.Level_swiginit(self, _openstudioairflow.new_Level(*args))
    __swig_destroy__ = _openstudioairflow.delete_Level

    def __eq__(self, other):
        return _openstudioairflow.Level___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.Level___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.Level_read(self, input)

    def write(self):
        return _openstudioairflow.Level_write(self)

    def nr(self):
        return _openstudioairflow.Level_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.Level_setNr(self, nr)

    def refht(self):
        return _openstudioairflow.Level_refht(self)

    def setRefht(self, *args):
        return _openstudioairflow.Level_setRefht(self, *args)

    def delht(self):
        return _openstudioairflow.Level_delht(self)

    def setDelht(self, *args):
        return _openstudioairflow.Level_setDelht(self, *args)

    def u_rfht(self):
        return _openstudioairflow.Level_u_rfht(self)

    def setU_rfht(self, u_rfht):
        return _openstudioairflow.Level_setU_rfht(self, u_rfht)

    def u_dlht(self):
        return _openstudioairflow.Level_u_dlht(self)

    def setU_dlht(self, u_dlht):
        return _openstudioairflow.Level_setU_dlht(self, u_dlht)

    def name(self):
        return _openstudioairflow.Level_name(self)

    def setName(self, name):
        return _openstudioairflow.Level_setName(self, name)

    def icons(self):
        return _openstudioairflow.Level_icons(self)

    def setIcons(self, icons):
        return _openstudioairflow.Level_setIcons(self, icons)

# Register Level in _openstudioairflow:
_openstudioairflow.Level_swigregister(Level)
class DaySchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.DaySchedule_swiginit(self, _openstudioairflow.new_DaySchedule(*args))
    __swig_destroy__ = _openstudioairflow.delete_DaySchedule

    def __eq__(self, other):
        return _openstudioairflow.DaySchedule___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.DaySchedule___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.DaySchedule_read(self, input)

    def write(self):
        return _openstudioairflow.DaySchedule_write(self)

    def nr(self):
        return _openstudioairflow.DaySchedule_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.DaySchedule_setNr(self, nr)

    def shape(self):
        return _openstudioairflow.DaySchedule_shape(self)

    def setShape(self, shape):
        return _openstudioairflow.DaySchedule_setShape(self, shape)

    def utyp(self):
        return _openstudioairflow.DaySchedule_utyp(self)

    def setUtyp(self, utyp):
        return _openstudioairflow.DaySchedule_setUtyp(self, utyp)

    def ucnv(self):
        return _openstudioairflow.DaySchedule_ucnv(self)

    def setUcnv(self, ucnv):
        return _openstudioairflow.DaySchedule_setUcnv(self, ucnv)

    def name(self):
        return _openstudioairflow.DaySchedule_name(self)

    def setName(self, name):
        return _openstudioairflow.DaySchedule_setName(self, name)

    def desc(self):
        return _openstudioairflow.DaySchedule_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.DaySchedule_setDesc(self, desc)

    def points(self):
        return _openstudioairflow.DaySchedule_points(self)

    def setPoints(self, points):
        return _openstudioairflow.DaySchedule_setPoints(self, points)

# Register DaySchedule in _openstudioairflow:
_openstudioairflow.DaySchedule_swigregister(DaySchedule)
class WeekSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.WeekSchedule_swiginit(self, _openstudioairflow.new_WeekSchedule(*args))
    __swig_destroy__ = _openstudioairflow.delete_WeekSchedule

    def __eq__(self, other):
        return _openstudioairflow.WeekSchedule___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.WeekSchedule___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.WeekSchedule_read(self, input)

    def write(self):
        return _openstudioairflow.WeekSchedule_write(self)

    def nr(self):
        return _openstudioairflow.WeekSchedule_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.WeekSchedule_setNr(self, nr)

    def utyp(self):
        return _openstudioairflow.WeekSchedule_utyp(self)

    def setUtyp(self, utyp):
        return _openstudioairflow.WeekSchedule_setUtyp(self, utyp)

    def ucnv(self):
        return _openstudioairflow.WeekSchedule_ucnv(self)

    def setUcnv(self, ucnv):
        return _openstudioairflow.WeekSchedule_setUcnv(self, ucnv)

    def name(self):
        return _openstudioairflow.WeekSchedule_name(self)

    def setName(self, name):
        return _openstudioairflow.WeekSchedule_setName(self, name)

    def desc(self):
        return _openstudioairflow.WeekSchedule_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.WeekSchedule_setDesc(self, desc)

    def j(self):
        return _openstudioairflow.WeekSchedule_j(self)

    def setJ(self, j):
        return _openstudioairflow.WeekSchedule_setJ(self, j)

# Register WeekSchedule in _openstudioairflow:
_openstudioairflow.WeekSchedule_swigregister(WeekSchedule)
class WindPressureProfile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.WindPressureProfile_swiginit(self, _openstudioairflow.new_WindPressureProfile(*args))
    __swig_destroy__ = _openstudioairflow.delete_WindPressureProfile

    def __eq__(self, other):
        return _openstudioairflow.WindPressureProfile___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.WindPressureProfile___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.WindPressureProfile_read(self, input)

    def write(self):
        return _openstudioairflow.WindPressureProfile_write(self)

    def nr(self):
        return _openstudioairflow.WindPressureProfile_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.WindPressureProfile_setNr(self, nr)

    def type(self):
        return _openstudioairflow.WindPressureProfile_type(self)

    def setType(self, type):
        return _openstudioairflow.WindPressureProfile_setType(self, type)

    def name(self):
        return _openstudioairflow.WindPressureProfile_name(self)

    def setName(self, name):
        return _openstudioairflow.WindPressureProfile_setName(self, name)

    def desc(self):
        return _openstudioairflow.WindPressureProfile_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.WindPressureProfile_setDesc(self, desc)

    def coeffs(self):
        return _openstudioairflow.WindPressureProfile_coeffs(self)

    def setCoeffs(self, coeffs):
        return _openstudioairflow.WindPressureProfile_setCoeffs(self, coeffs)

# Register WindPressureProfile in _openstudioairflow:
_openstudioairflow.WindPressureProfile_swigregister(WindPressureProfile)
class ControlNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioairflow.delete_ControlNode

    def write(self):
        return _openstudioairflow.ControlNode_write(self)

    @staticmethod
    def convertTag(tag):
        return _openstudioairflow.ControlNode_convertTag(tag)

    @staticmethod
    def readElement(input):
        return _openstudioairflow.ControlNode_readElement(input)

    def nr(self):
        return _openstudioairflow.ControlNode_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.ControlNode_setNr(self, nr)

    def dataType(self):
        return _openstudioairflow.ControlNode_dataType(self)

    def seqnr(self):
        return _openstudioairflow.ControlNode_seqnr(self)

    def setSeqnr(self, seqnr):
        return _openstudioairflow.ControlNode_setSeqnr(self, seqnr)

    def flags(self):
        return _openstudioairflow.ControlNode_flags(self)

    def setFlags(self, flags):
        return _openstudioairflow.ControlNode_setFlags(self, flags)

    def inreq(self):
        return _openstudioairflow.ControlNode_inreq(self)

    def setInreq(self, inreq):
        return _openstudioairflow.ControlNode_setInreq(self, inreq)

    def n1(self):
        return _openstudioairflow.ControlNode_n1(self)

    def setN1(self, n1):
        return _openstudioairflow.ControlNode_setN1(self, n1)

    def n2(self):
        return _openstudioairflow.ControlNode_n2(self)

    def setN2(self, n2):
        return _openstudioairflow.ControlNode_setN2(self, n2)

    def name(self):
        return _openstudioairflow.ControlNode_name(self)

    def setName(self, name):
        return _openstudioairflow.ControlNode_setName(self, name)

    def desc(self):
        return _openstudioairflow.ControlNode_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.ControlNode_setDesc(self, desc)

# Register ControlNode in _openstudioairflow:
_openstudioairflow.ControlNode_swigregister(ControlNode)
class CdvDat(ControlNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioairflow.delete_CdvDat

    def __eq__(self, other):
        return _openstudioairflow.CdvDat___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.CdvDat___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.CdvDat_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.CdvDat_readDetails(self, input)

    def write(self):
        return _openstudioairflow.CdvDat_write(self)

    def nr(self):
        return _openstudioairflow.CdvDat_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.CdvDat_setNr(self, nr)

    def dataType(self):
        return _openstudioairflow.CdvDat_dataType(self)

    def seqnr(self):
        return _openstudioairflow.CdvDat_seqnr(self)

    def setSeqnr(self, seqnr):
        return _openstudioairflow.CdvDat_setSeqnr(self, seqnr)

    def flags(self):
        return _openstudioairflow.CdvDat_flags(self)

    def setFlags(self, flags):
        return _openstudioairflow.CdvDat_setFlags(self, flags)

    def inreq(self):
        return _openstudioairflow.CdvDat_inreq(self)

    def setInreq(self, inreq):
        return _openstudioairflow.CdvDat_setInreq(self, inreq)

    def n1(self):
        return _openstudioairflow.CdvDat_n1(self)

    def setN1(self, n1):
        return _openstudioairflow.CdvDat_setN1(self, n1)

    def n2(self):
        return _openstudioairflow.CdvDat_n2(self)

    def setN2(self, n2):
        return _openstudioairflow.CdvDat_setN2(self, n2)

    def name(self):
        return _openstudioairflow.CdvDat_name(self)

    def setName(self, name):
        return _openstudioairflow.CdvDat_setName(self, name)

    def desc(self):
        return _openstudioairflow.CdvDat_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.CdvDat_setDesc(self, desc)

    def valuename(self):
        return _openstudioairflow.CdvDat_valuename(self)

    def setValuename(self, valuename):
        return _openstudioairflow.CdvDat_setValuename(self, valuename)

# Register CdvDat in _openstudioairflow:
_openstudioairflow.CdvDat_swigregister(CdvDat)
class CvfDat(CdvDat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.CvfDat_swiginit(self, _openstudioairflow.new_CvfDat(*args))

    def dataType(self):
        return _openstudioairflow.CvfDat_dataType(self)
    __swig_destroy__ = _openstudioairflow.delete_CvfDat

# Register CvfDat in _openstudioairflow:
_openstudioairflow.CvfDat_swigregister(CvfDat)
class DvfDat(CdvDat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.DvfDat_swiginit(self, _openstudioairflow.new_DvfDat(*args))

    def dataType(self):
        return _openstudioairflow.DvfDat_dataType(self)
    __swig_destroy__ = _openstudioairflow.delete_DvfDat

# Register DvfDat in _openstudioairflow:
_openstudioairflow.DvfDat_swigregister(DvfDat)
class AirflowElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioairflow.delete_AirflowElement

    def write(self):
        return _openstudioairflow.AirflowElement_write(self)

    @staticmethod
    def convertTag(tag):
        return _openstudioairflow.AirflowElement_convertTag(tag)

    @staticmethod
    def readElement(input):
        return _openstudioairflow.AirflowElement_readElement(input)

    def nr(self):
        return _openstudioairflow.AirflowElement_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.AirflowElement_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.AirflowElement_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.AirflowElement_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.AirflowElement_dataType(self)

    def name(self):
        return _openstudioairflow.AirflowElement_name(self)

    def setName(self, name):
        return _openstudioairflow.AirflowElement_setName(self, name)

    def desc(self):
        return _openstudioairflow.AirflowElement_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.AirflowElement_setDesc(self, desc)

# Register AirflowElement in _openstudioairflow:
_openstudioairflow.AirflowElement_swigregister(AirflowElement)
class PlrOrf(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PlrOrf_swiginit(self, _openstudioairflow.new_PlrOrf(*args))
    __swig_destroy__ = _openstudioairflow.delete_PlrOrf

    def __eq__(self, other):
        return _openstudioairflow.PlrOrf___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.PlrOrf___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.PlrOrf_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.PlrOrf_readDetails(self, input)

    def write(self):
        return _openstudioairflow.PlrOrf_write(self)

    def nr(self):
        return _openstudioairflow.PlrOrf_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.PlrOrf_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.PlrOrf_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.PlrOrf_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.PlrOrf_dataType(self)

    def name(self):
        return _openstudioairflow.PlrOrf_name(self)

    def setName(self, name):
        return _openstudioairflow.PlrOrf_setName(self, name)

    def desc(self):
        return _openstudioairflow.PlrOrf_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.PlrOrf_setDesc(self, desc)

    def lam(self):
        return _openstudioairflow.PlrOrf_lam(self)

    def setLam(self, *args):
        return _openstudioairflow.PlrOrf_setLam(self, *args)

    def turb(self):
        return _openstudioairflow.PlrOrf_turb(self)

    def setTurb(self, *args):
        return _openstudioairflow.PlrOrf_setTurb(self, *args)

    def expt(self):
        return _openstudioairflow.PlrOrf_expt(self)

    def setExpt(self, *args):
        return _openstudioairflow.PlrOrf_setExpt(self, *args)

    def area(self):
        return _openstudioairflow.PlrOrf_area(self)

    def setArea(self, *args):
        return _openstudioairflow.PlrOrf_setArea(self, *args)

    def dia(self):
        return _openstudioairflow.PlrOrf_dia(self)

    def setDia(self, *args):
        return _openstudioairflow.PlrOrf_setDia(self, *args)

    def coef(self):
        return _openstudioairflow.PlrOrf_coef(self)

    def setCoef(self, *args):
        return _openstudioairflow.PlrOrf_setCoef(self, *args)

    def Re(self):
        return _openstudioairflow.PlrOrf_Re(self)

    def setRe(self, *args):
        return _openstudioairflow.PlrOrf_setRe(self, *args)

    def u_A(self):
        return _openstudioairflow.PlrOrf_u_A(self)

    def setU_A(self, u_A):
        return _openstudioairflow.PlrOrf_setU_A(self, u_A)

    def u_D(self):
        return _openstudioairflow.PlrOrf_u_D(self)

    def setU_D(self, u_D):
        return _openstudioairflow.PlrOrf_setU_D(self, u_D)

# Register PlrOrf in _openstudioairflow:
_openstudioairflow.PlrOrf_swigregister(PlrOrf)
class PlrLeak(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioairflow.delete_PlrLeak

    def __eq__(self, other):
        return _openstudioairflow.PlrLeak___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.PlrLeak___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.PlrLeak_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.PlrLeak_readDetails(self, input)

    def write(self):
        return _openstudioairflow.PlrLeak_write(self)

    def nr(self):
        return _openstudioairflow.PlrLeak_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.PlrLeak_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.PlrLeak_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.PlrLeak_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.PlrLeak_dataType(self)

    def name(self):
        return _openstudioairflow.PlrLeak_name(self)

    def setName(self, name):
        return _openstudioairflow.PlrLeak_setName(self, name)

    def desc(self):
        return _openstudioairflow.PlrLeak_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.PlrLeak_setDesc(self, desc)

    def lam(self):
        return _openstudioairflow.PlrLeak_lam(self)

    def setLam(self, *args):
        return _openstudioairflow.PlrLeak_setLam(self, *args)

    def turb(self):
        return _openstudioairflow.PlrLeak_turb(self)

    def setTurb(self, *args):
        return _openstudioairflow.PlrLeak_setTurb(self, *args)

    def expt(self):
        return _openstudioairflow.PlrLeak_expt(self)

    def setExpt(self, *args):
        return _openstudioairflow.PlrLeak_setExpt(self, *args)

    def coef(self):
        return _openstudioairflow.PlrLeak_coef(self)

    def setCoef(self, *args):
        return _openstudioairflow.PlrLeak_setCoef(self, *args)

    def pres(self):
        return _openstudioairflow.PlrLeak_pres(self)

    def setPres(self, *args):
        return _openstudioairflow.PlrLeak_setPres(self, *args)

    def area1(self):
        return _openstudioairflow.PlrLeak_area1(self)

    def setArea1(self, *args):
        return _openstudioairflow.PlrLeak_setArea1(self, *args)

    def area2(self):
        return _openstudioairflow.PlrLeak_area2(self)

    def setArea2(self, *args):
        return _openstudioairflow.PlrLeak_setArea2(self, *args)

    def area3(self):
        return _openstudioairflow.PlrLeak_area3(self)

    def setArea3(self, *args):
        return _openstudioairflow.PlrLeak_setArea3(self, *args)

    def u_A1(self):
        return _openstudioairflow.PlrLeak_u_A1(self)

    def setU_A1(self, u_A1):
        return _openstudioairflow.PlrLeak_setU_A1(self, u_A1)

    def u_A2(self):
        return _openstudioairflow.PlrLeak_u_A2(self)

    def setU_A2(self, u_A2):
        return _openstudioairflow.PlrLeak_setU_A2(self, u_A2)

    def u_A3(self):
        return _openstudioairflow.PlrLeak_u_A3(self)

    def setU_A3(self, u_A3):
        return _openstudioairflow.PlrLeak_setU_A3(self, u_A3)

    def u_dP(self):
        return _openstudioairflow.PlrLeak_u_dP(self)

    def setU_dP(self, u_dP):
        return _openstudioairflow.PlrLeak_setU_dP(self, u_dP)

# Register PlrLeak in _openstudioairflow:
_openstudioairflow.PlrLeak_swigregister(PlrLeak)
class PlrLeak1(PlrLeak):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PlrLeak1_swiginit(self, _openstudioairflow.new_PlrLeak1(*args))
    __swig_destroy__ = _openstudioairflow.delete_PlrLeak1

    def dataType(self):
        return _openstudioairflow.PlrLeak1_dataType(self)

# Register PlrLeak1 in _openstudioairflow:
_openstudioairflow.PlrLeak1_swigregister(PlrLeak1)
class PlrLeak2(PlrLeak):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PlrLeak2_swiginit(self, _openstudioairflow.new_PlrLeak2(*args))
    __swig_destroy__ = _openstudioairflow.delete_PlrLeak2

    def dataType(self):
        return _openstudioairflow.PlrLeak2_dataType(self)

# Register PlrLeak2 in _openstudioairflow:
_openstudioairflow.PlrLeak2_swigregister(PlrLeak2)
class PlrLeak3(PlrLeak):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PlrLeak3_swiginit(self, _openstudioairflow.new_PlrLeak3(*args))
    __swig_destroy__ = _openstudioairflow.delete_PlrLeak3

    def dataType(self):
        return _openstudioairflow.PlrLeak3_dataType(self)

# Register PlrLeak3 in _openstudioairflow:
_openstudioairflow.PlrLeak3_swigregister(PlrLeak3)
class PlrConn(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PlrConn_swiginit(self, _openstudioairflow.new_PlrConn(*args))
    __swig_destroy__ = _openstudioairflow.delete_PlrConn

    def __eq__(self, other):
        return _openstudioairflow.PlrConn___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.PlrConn___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.PlrConn_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.PlrConn_readDetails(self, input)

    def write(self):
        return _openstudioairflow.PlrConn_write(self)

    def nr(self):
        return _openstudioairflow.PlrConn_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.PlrConn_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.PlrConn_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.PlrConn_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.PlrConn_dataType(self)

    def name(self):
        return _openstudioairflow.PlrConn_name(self)

    def setName(self, name):
        return _openstudioairflow.PlrConn_setName(self, name)

    def desc(self):
        return _openstudioairflow.PlrConn_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.PlrConn_setDesc(self, desc)

    def lam(self):
        return _openstudioairflow.PlrConn_lam(self)

    def setLam(self, *args):
        return _openstudioairflow.PlrConn_setLam(self, *args)

    def turb(self):
        return _openstudioairflow.PlrConn_turb(self)

    def setTurb(self, *args):
        return _openstudioairflow.PlrConn_setTurb(self, *args)

    def expt(self):
        return _openstudioairflow.PlrConn_expt(self)

    def setExpt(self, *args):
        return _openstudioairflow.PlrConn_setExpt(self, *args)

    def area(self):
        return _openstudioairflow.PlrConn_area(self)

    def setArea(self, *args):
        return _openstudioairflow.PlrConn_setArea(self, *args)

    def coef(self):
        return _openstudioairflow.PlrConn_coef(self)

    def setCoef(self, *args):
        return _openstudioairflow.PlrConn_setCoef(self, *args)

    def u_A(self):
        return _openstudioairflow.PlrConn_u_A(self)

    def setU_A(self, u_A1):
        return _openstudioairflow.PlrConn_setU_A(self, u_A1)

# Register PlrConn in _openstudioairflow:
_openstudioairflow.PlrConn_swigregister(PlrConn)
class PlrGeneral(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioairflow.delete_PlrGeneral

    def __eq__(self, other):
        return _openstudioairflow.PlrGeneral___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.PlrGeneral___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.PlrGeneral_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.PlrGeneral_readDetails(self, input)

    def write(self):
        return _openstudioairflow.PlrGeneral_write(self)

    def nr(self):
        return _openstudioairflow.PlrGeneral_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.PlrGeneral_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.PlrGeneral_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.PlrGeneral_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.PlrGeneral_dataType(self)

    def name(self):
        return _openstudioairflow.PlrGeneral_name(self)

    def setName(self, name):
        return _openstudioairflow.PlrGeneral_setName(self, name)

    def desc(self):
        return _openstudioairflow.PlrGeneral_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.PlrGeneral_setDesc(self, desc)

    def lam(self):
        return _openstudioairflow.PlrGeneral_lam(self)

    def setLam(self, *args):
        return _openstudioairflow.PlrGeneral_setLam(self, *args)

    def turb(self):
        return _openstudioairflow.PlrGeneral_turb(self)

    def setTurb(self, *args):
        return _openstudioairflow.PlrGeneral_setTurb(self, *args)

    def expt(self):
        return _openstudioairflow.PlrGeneral_expt(self)

    def setExpt(self, *args):
        return _openstudioairflow.PlrGeneral_setExpt(self, *args)

# Register PlrGeneral in _openstudioairflow:
_openstudioairflow.PlrGeneral_swigregister(PlrGeneral)
class PlrQcn(PlrGeneral):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PlrQcn_swiginit(self, _openstudioairflow.new_PlrQcn(*args))
    __swig_destroy__ = _openstudioairflow.delete_PlrQcn

    def dataType(self):
        return _openstudioairflow.PlrQcn_dataType(self)

# Register PlrQcn in _openstudioairflow:
_openstudioairflow.PlrQcn_swigregister(PlrQcn)
class PlrFcn(PlrGeneral):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PlrFcn_swiginit(self, _openstudioairflow.new_PlrFcn(*args))
    __swig_destroy__ = _openstudioairflow.delete_PlrFcn

    def dataType(self):
        return _openstudioairflow.PlrFcn_dataType(self)

# Register PlrFcn in _openstudioairflow:
_openstudioairflow.PlrFcn_swigregister(PlrFcn)
class PlrTest1(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PlrTest1_swiginit(self, _openstudioairflow.new_PlrTest1(*args))
    __swig_destroy__ = _openstudioairflow.delete_PlrTest1

    def __eq__(self, other):
        return _openstudioairflow.PlrTest1___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.PlrTest1___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.PlrTest1_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.PlrTest1_readDetails(self, input)

    def write(self):
        return _openstudioairflow.PlrTest1_write(self)

    def nr(self):
        return _openstudioairflow.PlrTest1_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.PlrTest1_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.PlrTest1_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.PlrTest1_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.PlrTest1_dataType(self)

    def name(self):
        return _openstudioairflow.PlrTest1_name(self)

    def setName(self, name):
        return _openstudioairflow.PlrTest1_setName(self, name)

    def desc(self):
        return _openstudioairflow.PlrTest1_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.PlrTest1_setDesc(self, desc)

    def lam(self):
        return _openstudioairflow.PlrTest1_lam(self)

    def setLam(self, *args):
        return _openstudioairflow.PlrTest1_setLam(self, *args)

    def turb(self):
        return _openstudioairflow.PlrTest1_turb(self)

    def setTurb(self, *args):
        return _openstudioairflow.PlrTest1_setTurb(self, *args)

    def expt(self):
        return _openstudioairflow.PlrTest1_expt(self)

    def setExpt(self, *args):
        return _openstudioairflow.PlrTest1_setExpt(self, *args)

    def dP(self):
        return _openstudioairflow.PlrTest1_dP(self)

    def setDP(self, *args):
        return _openstudioairflow.PlrTest1_setDP(self, *args)

    def Flow(self):
        return _openstudioairflow.PlrTest1_Flow(self)

    def setFlow(self, *args):
        return _openstudioairflow.PlrTest1_setFlow(self, *args)

    def u_P(self):
        return _openstudioairflow.PlrTest1_u_P(self)

    def setU_P(self, u_P):
        return _openstudioairflow.PlrTest1_setU_P(self, u_P)

    def u_F(self):
        return _openstudioairflow.PlrTest1_u_F(self)

    def setU_F(self, u_F):
        return _openstudioairflow.PlrTest1_setU_F(self, u_F)

# Register PlrTest1 in _openstudioairflow:
_openstudioairflow.PlrTest1_swigregister(PlrTest1)
class PlrTest2(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PlrTest2_swiginit(self, _openstudioairflow.new_PlrTest2(*args))
    __swig_destroy__ = _openstudioairflow.delete_PlrTest2

    def __eq__(self, other):
        return _openstudioairflow.PlrTest2___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.PlrTest2___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.PlrTest2_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.PlrTest2_readDetails(self, input)

    def write(self):
        return _openstudioairflow.PlrTest2_write(self)

    def nr(self):
        return _openstudioairflow.PlrTest2_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.PlrTest2_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.PlrTest2_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.PlrTest2_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.PlrTest2_dataType(self)

    def name(self):
        return _openstudioairflow.PlrTest2_name(self)

    def setName(self, name):
        return _openstudioairflow.PlrTest2_setName(self, name)

    def desc(self):
        return _openstudioairflow.PlrTest2_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.PlrTest2_setDesc(self, desc)

    def lam(self):
        return _openstudioairflow.PlrTest2_lam(self)

    def setLam(self, *args):
        return _openstudioairflow.PlrTest2_setLam(self, *args)

    def turb(self):
        return _openstudioairflow.PlrTest2_turb(self)

    def setTurb(self, *args):
        return _openstudioairflow.PlrTest2_setTurb(self, *args)

    def expt(self):
        return _openstudioairflow.PlrTest2_expt(self)

    def setExpt(self, *args):
        return _openstudioairflow.PlrTest2_setExpt(self, *args)

    def dP1(self):
        return _openstudioairflow.PlrTest2_dP1(self)

    def setDP1(self, *args):
        return _openstudioairflow.PlrTest2_setDP1(self, *args)

    def F1(self):
        return _openstudioairflow.PlrTest2_F1(self)

    def setF1(self, *args):
        return _openstudioairflow.PlrTest2_setF1(self, *args)

    def dP2(self):
        return _openstudioairflow.PlrTest2_dP2(self)

    def setDP2(self, *args):
        return _openstudioairflow.PlrTest2_setDP2(self, *args)

    def F2(self):
        return _openstudioairflow.PlrTest2_F2(self)

    def setF2(self, *args):
        return _openstudioairflow.PlrTest2_setF2(self, *args)

    def u_P1(self):
        return _openstudioairflow.PlrTest2_u_P1(self)

    def setU_P1(self, u_P):
        return _openstudioairflow.PlrTest2_setU_P1(self, u_P)

    def u_F1(self):
        return _openstudioairflow.PlrTest2_u_F1(self)

    def setU_F1(self, u_F):
        return _openstudioairflow.PlrTest2_setU_F1(self, u_F)

    def u_P2(self):
        return _openstudioairflow.PlrTest2_u_P2(self)

    def setU_P2(self, u_P):
        return _openstudioairflow.PlrTest2_setU_P2(self, u_P)

    def u_F2(self):
        return _openstudioairflow.PlrTest2_u_F2(self)

    def setU_F2(self, u_F):
        return _openstudioairflow.PlrTest2_setU_F2(self, u_F)

# Register PlrTest2 in _openstudioairflow:
_openstudioairflow.PlrTest2_swigregister(PlrTest2)
class PlrCrack(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PlrCrack_swiginit(self, _openstudioairflow.new_PlrCrack(*args))
    __swig_destroy__ = _openstudioairflow.delete_PlrCrack

    def __eq__(self, other):
        return _openstudioairflow.PlrCrack___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.PlrCrack___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.PlrCrack_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.PlrCrack_readDetails(self, input)

    def write(self):
        return _openstudioairflow.PlrCrack_write(self)

    def nr(self):
        return _openstudioairflow.PlrCrack_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.PlrCrack_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.PlrCrack_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.PlrCrack_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.PlrCrack_dataType(self)

    def name(self):
        return _openstudioairflow.PlrCrack_name(self)

    def setName(self, name):
        return _openstudioairflow.PlrCrack_setName(self, name)

    def desc(self):
        return _openstudioairflow.PlrCrack_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.PlrCrack_setDesc(self, desc)

    def lam(self):
        return _openstudioairflow.PlrCrack_lam(self)

    def setLam(self, *args):
        return _openstudioairflow.PlrCrack_setLam(self, *args)

    def turb(self):
        return _openstudioairflow.PlrCrack_turb(self)

    def setTurb(self, *args):
        return _openstudioairflow.PlrCrack_setTurb(self, *args)

    def expt(self):
        return _openstudioairflow.PlrCrack_expt(self)

    def setExpt(self, *args):
        return _openstudioairflow.PlrCrack_setExpt(self, *args)

    def length(self):
        return _openstudioairflow.PlrCrack_length(self)

    def setLength(self, *args):
        return _openstudioairflow.PlrCrack_setLength(self, *args)

    def width(self):
        return _openstudioairflow.PlrCrack_width(self)

    def setWidth(self, *args):
        return _openstudioairflow.PlrCrack_setWidth(self, *args)

    def u_L(self):
        return _openstudioairflow.PlrCrack_u_L(self)

    def setU_L(self, u_L):
        return _openstudioairflow.PlrCrack_setU_L(self, u_L)

    def u_W(self):
        return _openstudioairflow.PlrCrack_u_W(self)

    def setU_W(self, u_W):
        return _openstudioairflow.PlrCrack_setU_W(self, u_W)

# Register PlrCrack in _openstudioairflow:
_openstudioairflow.PlrCrack_swigregister(PlrCrack)
class PlrStair(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PlrStair_swiginit(self, _openstudioairflow.new_PlrStair(*args))
    __swig_destroy__ = _openstudioairflow.delete_PlrStair

    def __eq__(self, other):
        return _openstudioairflow.PlrStair___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.PlrStair___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.PlrStair_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.PlrStair_readDetails(self, input)

    def write(self):
        return _openstudioairflow.PlrStair_write(self)

    def nr(self):
        return _openstudioairflow.PlrStair_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.PlrStair_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.PlrStair_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.PlrStair_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.PlrStair_dataType(self)

    def name(self):
        return _openstudioairflow.PlrStair_name(self)

    def setName(self, name):
        return _openstudioairflow.PlrStair_setName(self, name)

    def desc(self):
        return _openstudioairflow.PlrStair_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.PlrStair_setDesc(self, desc)

    def lam(self):
        return _openstudioairflow.PlrStair_lam(self)

    def setLam(self, *args):
        return _openstudioairflow.PlrStair_setLam(self, *args)

    def turb(self):
        return _openstudioairflow.PlrStair_turb(self)

    def setTurb(self, *args):
        return _openstudioairflow.PlrStair_setTurb(self, *args)

    def expt(self):
        return _openstudioairflow.PlrStair_expt(self)

    def setExpt(self, *args):
        return _openstudioairflow.PlrStair_setExpt(self, *args)

    def Ht(self):
        return _openstudioairflow.PlrStair_Ht(self)

    def setHt(self, *args):
        return _openstudioairflow.PlrStair_setHt(self, *args)

    def area(self):
        return _openstudioairflow.PlrStair_area(self)

    def setArea(self, *args):
        return _openstudioairflow.PlrStair_setArea(self, *args)

    def people(self):
        return _openstudioairflow.PlrStair_people(self)

    def setPeople(self, *args):
        return _openstudioairflow.PlrStair_setPeople(self, *args)

    def tread(self):
        return _openstudioairflow.PlrStair_tread(self)

    def setTread(self, tread):
        return _openstudioairflow.PlrStair_setTread(self, tread)

    def u_A(self):
        return _openstudioairflow.PlrStair_u_A(self)

    def setU_A(self, u_A):
        return _openstudioairflow.PlrStair_setU_A(self, u_A)

    def u_D(self):
        return _openstudioairflow.PlrStair_u_D(self)

    def setU_D(self, u_D):
        return _openstudioairflow.PlrStair_setU_D(self, u_D)

# Register PlrStair in _openstudioairflow:
_openstudioairflow.PlrStair_swigregister(PlrStair)
class PlrShaft(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PlrShaft_swiginit(self, _openstudioairflow.new_PlrShaft(*args))
    __swig_destroy__ = _openstudioairflow.delete_PlrShaft

    def __eq__(self, other):
        return _openstudioairflow.PlrShaft___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.PlrShaft___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.PlrShaft_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.PlrShaft_readDetails(self, input)

    def write(self):
        return _openstudioairflow.PlrShaft_write(self)

    def nr(self):
        return _openstudioairflow.PlrShaft_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.PlrShaft_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.PlrShaft_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.PlrShaft_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.PlrShaft_dataType(self)

    def name(self):
        return _openstudioairflow.PlrShaft_name(self)

    def setName(self, name):
        return _openstudioairflow.PlrShaft_setName(self, name)

    def desc(self):
        return _openstudioairflow.PlrShaft_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.PlrShaft_setDesc(self, desc)

    def lam(self):
        return _openstudioairflow.PlrShaft_lam(self)

    def setLam(self, *args):
        return _openstudioairflow.PlrShaft_setLam(self, *args)

    def turb(self):
        return _openstudioairflow.PlrShaft_turb(self)

    def setTurb(self, *args):
        return _openstudioairflow.PlrShaft_setTurb(self, *args)

    def expt(self):
        return _openstudioairflow.PlrShaft_expt(self)

    def setExpt(self, *args):
        return _openstudioairflow.PlrShaft_setExpt(self, *args)

    def Ht(self):
        return _openstudioairflow.PlrShaft_Ht(self)

    def setHt(self, *args):
        return _openstudioairflow.PlrShaft_setHt(self, *args)

    def area(self):
        return _openstudioairflow.PlrShaft_area(self)

    def setArea(self, *args):
        return _openstudioairflow.PlrShaft_setArea(self, *args)

    def perim(self):
        return _openstudioairflow.PlrShaft_perim(self)

    def setPerim(self, *args):
        return _openstudioairflow.PlrShaft_setPerim(self, *args)

    def rough(self):
        return _openstudioairflow.PlrShaft_rough(self)

    def setRough(self, *args):
        return _openstudioairflow.PlrShaft_setRough(self, *args)

    def u_A(self):
        return _openstudioairflow.PlrShaft_u_A(self)

    def setU_A(self, u_A):
        return _openstudioairflow.PlrShaft_setU_A(self, u_A)

    def u_D(self):
        return _openstudioairflow.PlrShaft_u_D(self)

    def setU_D(self, u_D):
        return _openstudioairflow.PlrShaft_setU_D(self, u_D)

    def u_P(self):
        return _openstudioairflow.PlrShaft_u_P(self)

    def setU_P(self, u_P):
        return _openstudioairflow.PlrShaft_setU_P(self, u_P)

    def u_R(self):
        return _openstudioairflow.PlrShaft_u_R(self)

    def setU_R(self, u_R):
        return _openstudioairflow.PlrShaft_setU_R(self, u_R)

# Register PlrShaft in _openstudioairflow:
_openstudioairflow.PlrShaft_swigregister(PlrShaft)
class PlrBackDamper(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioairflow.delete_PlrBackDamper

    def __eq__(self, other):
        return _openstudioairflow.PlrBackDamper___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.PlrBackDamper___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.PlrBackDamper_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.PlrBackDamper_readDetails(self, input)

    def write(self):
        return _openstudioairflow.PlrBackDamper_write(self)

    def nr(self):
        return _openstudioairflow.PlrBackDamper_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.PlrBackDamper_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.PlrBackDamper_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.PlrBackDamper_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.PlrBackDamper_dataType(self)

    def name(self):
        return _openstudioairflow.PlrBackDamper_name(self)

    def setName(self, name):
        return _openstudioairflow.PlrBackDamper_setName(self, name)

    def desc(self):
        return _openstudioairflow.PlrBackDamper_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.PlrBackDamper_setDesc(self, desc)

    def lam(self):
        return _openstudioairflow.PlrBackDamper_lam(self)

    def setLam(self, *args):
        return _openstudioairflow.PlrBackDamper_setLam(self, *args)

    def Cp(self):
        return _openstudioairflow.PlrBackDamper_Cp(self)

    def setCp(self, *args):
        return _openstudioairflow.PlrBackDamper_setCp(self, *args)

    def xp(self):
        return _openstudioairflow.PlrBackDamper_xp(self)

    def setXp(self, *args):
        return _openstudioairflow.PlrBackDamper_setXp(self, *args)

    def Cn(self):
        return _openstudioairflow.PlrBackDamper_Cn(self)

    def setCn(self, *args):
        return _openstudioairflow.PlrBackDamper_setCn(self, *args)

    def xn(self):
        return _openstudioairflow.PlrBackDamper_xn(self)

    def setXn(self, *args):
        return _openstudioairflow.PlrBackDamper_setXn(self, *args)

# Register PlrBackDamper in _openstudioairflow:
_openstudioairflow.PlrBackDamper_swigregister(PlrBackDamper)
class PlrBdq(PlrBackDamper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PlrBdq_swiginit(self, _openstudioairflow.new_PlrBdq(*args))
    __swig_destroy__ = _openstudioairflow.delete_PlrBdq

    def dataType(self):
        return _openstudioairflow.PlrBdq_dataType(self)

# Register PlrBdq in _openstudioairflow:
_openstudioairflow.PlrBdq_swigregister(PlrBdq)
class PlrBdf(PlrBackDamper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.PlrBdf_swiginit(self, _openstudioairflow.new_PlrBdf(*args))
    __swig_destroy__ = _openstudioairflow.delete_PlrBdf

    def dataType(self):
        return _openstudioairflow.PlrBdf_dataType(self)

# Register PlrBdf in _openstudioairflow:
_openstudioairflow.PlrBdf_swigregister(PlrBdf)
class QfrGeneral(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioairflow.delete_QfrGeneral

    def __eq__(self, other):
        return _openstudioairflow.QfrGeneral___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.QfrGeneral___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.QfrGeneral_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.QfrGeneral_readDetails(self, input)

    def write(self):
        return _openstudioairflow.QfrGeneral_write(self)

    def nr(self):
        return _openstudioairflow.QfrGeneral_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.QfrGeneral_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.QfrGeneral_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.QfrGeneral_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.QfrGeneral_dataType(self)

    def name(self):
        return _openstudioairflow.QfrGeneral_name(self)

    def setName(self, name):
        return _openstudioairflow.QfrGeneral_setName(self, name)

    def desc(self):
        return _openstudioairflow.QfrGeneral_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.QfrGeneral_setDesc(self, desc)

    def a(self):
        return _openstudioairflow.QfrGeneral_a(self)

    def setA(self, *args):
        return _openstudioairflow.QfrGeneral_setA(self, *args)

    def b(self):
        return _openstudioairflow.QfrGeneral_b(self)

    def setB(self, *args):
        return _openstudioairflow.QfrGeneral_setB(self, *args)

# Register QfrGeneral in _openstudioairflow:
_openstudioairflow.QfrGeneral_swigregister(QfrGeneral)
class QfrQab(QfrGeneral):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.QfrQab_swiginit(self, _openstudioairflow.new_QfrQab(*args))
    __swig_destroy__ = _openstudioairflow.delete_QfrQab

    def dataType(self):
        return _openstudioairflow.QfrQab_dataType(self)

# Register QfrQab in _openstudioairflow:
_openstudioairflow.QfrQab_swigregister(QfrQab)
class QfrFab(QfrGeneral):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.QfrFab_swiginit(self, _openstudioairflow.new_QfrFab(*args))
    __swig_destroy__ = _openstudioairflow.delete_QfrFab

    def dataType(self):
        return _openstudioairflow.QfrFab_dataType(self)

# Register QfrFab in _openstudioairflow:
_openstudioairflow.QfrFab_swigregister(QfrFab)
class QfrCrack(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.QfrCrack_swiginit(self, _openstudioairflow.new_QfrCrack(*args))
    __swig_destroy__ = _openstudioairflow.delete_QfrCrack

    def __eq__(self, other):
        return _openstudioairflow.QfrCrack___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.QfrCrack___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.QfrCrack_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.QfrCrack_readDetails(self, input)

    def write(self):
        return _openstudioairflow.QfrCrack_write(self)

    def nr(self):
        return _openstudioairflow.QfrCrack_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.QfrCrack_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.QfrCrack_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.QfrCrack_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.QfrCrack_dataType(self)

    def name(self):
        return _openstudioairflow.QfrCrack_name(self)

    def setName(self, name):
        return _openstudioairflow.QfrCrack_setName(self, name)

    def desc(self):
        return _openstudioairflow.QfrCrack_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.QfrCrack_setDesc(self, desc)

    def a(self):
        return _openstudioairflow.QfrCrack_a(self)

    def setA(self, *args):
        return _openstudioairflow.QfrCrack_setA(self, *args)

    def b(self):
        return _openstudioairflow.QfrCrack_b(self)

    def setB(self, *args):
        return _openstudioairflow.QfrCrack_setB(self, *args)

    def length(self):
        return _openstudioairflow.QfrCrack_length(self)

    def setLength(self, *args):
        return _openstudioairflow.QfrCrack_setLength(self, *args)

    def width(self):
        return _openstudioairflow.QfrCrack_width(self)

    def setWidth(self, *args):
        return _openstudioairflow.QfrCrack_setWidth(self, *args)

    def depth(self):
        return _openstudioairflow.QfrCrack_depth(self)

    def setDepth(self, *args):
        return _openstudioairflow.QfrCrack_setDepth(self, *args)

    def nB(self):
        return _openstudioairflow.QfrCrack_nB(self)

    def setNB(self, nB):
        return _openstudioairflow.QfrCrack_setNB(self, nB)

    def u_L(self):
        return _openstudioairflow.QfrCrack_u_L(self)

    def setU_L(self, u_L):
        return _openstudioairflow.QfrCrack_setU_L(self, u_L)

    def u_W(self):
        return _openstudioairflow.QfrCrack_u_W(self)

    def setU_W(self, u_W):
        return _openstudioairflow.QfrCrack_setU_W(self, u_W)

    def u_D(self):
        return _openstudioairflow.QfrCrack_u_D(self)

    def setU_D(self, u_D):
        return _openstudioairflow.QfrCrack_setU_D(self, u_D)

# Register QfrCrack in _openstudioairflow:
_openstudioairflow.QfrCrack_swigregister(QfrCrack)
class QfrTest2(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.QfrTest2_swiginit(self, _openstudioairflow.new_QfrTest2(*args))
    __swig_destroy__ = _openstudioairflow.delete_QfrTest2

    def __eq__(self, other):
        return _openstudioairflow.QfrTest2___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.QfrTest2___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.QfrTest2_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.QfrTest2_readDetails(self, input)

    def write(self):
        return _openstudioairflow.QfrTest2_write(self)

    def nr(self):
        return _openstudioairflow.QfrTest2_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.QfrTest2_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.QfrTest2_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.QfrTest2_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.QfrTest2_dataType(self)

    def name(self):
        return _openstudioairflow.QfrTest2_name(self)

    def setName(self, name):
        return _openstudioairflow.QfrTest2_setName(self, name)

    def desc(self):
        return _openstudioairflow.QfrTest2_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.QfrTest2_setDesc(self, desc)

    def a(self):
        return _openstudioairflow.QfrTest2_a(self)

    def setA(self, *args):
        return _openstudioairflow.QfrTest2_setA(self, *args)

    def b(self):
        return _openstudioairflow.QfrTest2_b(self)

    def setB(self, *args):
        return _openstudioairflow.QfrTest2_setB(self, *args)

    def dP1(self):
        return _openstudioairflow.QfrTest2_dP1(self)

    def setDP1(self, *args):
        return _openstudioairflow.QfrTest2_setDP1(self, *args)

    def F1(self):
        return _openstudioairflow.QfrTest2_F1(self)

    def setF1(self, *args):
        return _openstudioairflow.QfrTest2_setF1(self, *args)

    def dP2(self):
        return _openstudioairflow.QfrTest2_dP2(self)

    def setDP2(self, *args):
        return _openstudioairflow.QfrTest2_setDP2(self, *args)

    def F2(self):
        return _openstudioairflow.QfrTest2_F2(self)

    def setF2(self, *args):
        return _openstudioairflow.QfrTest2_setF2(self, *args)

    def u_P1(self):
        return _openstudioairflow.QfrTest2_u_P1(self)

    def setU_P1(self, u_P):
        return _openstudioairflow.QfrTest2_setU_P1(self, u_P)

    def u_F1(self):
        return _openstudioairflow.QfrTest2_u_F1(self)

    def setU_F1(self, u_F):
        return _openstudioairflow.QfrTest2_setU_F1(self, u_F)

    def u_P2(self):
        return _openstudioairflow.QfrTest2_u_P2(self)

    def setU_P2(self, u_P):
        return _openstudioairflow.QfrTest2_setU_P2(self, u_P)

    def u_F2(self):
        return _openstudioairflow.QfrTest2_u_F2(self)

    def setU_F2(self, u_F):
        return _openstudioairflow.QfrTest2_setU_F2(self, u_F)

# Register QfrTest2 in _openstudioairflow:
_openstudioairflow.QfrTest2_swigregister(QfrTest2)
class AfeDor(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.AfeDor_swiginit(self, _openstudioairflow.new_AfeDor(*args))
    __swig_destroy__ = _openstudioairflow.delete_AfeDor

    def __eq__(self, other):
        return _openstudioairflow.AfeDor___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.AfeDor___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.AfeDor_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.AfeDor_readDetails(self, input)

    def write(self):
        return _openstudioairflow.AfeDor_write(self)

    def nr(self):
        return _openstudioairflow.AfeDor_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.AfeDor_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.AfeDor_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.AfeDor_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.AfeDor_dataType(self)

    def name(self):
        return _openstudioairflow.AfeDor_name(self)

    def setName(self, name):
        return _openstudioairflow.AfeDor_setName(self, name)

    def desc(self):
        return _openstudioairflow.AfeDor_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.AfeDor_setDesc(self, desc)

    def lam(self):
        return _openstudioairflow.AfeDor_lam(self)

    def setLam(self, *args):
        return _openstudioairflow.AfeDor_setLam(self, *args)

    def turb(self):
        return _openstudioairflow.AfeDor_turb(self)

    def setTurb(self, *args):
        return _openstudioairflow.AfeDor_setTurb(self, *args)

    def expt(self):
        return _openstudioairflow.AfeDor_expt(self)

    def setExpt(self, *args):
        return _openstudioairflow.AfeDor_setExpt(self, *args)

    def dTmin(self):
        return _openstudioairflow.AfeDor_dTmin(self)

    def setDTmin(self, *args):
        return _openstudioairflow.AfeDor_setDTmin(self, *args)

    def height(self):
        return _openstudioairflow.AfeDor_height(self)

    def setHeight(self, *args):
        return _openstudioairflow.AfeDor_setHeight(self, *args)

    def width(self):
        return _openstudioairflow.AfeDor_width(self)

    def setWidth(self, *args):
        return _openstudioairflow.AfeDor_setWidth(self, *args)

    def cd(self):
        return _openstudioairflow.AfeDor_cd(self)

    def setCd(self, *args):
        return _openstudioairflow.AfeDor_setCd(self, *args)

    def u_T(self):
        return _openstudioairflow.AfeDor_u_T(self)

    def setU_T(self, u_T):
        return _openstudioairflow.AfeDor_setU_T(self, u_T)

    def u_H(self):
        return _openstudioairflow.AfeDor_u_H(self)

    def setU_H(self, u_H):
        return _openstudioairflow.AfeDor_setU_H(self, u_H)

    def u_W(self):
        return _openstudioairflow.AfeDor_u_W(self)

    def setU_W(self, u_W):
        return _openstudioairflow.AfeDor_setU_W(self, u_W)

# Register AfeDor in _openstudioairflow:
_openstudioairflow.AfeDor_swigregister(AfeDor)
class DrPl2(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.DrPl2_swiginit(self, _openstudioairflow.new_DrPl2(*args))
    __swig_destroy__ = _openstudioairflow.delete_DrPl2

    def __eq__(self, other):
        return _openstudioairflow.DrPl2___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.DrPl2___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.DrPl2_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.DrPl2_readDetails(self, input)

    def write(self):
        return _openstudioairflow.DrPl2_write(self)

    def nr(self):
        return _openstudioairflow.DrPl2_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.DrPl2_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.DrPl2_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.DrPl2_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.DrPl2_dataType(self)

    def name(self):
        return _openstudioairflow.DrPl2_name(self)

    def setName(self, name):
        return _openstudioairflow.DrPl2_setName(self, name)

    def desc(self):
        return _openstudioairflow.DrPl2_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.DrPl2_setDesc(self, desc)

    def lam(self):
        return _openstudioairflow.DrPl2_lam(self)

    def setLam(self, *args):
        return _openstudioairflow.DrPl2_setLam(self, *args)

    def turb(self):
        return _openstudioairflow.DrPl2_turb(self)

    def setTurb(self, *args):
        return _openstudioairflow.DrPl2_setTurb(self, *args)

    def expt(self):
        return _openstudioairflow.DrPl2_expt(self)

    def setExpt(self, *args):
        return _openstudioairflow.DrPl2_setExpt(self, *args)

    def dH(self):
        return _openstudioairflow.DrPl2_dH(self)

    def setDH(self, *args):
        return _openstudioairflow.DrPl2_setDH(self, *args)

    def height(self):
        return _openstudioairflow.DrPl2_height(self)

    def setHeight(self, *args):
        return _openstudioairflow.DrPl2_setHeight(self, *args)

    def width(self):
        return _openstudioairflow.DrPl2_width(self)

    def setWidth(self, *args):
        return _openstudioairflow.DrPl2_setWidth(self, *args)

    def cd(self):
        return _openstudioairflow.DrPl2_cd(self)

    def setCd(self, *args):
        return _openstudioairflow.DrPl2_setCd(self, *args)

    def u_H(self):
        return _openstudioairflow.DrPl2_u_H(self)

    def setU_H(self, u_H):
        return _openstudioairflow.DrPl2_setU_H(self, u_H)

    def u_W(self):
        return _openstudioairflow.DrPl2_u_W(self)

    def setU_W(self, u_W):
        return _openstudioairflow.DrPl2_setU_W(self, u_W)

# Register DrPl2 in _openstudioairflow:
_openstudioairflow.DrPl2_swigregister(DrPl2)
class AfeFlow(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioairflow.delete_AfeFlow

    def __eq__(self, other):
        return _openstudioairflow.AfeFlow___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.AfeFlow___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.AfeFlow_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.AfeFlow_readDetails(self, input)

    def write(self):
        return _openstudioairflow.AfeFlow_write(self)

    def nr(self):
        return _openstudioairflow.AfeFlow_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.AfeFlow_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.AfeFlow_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.AfeFlow_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.AfeFlow_dataType(self)

    def name(self):
        return _openstudioairflow.AfeFlow_name(self)

    def setName(self, name):
        return _openstudioairflow.AfeFlow_setName(self, name)

    def desc(self):
        return _openstudioairflow.AfeFlow_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.AfeFlow_setDesc(self, desc)

    def Flow(self):
        return _openstudioairflow.AfeFlow_Flow(self)

    def setFlow(self, *args):
        return _openstudioairflow.AfeFlow_setFlow(self, *args)

    def u_F(self):
        return _openstudioairflow.AfeFlow_u_F(self)

    def setU_F(self, u_F):
        return _openstudioairflow.AfeFlow_setU_F(self, u_F)

# Register AfeFlow in _openstudioairflow:
_openstudioairflow.AfeFlow_swigregister(AfeFlow)
class AfeCmf(AfeFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.AfeCmf_swiginit(self, _openstudioairflow.new_AfeCmf(*args))
    __swig_destroy__ = _openstudioairflow.delete_AfeCmf

    def dataType(self):
        return _openstudioairflow.AfeCmf_dataType(self)

# Register AfeCmf in _openstudioairflow:
_openstudioairflow.AfeCmf_swigregister(AfeCmf)
class AfeCvf(AfeFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.AfeCvf_swiginit(self, _openstudioairflow.new_AfeCvf(*args))
    __swig_destroy__ = _openstudioairflow.delete_AfeCvf

    def dataType(self):
        return _openstudioairflow.AfeCvf_dataType(self)

# Register AfeCvf in _openstudioairflow:
_openstudioairflow.AfeCvf_swigregister(AfeCvf)
class AfeFan(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.AfeFan_swiginit(self, _openstudioairflow.new_AfeFan(*args))
    __swig_destroy__ = _openstudioairflow.delete_AfeFan

    def __eq__(self, other):
        return _openstudioairflow.AfeFan___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.AfeFan___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.AfeFan_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.AfeFan_readDetails(self, input)

    def write(self):
        return _openstudioairflow.AfeFan_write(self)

    def nr(self):
        return _openstudioairflow.AfeFan_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.AfeFan_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.AfeFan_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.AfeFan_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.AfeFan_dataType(self)

    def name(self):
        return _openstudioairflow.AfeFan_name(self)

    def setName(self, name):
        return _openstudioairflow.AfeFan_setName(self, name)

    def desc(self):
        return _openstudioairflow.AfeFan_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.AfeFan_setDesc(self, desc)

    def lam(self):
        return _openstudioairflow.AfeFan_lam(self)

    def setLam(self, *args):
        return _openstudioairflow.AfeFan_setLam(self, *args)

    def turb(self):
        return _openstudioairflow.AfeFan_turb(self)

    def setTurb(self, *args):
        return _openstudioairflow.AfeFan_setTurb(self, *args)

    def expt(self):
        return _openstudioairflow.AfeFan_expt(self)

    def setExpt(self, *args):
        return _openstudioairflow.AfeFan_setExpt(self, *args)

    def rdens(self):
        return _openstudioairflow.AfeFan_rdens(self)

    def setRdens(self, *args):
        return _openstudioairflow.AfeFan_setRdens(self, *args)

    def fdf(self):
        return _openstudioairflow.AfeFan_fdf(self)

    def setFdf(self, *args):
        return _openstudioairflow.AfeFan_setFdf(self, *args)

    def sop(self):
        return _openstudioairflow.AfeFan_sop(self)

    def setSop(self, *args):
        return _openstudioairflow.AfeFan_setSop(self, *args)

    def off(self):
        return _openstudioairflow.AfeFan_off(self)

    def setOff(self, *args):
        return _openstudioairflow.AfeFan_setOff(self, *args)

    def fpc(self):
        return _openstudioairflow.AfeFan_fpc(self)

    def setFpc(self, *args):
        return _openstudioairflow.AfeFan_setFpc(self, *args)

    def Sarea(self):
        return _openstudioairflow.AfeFan_Sarea(self)

    def setSarea(self, *args):
        return _openstudioairflow.AfeFan_setSarea(self, *args)

    def u_Sa(self):
        return _openstudioairflow.AfeFan_u_Sa(self)

    def setU_Sa(self, u_Sa):
        return _openstudioairflow.AfeFan_setU_Sa(self, u_Sa)

    def data(self):
        return _openstudioairflow.AfeFan_data(self)

    def setData(self, data):
        return _openstudioairflow.AfeFan_setData(self, data)

# Register AfeFan in _openstudioairflow:
_openstudioairflow.AfeFan_swigregister(AfeFan)
class AfeCsf(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioairflow.delete_AfeCsf

    def __eq__(self, other):
        return _openstudioairflow.AfeCsf___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.AfeCsf___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.AfeCsf_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.AfeCsf_readDetails(self, input)

    def write(self):
        return _openstudioairflow.AfeCsf_write(self)

    def nr(self):
        return _openstudioairflow.AfeCsf_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.AfeCsf_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.AfeCsf_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.AfeCsf_setIcon(self, icon)

    def name(self):
        return _openstudioairflow.AfeCsf_name(self)

    def setName(self, name):
        return _openstudioairflow.AfeCsf_setName(self, name)

    def desc(self):
        return _openstudioairflow.AfeCsf_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.AfeCsf_setDesc(self, desc)

    def u_x(self):
        return _openstudioairflow.AfeCsf_u_x(self)

    def setU_x(self, u_x):
        return _openstudioairflow.AfeCsf_setU_x(self, u_x)

    def u_y(self):
        return _openstudioairflow.AfeCsf_u_y(self)

    def setU_y(self, u_y):
        return _openstudioairflow.AfeCsf_setU_y(self, u_y)

    def data(self):
        return _openstudioairflow.AfeCsf_data(self)

    def setData(self, data):
        return _openstudioairflow.AfeCsf_setData(self, data)

# Register AfeCsf in _openstudioairflow:
_openstudioairflow.AfeCsf_swigregister(AfeCsf)
class AfeFsp(AfeCsf):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.AfeFsp_swiginit(self, _openstudioairflow.new_AfeFsp(*args))
    __swig_destroy__ = _openstudioairflow.delete_AfeFsp

    def dataType(self):
        return _openstudioairflow.AfeFsp_dataType(self)

# Register AfeFsp in _openstudioairflow:
_openstudioairflow.AfeFsp_swigregister(AfeFsp)
class AfeQsp(AfeCsf):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.AfeQsp_swiginit(self, _openstudioairflow.new_AfeQsp(*args))
    __swig_destroy__ = _openstudioairflow.delete_AfeQsp

    def dataType(self):
        return _openstudioairflow.AfeQsp_dataType(self)

# Register AfeQsp in _openstudioairflow:
_openstudioairflow.AfeQsp_swigregister(AfeQsp)
class AfePsf(AfeCsf):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.AfePsf_swiginit(self, _openstudioairflow.new_AfePsf(*args))
    __swig_destroy__ = _openstudioairflow.delete_AfePsf

    def dataType(self):
        return _openstudioairflow.AfePsf_dataType(self)

# Register AfePsf in _openstudioairflow:
_openstudioairflow.AfePsf_swigregister(AfePsf)
class AfePsq(AfeCsf):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.AfePsq_swiginit(self, _openstudioairflow.new_AfePsq(*args))
    __swig_destroy__ = _openstudioairflow.delete_AfePsq

    def dataType(self):
        return _openstudioairflow.AfePsq_dataType(self)

# Register AfePsq in _openstudioairflow:
_openstudioairflow.AfePsq_swigregister(AfePsq)
class AfeSup(AirflowElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.AfeSup_swiginit(self, _openstudioairflow.new_AfeSup(*args))
    __swig_destroy__ = _openstudioairflow.delete_AfeSup

    def __eq__(self, other):
        return _openstudioairflow.AfeSup___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.AfeSup___ne__(self, other)

    def read(self, input):
        return _openstudioairflow.AfeSup_read(self, input)

    def readDetails(self, input):
        return _openstudioairflow.AfeSup_readDetails(self, input)

    def write(self):
        return _openstudioairflow.AfeSup_write(self)

    def nr(self):
        return _openstudioairflow.AfeSup_nr(self)

    def setNr(self, nr):
        return _openstudioairflow.AfeSup_setNr(self, nr)

    def icon(self):
        return _openstudioairflow.AfeSup_icon(self)

    def setIcon(self, icon):
        return _openstudioairflow.AfeSup_setIcon(self, icon)

    def dataType(self):
        return _openstudioairflow.AfeSup_dataType(self)

    def name(self):
        return _openstudioairflow.AfeSup_name(self)

    def setName(self, name):
        return _openstudioairflow.AfeSup_setName(self, name)

    def desc(self):
        return _openstudioairflow.AfeSup_desc(self)

    def setDesc(self, desc):
        return _openstudioairflow.AfeSup_setDesc(self, desc)

    def sched(self):
        return _openstudioairflow.AfeSup_sched(self)

    def setSched(self, sched):
        return _openstudioairflow.AfeSup_setSched(self, sched)

    def u_H(self):
        return _openstudioairflow.AfeSup_u_H(self)

    def setU_H(self, u_H):
        return _openstudioairflow.AfeSup_setU_H(self, u_H)

    def subelements(self):
        return _openstudioairflow.AfeSup_subelements(self)

    def setSubelements(self, subelements):
        return _openstudioairflow.AfeSup_setSubelements(self, subelements)

# Register AfeSup in _openstudioairflow:
_openstudioairflow.AfeSup_swigregister(AfeSup)
class IndexModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioairflow.IndexModel_swiginit(self, _openstudioairflow.new_IndexModel(*args))
    __swig_destroy__ = _openstudioairflow.delete_IndexModel

    def __eq__(self, other):
        return _openstudioairflow.IndexModel___eq__(self, other)

    def __ne__(self, other):
        return _openstudioairflow.IndexModel___ne__(self, other)

    def programName(self):
        return _openstudioairflow.IndexModel_programName(self)

    def setProgramName(self, name):
        return _openstudioairflow.IndexModel_setProgramName(self, name)

    def version(self):
        return _openstudioairflow.IndexModel_version(self)

    def setVersion(self, version):
        return _openstudioairflow.IndexModel_setVersion(self, version)

    def echo(self):
        return _openstudioairflow.IndexModel_echo(self)

    def setEcho(self, echo):
        return _openstudioairflow.IndexModel_setEcho(self, echo)

    def desc(self):
        return _openstudioairflow.IndexModel_desc(self)

    def setDesc(self, prjdesc):
        return _openstudioairflow.IndexModel_setDesc(self, prjdesc)

    def skheight(self):
        return _openstudioairflow.IndexModel_skheight(self)

    def setSkheight(self, skheight):
        return _openstudioairflow.IndexModel_setSkheight(self, skheight)

    def skwidth(self):
        return _openstudioairflow.IndexModel_skwidth(self)

    def setSkwidth(self, skwidth):
        return _openstudioairflow.IndexModel_setSkwidth(self, skwidth)

    def def_units(self):
        return _openstudioairflow.IndexModel_def_units(self)

    def setDef_units(self, def_units):
        return _openstudioairflow.IndexModel_setDef_units(self, def_units)

    def def_flows(self):
        return _openstudioairflow.IndexModel_def_flows(self)

    def setDef_flows(self, def_flows):
        return _openstudioairflow.IndexModel_setDef_flows(self, def_flows)

    def def_T(self):
        return _openstudioairflow.IndexModel_def_T(self)

    def setDef_T(self, *args):
        return _openstudioairflow.IndexModel_setDef_T(self, *args)

    def udefT(self):
        return _openstudioairflow.IndexModel_udefT(self)

    def setUdefT(self, udefT):
        return _openstudioairflow.IndexModel_setUdefT(self, udefT)

    def rel_N(self):
        return _openstudioairflow.IndexModel_rel_N(self)

    def setRel_N(self, *args):
        return _openstudioairflow.IndexModel_setRel_N(self, *args)

    def wind_H(self):
        return _openstudioairflow.IndexModel_wind_H(self)

    def setWind_H(self, *args):
        return _openstudioairflow.IndexModel_setWind_H(self, *args)

    def uwH(self):
        return _openstudioairflow.IndexModel_uwH(self)

    def setUwH(self, uwH):
        return _openstudioairflow.IndexModel_setUwH(self, uwH)

    def wind_Ao(self):
        return _openstudioairflow.IndexModel_wind_Ao(self)

    def setWind_Ao(self, *args):
        return _openstudioairflow.IndexModel_setWind_Ao(self, *args)

    def wind_a(self):
        return _openstudioairflow.IndexModel_wind_a(self)

    def setWind_a(self, *args):
        return _openstudioairflow.IndexModel_setWind_a(self, *args)

    def scale(self):
        return _openstudioairflow.IndexModel_scale(self)

    def setScale(self, *args):
        return _openstudioairflow.IndexModel_setScale(self, *args)

    def uScale(self):
        return _openstudioairflow.IndexModel_uScale(self)

    def setUScale(self, uScale):
        return _openstudioairflow.IndexModel_setUScale(self, uScale)

    def orgRow(self):
        return _openstudioairflow.IndexModel_orgRow(self)

    def setOrgRow(self, orgRow):
        return _openstudioairflow.IndexModel_setOrgRow(self, orgRow)

    def orgCol(self):
        return _openstudioairflow.IndexModel_orgCol(self)

    def setOrgCol(self, orgCol):
        return _openstudioairflow.IndexModel_setOrgCol(self, orgCol)

    def invYaxis(self):
        return _openstudioairflow.IndexModel_invYaxis(self)

    def setInvYaxis(self, invYaxis):
        return _openstudioairflow.IndexModel_setInvYaxis(self, invYaxis)

    def showGeom(self):
        return _openstudioairflow.IndexModel_showGeom(self)

    def setShowGeom(self, showGeom):
        return _openstudioairflow.IndexModel_setShowGeom(self, showGeom)

    def ssWeather(self):
        return _openstudioairflow.IndexModel_ssWeather(self)

    def setSsWeather(self, ssWeather):
        return _openstudioairflow.IndexModel_setSsWeather(self, ssWeather)

    def wptWeather(self):
        return _openstudioairflow.IndexModel_wptWeather(self)

    def setWptWeather(self, wptWeather):
        return _openstudioairflow.IndexModel_setWptWeather(self, wptWeather)

    def WTHpath(self):
        return _openstudioairflow.IndexModel_WTHpath(self)

    def setWTHpath(self, WTHpath):
        return _openstudioairflow.IndexModel_setWTHpath(self, WTHpath)

    def CTMpath(self):
        return _openstudioairflow.IndexModel_CTMpath(self)

    def setCTMpath(self, CTMpath):
        return _openstudioairflow.IndexModel_setCTMpath(self, CTMpath)

    def CVFpath(self):
        return _openstudioairflow.IndexModel_CVFpath(self)

    def setCVFpath(self, CVFpath):
        return _openstudioairflow.IndexModel_setCVFpath(self, CVFpath)

    def DVFpath(self):
        return _openstudioairflow.IndexModel_DVFpath(self)

    def setDVFpath(self, DVFpath):
        return _openstudioairflow.IndexModel_setDVFpath(self, DVFpath)

    def WPCfile(self):
        return _openstudioairflow.IndexModel_WPCfile(self)

    def setWPCfile(self, WPCfile):
        return _openstudioairflow.IndexModel_setWPCfile(self, WPCfile)

    def EWCfile(self):
        return _openstudioairflow.IndexModel_EWCfile(self)

    def setEWCfile(self, EWCfile):
        return _openstudioairflow.IndexModel_setEWCfile(self, EWCfile)

    def WPCdesc(self):
        return _openstudioairflow.IndexModel_WPCdesc(self)

    def setWPCdesc(self, WPCdesc):
        return _openstudioairflow.IndexModel_setWPCdesc(self, WPCdesc)

    def X0(self):
        return _openstudioairflow.IndexModel_X0(self)

    def setX0(self, *args):
        return _openstudioairflow.IndexModel_setX0(self, *args)

    def Y0(self):
        return _openstudioairflow.IndexModel_Y0(self)

    def setY0(self, *args):
        return _openstudioairflow.IndexModel_setY0(self, *args)

    def Z0(self):
        return _openstudioairflow.IndexModel_Z0(self)

    def setZ0(self, *args):
        return _openstudioairflow.IndexModel_setZ0(self, *args)

    def angle(self):
        return _openstudioairflow.IndexModel_angle(self)

    def setAngle(self, *args):
        return _openstudioairflow.IndexModel_setAngle(self, *args)

    def u_XYZ(self):
        return _openstudioairflow.IndexModel_u_XYZ(self)

    def setU_XYZ(self, u_XYZ):
        return _openstudioairflow.IndexModel_setU_XYZ(self, u_XYZ)

    def epsPath(self):
        return _openstudioairflow.IndexModel_epsPath(self)

    def setEpsPath(self, *args):
        return _openstudioairflow.IndexModel_setEpsPath(self, *args)

    def epsSpcs(self):
        return _openstudioairflow.IndexModel_epsSpcs(self)

    def setEpsSpcs(self, *args):
        return _openstudioairflow.IndexModel_setEpsSpcs(self, *args)

    def tShift(self):
        return _openstudioairflow.IndexModel_tShift(self)

    def setTShift(self, tShift):
        return _openstudioairflow.IndexModel_setTShift(self, tShift)

    def dStart(self):
        return _openstudioairflow.IndexModel_dStart(self)

    def setDStart(self, dStart):
        return _openstudioairflow.IndexModel_setDStart(self, dStart)

    def dEnd(self):
        return _openstudioairflow.IndexModel_dEnd(self)

    def setDEnd(self, dEnd):
        return _openstudioairflow.IndexModel_setDEnd(self, dEnd)

    def useWPCwp(self):
        return _openstudioairflow.IndexModel_useWPCwp(self)

    def setUseWPCwp(self, useWPCwp):
        return _openstudioairflow.IndexModel_setUseWPCwp(self, useWPCwp)

    def useWPCmf(self):
        return _openstudioairflow.IndexModel_useWPCmf(self)

    def setUseWPCmf(self, useWPCmf):
        return _openstudioairflow.IndexModel_setUseWPCmf(self, useWPCmf)

    def wpctrig(self):
        return _openstudioairflow.IndexModel_wpctrig(self)

    def setWpctrig(self, wpctrig):
        return _openstudioairflow.IndexModel_setWpctrig(self, wpctrig)

    def latd(self):
        return _openstudioairflow.IndexModel_latd(self)

    def setLatd(self, *args):
        return _openstudioairflow.IndexModel_setLatd(self, *args)

    def lgtd(self):
        return _openstudioairflow.IndexModel_lgtd(self)

    def setLgtd(self, *args):
        return _openstudioairflow.IndexModel_setLgtd(self, *args)

    def Tznr(self):
        return _openstudioairflow.IndexModel_Tznr(self)

    def setTznr(self, *args):
        return _openstudioairflow.IndexModel_setTznr(self, *args)

    def altd(self):
        return _openstudioairflow.IndexModel_altd(self)

    def setAltd(self, *args):
        return _openstudioairflow.IndexModel_setAltd(self, *args)

    def Tgrnd(self):
        return _openstudioairflow.IndexModel_Tgrnd(self)

    def setTgrnd(self, *args):
        return _openstudioairflow.IndexModel_setTgrnd(self, *args)

    def utg(self):
        return _openstudioairflow.IndexModel_utg(self)

    def setUtg(self, utg):
        return _openstudioairflow.IndexModel_setUtg(self, utg)

    def u_a(self):
        return _openstudioairflow.IndexModel_u_a(self)

    def setU_a(self, u_a):
        return _openstudioairflow.IndexModel_setU_a(self, u_a)

    def rc(self):
        return _openstudioairflow.IndexModel_rc(self)

    def setRc(self, rc):
        return _openstudioairflow.IndexModel_setRc(self, rc)

    def contaminants(self):
        return _openstudioairflow.IndexModel_contaminants(self)

    def species(self):
        return _openstudioairflow.IndexModel_species(self)

    def setSpecies(self, species):
        return _openstudioairflow.IndexModel_setSpecies(self, species)

    def addSpecies(self, species):
        return _openstudioairflow.IndexModel_addSpecies(self, species)

    def removeSpecies(self, species):
        return _openstudioairflow.IndexModel_removeSpecies(self, species)

    def levels(self):
        return _openstudioairflow.IndexModel_levels(self)

    def setLevels(self, levels):
        return _openstudioairflow.IndexModel_setLevels(self, levels)

    def addLevel(self, level):
        return _openstudioairflow.IndexModel_addLevel(self, level)

    def daySchedules(self):
        return _openstudioairflow.IndexModel_daySchedules(self)

    def setDaySchedules(self, daySchedules):
        return _openstudioairflow.IndexModel_setDaySchedules(self, daySchedules)

    def weekSchedules(self):
        return _openstudioairflow.IndexModel_weekSchedules(self)

    def setWeekSchedules(self, weekSchedules):
        return _openstudioairflow.IndexModel_setWeekSchedules(self, weekSchedules)

    def windPressureProfiles(self):
        return _openstudioairflow.IndexModel_windPressureProfiles(self)

    def setWindPressureProfiles(self, windPressureProfiles):
        return _openstudioairflow.IndexModel_setWindPressureProfiles(self, windPressureProfiles)

    def getPlrTest1(self):
        return _openstudioairflow.IndexModel_getPlrTest1(self)

    def getPlrTest2(self):
        return _openstudioairflow.IndexModel_getPlrTest2(self)

    def getPlrLeak2(self):
        return _openstudioairflow.IndexModel_getPlrLeak2(self)

    def addAirflowElement(self, *args):
        return _openstudioairflow.IndexModel_addAirflowElement(self, *args)

    def airflowElementNrByName(self, name):
        return _openstudioairflow.IndexModel_airflowElementNrByName(self, name)

    def replaceAirflowElement(self, nr, element):
        return _openstudioairflow.IndexModel_replaceAirflowElement(self, nr, element)

    def getCvfDat(self):
        return _openstudioairflow.IndexModel_getCvfDat(self)

    def addControlNode(self, element, sequence=True):
        return _openstudioairflow.IndexModel_addControlNode(self, element, sequence)

    def ahs(self):
        return _openstudioairflow.IndexModel_ahs(self)

    def setAhs(self, ahs):
        return _openstudioairflow.IndexModel_setAhs(self, ahs)

    def addAhs(self, ahs):
        return _openstudioairflow.IndexModel_addAhs(self, ahs)

    def zones(self):
        return _openstudioairflow.IndexModel_zones(self)

    def setZones(self, zones):
        return _openstudioairflow.IndexModel_setZones(self, zones)

    def addZone(self, zone):
        return _openstudioairflow.IndexModel_addZone(self, zone)

    def airflowPaths(self):
        return _openstudioairflow.IndexModel_airflowPaths(self)

    def setAirflowPaths(self, paths):
        return _openstudioairflow.IndexModel_setAirflowPaths(self, paths)

    def addAirflowPath(self, path):
        return _openstudioairflow.IndexModel_addAirflowPath(self, path)

    def valid(self):
        return _openstudioairflow.IndexModel_valid(self)

    def read(self, *args):
        return _openstudioairflow.IndexModel_read(self, *args)

    def toString(self):
        return _openstudioairflow.IndexModel_toString(self)

    def zoneExteriorFlowPaths(self):
        return _openstudioairflow.IndexModel_zoneExteriorFlowPaths(self)

    def zoneInfiltration(self, sim):
        return _openstudioairflow.IndexModel_zoneInfiltration(self, sim)

    def pathInfiltration(self, pathNrs, sim):
        return _openstudioairflow.IndexModel_pathInfiltration(self, pathNrs, sim)

# Register IndexModel in _openstudioairflow:
_openstudioairflow.IndexModel_swigregister(IndexModel)
class CvFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioairflow.CvFile_swiginit(self, _openstudioairflow.new_CvFile())

    def addTimeSeries(self, name, series):
        return _openstudioairflow.CvFile_addTimeSeries(self, name, series)

    def write(self, filepath):
        return _openstudioairflow.CvFile_write(self, filepath)

    def start(self):
        return _openstudioairflow.CvFile_start(self)

    def setStart(self, date):
        return _openstudioairflow.CvFile_setStart(self, date)

    def end(self):
        return _openstudioairflow.CvFile_end(self)

    def setEnd(self, date):
        return _openstudioairflow.CvFile_setEnd(self, date)

    def isEmpty(self):
        return _openstudioairflow.CvFile_isEmpty(self)

    def clear(self):
        return _openstudioairflow.CvFile_clear(self)
    __swig_destroy__ = _openstudioairflow.delete_CvFile

# Register CvFile in _openstudioairflow:
_openstudioairflow.CvFile_swigregister(CvFile)
class ContamForwardTranslator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioairflow.ContamForwardTranslator_swiginit(self, _openstudioairflow.new_ContamForwardTranslator())
    __swig_destroy__ = _openstudioairflow.delete_ContamForwardTranslator

    def translateModel(self, model):
        return _openstudioairflow.ContamForwardTranslator_translateModel(self, model)

    @staticmethod
    def modelToPrj(*args):
        return _openstudioairflow.ContamForwardTranslator_modelToPrj(*args)

    def surfaceMap(self):
        return _openstudioairflow.ContamForwardTranslator_surfaceMap(self)

    def zoneMap(self):
        return _openstudioairflow.ContamForwardTranslator_zoneMap(self)

    def airtightnessLevel(self):
        return _openstudioairflow.ContamForwardTranslator_airtightnessLevel(self)

    def setAirtightnessLevel(self, level):
        return _openstudioairflow.ContamForwardTranslator_setAirtightnessLevel(self, level)

    def exteriorFlowRate(self):
        return _openstudioairflow.ContamForwardTranslator_exteriorFlowRate(self)

    def exteriorExponent(self):
        return _openstudioairflow.ContamForwardTranslator_exteriorExponent(self)

    def exteriorDeltaP(self):
        return _openstudioairflow.ContamForwardTranslator_exteriorDeltaP(self)

    def setExteriorFlowRate(self, flow, n, deltaP):
        return _openstudioairflow.ContamForwardTranslator_setExteriorFlowRate(self, flow, n, deltaP)

    def returnSupplyRatio(self):
        return _openstudioairflow.ContamForwardTranslator_returnSupplyRatio(self)

    def setReturnSupplyRatio(self, returnSupplyRatio):
        return _openstudioairflow.ContamForwardTranslator_setReturnSupplyRatio(self, returnSupplyRatio)

    def ratioOverride(self):
        return _openstudioairflow.ContamForwardTranslator_ratioOverride(self)

    def setRatioOverride(self, ratioOverride):
        return _openstudioairflow.ContamForwardTranslator_setRatioOverride(self, ratioOverride)

    def translateHVAC(self):
        return _openstudioairflow.ContamForwardTranslator_translateHVAC(self)

    def setTranslateHVAC(self, translateHVAC):
        return _openstudioairflow.ContamForwardTranslator_setTranslateHVAC(self, translateHVAC)

    def startDateTime(self):
        return _openstudioairflow.ContamForwardTranslator_startDateTime(self)

    def endDateTime(self):
        return _openstudioairflow.ContamForwardTranslator_endDateTime(self)

    def writeCvFile(self, filepath):
        return _openstudioairflow.ContamForwardTranslator_writeCvFile(self, filepath)

    def warnings(self):
        return _openstudioairflow.ContamForwardTranslator_warnings(self)

    def errors(self):
        return _openstudioairflow.ContamForwardTranslator_errors(self)

# Register ContamForwardTranslator in _openstudioairflow:
_openstudioairflow.ContamForwardTranslator_swigregister(ContamForwardTranslator)

