# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelzonehvac
else:
    import _openstudiomodelzonehvac

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_SwigPyIterator

    def value(self):
        return _openstudiomodelzonehvac.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudiomodelzonehvac.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudiomodelzonehvac.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudiomodelzonehvac.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudiomodelzonehvac.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudiomodelzonehvac.SwigPyIterator_copy(self)

    def next(self):
        return _openstudiomodelzonehvac.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudiomodelzonehvac.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudiomodelzonehvac.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudiomodelzonehvac.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudiomodelzonehvac.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudiomodelzonehvac.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudiomodelzonehvac.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudiomodelzonehvac.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudiomodelzonehvac.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudiomodelzonehvac.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudiomodelzonehvac.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudioutilitiesxml

# Import common modules
import typing
import warnings

from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources
from .import openstudiomodelgeometry
from .import openstudiomodelhvac

Model = openstudiomodelcore.Model

class AirLoopHVACUnitarySystemVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_swiginit(self, _openstudiomodelzonehvac.new_AirLoopHVACUnitarySystemVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_AirLoopHVACUnitarySystemVector

# Register AirLoopHVACUnitarySystemVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.AirLoopHVACUnitarySystemVector_swigregister(AirLoopHVACUnitarySystemVector)
class OptionalAirLoopHVACUnitarySystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_swiginit(self, _openstudiomodelzonehvac.new_OptionalAirLoopHVACUnitarySystem(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalAirLoopHVACUnitarySystem

# Register OptionalAirLoopHVACUnitarySystem in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalAirLoopHVACUnitarySystem_swigregister(OptionalAirLoopHVACUnitarySystem)
class FanZoneExhaustVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.FanZoneExhaustVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.FanZoneExhaustVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.FanZoneExhaustVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.FanZoneExhaustVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.FanZoneExhaustVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.FanZoneExhaustVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.FanZoneExhaustVector_swiginit(self, _openstudiomodelzonehvac.new_FanZoneExhaustVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.FanZoneExhaustVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_FanZoneExhaustVector

# Register FanZoneExhaustVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.FanZoneExhaustVector_swigregister(FanZoneExhaustVector)
class OptionalFanZoneExhaust(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalFanZoneExhaust_swiginit(self, _openstudiomodelzonehvac.new_OptionalFanZoneExhaust(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalFanZoneExhaust_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalFanZoneExhaust

# Register OptionalFanZoneExhaust in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalFanZoneExhaust_swigregister(OptionalFanZoneExhaust)
class WaterHeaterHeatPumpVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_swiginit(self, _openstudiomodelzonehvac.new_WaterHeaterHeatPumpVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_WaterHeaterHeatPumpVector

# Register WaterHeaterHeatPumpVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.WaterHeaterHeatPumpVector_swigregister(WaterHeaterHeatPumpVector)
class OptionalWaterHeaterHeatPump(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_swiginit(self, _openstudiomodelzonehvac.new_OptionalWaterHeaterHeatPump(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalWaterHeaterHeatPump

# Register OptionalWaterHeaterHeatPump in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalWaterHeaterHeatPump_swigregister(OptionalWaterHeaterHeatPump)
class WaterHeaterHeatPumpWrappedCondenserVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_swiginit(self, _openstudiomodelzonehvac.new_WaterHeaterHeatPumpWrappedCondenserVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_WaterHeaterHeatPumpWrappedCondenserVector

# Register WaterHeaterHeatPumpWrappedCondenserVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenserVector_swigregister(WaterHeaterHeatPumpWrappedCondenserVector)
class OptionalWaterHeaterHeatPumpWrappedCondenser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_swiginit(self, _openstudiomodelzonehvac.new_OptionalWaterHeaterHeatPumpWrappedCondenser(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalWaterHeaterHeatPumpWrappedCondenser

# Register OptionalWaterHeaterHeatPumpWrappedCondenser in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalWaterHeaterHeatPumpWrappedCondenser_swigregister(OptionalWaterHeaterHeatPumpWrappedCondenser)
class ZoneHVACBaseboardConvectiveElectricVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACBaseboardConvectiveElectricVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardConvectiveElectricVector

# Register ZoneHVACBaseboardConvectiveElectricVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectricVector_swigregister(ZoneHVACBaseboardConvectiveElectricVector)
class OptionalZoneHVACBaseboardConvectiveElectric(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACBaseboardConvectiveElectric(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACBaseboardConvectiveElectric

# Register OptionalZoneHVACBaseboardConvectiveElectric in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveElectric_swigregister(OptionalZoneHVACBaseboardConvectiveElectric)
class ZoneHVACBaseboardConvectiveWaterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACBaseboardConvectiveWaterVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardConvectiveWaterVector

# Register ZoneHVACBaseboardConvectiveWaterVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWaterVector_swigregister(ZoneHVACBaseboardConvectiveWaterVector)
class OptionalZoneHVACBaseboardConvectiveWater(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACBaseboardConvectiveWater(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACBaseboardConvectiveWater

# Register OptionalZoneHVACBaseboardConvectiveWater in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACBaseboardConvectiveWater_swigregister(OptionalZoneHVACBaseboardConvectiveWater)
class ZoneHVACBaseboardRadiantConvectiveElectricVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACBaseboardRadiantConvectiveElectricVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardRadiantConvectiveElectricVector

# Register ZoneHVACBaseboardRadiantConvectiveElectricVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectricVector_swigregister(ZoneHVACBaseboardRadiantConvectiveElectricVector)
class OptionalZoneHVACBaseboardRadiantConvectiveElectric(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACBaseboardRadiantConvectiveElectric(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACBaseboardRadiantConvectiveElectric

# Register OptionalZoneHVACBaseboardRadiantConvectiveElectric in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveElectric_swigregister(OptionalZoneHVACBaseboardRadiantConvectiveElectric)
class ZoneHVACBaseboardRadiantConvectiveWaterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACBaseboardRadiantConvectiveWaterVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardRadiantConvectiveWaterVector

# Register ZoneHVACBaseboardRadiantConvectiveWaterVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWaterVector_swigregister(ZoneHVACBaseboardRadiantConvectiveWaterVector)
class OptionalZoneHVACBaseboardRadiantConvectiveWater(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACBaseboardRadiantConvectiveWater(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACBaseboardRadiantConvectiveWater

# Register OptionalZoneHVACBaseboardRadiantConvectiveWater in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACBaseboardRadiantConvectiveWater_swigregister(OptionalZoneHVACBaseboardRadiantConvectiveWater)
class ZoneHVACCoolingPanelRadiantConvectiveWaterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACCoolingPanelRadiantConvectiveWaterVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACCoolingPanelRadiantConvectiveWaterVector

# Register ZoneHVACCoolingPanelRadiantConvectiveWaterVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWaterVector_swigregister(ZoneHVACCoolingPanelRadiantConvectiveWaterVector)
class OptionalZoneHVACCoolingPanelRadiantConvectiveWater(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACCoolingPanelRadiantConvectiveWater_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACCoolingPanelRadiantConvectiveWater(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACCoolingPanelRadiantConvectiveWater_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACCoolingPanelRadiantConvectiveWater___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACCoolingPanelRadiantConvectiveWater___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACCoolingPanelRadiantConvectiveWater_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACCoolingPanelRadiantConvectiveWater_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACCoolingPanelRadiantConvectiveWater_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACCoolingPanelRadiantConvectiveWater_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACCoolingPanelRadiantConvectiveWater_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACCoolingPanelRadiantConvectiveWater_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACCoolingPanelRadiantConvectiveWater

# Register OptionalZoneHVACCoolingPanelRadiantConvectiveWater in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACCoolingPanelRadiantConvectiveWater_swigregister(OptionalZoneHVACCoolingPanelRadiantConvectiveWater)
class ZoneHVACDehumidifierDXVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACDehumidifierDXVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACDehumidifierDXVector

# Register ZoneHVACDehumidifierDXVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACDehumidifierDXVector_swigregister(ZoneHVACDehumidifierDXVector)
class OptionalZoneHVACDehumidifierDX(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACDehumidifierDX(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACDehumidifierDX

# Register OptionalZoneHVACDehumidifierDX in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACDehumidifierDX_swigregister(OptionalZoneHVACDehumidifierDX)
class ZoneHVACEnergyRecoveryVentilatorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACEnergyRecoveryVentilatorVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACEnergyRecoveryVentilatorVector

# Register ZoneHVACEnergyRecoveryVentilatorVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorVector_swigregister(ZoneHVACEnergyRecoveryVentilatorVector)
class OptionalZoneHVACEnergyRecoveryVentilator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACEnergyRecoveryVentilator(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACEnergyRecoveryVentilator

# Register OptionalZoneHVACEnergyRecoveryVentilator in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilator_swigregister(OptionalZoneHVACEnergyRecoveryVentilator)
class ZoneHVACEnergyRecoveryVentilatorControllerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACEnergyRecoveryVentilatorControllerVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACEnergyRecoveryVentilatorControllerVector

# Register ZoneHVACEnergyRecoveryVentilatorControllerVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorControllerVector_swigregister(ZoneHVACEnergyRecoveryVentilatorControllerVector)
class OptionalZoneHVACEnergyRecoveryVentilatorController(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACEnergyRecoveryVentilatorController(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACEnergyRecoveryVentilatorController

# Register OptionalZoneHVACEnergyRecoveryVentilatorController in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACEnergyRecoveryVentilatorController_swigregister(OptionalZoneHVACEnergyRecoveryVentilatorController)
class ZoneHVACFourPipeFanCoilVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACFourPipeFanCoilVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACFourPipeFanCoilVector

# Register ZoneHVACFourPipeFanCoilVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACFourPipeFanCoilVector_swigregister(ZoneHVACFourPipeFanCoilVector)
class OptionalZoneHVACFourPipeFanCoil(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACFourPipeFanCoil(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACFourPipeFanCoil

# Register OptionalZoneHVACFourPipeFanCoil in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACFourPipeFanCoil_swigregister(OptionalZoneHVACFourPipeFanCoil)
class ZoneHVACHighTemperatureRadiantVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACHighTemperatureRadiantVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACHighTemperatureRadiantVector

# Register ZoneHVACHighTemperatureRadiantVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiantVector_swigregister(ZoneHVACHighTemperatureRadiantVector)
class OptionalZoneHVACHighTemperatureRadiant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACHighTemperatureRadiant(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACHighTemperatureRadiant

# Register OptionalZoneHVACHighTemperatureRadiant in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACHighTemperatureRadiant_swigregister(OptionalZoneHVACHighTemperatureRadiant)
class ZoneHVACIdealLoadsAirSystemVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACIdealLoadsAirSystemVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACIdealLoadsAirSystemVector

# Register ZoneHVACIdealLoadsAirSystemVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystemVector_swigregister(ZoneHVACIdealLoadsAirSystemVector)
class OptionalZoneHVACIdealLoadsAirSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACIdealLoadsAirSystem(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACIdealLoadsAirSystem

# Register OptionalZoneHVACIdealLoadsAirSystem in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACIdealLoadsAirSystem_swigregister(OptionalZoneHVACIdealLoadsAirSystem)
class ZoneHVACLowTemperatureRadiantElectricVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACLowTemperatureRadiantElectricVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACLowTemperatureRadiantElectricVector

# Register ZoneHVACLowTemperatureRadiantElectricVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectricVector_swigregister(ZoneHVACLowTemperatureRadiantElectricVector)
class OptionalZoneHVACLowTemperatureRadiantElectric(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACLowTemperatureRadiantElectric(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACLowTemperatureRadiantElectric

# Register OptionalZoneHVACLowTemperatureRadiantElectric in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACLowTemperatureRadiantElectric_swigregister(OptionalZoneHVACLowTemperatureRadiantElectric)
class ZoneHVACLowTempRadiantConstFlowVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACLowTempRadiantConstFlowVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACLowTempRadiantConstFlowVector

# Register ZoneHVACLowTempRadiantConstFlowVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlowVector_swigregister(ZoneHVACLowTempRadiantConstFlowVector)
class OptionalZoneHVACLowTempRadiantConstFlow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACLowTempRadiantConstFlow(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACLowTempRadiantConstFlow

# Register OptionalZoneHVACLowTempRadiantConstFlow in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantConstFlow_swigregister(OptionalZoneHVACLowTempRadiantConstFlow)
class ZoneHVACLowTempRadiantVarFlowVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACLowTempRadiantVarFlowVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACLowTempRadiantVarFlowVector

# Register ZoneHVACLowTempRadiantVarFlowVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlowVector_swigregister(ZoneHVACLowTempRadiantVarFlowVector)
class OptionalZoneHVACLowTempRadiantVarFlow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACLowTempRadiantVarFlow(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACLowTempRadiantVarFlow

# Register OptionalZoneHVACLowTempRadiantVarFlow in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACLowTempRadiantVarFlow_swigregister(OptionalZoneHVACLowTempRadiantVarFlow)
class ZoneHVACPackagedTerminalHeatPumpVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACPackagedTerminalHeatPumpVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACPackagedTerminalHeatPumpVector

# Register ZoneHVACPackagedTerminalHeatPumpVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPumpVector_swigregister(ZoneHVACPackagedTerminalHeatPumpVector)
class OptionalZoneHVACPackagedTerminalHeatPump(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACPackagedTerminalHeatPump(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACPackagedTerminalHeatPump

# Register OptionalZoneHVACPackagedTerminalHeatPump in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalHeatPump_swigregister(OptionalZoneHVACPackagedTerminalHeatPump)
class ZoneHVACPackagedTerminalAirConditionerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACPackagedTerminalAirConditionerVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACPackagedTerminalAirConditionerVector

# Register ZoneHVACPackagedTerminalAirConditionerVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditionerVector_swigregister(ZoneHVACPackagedTerminalAirConditionerVector)
class OptionalZoneHVACPackagedTerminalAirConditioner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACPackagedTerminalAirConditioner(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACPackagedTerminalAirConditioner

# Register OptionalZoneHVACPackagedTerminalAirConditioner in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACPackagedTerminalAirConditioner_swigregister(OptionalZoneHVACPackagedTerminalAirConditioner)
class ZoneHVACTerminalUnitVariableRefrigerantFlowVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACTerminalUnitVariableRefrigerantFlowVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACTerminalUnitVariableRefrigerantFlowVector

# Register ZoneHVACTerminalUnitVariableRefrigerantFlowVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlowVector_swigregister(ZoneHVACTerminalUnitVariableRefrigerantFlowVector)
class OptionalZoneHVACTerminalUnitVariableRefrigerantFlow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACTerminalUnitVariableRefrigerantFlow(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACTerminalUnitVariableRefrigerantFlow

# Register OptionalZoneHVACTerminalUnitVariableRefrigerantFlow in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACTerminalUnitVariableRefrigerantFlow_swigregister(OptionalZoneHVACTerminalUnitVariableRefrigerantFlow)
class ZoneHVACUnitHeaterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACUnitHeaterVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACUnitHeaterVector

# Register ZoneHVACUnitHeaterVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACUnitHeaterVector_swigregister(ZoneHVACUnitHeaterVector)
class OptionalZoneHVACUnitHeater(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACUnitHeater(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACUnitHeater

# Register OptionalZoneHVACUnitHeater in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACUnitHeater_swigregister(OptionalZoneHVACUnitHeater)
class ZoneHVACUnitVentilatorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACUnitVentilatorVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACUnitVentilatorVector

# Register ZoneHVACUnitVentilatorVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACUnitVentilatorVector_swigregister(ZoneHVACUnitVentilatorVector)
class OptionalZoneHVACUnitVentilator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACUnitVentilator(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACUnitVentilator

# Register OptionalZoneHVACUnitVentilator in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACUnitVentilator_swigregister(OptionalZoneHVACUnitVentilator)
class ZoneHVACWaterToAirHeatPumpVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___bool__(self)

    def __len__(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_pop(self)

    def append(self, x):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_append(self, x)

    def empty(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_empty(self)

    def size(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_size(self)

    def swap(self, v):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_swap(self, v)

    def begin(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_begin(self)

    def end(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_end(self)

    def rbegin(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_rbegin(self)

    def rend(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_rend(self)

    def clear(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACWaterToAirHeatPumpVector(*args))

    def push_back(self, x):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_push_back(self, x)

    def front(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_front(self)

    def back(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_capacity(self)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACWaterToAirHeatPumpVector

# Register ZoneHVACWaterToAirHeatPumpVector in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPumpVector_swigregister(ZoneHVACWaterToAirHeatPumpVector)
class OptionalZoneHVACWaterToAirHeatPump(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_swiginit(self, _openstudiomodelzonehvac.new_OptionalZoneHVACWaterToAirHeatPump(*args))

    def reset(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_reset(self)

    def __nonzero__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump___ref__(self)

    def is_initialized(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_is_initialized(self)

    def isNull(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_isNull(self)

    def empty(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_empty(self)

    def get(self):
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_get(self)

    def set(self, t):
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelzonehvac.delete_OptionalZoneHVACWaterToAirHeatPump

# Register OptionalZoneHVACWaterToAirHeatPump in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.OptionalZoneHVACWaterToAirHeatPump_swigregister(OptionalZoneHVACWaterToAirHeatPump)
class AirLoopHVACUnitarySystem(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_AirLoopHVACUnitarySystem

    def __init__(self, *args):
        _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_swiginit(self, _openstudiomodelzonehvac.new_AirLoopHVACUnitarySystem(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_iddObjectType()

    @staticmethod
    def controlTypeValues():
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_controlTypeValues()

    @staticmethod
    def dehumidificationControlTypeValues():
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_dehumidificationControlTypeValues()

    @staticmethod
    def fanPlacementValues():
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fanPlacementValues()

    @staticmethod
    def latentLoadControlValues():
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_latentLoadControlValues()

    @staticmethod
    def supplyAirFlowRateMethodDuringCoolingOperationValues():
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringCoolingOperationValues()

    @staticmethod
    def supplyAirFlowRateMethodDuringHeatingOperationValues():
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringHeatingOperationValues()

    @staticmethod
    def supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequiredValues():
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequiredValues()

    def controlType(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_controlType(self)

    def isControlTypeDefaulted(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isControlTypeDefaulted(self)

    def controllingZoneorThermostatLocation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_controllingZoneorThermostatLocation(self)

    def dehumidificationControlType(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_dehumidificationControlType(self)

    def isDehumidificationControlTypeDefaulted(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isDehumidificationControlTypeDefaulted(self)

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_availabilitySchedule(self)

    def supplyFan(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyFan(self)

    def fanPlacement(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fanPlacement(self)

    def supplyAirFanOperatingModeSchedule(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFanOperatingModeSchedule(self)

    def heatingCoil(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_heatingCoil(self)

    def dXHeatingCoilSizingRatio(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_dXHeatingCoilSizingRatio(self)

    def isDXHeatingCoilSizingRatioDefaulted(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isDXHeatingCoilSizingRatioDefaulted(self)

    def coolingCoil(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_coolingCoil(self)

    def useDOASDXCoolingCoil(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_useDOASDXCoolingCoil(self)

    def isUseDOASDXCoolingCoilDefaulted(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isUseDOASDXCoolingCoilDefaulted(self)

    def dOASDXCoolingCoilLeavingMinimumAirTemperature(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_dOASDXCoolingCoilLeavingMinimumAirTemperature(self)

    def isDOASDXCoolingCoilLeavingMinimumAirTemperatureDefaulted(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isDOASDXCoolingCoilLeavingMinimumAirTemperatureDefaulted(self)

    def isDOASDXCoolingCoilLeavingMinimumAirTemperatureAutosized(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isDOASDXCoolingCoilLeavingMinimumAirTemperatureAutosized(self)

    def latentLoadControl(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_latentLoadControl(self)

    def isLatentLoadControlDefaulted(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isLatentLoadControlDefaulted(self)

    def supplementalHeatingCoil(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplementalHeatingCoil(self)

    def supplyAirFlowRateMethodDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringCoolingOperation(self)

    def supplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateDuringCoolingOperation(self)

    def isSupplyAirFlowRateDuringCoolingOperationAutosized(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isSupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def supplyAirFlowRatePerFloorAreaDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRatePerFloorAreaDuringCoolingOperation(self)

    def fractionofAutosizedDesignCoolingSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fractionofAutosizedDesignCoolingSupplyAirFlowRate(self)

    def designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation(self)

    def supplyAirFlowRateMethodDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodDuringHeatingOperation(self)

    def supplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateDuringHeatingOperation(self)

    def isSupplyAirFlowRateDuringHeatingOperationAutosized(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isSupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def supplyAirFlowRatePerFloorAreaduringHeatingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRatePerFloorAreaduringHeatingOperation(self)

    def fractionofAutosizedDesignHeatingSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fractionofAutosizedDesignHeatingSupplyAirFlowRate(self)

    def designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation(self)

    def supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateMethodWhenNoCoolingorHeatingisRequired(self)

    def supplyAirFlowRateWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def isSupplyAirFlowRateWhenNoCoolingorHeatingisRequiredAutosized(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isSupplyAirFlowRateWhenNoCoolingorHeatingisRequiredAutosized(self)

    def supplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_supplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired(self)

    def fractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def fractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired(self)

    def designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired(self)

    def noLoadSupplyAirFlowRateControlSetToLowSpeed(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_noLoadSupplyAirFlowRateControlSetToLowSpeed(self)

    def maximumSupplyAirTemperature(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_maximumSupplyAirTemperature(self)

    def isMaximumSupplyAirTemperatureDefaulted(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isMaximumSupplyAirTemperatureDefaulted(self)

    def isMaximumSupplyAirTemperatureAutosized(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isMaximumSupplyAirTemperatureAutosized(self)

    def maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def isMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperationDefaulted(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperationDefaulted(self)

    def outdoorDryBulbTemperatureSensorNodeName(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_outdoorDryBulbTemperatureSensorNodeName(self)

    def maximumCyclingRate(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_maximumCyclingRate(self)

    def isMaximumCyclingRateDefaulted(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isMaximumCyclingRateDefaulted(self)

    def heatPumpTimeConstant(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_heatPumpTimeConstant(self)

    def isHeatPumpTimeConstantDefaulted(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isHeatPumpTimeConstantDefaulted(self)

    def fractionofOnCyclePowerUse(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_fractionofOnCyclePowerUse(self)

    def isFractionofOnCyclePowerUseDefaulted(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isFractionofOnCyclePowerUseDefaulted(self)

    def heatPumpFanDelayTime(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_heatPumpFanDelayTime(self)

    def isHeatPumpFanDelayTimeDefaulted(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isHeatPumpFanDelayTimeDefaulted(self)

    def ancilliaryOnCycleElectricPower(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_ancilliaryOnCycleElectricPower(self)

    def isAncilliaryOnCycleElectricPowerDefaulted(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isAncilliaryOnCycleElectricPowerDefaulted(self)

    def ancilliaryOffCycleElectricPower(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_ancilliaryOffCycleElectricPower(self)

    def isAncilliaryOffCycleElectricPowerDefaulted(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_isAncilliaryOffCycleElectricPowerDefaulted(self)

    def designSpecificationMultispeedObject(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_designSpecificationMultispeedObject(self)

    def setControlType(self, controlType):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setControlType(self, controlType)

    def resetControlType(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetControlType(self)

    def setControllingZoneorThermostatLocation(self, thermalZone):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setControllingZoneorThermostatLocation(self, thermalZone)

    def resetControllingZoneorThermostatLocation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetControllingZoneorThermostatLocation(self)

    def setDehumidificationControlType(self, dehumidificationControlType):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDehumidificationControlType(self, dehumidificationControlType)

    def resetDehumidificationControlType(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDehumidificationControlType(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetAvailabilitySchedule(self)

    def setSupplyFan(self, supplyFan):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyFan(self, supplyFan)

    def resetSupplyFan(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyFan(self)

    def setFanPlacement(self, fanPlacement):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setFanPlacement(self, fanPlacement)

    def resetFanPlacement(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetFanPlacement(self)

    def setSupplyAirFanOperatingModeSchedule(self, schedule):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def resetSupplyAirFanOperatingModeSchedule(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFanOperatingModeSchedule(self)

    def setHeatingCoil(self, heatingCoil):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setHeatingCoil(self, heatingCoil)

    def resetHeatingCoil(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetHeatingCoil(self)

    def setDXHeatingCoilSizingRatio(self, dXHeatingCoilSizingRatio):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDXHeatingCoilSizingRatio(self, dXHeatingCoilSizingRatio)

    def resetDXHeatingCoilSizingRatio(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDXHeatingCoilSizingRatio(self)

    def setCoolingCoil(self, coolingCoil):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setCoolingCoil(self, coolingCoil)

    def resetCoolingCoil(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetCoolingCoil(self)

    def setUseDOASDXCoolingCoil(self, useDOASDXCoolingCoil):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setUseDOASDXCoolingCoil(self, useDOASDXCoolingCoil)

    def resetUseDOASDXCoolingCoil(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetUseDOASDXCoolingCoil(self)

    def setDOASDXCoolingCoilLeavingMinimumAirTemperature(self, dOASDXCoolingCoilLeavingMinimumAirTemperature):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDOASDXCoolingCoilLeavingMinimumAirTemperature(self, dOASDXCoolingCoilLeavingMinimumAirTemperature)

    def autosizeDOASDXCoolingCoilLeavingMinimumAirTemperature(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizeDOASDXCoolingCoilLeavingMinimumAirTemperature(self)

    def resetDOASDXCoolingCoilLeavingMinimumAirTemperature(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDOASDXCoolingCoilLeavingMinimumAirTemperature(self)

    def setLatentLoadControl(self, latentLoadControl):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setLatentLoadControl(self, latentLoadControl)

    def resetLatentLoadControl(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetLatentLoadControl(self)

    def setSupplementalHeatingCoil(self, supplementalHeatingCoil):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplementalHeatingCoil(self, supplementalHeatingCoil)

    def resetSupplementalHeatingCoil(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplementalHeatingCoil(self)

    def setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation)

    def autosizeSupplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizeSupplyAirFlowRateDuringCoolingOperation(self)

    def setSupplyAirFlowRatePerFloorAreaDuringCoolingOperation(self, supplyAirFlowRatePerFloorAreaDuringCoolingOperation):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRatePerFloorAreaDuringCoolingOperation(self, supplyAirFlowRatePerFloorAreaDuringCoolingOperation)

    def setFractionofAutosizedDesignCoolingSupplyAirFlowRate(self, fractionofAutosizedDesignCoolingSupplyAirFlowRate):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setFractionofAutosizedDesignCoolingSupplyAirFlowRate(self, fractionofAutosizedDesignCoolingSupplyAirFlowRate)

    def setDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation(self, designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation(self, designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation)

    def setSupplyAirFlowRateMethodDuringCoolingOperation(self, supplyAirFlowRateMethodDuringCoolingOperation):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRateMethodDuringCoolingOperation(self, supplyAirFlowRateMethodDuringCoolingOperation)

    def resetSupplyAirFlowRateMethodDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRateMethodDuringCoolingOperation(self)

    def resetSupplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRateDuringCoolingOperation(self)

    def resetSupplyAirFlowRatePerFloorAreaDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRatePerFloorAreaDuringCoolingOperation(self)

    def resetFractionofAutosizedDesignCoolingSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetFractionofAutosizedDesignCoolingSupplyAirFlowRate(self)

    def resetDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperation(self)

    def setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation)

    def autosizeSupplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizeSupplyAirFlowRateDuringHeatingOperation(self)

    def setSupplyAirFlowRatePerFloorAreaduringHeatingOperation(self, supplyAirFlowRatePerFloorAreaduringHeatingOperation):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRatePerFloorAreaduringHeatingOperation(self, supplyAirFlowRatePerFloorAreaduringHeatingOperation)

    def setFractionofAutosizedDesignHeatingSupplyAirFlowRate(self, fractionofAutosizedDesignHeatingSupplyAirFlowRate):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setFractionofAutosizedDesignHeatingSupplyAirFlowRate(self, fractionofAutosizedDesignHeatingSupplyAirFlowRate)

    def setDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation(self, designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation(self, designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation)

    def setSupplyAirFlowRateMethodDuringHeatingOperation(self, supplyAirFlowRateMethodDuringHeatingOperation):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRateMethodDuringHeatingOperation(self, supplyAirFlowRateMethodDuringHeatingOperation)

    def resetSupplyAirFlowRateMethodDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRateMethodDuringHeatingOperation(self)

    def resetSupplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRateDuringHeatingOperation(self)

    def resetSupplyAirFlowRatePerFloorAreaduringHeatingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRatePerFloorAreaduringHeatingOperation(self)

    def resetFractionofAutosizedDesignHeatingSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetFractionofAutosizedDesignHeatingSupplyAirFlowRate(self)

    def resetDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperation(self)

    def resetSupplyAirFlowRateMethodWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRateMethodWhenNoCoolingorHeatingisRequired(self)

    def setSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self, supplyAirFlowRateWhenNoCoolingorHeatingisRequired):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self, supplyAirFlowRateWhenNoCoolingorHeatingisRequired)

    def autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def setSupplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired(self, supplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired(self, supplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired)

    def setFractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self, fractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setFractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self, fractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired)

    def setFractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self, fractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setFractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self, fractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired)

    def setDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired(self, designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired(self, designSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired)

    def setDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired(self, designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired(self, designSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired)

    def setNoLoadSupplyAirFlowRateControlSetToLowSpeed(self, noLoadSupplyAirFlowRateControlSetToLowSpeed):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setNoLoadSupplyAirFlowRateControlSetToLowSpeed(self, noLoadSupplyAirFlowRateControlSetToLowSpeed)

    def setSupplyAirFlowRateMethodWhenNoCoolingorHeatingisRequired(self, noCoolHeatMethod):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setSupplyAirFlowRateMethodWhenNoCoolingorHeatingisRequired(self, noCoolHeatMethod)

    def resetSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def resetSupplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetSupplyAirFlowRatePerFloorAreaWhenNoCoolingorHeatingisRequired(self)

    def resetFractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetFractionofAutosizedDesignCoolingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def resetFractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetFractionofAutosizedDesignHeatingSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def resetDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDesignSupplyAirFlowRatePerUnitofCapacityDuringCoolingOperationWhenNoCoolingorHeatingisRequired(self)

    def resetDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDesignSupplyAirFlowRatePerUnitofCapacityDuringHeatingOperationWhenNoCoolingorHeatingisRequired(self)

    def setMaximumSupplyAirTemperature(self, maximumSupplyAirTemperature):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setMaximumSupplyAirTemperature(self, maximumSupplyAirTemperature)

    def resetMaximumSupplyAirTemperature(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetMaximumSupplyAirTemperature(self)

    def autosizeMaximumSupplyAirTemperature(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizeMaximumSupplyAirTemperature(self)

    def setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation)

    def resetMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def setOutdoorDryBulbTemperatureSensorNodeName(self, outdoorDryBulbTemperatureSensorNodeName):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setOutdoorDryBulbTemperatureSensorNodeName(self, outdoorDryBulbTemperatureSensorNodeName)

    def resetOutdoorDryBulbTemperatureSensorNodeName(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetOutdoorDryBulbTemperatureSensorNodeName(self)

    def setMaximumCyclingRate(self, maximumCyclingRate):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setMaximumCyclingRate(self, maximumCyclingRate)

    def resetMaximumCyclingRate(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetMaximumCyclingRate(self)

    def setHeatPumpTimeConstant(self, heatPumpTimeConstant):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setHeatPumpTimeConstant(self, heatPumpTimeConstant)

    def resetHeatPumpTimeConstant(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetHeatPumpTimeConstant(self)

    def setFractionofOnCyclePowerUse(self, fractionofOnCyclePowerUse):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setFractionofOnCyclePowerUse(self, fractionofOnCyclePowerUse)

    def resetFractionofOnCyclePowerUse(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetFractionofOnCyclePowerUse(self)

    def setHeatPumpFanDelayTime(self, heatPumpFanDelayTime):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setHeatPumpFanDelayTime(self, heatPumpFanDelayTime)

    def resetHeatPumpFanDelayTime(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetHeatPumpFanDelayTime(self)

    def setAncilliaryOnCycleElectricPower(self, ancilliaryOnCycleElectricPower):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setAncilliaryOnCycleElectricPower(self, ancilliaryOnCycleElectricPower)

    def resetAncilliaryOnCycleElectricPower(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetAncilliaryOnCycleElectricPower(self)

    def setAncilliaryOffCycleElectricPower(self, ancilliaryOffCycleElectricPower):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setAncilliaryOffCycleElectricPower(self, ancilliaryOffCycleElectricPower)

    def resetAncilliaryOffCycleElectricPower(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetAncilliaryOffCycleElectricPower(self)

    def setDesignSpecificationMultispeedObject(self, unitarySystemPerformace):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_setDesignSpecificationMultispeedObject(self, unitarySystemPerformace)

    def resetDesignSpecificationMultispeedObject(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_resetDesignSpecificationMultispeedObject(self)

    def autosizedSupplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizedSupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedSupplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizedSupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisRequired(self)

    def autosizedMaximumSupplyAirTemperature(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizedMaximumSupplyAirTemperature(self)

    def autosizedDOASDXCoolingCoilLeavingMinimumAirTemperature(self):
        return _openstudiomodelzonehvac.AirLoopHVACUnitarySystem_autosizedDOASDXCoolingCoilLeavingMinimumAirTemperature(self)

# Register AirLoopHVACUnitarySystem in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.AirLoopHVACUnitarySystem_swigregister(AirLoopHVACUnitarySystem)

def toAirLoopHVACUnitarySystem(idfObject):
    return _openstudiomodelzonehvac.toAirLoopHVACUnitarySystem(idfObject)

def getAirLoopHVACUnitarySystem(t_model, t_handle):
    return _openstudiomodelzonehvac.getAirLoopHVACUnitarySystem(t_model, t_handle)

def getAirLoopHVACUnitarySystems(t_model):
    return _openstudiomodelzonehvac.getAirLoopHVACUnitarySystems(t_model)

def getAirLoopHVACUnitarySystemByName(t_model, t_name):
    return _openstudiomodelzonehvac.getAirLoopHVACUnitarySystemByName(t_model, t_name)

def getAirLoopHVACUnitarySystemsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getAirLoopHVACUnitarySystemsByName(t_model, t_name, t_exactMatch)

def _to_AirLoopHVACUnitarySystem(self) -> OptionalAirLoopHVACUnitarySystem:
    """Try to cast the ModelObject to a AirLoopHVACUnitarySystem.

    :return: An Optional AirLoopHVACUnitarySystem.
    """
    return toAirLoopHVACUnitarySystem(self)
openstudioutilitiesidf.IdfObject.to_AirLoopHVACUnitarySystem = _to_AirLoopHVACUnitarySystem

def _getAirLoopHVACUnitarySystem(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirLoopHVACUnitarySystem:
    """Try to get an object of type AirLoopHVACUnitarySystem referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirLoopHVACUnitarySystem.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirLoopHVACUnitarySystem(self, t_handle)
Model.getAirLoopHVACUnitarySystem = _getAirLoopHVACUnitarySystem

def _getAirLoopHVACUnitarySystems(self) -> AirLoopHVACUnitarySystemVector:
    """Get a vector of all objects of type AirLoopHVACUnitarySystem in the model.

    :return: A vector of AirLoopHVACUnitarySystem.
    """
    return getAirLoopHVACUnitarySystems(self)
Model.getAirLoopHVACUnitarySystems = _getAirLoopHVACUnitarySystems

def _getAirLoopHVACUnitarySystemByName(self, t_name: str) -> OptionalAirLoopHVACUnitarySystem:
    """Try to get an object of type AirLoopHVACUnitarySystem that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirLoopHVACUnitarySystem.
    """
    return getAirLoopHVACUnitarySystemByName(self, t_name)
Model.getAirLoopHVACUnitarySystemByName = _getAirLoopHVACUnitarySystemByName

def _getAirLoopHVACUnitarySystemsByName(self, t_name: str, t_exactMatch: bool) -> AirLoopHVACUnitarySystemVector:
    """Returns all objects of type AirLoopHVACUnitarySystem named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirLoopHVACUnitarySystemsByName(self, t_name, t_exactMatch)
Model.getAirLoopHVACUnitarySystemsByName = _getAirLoopHVACUnitarySystemsByName

class FanZoneExhaust(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_FanZoneExhaust

    def __init__(self, *args):
        _openstudiomodelzonehvac.FanZoneExhaust_swiginit(self, _openstudiomodelzonehvac.new_FanZoneExhaust(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.FanZoneExhaust_iddObjectType()

    @staticmethod
    def systemAvailabilityManagerCouplingModeValues():
        return _openstudiomodelzonehvac.FanZoneExhaust_systemAvailabilityManagerCouplingModeValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_availabilitySchedule(self)

    def fanTotalEfficiency(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_fanTotalEfficiency(self)

    def fanEfficiency(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_fanEfficiency(self)

    def pressureRise(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_pressureRise(self)

    def maximumFlowRate(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_maximumFlowRate(self)

    def endUseSubcategory(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_endUseSubcategory(self)

    def flowFractionSchedule(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_flowFractionSchedule(self)

    def systemAvailabilityManagerCouplingMode(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_systemAvailabilityManagerCouplingMode(self)

    def minimumZoneTemperatureLimitSchedule(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_minimumZoneTemperatureLimitSchedule(self)

    def balancedExhaustFractionSchedule(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_balancedExhaustFractionSchedule(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.FanZoneExhaust_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_resetAvailabilitySchedule(self)

    def setFanTotalEfficiency(self, fanTotalEfficiency):
        return _openstudiomodelzonehvac.FanZoneExhaust_setFanTotalEfficiency(self, fanTotalEfficiency)

    def setFanEfficiency(self, fanTotalEfficiency):
        return _openstudiomodelzonehvac.FanZoneExhaust_setFanEfficiency(self, fanTotalEfficiency)

    def setPressureRise(self, pressureRise):
        return _openstudiomodelzonehvac.FanZoneExhaust_setPressureRise(self, pressureRise)

    def setMaximumFlowRate(self, maximumFlowRate):
        return _openstudiomodelzonehvac.FanZoneExhaust_setMaximumFlowRate(self, maximumFlowRate)

    def resetMaximumFlowRate(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_resetMaximumFlowRate(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelzonehvac.FanZoneExhaust_setEndUseSubcategory(self, endUseSubcategory)

    def setFlowFractionSchedule(self, schedule):
        return _openstudiomodelzonehvac.FanZoneExhaust_setFlowFractionSchedule(self, schedule)

    def resetFlowFractionSchedule(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_resetFlowFractionSchedule(self)

    def setSystemAvailabilityManagerCouplingMode(self, systemAvailabilityManagerCouplingMode):
        return _openstudiomodelzonehvac.FanZoneExhaust_setSystemAvailabilityManagerCouplingMode(self, systemAvailabilityManagerCouplingMode)

    def setMinimumZoneTemperatureLimitSchedule(self, schedule):
        return _openstudiomodelzonehvac.FanZoneExhaust_setMinimumZoneTemperatureLimitSchedule(self, schedule)

    def resetMinimumZoneTemperatureLimitSchedule(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_resetMinimumZoneTemperatureLimitSchedule(self)

    def setBalancedExhaustFractionSchedule(self, schedule):
        return _openstudiomodelzonehvac.FanZoneExhaust_setBalancedExhaustFractionSchedule(self, schedule)

    def resetBalancedExhaustFractionSchedule(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_resetBalancedExhaustFractionSchedule(self)

    def getAirflowNetworkZoneExhaustFan(self, crack):
        return _openstudiomodelzonehvac.FanZoneExhaust_getAirflowNetworkZoneExhaustFan(self, crack)

    def airflowNetworkZoneExhaustFan(self):
        return _openstudiomodelzonehvac.FanZoneExhaust_airflowNetworkZoneExhaustFan(self)

# Register FanZoneExhaust in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.FanZoneExhaust_swigregister(FanZoneExhaust)

def toFanZoneExhaust(idfObject):
    return _openstudiomodelzonehvac.toFanZoneExhaust(idfObject)

def getFanZoneExhaust(t_model, t_handle):
    return _openstudiomodelzonehvac.getFanZoneExhaust(t_model, t_handle)

def getFanZoneExhausts(t_model):
    return _openstudiomodelzonehvac.getFanZoneExhausts(t_model)

def getFanZoneExhaustByName(t_model, t_name):
    return _openstudiomodelzonehvac.getFanZoneExhaustByName(t_model, t_name)

def getFanZoneExhaustsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getFanZoneExhaustsByName(t_model, t_name, t_exactMatch)

def _to_FanZoneExhaust(self) -> OptionalFanZoneExhaust:
    """Try to cast the ModelObject to a FanZoneExhaust.

    :return: An Optional FanZoneExhaust.
    """
    return toFanZoneExhaust(self)
openstudioutilitiesidf.IdfObject.to_FanZoneExhaust = _to_FanZoneExhaust

def _getFanZoneExhaust(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalFanZoneExhaust:
    """Try to get an object of type FanZoneExhaust referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional FanZoneExhaust.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getFanZoneExhaust(self, t_handle)
Model.getFanZoneExhaust = _getFanZoneExhaust

def _getFanZoneExhausts(self) -> FanZoneExhaustVector:
    """Get a vector of all objects of type FanZoneExhaust in the model.

    :return: A vector of FanZoneExhaust.
    """
    return getFanZoneExhausts(self)
Model.getFanZoneExhausts = _getFanZoneExhausts

def _getFanZoneExhaustByName(self, t_name: str) -> OptionalFanZoneExhaust:
    """Try to get an object of type FanZoneExhaust that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional FanZoneExhaust.
    """
    return getFanZoneExhaustByName(self, t_name)
Model.getFanZoneExhaustByName = _getFanZoneExhaustByName

def _getFanZoneExhaustsByName(self, t_name: str, t_exactMatch: bool) -> FanZoneExhaustVector:
    """Returns all objects of type FanZoneExhaust named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getFanZoneExhaustsByName(self, t_name, t_exactMatch)
Model.getFanZoneExhaustsByName = _getFanZoneExhaustsByName

class WaterHeaterHeatPump(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_WaterHeaterHeatPump

    def __init__(self, *args):
        _openstudiomodelzonehvac.WaterHeaterHeatPump_swiginit(self, _openstudiomodelzonehvac.new_WaterHeaterHeatPump(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_iddObjectType()

    @staticmethod
    def inletAirConfigurationValues():
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_inletAirConfigurationValues()

    @staticmethod
    def compressorLocationValues():
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_compressorLocationValues()

    @staticmethod
    def fanPlacementValues():
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_fanPlacementValues()

    @staticmethod
    def parasiticHeatRejectionLocationValues():
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_parasiticHeatRejectionLocationValues()

    @staticmethod
    def controlSensorLocationInStratifiedTankValues():
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_controlSensorLocationInStratifiedTankValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_availabilitySchedule(self)

    def compressorSetpointTemperatureSchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_compressorSetpointTemperatureSchedule(self)

    def deadBandTemperatureDifference(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_deadBandTemperatureDifference(self)

    def condenserWaterFlowRate(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_condenserWaterFlowRate(self)

    def isCondenserWaterFlowRateAutosized(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_isCondenserWaterFlowRateAutosized(self)

    def evaporatorAirFlowRate(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_evaporatorAirFlowRate(self)

    def isEvaporatorAirFlowRateAutosized(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_isEvaporatorAirFlowRateAutosized(self)

    def inletAirConfiguration(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_inletAirConfiguration(self)

    def inletAirTemperatureSchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_inletAirTemperatureSchedule(self)

    def inletAirHumiditySchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_inletAirHumiditySchedule(self)

    def tank(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_tank(self)

    def dXCoil(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_dXCoil(self)

    def minimumInletAirTemperatureforCompressorOperation(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_minimumInletAirTemperatureforCompressorOperation(self)

    def maximumInletAirTemperatureforCompressorOperation(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_maximumInletAirTemperatureforCompressorOperation(self)

    def compressorLocation(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_compressorLocation(self)

    def compressorAmbientTemperatureSchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_compressorAmbientTemperatureSchedule(self)

    def fan(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_fan(self)

    def fanPlacement(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_fanPlacement(self)

    def onCycleParasiticElectricLoad(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_onCycleParasiticElectricLoad(self)

    def offCycleParasiticElectricLoad(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_offCycleParasiticElectricLoad(self)

    def parasiticHeatRejectionLocation(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_parasiticHeatRejectionLocation(self)

    def inletAirMixerSchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_inletAirMixerSchedule(self)

    def controlSensorLocationInStratifiedTank(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_controlSensorLocationInStratifiedTank(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_resetAvailabilitySchedule(self)

    def setCompressorSetpointTemperatureSchedule(self, schedule):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setCompressorSetpointTemperatureSchedule(self, schedule)

    def setDeadBandTemperatureDifference(self, deadBandTemperatureDifference):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setDeadBandTemperatureDifference(self, deadBandTemperatureDifference)

    def setCondenserWaterFlowRate(self, condenserWaterFlowRate):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setCondenserWaterFlowRate(self, condenserWaterFlowRate)

    def resetCondenserWaterFlowRate(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_resetCondenserWaterFlowRate(self)

    def autosizeCondenserWaterFlowRate(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_autosizeCondenserWaterFlowRate(self)

    def setEvaporatorAirFlowRate(self, evaporatorAirFlowRate):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setEvaporatorAirFlowRate(self, evaporatorAirFlowRate)

    def resetEvaporatorAirFlowRate(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_resetEvaporatorAirFlowRate(self)

    def autosizeEvaporatorAirFlowRate(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_autosizeEvaporatorAirFlowRate(self)

    def setInletAirConfiguration(self, inletAirConfiguration):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setInletAirConfiguration(self, inletAirConfiguration)

    def setInletAirTemperatureSchedule(self, schedule):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setInletAirTemperatureSchedule(self, schedule)

    def resetInletAirTemperatureSchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_resetInletAirTemperatureSchedule(self)

    def setInletAirHumiditySchedule(self, schedule):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setInletAirHumiditySchedule(self, schedule)

    def resetInletAirHumiditySchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_resetInletAirHumiditySchedule(self)

    def setTank(self, waterHeater):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setTank(self, waterHeater)

    def setDXCoil(self, coil):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setDXCoil(self, coil)

    def setMinimumInletAirTemperatureforCompressorOperation(self, minimumInletAirTemperatureforCompressorOperation):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setMinimumInletAirTemperatureforCompressorOperation(self, minimumInletAirTemperatureforCompressorOperation)

    def setMaximumInletAirTemperatureforCompressorOperation(self, maximumInletAirTemperatureforCompressorOperation):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setMaximumInletAirTemperatureforCompressorOperation(self, maximumInletAirTemperatureforCompressorOperation)

    def setCompressorLocation(self, compressorLocation):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setCompressorLocation(self, compressorLocation)

    def setCompressorAmbientTemperatureSchedule(self, schedule):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setCompressorAmbientTemperatureSchedule(self, schedule)

    def resetCompressorAmbientTemperatureSchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_resetCompressorAmbientTemperatureSchedule(self)

    def setFan(self, fan):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setFan(self, fan)

    def setFanPlacement(self, fanPlacement):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setFanPlacement(self, fanPlacement)

    def setOnCycleParasiticElectricLoad(self, onCycleParasiticElectricLoad):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setOnCycleParasiticElectricLoad(self, onCycleParasiticElectricLoad)

    def setOffCycleParasiticElectricLoad(self, offCycleParasiticElectricLoad):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setOffCycleParasiticElectricLoad(self, offCycleParasiticElectricLoad)

    def setParasiticHeatRejectionLocation(self, parasiticHeatRejectionLocation):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setParasiticHeatRejectionLocation(self, parasiticHeatRejectionLocation)

    def setInletAirMixerSchedule(self, schedule):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setInletAirMixerSchedule(self, schedule)

    def setControlSensorLocationInStratifiedTank(self, controlSensorLocationInStratifiedTank):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_setControlSensorLocationInStratifiedTank(self, controlSensorLocationInStratifiedTank)

    def autosizedCondenserWaterFlowRate(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_autosizedCondenserWaterFlowRate(self)

    def autosizedEvaporatorAirFlowRate(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPump_autosizedEvaporatorAirFlowRate(self)

# Register WaterHeaterHeatPump in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.WaterHeaterHeatPump_swigregister(WaterHeaterHeatPump)

def toWaterHeaterHeatPump(idfObject):
    return _openstudiomodelzonehvac.toWaterHeaterHeatPump(idfObject)

def getWaterHeaterHeatPump(t_model, t_handle):
    return _openstudiomodelzonehvac.getWaterHeaterHeatPump(t_model, t_handle)

def getWaterHeaterHeatPumps(t_model):
    return _openstudiomodelzonehvac.getWaterHeaterHeatPumps(t_model)

def getWaterHeaterHeatPumpByName(t_model, t_name):
    return _openstudiomodelzonehvac.getWaterHeaterHeatPumpByName(t_model, t_name)

def getWaterHeaterHeatPumpsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getWaterHeaterHeatPumpsByName(t_model, t_name, t_exactMatch)

def _to_WaterHeaterHeatPump(self) -> OptionalWaterHeaterHeatPump:
    """Try to cast the ModelObject to a WaterHeaterHeatPump.

    :return: An Optional WaterHeaterHeatPump.
    """
    return toWaterHeaterHeatPump(self)
openstudioutilitiesidf.IdfObject.to_WaterHeaterHeatPump = _to_WaterHeaterHeatPump

def _getWaterHeaterHeatPump(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalWaterHeaterHeatPump:
    """Try to get an object of type WaterHeaterHeatPump referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional WaterHeaterHeatPump.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getWaterHeaterHeatPump(self, t_handle)
Model.getWaterHeaterHeatPump = _getWaterHeaterHeatPump

def _getWaterHeaterHeatPumps(self) -> WaterHeaterHeatPumpVector:
    """Get a vector of all objects of type WaterHeaterHeatPump in the model.

    :return: A vector of WaterHeaterHeatPump.
    """
    return getWaterHeaterHeatPumps(self)
Model.getWaterHeaterHeatPumps = _getWaterHeaterHeatPumps

def _getWaterHeaterHeatPumpByName(self, t_name: str) -> OptionalWaterHeaterHeatPump:
    """Try to get an object of type WaterHeaterHeatPump that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional WaterHeaterHeatPump.
    """
    return getWaterHeaterHeatPumpByName(self, t_name)
Model.getWaterHeaterHeatPumpByName = _getWaterHeaterHeatPumpByName

def _getWaterHeaterHeatPumpsByName(self, t_name: str, t_exactMatch: bool) -> WaterHeaterHeatPumpVector:
    """Returns all objects of type WaterHeaterHeatPump named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getWaterHeaterHeatPumpsByName(self, t_name, t_exactMatch)
Model.getWaterHeaterHeatPumpsByName = _getWaterHeaterHeatPumpsByName

class WaterHeaterHeatPumpWrappedCondenser(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_WaterHeaterHeatPumpWrappedCondenser

    def __init__(self, *args):
        _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_swiginit(self, _openstudiomodelzonehvac.new_WaterHeaterHeatPumpWrappedCondenser(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_iddObjectType()

    @staticmethod
    def inletAirConfigurationValues():
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_inletAirConfigurationValues()

    @staticmethod
    def compressorLocationValues():
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_compressorLocationValues()

    @staticmethod
    def fanPlacementValues():
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_fanPlacementValues()

    @staticmethod
    def parasiticHeatRejectionLocationValues():
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_parasiticHeatRejectionLocationValues()

    @staticmethod
    def tankElementControlLogicValues():
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_tankElementControlLogicValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_availabilitySchedule(self)

    def compressorSetpointTemperatureSchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_compressorSetpointTemperatureSchedule(self)

    def deadBandTemperatureDifference(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_deadBandTemperatureDifference(self)

    def condenserBottomLocation(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_condenserBottomLocation(self)

    def condenserTopLocation(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_condenserTopLocation(self)

    def evaporatorAirFlowRate(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_evaporatorAirFlowRate(self)

    def isEvaporatorAirFlowRateAutocalculated(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_isEvaporatorAirFlowRateAutocalculated(self)

    def inletAirConfiguration(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_inletAirConfiguration(self)

    def inletAirTemperatureSchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_inletAirTemperatureSchedule(self)

    def inletAirHumiditySchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_inletAirHumiditySchedule(self)

    def tank(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_tank(self)

    def dXCoil(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_dXCoil(self)

    def minimumInletAirTemperatureforCompressorOperation(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_minimumInletAirTemperatureforCompressorOperation(self)

    def maximumInletAirTemperatureforCompressorOperation(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_maximumInletAirTemperatureforCompressorOperation(self)

    def compressorLocation(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_compressorLocation(self)

    def compressorAmbientTemperatureSchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_compressorAmbientTemperatureSchedule(self)

    def fan(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_fan(self)

    def fanPlacement(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_fanPlacement(self)

    def onCycleParasiticElectricLoad(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_onCycleParasiticElectricLoad(self)

    def offCycleParasiticElectricLoad(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_offCycleParasiticElectricLoad(self)

    def parasiticHeatRejectionLocation(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_parasiticHeatRejectionLocation(self)

    def inletAirMixerSchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_inletAirMixerSchedule(self)

    def tankElementControlLogic(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_tankElementControlLogic(self)

    def controlSensor1HeightInStratifiedTank(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_controlSensor1HeightInStratifiedTank(self)

    def controlSensor1Weight(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_controlSensor1Weight(self)

    def controlSensor2HeightInStratifiedTank(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_controlSensor2HeightInStratifiedTank(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_resetAvailabilitySchedule(self)

    def setCompressorSetpointTemperatureSchedule(self, schedule):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setCompressorSetpointTemperatureSchedule(self, schedule)

    def setDeadBandTemperatureDifference(self, deadBandTemperatureDifference):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setDeadBandTemperatureDifference(self, deadBandTemperatureDifference)

    def setCondenserBottomLocation(self, condenserBottomLocation):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setCondenserBottomLocation(self, condenserBottomLocation)

    def setCondenserTopLocation(self, condenserTopLocation):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setCondenserTopLocation(self, condenserTopLocation)

    def setEvaporatorAirFlowRate(self, evaporatorAirFlowRate):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setEvaporatorAirFlowRate(self, evaporatorAirFlowRate)

    def autocalculateEvaporatorAirFlowRate(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_autocalculateEvaporatorAirFlowRate(self)

    def setInletAirConfiguration(self, inletAirConfiguration):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setInletAirConfiguration(self, inletAirConfiguration)

    def setInletAirTemperatureSchedule(self, schedule):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setInletAirTemperatureSchedule(self, schedule)

    def resetInletAirTemperatureSchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_resetInletAirTemperatureSchedule(self)

    def setInletAirHumiditySchedule(self, schedule):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setInletAirHumiditySchedule(self, schedule)

    def resetInletAirHumiditySchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_resetInletAirHumiditySchedule(self)

    def setTank(self, waterHeaterStratified):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setTank(self, waterHeaterStratified)

    def setDXCoil(self, heatPumpWaterHeaterDXCoilsWrapped):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setDXCoil(self, heatPumpWaterHeaterDXCoilsWrapped)

    def setMinimumInletAirTemperatureforCompressorOperation(self, minimumInletAirTemperatureforCompressorOperation):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setMinimumInletAirTemperatureforCompressorOperation(self, minimumInletAirTemperatureforCompressorOperation)

    def setMaximumInletAirTemperatureforCompressorOperation(self, maximumInletAirTemperatureforCompressorOperation):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setMaximumInletAirTemperatureforCompressorOperation(self, maximumInletAirTemperatureforCompressorOperation)

    def setCompressorLocation(self, compressorLocation):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setCompressorLocation(self, compressorLocation)

    def setCompressorAmbientTemperatureSchedule(self, schedule):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setCompressorAmbientTemperatureSchedule(self, schedule)

    def resetCompressorAmbientTemperatureSchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_resetCompressorAmbientTemperatureSchedule(self)

    def setFan(self, fansOnOff):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setFan(self, fansOnOff)

    def setFanPlacement(self, fanPlacement):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setFanPlacement(self, fanPlacement)

    def setOnCycleParasiticElectricLoad(self, onCycleParasiticElectricLoad):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setOnCycleParasiticElectricLoad(self, onCycleParasiticElectricLoad)

    def setOffCycleParasiticElectricLoad(self, offCycleParasiticElectricLoad):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setOffCycleParasiticElectricLoad(self, offCycleParasiticElectricLoad)

    def setParasiticHeatRejectionLocation(self, parasiticHeatRejectionLocation):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setParasiticHeatRejectionLocation(self, parasiticHeatRejectionLocation)

    def setInletAirMixerSchedule(self, schedule):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setInletAirMixerSchedule(self, schedule)

    def resetInletAirMixerSchedule(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_resetInletAirMixerSchedule(self)

    def setTankElementControlLogic(self, tankElementControlLogic):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setTankElementControlLogic(self, tankElementControlLogic)

    def setControlSensor1HeightInStratifiedTank(self, controlSensor1HeightInStratifiedTank):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setControlSensor1HeightInStratifiedTank(self, controlSensor1HeightInStratifiedTank)

    def resetControlSensor1HeightInStratifiedTank(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_resetControlSensor1HeightInStratifiedTank(self)

    def setControlSensor1Weight(self, controlSensor1Weight):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setControlSensor1Weight(self, controlSensor1Weight)

    def setControlSensor2HeightInStratifiedTank(self, controlSensor2HeightInStratifiedTank):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_setControlSensor2HeightInStratifiedTank(self, controlSensor2HeightInStratifiedTank)

    def resetControlSensor2HeightInStratifiedTank(self):
        return _openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_resetControlSensor2HeightInStratifiedTank(self)

# Register WaterHeaterHeatPumpWrappedCondenser in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.WaterHeaterHeatPumpWrappedCondenser_swigregister(WaterHeaterHeatPumpWrappedCondenser)

def toWaterHeaterHeatPumpWrappedCondenser(idfObject):
    return _openstudiomodelzonehvac.toWaterHeaterHeatPumpWrappedCondenser(idfObject)

def getWaterHeaterHeatPumpWrappedCondenser(t_model, t_handle):
    return _openstudiomodelzonehvac.getWaterHeaterHeatPumpWrappedCondenser(t_model, t_handle)

def getWaterHeaterHeatPumpWrappedCondensers(t_model):
    return _openstudiomodelzonehvac.getWaterHeaterHeatPumpWrappedCondensers(t_model)

def getWaterHeaterHeatPumpWrappedCondenserByName(t_model, t_name):
    return _openstudiomodelzonehvac.getWaterHeaterHeatPumpWrappedCondenserByName(t_model, t_name)

def getWaterHeaterHeatPumpWrappedCondensersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getWaterHeaterHeatPumpWrappedCondensersByName(t_model, t_name, t_exactMatch)

def _to_WaterHeaterHeatPumpWrappedCondenser(self) -> OptionalWaterHeaterHeatPumpWrappedCondenser:
    """Try to cast the ModelObject to a WaterHeaterHeatPumpWrappedCondenser.

    :return: An Optional WaterHeaterHeatPumpWrappedCondenser.
    """
    return toWaterHeaterHeatPumpWrappedCondenser(self)
openstudioutilitiesidf.IdfObject.to_WaterHeaterHeatPumpWrappedCondenser = _to_WaterHeaterHeatPumpWrappedCondenser

def _getWaterHeaterHeatPumpWrappedCondenser(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalWaterHeaterHeatPumpWrappedCondenser:
    """Try to get an object of type WaterHeaterHeatPumpWrappedCondenser referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional WaterHeaterHeatPumpWrappedCondenser.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getWaterHeaterHeatPumpWrappedCondenser(self, t_handle)
Model.getWaterHeaterHeatPumpWrappedCondenser = _getWaterHeaterHeatPumpWrappedCondenser

def _getWaterHeaterHeatPumpWrappedCondensers(self) -> WaterHeaterHeatPumpWrappedCondenserVector:
    """Get a vector of all objects of type WaterHeaterHeatPumpWrappedCondenser in the model.

    :return: A vector of WaterHeaterHeatPumpWrappedCondenser.
    """
    return getWaterHeaterHeatPumpWrappedCondensers(self)
Model.getWaterHeaterHeatPumpWrappedCondensers = _getWaterHeaterHeatPumpWrappedCondensers

def _getWaterHeaterHeatPumpWrappedCondenserByName(self, t_name: str) -> OptionalWaterHeaterHeatPumpWrappedCondenser:
    """Try to get an object of type WaterHeaterHeatPumpWrappedCondenser that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional WaterHeaterHeatPumpWrappedCondenser.
    """
    return getWaterHeaterHeatPumpWrappedCondenserByName(self, t_name)
Model.getWaterHeaterHeatPumpWrappedCondenserByName = _getWaterHeaterHeatPumpWrappedCondenserByName

def _getWaterHeaterHeatPumpWrappedCondensersByName(self, t_name: str, t_exactMatch: bool) -> WaterHeaterHeatPumpWrappedCondenserVector:
    """Returns all objects of type WaterHeaterHeatPumpWrappedCondenser named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getWaterHeaterHeatPumpWrappedCondensersByName(self, t_name, t_exactMatch)
Model.getWaterHeaterHeatPumpWrappedCondensersByName = _getWaterHeaterHeatPumpWrappedCondensersByName

class ZoneHVACBaseboardConvectiveElectric(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardConvectiveElectric

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACBaseboardConvectiveElectric(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_iddObjectType()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_availabilitySchedule(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_setAvailabilitySchedule(self, schedule)

    def nominalCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_nominalCapacity(self)

    def isNominalCapacityAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_isNominalCapacityAutosized(self)

    def setNominalCapacity(self, nominalCapacity):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_setNominalCapacity(self, nominalCapacity)

    def autosizeNominalCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_autosizeNominalCapacity(self)

    def efficiency(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_efficiency(self)

    def isEfficiencyDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_isEfficiencyDefaulted(self)

    def setEfficiency(self, efficiency):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_setEfficiency(self, efficiency)

    def resetEfficiency(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_resetEfficiency(self)

    def thermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_thermalZone(self)

    def addToThermalZone(self, thermalZone):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_removeFromThermalZone(self)

    def autosizedNominalCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_autosizedNominalCapacity(self)

# Register ZoneHVACBaseboardConvectiveElectric in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveElectric_swigregister(ZoneHVACBaseboardConvectiveElectric)

def toZoneHVACBaseboardConvectiveElectric(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACBaseboardConvectiveElectric(idfObject)

def getZoneHVACBaseboardConvectiveElectric(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveElectric(t_model, t_handle)

def getZoneHVACBaseboardConvectiveElectrics(t_model):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveElectrics(t_model)

def getZoneHVACBaseboardConvectiveElectricByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveElectricByName(t_model, t_name)

def getZoneHVACBaseboardConvectiveElectricsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveElectricsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACBaseboardConvectiveElectric(self) -> OptionalZoneHVACBaseboardConvectiveElectric:
    """Try to cast the ModelObject to a ZoneHVACBaseboardConvectiveElectric.

    :return: An Optional ZoneHVACBaseboardConvectiveElectric.
    """
    return toZoneHVACBaseboardConvectiveElectric(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACBaseboardConvectiveElectric = _to_ZoneHVACBaseboardConvectiveElectric

def _getZoneHVACBaseboardConvectiveElectric(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACBaseboardConvectiveElectric:
    """Try to get an object of type ZoneHVACBaseboardConvectiveElectric referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACBaseboardConvectiveElectric.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACBaseboardConvectiveElectric(self, t_handle)
Model.getZoneHVACBaseboardConvectiveElectric = _getZoneHVACBaseboardConvectiveElectric

def _getZoneHVACBaseboardConvectiveElectrics(self) -> ZoneHVACBaseboardConvectiveElectricVector:
    """Get a vector of all objects of type ZoneHVACBaseboardConvectiveElectric in the model.

    :return: A vector of ZoneHVACBaseboardConvectiveElectric.
    """
    return getZoneHVACBaseboardConvectiveElectrics(self)
Model.getZoneHVACBaseboardConvectiveElectrics = _getZoneHVACBaseboardConvectiveElectrics

def _getZoneHVACBaseboardConvectiveElectricByName(self, t_name: str) -> OptionalZoneHVACBaseboardConvectiveElectric:
    """Try to get an object of type ZoneHVACBaseboardConvectiveElectric that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACBaseboardConvectiveElectric.
    """
    return getZoneHVACBaseboardConvectiveElectricByName(self, t_name)
Model.getZoneHVACBaseboardConvectiveElectricByName = _getZoneHVACBaseboardConvectiveElectricByName

def _getZoneHVACBaseboardConvectiveElectricsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACBaseboardConvectiveElectricVector:
    """Returns all objects of type ZoneHVACBaseboardConvectiveElectric named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACBaseboardConvectiveElectricsByName(self, t_name, t_exactMatch)
Model.getZoneHVACBaseboardConvectiveElectricsByName = _getZoneHVACBaseboardConvectiveElectricsByName

class ZoneHVACBaseboardConvectiveWater(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardConvectiveWater

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACBaseboardConvectiveWater(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_iddObjectType()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_availabilitySchedule(self)

    def heatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_heatingCoil(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_setAvailabilitySchedule(self, schedule)

    def setHeatingCoil(self, heatingCoilBaseboard):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_setHeatingCoil(self, heatingCoilBaseboard)

    def thermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_thermalZone(self)

    def addToThermalZone(self, thermalZone):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_removeFromThermalZone(self)

# Register ZoneHVACBaseboardConvectiveWater in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACBaseboardConvectiveWater_swigregister(ZoneHVACBaseboardConvectiveWater)

def toZoneHVACBaseboardConvectiveWater(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACBaseboardConvectiveWater(idfObject)

def getZoneHVACBaseboardConvectiveWater(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveWater(t_model, t_handle)

def getZoneHVACBaseboardConvectiveWaters(t_model):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveWaters(t_model)

def getZoneHVACBaseboardConvectiveWaterByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveWaterByName(t_model, t_name)

def getZoneHVACBaseboardConvectiveWatersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardConvectiveWatersByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACBaseboardConvectiveWater(self) -> OptionalZoneHVACBaseboardConvectiveWater:
    """Try to cast the ModelObject to a ZoneHVACBaseboardConvectiveWater.

    :return: An Optional ZoneHVACBaseboardConvectiveWater.
    """
    return toZoneHVACBaseboardConvectiveWater(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACBaseboardConvectiveWater = _to_ZoneHVACBaseboardConvectiveWater

def _getZoneHVACBaseboardConvectiveWater(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACBaseboardConvectiveWater:
    """Try to get an object of type ZoneHVACBaseboardConvectiveWater referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACBaseboardConvectiveWater.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACBaseboardConvectiveWater(self, t_handle)
Model.getZoneHVACBaseboardConvectiveWater = _getZoneHVACBaseboardConvectiveWater

def _getZoneHVACBaseboardConvectiveWaters(self) -> ZoneHVACBaseboardConvectiveWaterVector:
    """Get a vector of all objects of type ZoneHVACBaseboardConvectiveWater in the model.

    :return: A vector of ZoneHVACBaseboardConvectiveWater.
    """
    return getZoneHVACBaseboardConvectiveWaters(self)
Model.getZoneHVACBaseboardConvectiveWaters = _getZoneHVACBaseboardConvectiveWaters

def _getZoneHVACBaseboardConvectiveWaterByName(self, t_name: str) -> OptionalZoneHVACBaseboardConvectiveWater:
    """Try to get an object of type ZoneHVACBaseboardConvectiveWater that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACBaseboardConvectiveWater.
    """
    return getZoneHVACBaseboardConvectiveWaterByName(self, t_name)
Model.getZoneHVACBaseboardConvectiveWaterByName = _getZoneHVACBaseboardConvectiveWaterByName

def _getZoneHVACBaseboardConvectiveWatersByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACBaseboardConvectiveWaterVector:
    """Returns all objects of type ZoneHVACBaseboardConvectiveWater named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACBaseboardConvectiveWatersByName(self, t_name, t_exactMatch)
Model.getZoneHVACBaseboardConvectiveWatersByName = _getZoneHVACBaseboardConvectiveWatersByName

class ZoneHVACBaseboardRadiantConvectiveElectric(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardRadiantConvectiveElectric

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACBaseboardRadiantConvectiveElectric(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_iddObjectType()

    @staticmethod
    def heatingDesignCapacityMethodValues():
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_heatingDesignCapacityMethodValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_availabilitySchedule(self)

    def heatingDesignCapacityMethod(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_heatingDesignCapacityMethod(self)

    def heatingDesignCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_heatingDesignCapacity(self)

    def isHeatingDesignCapacityAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_isHeatingDesignCapacityAutosized(self)

    def heatingDesignCapacityPerFloorArea(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_heatingDesignCapacityPerFloorArea(self)

    def fractionofAutosizedHeatingDesignCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_fractionofAutosizedHeatingDesignCapacity(self)

    def efficiency(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_efficiency(self)

    def fractionRadiant(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_fractionRadiant(self)

    def fractionofRadiantEnergyIncidentonPeople(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_fractionofRadiantEnergyIncidentonPeople(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setAvailabilitySchedule(self, schedule)

    def setHeatingDesignCapacityMethod(self, heatingDesignCapacityMethod):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setHeatingDesignCapacityMethod(self, heatingDesignCapacityMethod)

    def setHeatingDesignCapacity(self, heatingDesignCapacity):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setHeatingDesignCapacity(self, heatingDesignCapacity)

    def autosizeHeatingDesignCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_autosizeHeatingDesignCapacity(self)

    def setHeatingDesignCapacityPerFloorArea(self, heatingDesignCapacityPerFloorArea):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setHeatingDesignCapacityPerFloorArea(self, heatingDesignCapacityPerFloorArea)

    def setFractionofAutosizedHeatingDesignCapacity(self, fractionofAutosizedHeatingDesignCapacity):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setFractionofAutosizedHeatingDesignCapacity(self, fractionofAutosizedHeatingDesignCapacity)

    def setEfficiency(self, efficiency):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setEfficiency(self, efficiency)

    def setFractionRadiant(self, fractionRadiant):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setFractionRadiant(self, fractionRadiant)

    def setFractionofRadiantEnergyIncidentonPeople(self, fractionofRadiantEnergyIncidentonPeople):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_setFractionofRadiantEnergyIncidentonPeople(self, fractionofRadiantEnergyIncidentonPeople)

    def thermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_thermalZone(self)

    def addToThermalZone(self, thermalZone):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_removeFromThermalZone(self)

    def autosizedHeatingDesignCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_autosizedHeatingDesignCapacity(self)

# Register ZoneHVACBaseboardRadiantConvectiveElectric in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveElectric_swigregister(ZoneHVACBaseboardRadiantConvectiveElectric)

def toZoneHVACBaseboardRadiantConvectiveElectric(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACBaseboardRadiantConvectiveElectric(idfObject)

def getZoneHVACBaseboardRadiantConvectiveElectric(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveElectric(t_model, t_handle)

def getZoneHVACBaseboardRadiantConvectiveElectrics(t_model):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveElectrics(t_model)

def getZoneHVACBaseboardRadiantConvectiveElectricByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveElectricByName(t_model, t_name)

def getZoneHVACBaseboardRadiantConvectiveElectricsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveElectricsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACBaseboardRadiantConvectiveElectric(self) -> OptionalZoneHVACBaseboardRadiantConvectiveElectric:
    """Try to cast the ModelObject to a ZoneHVACBaseboardRadiantConvectiveElectric.

    :return: An Optional ZoneHVACBaseboardRadiantConvectiveElectric.
    """
    return toZoneHVACBaseboardRadiantConvectiveElectric(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACBaseboardRadiantConvectiveElectric = _to_ZoneHVACBaseboardRadiantConvectiveElectric

def _getZoneHVACBaseboardRadiantConvectiveElectric(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACBaseboardRadiantConvectiveElectric:
    """Try to get an object of type ZoneHVACBaseboardRadiantConvectiveElectric referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACBaseboardRadiantConvectiveElectric.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACBaseboardRadiantConvectiveElectric(self, t_handle)
Model.getZoneHVACBaseboardRadiantConvectiveElectric = _getZoneHVACBaseboardRadiantConvectiveElectric

def _getZoneHVACBaseboardRadiantConvectiveElectrics(self) -> ZoneHVACBaseboardRadiantConvectiveElectricVector:
    """Get a vector of all objects of type ZoneHVACBaseboardRadiantConvectiveElectric in the model.

    :return: A vector of ZoneHVACBaseboardRadiantConvectiveElectric.
    """
    return getZoneHVACBaseboardRadiantConvectiveElectrics(self)
Model.getZoneHVACBaseboardRadiantConvectiveElectrics = _getZoneHVACBaseboardRadiantConvectiveElectrics

def _getZoneHVACBaseboardRadiantConvectiveElectricByName(self, t_name: str) -> OptionalZoneHVACBaseboardRadiantConvectiveElectric:
    """Try to get an object of type ZoneHVACBaseboardRadiantConvectiveElectric that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACBaseboardRadiantConvectiveElectric.
    """
    return getZoneHVACBaseboardRadiantConvectiveElectricByName(self, t_name)
Model.getZoneHVACBaseboardRadiantConvectiveElectricByName = _getZoneHVACBaseboardRadiantConvectiveElectricByName

def _getZoneHVACBaseboardRadiantConvectiveElectricsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACBaseboardRadiantConvectiveElectricVector:
    """Returns all objects of type ZoneHVACBaseboardRadiantConvectiveElectric named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACBaseboardRadiantConvectiveElectricsByName(self, t_name, t_exactMatch)
Model.getZoneHVACBaseboardRadiantConvectiveElectricsByName = _getZoneHVACBaseboardRadiantConvectiveElectricsByName

class ZoneHVACBaseboardRadiantConvectiveWater(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACBaseboardRadiantConvectiveWater

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACBaseboardRadiantConvectiveWater(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_iddObjectType()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_availabilitySchedule(self)

    def fractionRadiant(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_fractionRadiant(self)

    def fractionofRadiantEnergyIncidentonPeople(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_fractionofRadiantEnergyIncidentonPeople(self)

    def heatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_heatingCoil(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_setAvailabilitySchedule(self, schedule)

    def setFractionRadiant(self, fractionRadiant):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_setFractionRadiant(self, fractionRadiant)

    def setFractionofRadiantEnergyIncidentonPeople(self, fractionofRadiantEnergyIncidentonPeople):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_setFractionofRadiantEnergyIncidentonPeople(self, fractionofRadiantEnergyIncidentonPeople)

    def setHeatingCoil(self, heatingCoil):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_setHeatingCoil(self, heatingCoil)

    def thermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_thermalZone(self)

    def addToThermalZone(self, thermalZone):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_removeFromThermalZone(self)

# Register ZoneHVACBaseboardRadiantConvectiveWater in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACBaseboardRadiantConvectiveWater_swigregister(ZoneHVACBaseboardRadiantConvectiveWater)

def toZoneHVACBaseboardRadiantConvectiveWater(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACBaseboardRadiantConvectiveWater(idfObject)

def getZoneHVACBaseboardRadiantConvectiveWater(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveWater(t_model, t_handle)

def getZoneHVACBaseboardRadiantConvectiveWaters(t_model):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveWaters(t_model)

def getZoneHVACBaseboardRadiantConvectiveWaterByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveWaterByName(t_model, t_name)

def getZoneHVACBaseboardRadiantConvectiveWatersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACBaseboardRadiantConvectiveWatersByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACBaseboardRadiantConvectiveWater(self) -> OptionalZoneHVACBaseboardRadiantConvectiveWater:
    """Try to cast the ModelObject to a ZoneHVACBaseboardRadiantConvectiveWater.

    :return: An Optional ZoneHVACBaseboardRadiantConvectiveWater.
    """
    return toZoneHVACBaseboardRadiantConvectiveWater(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACBaseboardRadiantConvectiveWater = _to_ZoneHVACBaseboardRadiantConvectiveWater

def _getZoneHVACBaseboardRadiantConvectiveWater(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACBaseboardRadiantConvectiveWater:
    """Try to get an object of type ZoneHVACBaseboardRadiantConvectiveWater referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACBaseboardRadiantConvectiveWater.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACBaseboardRadiantConvectiveWater(self, t_handle)
Model.getZoneHVACBaseboardRadiantConvectiveWater = _getZoneHVACBaseboardRadiantConvectiveWater

def _getZoneHVACBaseboardRadiantConvectiveWaters(self) -> ZoneHVACBaseboardRadiantConvectiveWaterVector:
    """Get a vector of all objects of type ZoneHVACBaseboardRadiantConvectiveWater in the model.

    :return: A vector of ZoneHVACBaseboardRadiantConvectiveWater.
    """
    return getZoneHVACBaseboardRadiantConvectiveWaters(self)
Model.getZoneHVACBaseboardRadiantConvectiveWaters = _getZoneHVACBaseboardRadiantConvectiveWaters

def _getZoneHVACBaseboardRadiantConvectiveWaterByName(self, t_name: str) -> OptionalZoneHVACBaseboardRadiantConvectiveWater:
    """Try to get an object of type ZoneHVACBaseboardRadiantConvectiveWater that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACBaseboardRadiantConvectiveWater.
    """
    return getZoneHVACBaseboardRadiantConvectiveWaterByName(self, t_name)
Model.getZoneHVACBaseboardRadiantConvectiveWaterByName = _getZoneHVACBaseboardRadiantConvectiveWaterByName

def _getZoneHVACBaseboardRadiantConvectiveWatersByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACBaseboardRadiantConvectiveWaterVector:
    """Returns all objects of type ZoneHVACBaseboardRadiantConvectiveWater named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACBaseboardRadiantConvectiveWatersByName(self, t_name, t_exactMatch)
Model.getZoneHVACBaseboardRadiantConvectiveWatersByName = _getZoneHVACBaseboardRadiantConvectiveWatersByName

class ZoneHVACCoolingPanelRadiantConvectiveWater(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACCoolingPanelRadiantConvectiveWater

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWater_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACCoolingPanelRadiantConvectiveWater(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWater_iddObjectType()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWater_availabilitySchedule(self)

    def fractionRadiant(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWater_fractionRadiant(self)

    def fractionofRadiantEnergyIncidentonPeople(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWater_fractionofRadiantEnergyIncidentonPeople(self)

    def coolingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWater_coolingCoil(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWater_setAvailabilitySchedule(self, schedule)

    def setFractionRadiant(self, fractionRadiant):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWater_setFractionRadiant(self, fractionRadiant)

    def setFractionofRadiantEnergyIncidentonPeople(self, fractionofRadiantEnergyIncidentonPeople):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWater_setFractionofRadiantEnergyIncidentonPeople(self, fractionofRadiantEnergyIncidentonPeople)

    def setCoolingCoil(self, coolingCoil):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWater_setCoolingCoil(self, coolingCoil)

    def thermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWater_thermalZone(self)

    def addToThermalZone(self, thermalZone):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWater_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWater_removeFromThermalZone(self)

# Register ZoneHVACCoolingPanelRadiantConvectiveWater in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACCoolingPanelRadiantConvectiveWater_swigregister(ZoneHVACCoolingPanelRadiantConvectiveWater)

def toZoneHVACCoolingPanelRadiantConvectiveWater(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACCoolingPanelRadiantConvectiveWater(idfObject)

def getZoneHVACCoolingPanelRadiantConvectiveWater(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACCoolingPanelRadiantConvectiveWater(t_model, t_handle)

def getZoneHVACCoolingPanelRadiantConvectiveWaters(t_model):
    return _openstudiomodelzonehvac.getZoneHVACCoolingPanelRadiantConvectiveWaters(t_model)

def getZoneHVACCoolingPanelRadiantConvectiveWaterByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACCoolingPanelRadiantConvectiveWaterByName(t_model, t_name)

def getZoneHVACCoolingPanelRadiantConvectiveWatersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACCoolingPanelRadiantConvectiveWatersByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACCoolingPanelRadiantConvectiveWater(self) -> OptionalZoneHVACCoolingPanelRadiantConvectiveWater:
    """Try to cast the ModelObject to a ZoneHVACCoolingPanelRadiantConvectiveWater.

    :return: An Optional ZoneHVACCoolingPanelRadiantConvectiveWater.
    """
    return toZoneHVACCoolingPanelRadiantConvectiveWater(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACCoolingPanelRadiantConvectiveWater = _to_ZoneHVACCoolingPanelRadiantConvectiveWater

def _getZoneHVACCoolingPanelRadiantConvectiveWater(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACCoolingPanelRadiantConvectiveWater:
    """Try to get an object of type ZoneHVACCoolingPanelRadiantConvectiveWater referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACCoolingPanelRadiantConvectiveWater.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACCoolingPanelRadiantConvectiveWater(self, t_handle)
Model.getZoneHVACCoolingPanelRadiantConvectiveWater = _getZoneHVACCoolingPanelRadiantConvectiveWater

def _getZoneHVACCoolingPanelRadiantConvectiveWaters(self) -> ZoneHVACCoolingPanelRadiantConvectiveWaterVector:
    """Get a vector of all objects of type ZoneHVACCoolingPanelRadiantConvectiveWater in the model.

    :return: A vector of ZoneHVACCoolingPanelRadiantConvectiveWater.
    """
    return getZoneHVACCoolingPanelRadiantConvectiveWaters(self)
Model.getZoneHVACCoolingPanelRadiantConvectiveWaters = _getZoneHVACCoolingPanelRadiantConvectiveWaters

def _getZoneHVACCoolingPanelRadiantConvectiveWaterByName(self, t_name: str) -> OptionalZoneHVACCoolingPanelRadiantConvectiveWater:
    """Try to get an object of type ZoneHVACCoolingPanelRadiantConvectiveWater that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACCoolingPanelRadiantConvectiveWater.
    """
    return getZoneHVACCoolingPanelRadiantConvectiveWaterByName(self, t_name)
Model.getZoneHVACCoolingPanelRadiantConvectiveWaterByName = _getZoneHVACCoolingPanelRadiantConvectiveWaterByName

def _getZoneHVACCoolingPanelRadiantConvectiveWatersByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACCoolingPanelRadiantConvectiveWaterVector:
    """Returns all objects of type ZoneHVACCoolingPanelRadiantConvectiveWater named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACCoolingPanelRadiantConvectiveWatersByName(self, t_name, t_exactMatch)
Model.getZoneHVACCoolingPanelRadiantConvectiveWatersByName = _getZoneHVACCoolingPanelRadiantConvectiveWatersByName

class ZoneHVACDehumidifierDX(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACDehumidifierDX

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACDehumidifierDX(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_iddObjectType()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_availabilitySchedule(self)

    def ratedWaterRemoval(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_ratedWaterRemoval(self)

    def ratedEnergyFactor(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_ratedEnergyFactor(self)

    def ratedAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_ratedAirFlowRate(self)

    def waterRemovalCurve(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_waterRemovalCurve(self)

    def energyFactorCurve(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_energyFactorCurve(self)

    def partLoadFractionCorrelationCurve(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_partLoadFractionCorrelationCurve(self)

    def minimumDryBulbTemperatureforDehumidifierOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_minimumDryBulbTemperatureforDehumidifierOperation(self)

    def maximumDryBulbTemperatureforDehumidifierOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_maximumDryBulbTemperatureforDehumidifierOperation(self)

    def offCycleParasiticElectricLoad(self):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_offCycleParasiticElectricLoad(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setAvailabilitySchedule(self, schedule)

    def setRatedWaterRemoval(self, ratedWaterRemoval):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setRatedWaterRemoval(self, ratedWaterRemoval)

    def setRatedEnergyFactor(self, ratedEnergyFactor):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setRatedEnergyFactor(self, ratedEnergyFactor)

    def setRatedAirFlowRate(self, ratedAirFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setRatedAirFlowRate(self, ratedAirFlowRate)

    def setWaterRemovalCurve(self, curve):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setWaterRemovalCurve(self, curve)

    def setEnergyFactorCurve(self, curve):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setEnergyFactorCurve(self, curve)

    def setPartLoadFractionCorrelationCurve(self, curve):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setPartLoadFractionCorrelationCurve(self, curve)

    def setMinimumDryBulbTemperatureforDehumidifierOperation(self, minimumDryBulbTemperatureforDehumidifierOperation):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setMinimumDryBulbTemperatureforDehumidifierOperation(self, minimumDryBulbTemperatureforDehumidifierOperation)

    def setMaximumDryBulbTemperatureforDehumidifierOperation(self, maximumDryBulbTemperatureforDehumidifierOperation):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setMaximumDryBulbTemperatureforDehumidifierOperation(self, maximumDryBulbTemperatureforDehumidifierOperation)

    def setOffCycleParasiticElectricLoad(self, offCycleParasiticElectricLoad):
        return _openstudiomodelzonehvac.ZoneHVACDehumidifierDX_setOffCycleParasiticElectricLoad(self, offCycleParasiticElectricLoad)

# Register ZoneHVACDehumidifierDX in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACDehumidifierDX_swigregister(ZoneHVACDehumidifierDX)

def toZoneHVACDehumidifierDX(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACDehumidifierDX(idfObject)

def getZoneHVACDehumidifierDX(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACDehumidifierDX(t_model, t_handle)

def getZoneHVACDehumidifierDXs(t_model):
    return _openstudiomodelzonehvac.getZoneHVACDehumidifierDXs(t_model)

def getZoneHVACDehumidifierDXByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACDehumidifierDXByName(t_model, t_name)

def getZoneHVACDehumidifierDXsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACDehumidifierDXsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACDehumidifierDX(self) -> OptionalZoneHVACDehumidifierDX:
    """Try to cast the ModelObject to a ZoneHVACDehumidifierDX.

    :return: An Optional ZoneHVACDehumidifierDX.
    """
    return toZoneHVACDehumidifierDX(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACDehumidifierDX = _to_ZoneHVACDehumidifierDX

def _getZoneHVACDehumidifierDX(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACDehumidifierDX:
    """Try to get an object of type ZoneHVACDehumidifierDX referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACDehumidifierDX.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACDehumidifierDX(self, t_handle)
Model.getZoneHVACDehumidifierDX = _getZoneHVACDehumidifierDX

def _getZoneHVACDehumidifierDXs(self) -> ZoneHVACDehumidifierDXVector:
    """Get a vector of all objects of type ZoneHVACDehumidifierDX in the model.

    :return: A vector of ZoneHVACDehumidifierDX.
    """
    return getZoneHVACDehumidifierDXs(self)
Model.getZoneHVACDehumidifierDXs = _getZoneHVACDehumidifierDXs

def _getZoneHVACDehumidifierDXByName(self, t_name: str) -> OptionalZoneHVACDehumidifierDX:
    """Try to get an object of type ZoneHVACDehumidifierDX that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACDehumidifierDX.
    """
    return getZoneHVACDehumidifierDXByName(self, t_name)
Model.getZoneHVACDehumidifierDXByName = _getZoneHVACDehumidifierDXByName

def _getZoneHVACDehumidifierDXsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACDehumidifierDXVector:
    """Returns all objects of type ZoneHVACDehumidifierDX named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACDehumidifierDXsByName(self, t_name, t_exactMatch)
Model.getZoneHVACDehumidifierDXsByName = _getZoneHVACDehumidifierDXsByName

class ZoneHVACEnergyRecoveryVentilator(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACEnergyRecoveryVentilator

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACEnergyRecoveryVentilator(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_iddObjectType()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_availabilitySchedule(self)

    def heatExchanger(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_heatExchanger(self)

    def supplyAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_supplyAirFlowRate(self)

    def isSupplyAirFlowRateAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_isSupplyAirFlowRateAutosized(self)

    def exhaustAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_exhaustAirFlowRate(self)

    def isExhaustAirFlowRateAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_isExhaustAirFlowRateAutosized(self)

    def supplyAirFan(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_supplyAirFan(self)

    def exhaustAirFan(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_exhaustAirFan(self)

    def controller(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_controller(self)

    def ventilationRateperUnitFloorArea(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_ventilationRateperUnitFloorArea(self)

    def ventilationRateperOccupant(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_ventilationRateperOccupant(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setAvailabilitySchedule(self, schedule)

    def setHeatExchanger(self, hxAirToAirSensibleAndLatent):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setHeatExchanger(self, hxAirToAirSensibleAndLatent)

    def setSupplyAirFlowRate(self, supplyAirFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setSupplyAirFlowRate(self, supplyAirFlowRate)

    def autosizeSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_autosizeSupplyAirFlowRate(self)

    def setExhaustAirFlowRate(self, exhaustAirFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setExhaustAirFlowRate(self, exhaustAirFlowRate)

    def autosizeExhaustAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_autosizeExhaustAirFlowRate(self)

    def setSupplyAirFan(self, supplyAirFan):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setSupplyAirFan(self, supplyAirFan)

    def setExhaustAirFan(self, exhaustAirFan):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setExhaustAirFan(self, exhaustAirFan)

    def setController(self, zoneHVACEnergyRecoveryVentilatorController):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setController(self, zoneHVACEnergyRecoveryVentilatorController)

    def resetController(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_resetController(self)

    def setVentilationRateperUnitFloorArea(self, ventilationRateperUnitFloorArea):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setVentilationRateperUnitFloorArea(self, ventilationRateperUnitFloorArea)

    def setVentilationRateperOccupant(self, ventilationRateperOccupant):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_setVentilationRateperOccupant(self, ventilationRateperOccupant)

    def autosizedSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_autosizedSupplyAirFlowRate(self)

    def autosizedExhaustAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_autosizedExhaustAirFlowRate(self)

# Register ZoneHVACEnergyRecoveryVentilator in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilator_swigregister(ZoneHVACEnergyRecoveryVentilator)

def toZoneHVACEnergyRecoveryVentilator(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACEnergyRecoveryVentilator(idfObject)

def getZoneHVACEnergyRecoveryVentilator(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilator(t_model, t_handle)

def getZoneHVACEnergyRecoveryVentilators(t_model):
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilators(t_model)

def getZoneHVACEnergyRecoveryVentilatorByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorByName(t_model, t_name)

def getZoneHVACEnergyRecoveryVentilatorsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACEnergyRecoveryVentilator(self) -> OptionalZoneHVACEnergyRecoveryVentilator:
    """Try to cast the ModelObject to a ZoneHVACEnergyRecoveryVentilator.

    :return: An Optional ZoneHVACEnergyRecoveryVentilator.
    """
    return toZoneHVACEnergyRecoveryVentilator(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACEnergyRecoveryVentilator = _to_ZoneHVACEnergyRecoveryVentilator

def _getZoneHVACEnergyRecoveryVentilator(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACEnergyRecoveryVentilator:
    """Try to get an object of type ZoneHVACEnergyRecoveryVentilator referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACEnergyRecoveryVentilator.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACEnergyRecoveryVentilator(self, t_handle)
Model.getZoneHVACEnergyRecoveryVentilator = _getZoneHVACEnergyRecoveryVentilator

def _getZoneHVACEnergyRecoveryVentilators(self) -> ZoneHVACEnergyRecoveryVentilatorVector:
    """Get a vector of all objects of type ZoneHVACEnergyRecoveryVentilator in the model.

    :return: A vector of ZoneHVACEnergyRecoveryVentilator.
    """
    return getZoneHVACEnergyRecoveryVentilators(self)
Model.getZoneHVACEnergyRecoveryVentilators = _getZoneHVACEnergyRecoveryVentilators

def _getZoneHVACEnergyRecoveryVentilatorByName(self, t_name: str) -> OptionalZoneHVACEnergyRecoveryVentilator:
    """Try to get an object of type ZoneHVACEnergyRecoveryVentilator that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACEnergyRecoveryVentilator.
    """
    return getZoneHVACEnergyRecoveryVentilatorByName(self, t_name)
Model.getZoneHVACEnergyRecoveryVentilatorByName = _getZoneHVACEnergyRecoveryVentilatorByName

def _getZoneHVACEnergyRecoveryVentilatorsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACEnergyRecoveryVentilatorVector:
    """Returns all objects of type ZoneHVACEnergyRecoveryVentilator named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACEnergyRecoveryVentilatorsByName(self, t_name, t_exactMatch)
Model.getZoneHVACEnergyRecoveryVentilatorsByName = _getZoneHVACEnergyRecoveryVentilatorsByName

class ZoneHVACEnergyRecoveryVentilatorController(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACEnergyRecoveryVentilatorController

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACEnergyRecoveryVentilatorController(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_iddObjectType()

    @staticmethod
    def exhaustAirTemperatureLimitValues():
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_exhaustAirTemperatureLimitValues()

    @staticmethod
    def exhaustAirEnthalpyLimitValues():
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_exhaustAirEnthalpyLimitValues()

    def temperatureHighLimit(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_temperatureHighLimit(self)

    def temperatureLowLimit(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_temperatureLowLimit(self)

    def enthalpyHighLimit(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_enthalpyHighLimit(self)

    def dewpointTemperatureLimit(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_dewpointTemperatureLimit(self)

    def electronicEnthalpyLimitCurve(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_electronicEnthalpyLimitCurve(self)

    def exhaustAirTemperatureLimit(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_exhaustAirTemperatureLimit(self)

    def exhaustAirEnthalpyLimit(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_exhaustAirEnthalpyLimit(self)

    def timeofDayEconomizerFlowControlSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_timeofDayEconomizerFlowControlSchedule(self)

    def highHumidityControlFlag(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_highHumidityControlFlag(self)

    def highHumidityOutdoorAirFlowRatio(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_highHumidityOutdoorAirFlowRatio(self)

    def controlHighIndoorHumidityBasedonOutdoorHumidityRatio(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_controlHighIndoorHumidityBasedonOutdoorHumidityRatio(self)

    def setTemperatureHighLimit(self, temperatureHighLimit):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setTemperatureHighLimit(self, temperatureHighLimit)

    def resetTemperatureHighLimit(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_resetTemperatureHighLimit(self)

    def setTemperatureLowLimit(self, temperatureLowLimit):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setTemperatureLowLimit(self, temperatureLowLimit)

    def resetTemperatureLowLimit(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_resetTemperatureLowLimit(self)

    def setEnthalpyHighLimit(self, enthalpyHighLimit):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setEnthalpyHighLimit(self, enthalpyHighLimit)

    def resetEnthalpyHighLimit(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_resetEnthalpyHighLimit(self)

    def setDewpointTemperatureLimit(self, dewpointTemperatureLimit):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setDewpointTemperatureLimit(self, dewpointTemperatureLimit)

    def resetDewpointTemperatureLimit(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_resetDewpointTemperatureLimit(self)

    def setElectronicEnthalpyLimitCurve(self, curve):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setElectronicEnthalpyLimitCurve(self, curve)

    def resetElectronicEnthalpyLimitCurve(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_resetElectronicEnthalpyLimitCurve(self)

    def setExhaustAirTemperatureLimit(self, exhaustAirTemperatureLimit):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setExhaustAirTemperatureLimit(self, exhaustAirTemperatureLimit)

    def setExhaustAirEnthalpyLimit(self, exhaustAirEnthalpyLimit):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setExhaustAirEnthalpyLimit(self, exhaustAirEnthalpyLimit)

    def setTimeofDayEconomizerFlowControlSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setTimeofDayEconomizerFlowControlSchedule(self, schedule)

    def resetTimeofDayEconomizerFlowControlSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_resetTimeofDayEconomizerFlowControlSchedule(self)

    def setHighHumidityControlFlag(self, highHumidityControlFlag):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setHighHumidityControlFlag(self, highHumidityControlFlag)

    def setHighHumidityOutdoorAirFlowRatio(self, highHumidityOutdoorAirFlowRatio):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setHighHumidityOutdoorAirFlowRatio(self, highHumidityOutdoorAirFlowRatio)

    def setControlHighIndoorHumidityBasedonOutdoorHumidityRatio(self, controlHighIndoorHumidityBasedonOutdoorHumidityRatio):
        return _openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_setControlHighIndoorHumidityBasedonOutdoorHumidityRatio(self, controlHighIndoorHumidityBasedonOutdoorHumidityRatio)

# Register ZoneHVACEnergyRecoveryVentilatorController in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACEnergyRecoveryVentilatorController_swigregister(ZoneHVACEnergyRecoveryVentilatorController)

def toZoneHVACEnergyRecoveryVentilatorController(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACEnergyRecoveryVentilatorController(idfObject)

def getZoneHVACEnergyRecoveryVentilatorController(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorController(t_model, t_handle)

def getZoneHVACEnergyRecoveryVentilatorControllers(t_model):
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorControllers(t_model)

def getZoneHVACEnergyRecoveryVentilatorControllerByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorControllerByName(t_model, t_name)

def getZoneHVACEnergyRecoveryVentilatorControllersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACEnergyRecoveryVentilatorControllersByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACEnergyRecoveryVentilatorController(self) -> OptionalZoneHVACEnergyRecoveryVentilatorController:
    """Try to cast the ModelObject to a ZoneHVACEnergyRecoveryVentilatorController.

    :return: An Optional ZoneHVACEnergyRecoveryVentilatorController.
    """
    return toZoneHVACEnergyRecoveryVentilatorController(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACEnergyRecoveryVentilatorController = _to_ZoneHVACEnergyRecoveryVentilatorController

def _getZoneHVACEnergyRecoveryVentilatorController(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACEnergyRecoveryVentilatorController:
    """Try to get an object of type ZoneHVACEnergyRecoveryVentilatorController referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACEnergyRecoveryVentilatorController.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACEnergyRecoveryVentilatorController(self, t_handle)
Model.getZoneHVACEnergyRecoveryVentilatorController = _getZoneHVACEnergyRecoveryVentilatorController

def _getZoneHVACEnergyRecoveryVentilatorControllers(self) -> ZoneHVACEnergyRecoveryVentilatorControllerVector:
    """Get a vector of all objects of type ZoneHVACEnergyRecoveryVentilatorController in the model.

    :return: A vector of ZoneHVACEnergyRecoveryVentilatorController.
    """
    return getZoneHVACEnergyRecoveryVentilatorControllers(self)
Model.getZoneHVACEnergyRecoveryVentilatorControllers = _getZoneHVACEnergyRecoveryVentilatorControllers

def _getZoneHVACEnergyRecoveryVentilatorControllerByName(self, t_name: str) -> OptionalZoneHVACEnergyRecoveryVentilatorController:
    """Try to get an object of type ZoneHVACEnergyRecoveryVentilatorController that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACEnergyRecoveryVentilatorController.
    """
    return getZoneHVACEnergyRecoveryVentilatorControllerByName(self, t_name)
Model.getZoneHVACEnergyRecoveryVentilatorControllerByName = _getZoneHVACEnergyRecoveryVentilatorControllerByName

def _getZoneHVACEnergyRecoveryVentilatorControllersByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACEnergyRecoveryVentilatorControllerVector:
    """Returns all objects of type ZoneHVACEnergyRecoveryVentilatorController named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACEnergyRecoveryVentilatorControllersByName(self, t_name, t_exactMatch)
Model.getZoneHVACEnergyRecoveryVentilatorControllersByName = _getZoneHVACEnergyRecoveryVentilatorControllersByName

class ZoneHVACFourPipeFanCoil(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACFourPipeFanCoil

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACFourPipeFanCoil(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_iddObjectType()

    @staticmethod
    def capacityControlMethodValues():
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_capacityControlMethodValues()

    @staticmethod
    def outdoorAirMixerObjectTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_outdoorAirMixerObjectTypeValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_availabilitySchedule(self)

    def capacityControlMethod(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_capacityControlMethod(self)

    def maximumSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_maximumSupplyAirFlowRate(self)

    def isMaximumSupplyAirFlowRateAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMaximumSupplyAirFlowRateAutosized(self)

    def lowSpeedSupplyAirFlowRatio(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_lowSpeedSupplyAirFlowRatio(self)

    def isLowSpeedSupplyAirFlowRatioDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isLowSpeedSupplyAirFlowRatioDefaulted(self)

    def mediumSpeedSupplyAirFlowRatio(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_mediumSpeedSupplyAirFlowRatio(self)

    def isMediumSpeedSupplyAirFlowRatioDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMediumSpeedSupplyAirFlowRatioDefaulted(self)

    def maximumOutdoorAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_maximumOutdoorAirFlowRate(self)

    def isMaximumOutdoorAirFlowRateAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMaximumOutdoorAirFlowRateAutosized(self)

    def outdoorAirSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_outdoorAirSchedule(self)

    def outdoorAirMixerObjectType(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_outdoorAirMixerObjectType(self)

    def outdoorAirMixerName(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_outdoorAirMixerName(self)

    def supplyAirFan(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_supplyAirFan(self)

    def coolingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_coolingCoil(self)

    def maximumColdWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_maximumColdWaterFlowRate(self)

    def isMaximumColdWaterFlowRateAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMaximumColdWaterFlowRateAutosized(self)

    def minimumColdWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_minimumColdWaterFlowRate(self)

    def isMinimumColdWaterFlowRateDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMinimumColdWaterFlowRateDefaulted(self)

    def coolingConvergenceTolerance(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_coolingConvergenceTolerance(self)

    def isCoolingConvergenceToleranceDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isCoolingConvergenceToleranceDefaulted(self)

    def heatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_heatingCoil(self)

    def maximumHotWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_maximumHotWaterFlowRate(self)

    def isMaximumHotWaterFlowRateAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMaximumHotWaterFlowRateAutosized(self)

    def minimumHotWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_minimumHotWaterFlowRate(self)

    def isMinimumHotWaterFlowRateDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMinimumHotWaterFlowRateDefaulted(self)

    def heatingConvergenceTolerance(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_heatingConvergenceTolerance(self)

    def isHeatingConvergenceToleranceDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isHeatingConvergenceToleranceDefaulted(self)

    def supplyAirFanOperatingModeSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_supplyAirFanOperatingModeSchedule(self)

    def isMinimumSupplyAirTemperatureInCoolingModeAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMinimumSupplyAirTemperatureInCoolingModeAutosized(self)

    def minimumSupplyAirTemperatureInCoolingMode(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_minimumSupplyAirTemperatureInCoolingMode(self)

    def isMaximumSupplyAirTemperatureInHeatingModeAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_isMaximumSupplyAirTemperatureInHeatingModeAutosized(self)

    def maximumSupplyAirTemperatureInHeatingMode(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_maximumSupplyAirTemperatureInHeatingMode(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setAvailabilitySchedule(self, schedule)

    def setCapacityControlMethod(self, capacityControlMethod):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setCapacityControlMethod(self, capacityControlMethod)

    def setMaximumSupplyAirFlowRate(self, maximumSupplyAirFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMaximumSupplyAirFlowRate(self, maximumSupplyAirFlowRate)

    def autosizeMaximumSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizeMaximumSupplyAirFlowRate(self)

    def setLowSpeedSupplyAirFlowRatio(self, lowSpeedSupplyAirFlowRatio):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setLowSpeedSupplyAirFlowRatio(self, lowSpeedSupplyAirFlowRatio)

    def resetLowSpeedSupplyAirFlowRatio(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetLowSpeedSupplyAirFlowRatio(self)

    def setMediumSpeedSupplyAirFlowRatio(self, mediumSpeedSupplyAirFlowRatio):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMediumSpeedSupplyAirFlowRatio(self, mediumSpeedSupplyAirFlowRatio)

    def resetMediumSpeedSupplyAirFlowRatio(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetMediumSpeedSupplyAirFlowRatio(self)

    def setMaximumOutdoorAirFlowRate(self, maximumOutdoorAirFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMaximumOutdoorAirFlowRate(self, maximumOutdoorAirFlowRate)

    def autosizeMaximumOutdoorAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizeMaximumOutdoorAirFlowRate(self)

    def setOutdoorAirSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setOutdoorAirSchedule(self, schedule)

    def resetOutdoorAirSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetOutdoorAirSchedule(self)

    def setOutdoorAirMixerObjectType(self, outdoorAirMixerObjectType):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setOutdoorAirMixerObjectType(self, outdoorAirMixerObjectType)

    def setOutdoorAirMixerName(self, outdoorAirMixerName):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setOutdoorAirMixerName(self, outdoorAirMixerName)

    def setSupplyAirFan(self, fan):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setSupplyAirFan(self, fan)

    def setCoolingCoil(self, coolingCoil):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setCoolingCoil(self, coolingCoil)

    def setMaximumColdWaterFlowRate(self, maximumColdWaterFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMaximumColdWaterFlowRate(self, maximumColdWaterFlowRate)

    def autosizeMaximumColdWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizeMaximumColdWaterFlowRate(self)

    def setMinimumColdWaterFlowRate(self, minimumColdWaterFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMinimumColdWaterFlowRate(self, minimumColdWaterFlowRate)

    def resetMinimumColdWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetMinimumColdWaterFlowRate(self)

    def setCoolingConvergenceTolerance(self, coolingConvergenceTolerance):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setCoolingConvergenceTolerance(self, coolingConvergenceTolerance)

    def resetCoolingConvergenceTolerance(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetCoolingConvergenceTolerance(self)

    def setHeatingCoil(self, heatingCoil):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setHeatingCoil(self, heatingCoil)

    def setMaximumHotWaterFlowRate(self, maximumHotWaterFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMaximumHotWaterFlowRate(self, maximumHotWaterFlowRate)

    def autosizeMaximumHotWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizeMaximumHotWaterFlowRate(self)

    def setMinimumHotWaterFlowRate(self, minimumHotWaterFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMinimumHotWaterFlowRate(self, minimumHotWaterFlowRate)

    def resetMinimumHotWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetMinimumHotWaterFlowRate(self)

    def setHeatingConvergenceTolerance(self, heatingConvergenceTolerance):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setHeatingConvergenceTolerance(self, heatingConvergenceTolerance)

    def resetHeatingConvergenceTolerance(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetHeatingConvergenceTolerance(self)

    def setSupplyAirFanOperatingModeSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def resetSupplyAirFanOperatingModeSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_resetSupplyAirFanOperatingModeSchedule(self)

    def autosizeMinimumSupplyAirTemperatureInCoolingMode(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizeMinimumSupplyAirTemperatureInCoolingMode(self)

    def setMinimumSupplyAirTemperatureInCoolingMode(self, minimumSupplyAirTemperatureInCoolingMode):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMinimumSupplyAirTemperatureInCoolingMode(self, minimumSupplyAirTemperatureInCoolingMode)

    def autosizeMaximumSupplyAirTemperatureInHeatingMode(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizeMaximumSupplyAirTemperatureInHeatingMode(self)

    def setMaximumSupplyAirTemperatureInHeatingMode(self, maximumSupplyAirTemperatureInHeatingMode):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_setMaximumSupplyAirTemperatureInHeatingMode(self, maximumSupplyAirTemperatureInHeatingMode)

    def autosizedMaximumSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizedMaximumSupplyAirFlowRate(self)

    def autosizedMaximumOutdoorAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizedMaximumOutdoorAirFlowRate(self)

    def autosizedMaximumColdWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizedMaximumColdWaterFlowRate(self)

    def autosizedMaximumHotWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizedMaximumHotWaterFlowRate(self)

    def autosizedMinimumSupplyAirTemperatureinCoolingMode(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizedMinimumSupplyAirTemperatureinCoolingMode(self)

    def autosizedMaximumSupplyAirTemperatureinHeatingMode(self):
        return _openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_autosizedMaximumSupplyAirTemperatureinHeatingMode(self)

# Register ZoneHVACFourPipeFanCoil in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACFourPipeFanCoil_swigregister(ZoneHVACFourPipeFanCoil)

def toZoneHVACFourPipeFanCoil(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACFourPipeFanCoil(idfObject)

def getZoneHVACFourPipeFanCoil(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACFourPipeFanCoil(t_model, t_handle)

def getZoneHVACFourPipeFanCoils(t_model):
    return _openstudiomodelzonehvac.getZoneHVACFourPipeFanCoils(t_model)

def getZoneHVACFourPipeFanCoilByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACFourPipeFanCoilByName(t_model, t_name)

def getZoneHVACFourPipeFanCoilsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACFourPipeFanCoilsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACFourPipeFanCoil(self) -> OptionalZoneHVACFourPipeFanCoil:
    """Try to cast the ModelObject to a ZoneHVACFourPipeFanCoil.

    :return: An Optional ZoneHVACFourPipeFanCoil.
    """
    return toZoneHVACFourPipeFanCoil(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACFourPipeFanCoil = _to_ZoneHVACFourPipeFanCoil

def _getZoneHVACFourPipeFanCoil(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACFourPipeFanCoil:
    """Try to get an object of type ZoneHVACFourPipeFanCoil referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACFourPipeFanCoil.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACFourPipeFanCoil(self, t_handle)
Model.getZoneHVACFourPipeFanCoil = _getZoneHVACFourPipeFanCoil

def _getZoneHVACFourPipeFanCoils(self) -> ZoneHVACFourPipeFanCoilVector:
    """Get a vector of all objects of type ZoneHVACFourPipeFanCoil in the model.

    :return: A vector of ZoneHVACFourPipeFanCoil.
    """
    return getZoneHVACFourPipeFanCoils(self)
Model.getZoneHVACFourPipeFanCoils = _getZoneHVACFourPipeFanCoils

def _getZoneHVACFourPipeFanCoilByName(self, t_name: str) -> OptionalZoneHVACFourPipeFanCoil:
    """Try to get an object of type ZoneHVACFourPipeFanCoil that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACFourPipeFanCoil.
    """
    return getZoneHVACFourPipeFanCoilByName(self, t_name)
Model.getZoneHVACFourPipeFanCoilByName = _getZoneHVACFourPipeFanCoilByName

def _getZoneHVACFourPipeFanCoilsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACFourPipeFanCoilVector:
    """Returns all objects of type ZoneHVACFourPipeFanCoil named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACFourPipeFanCoilsByName(self, t_name, t_exactMatch)
Model.getZoneHVACFourPipeFanCoilsByName = _getZoneHVACFourPipeFanCoilsByName

class ZoneHVACHighTemperatureRadiant(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACHighTemperatureRadiant

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACHighTemperatureRadiant(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_iddObjectType()

    @staticmethod
    def fuelTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fuelTypeValues()

    @staticmethod
    def temperatureControlTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_temperatureControlTypeValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_availabilitySchedule(self)

    def maximumPowerInput(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_maximumPowerInput(self)

    def isMaximumPowerInputAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_isMaximumPowerInputAutosized(self)

    def fuelType(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fuelType(self)

    def combustionEfficiency(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_combustionEfficiency(self)

    def fractionofInputConvertedtoRadiantEnergy(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fractionofInputConvertedtoRadiantEnergy(self)

    def fractionofInputConvertedtoLatentEnergy(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fractionofInputConvertedtoLatentEnergy(self)

    def fractionofInputthatIsLost(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fractionofInputthatIsLost(self)

    def temperatureControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_temperatureControlType(self)

    def heatingThrottlingRange(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_heatingThrottlingRange(self)

    def heatingSetpointTemperatureSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_heatingSetpointTemperatureSchedule(self)

    def fractionofRadiantEnergyIncidentonPeople(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_fractionofRadiantEnergyIncidentonPeople(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setAvailabilitySchedule(self, schedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_resetAvailabilitySchedule(self)

    def setMaximumPowerInput(self, maximumPowerInput):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setMaximumPowerInput(self, maximumPowerInput)

    def autosizeMaximumPowerInput(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_autosizeMaximumPowerInput(self)

    def setFuelType(self, fuelType):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setFuelType(self, fuelType)

    def setCombustionEfficiency(self, combustionEfficiency):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setCombustionEfficiency(self, combustionEfficiency)

    def setFractionofInputConvertedtoRadiantEnergy(self, fractionofInputConvertedtoRadiantEnergy):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setFractionofInputConvertedtoRadiantEnergy(self, fractionofInputConvertedtoRadiantEnergy)

    def setFractionofInputConvertedtoLatentEnergy(self, fractionofInputConvertedtoLatentEnergy):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setFractionofInputConvertedtoLatentEnergy(self, fractionofInputConvertedtoLatentEnergy)

    def setFractionofInputthatIsLost(self, fractionofInputthatIsLost):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setFractionofInputthatIsLost(self, fractionofInputthatIsLost)

    def setTemperatureControlType(self, temperatureControlType):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setTemperatureControlType(self, temperatureControlType)

    def setHeatingThrottlingRange(self, heatingThrottlingRange):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setHeatingThrottlingRange(self, heatingThrottlingRange)

    def setHeatingSetpointTemperatureSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setHeatingSetpointTemperatureSchedule(self, schedule)

    def resetHeatingSetpointTemperatureSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_resetHeatingSetpointTemperatureSchedule(self)

    def setFractionofRadiantEnergyIncidentonPeople(self, fractionofRadiantEnergyIncidentonPeople):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_setFractionofRadiantEnergyIncidentonPeople(self, fractionofRadiantEnergyIncidentonPeople)

    def thermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_thermalZone(self)

    def addToThermalZone(self, thermalZone):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_removeFromThermalZone(self)

    def autosizedMaximumPowerInput(self):
        return _openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_autosizedMaximumPowerInput(self)

# Register ZoneHVACHighTemperatureRadiant in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACHighTemperatureRadiant_swigregister(ZoneHVACHighTemperatureRadiant)

def toZoneHVACHighTemperatureRadiant(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACHighTemperatureRadiant(idfObject)

def getZoneHVACHighTemperatureRadiant(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACHighTemperatureRadiant(t_model, t_handle)

def getZoneHVACHighTemperatureRadiants(t_model):
    return _openstudiomodelzonehvac.getZoneHVACHighTemperatureRadiants(t_model)

def getZoneHVACHighTemperatureRadiantByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACHighTemperatureRadiantByName(t_model, t_name)

def getZoneHVACHighTemperatureRadiantsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACHighTemperatureRadiantsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACHighTemperatureRadiant(self) -> OptionalZoneHVACHighTemperatureRadiant:
    """Try to cast the ModelObject to a ZoneHVACHighTemperatureRadiant.

    :return: An Optional ZoneHVACHighTemperatureRadiant.
    """
    return toZoneHVACHighTemperatureRadiant(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACHighTemperatureRadiant = _to_ZoneHVACHighTemperatureRadiant

def _getZoneHVACHighTemperatureRadiant(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACHighTemperatureRadiant:
    """Try to get an object of type ZoneHVACHighTemperatureRadiant referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACHighTemperatureRadiant.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACHighTemperatureRadiant(self, t_handle)
Model.getZoneHVACHighTemperatureRadiant = _getZoneHVACHighTemperatureRadiant

def _getZoneHVACHighTemperatureRadiants(self) -> ZoneHVACHighTemperatureRadiantVector:
    """Get a vector of all objects of type ZoneHVACHighTemperatureRadiant in the model.

    :return: A vector of ZoneHVACHighTemperatureRadiant.
    """
    return getZoneHVACHighTemperatureRadiants(self)
Model.getZoneHVACHighTemperatureRadiants = _getZoneHVACHighTemperatureRadiants

def _getZoneHVACHighTemperatureRadiantByName(self, t_name: str) -> OptionalZoneHVACHighTemperatureRadiant:
    """Try to get an object of type ZoneHVACHighTemperatureRadiant that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACHighTemperatureRadiant.
    """
    return getZoneHVACHighTemperatureRadiantByName(self, t_name)
Model.getZoneHVACHighTemperatureRadiantByName = _getZoneHVACHighTemperatureRadiantByName

def _getZoneHVACHighTemperatureRadiantsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACHighTemperatureRadiantVector:
    """Returns all objects of type ZoneHVACHighTemperatureRadiant named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACHighTemperatureRadiantsByName(self, t_name, t_exactMatch)
Model.getZoneHVACHighTemperatureRadiantsByName = _getZoneHVACHighTemperatureRadiantsByName

class ZoneHVACIdealLoadsAirSystem(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACIdealLoadsAirSystem

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACIdealLoadsAirSystem(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_iddObjectType()

    @staticmethod
    def heatingLimitValues():
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatingLimitValues()

    @staticmethod
    def coolingLimitValues():
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_coolingLimitValues()

    @staticmethod
    def dehumidificationControlTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_dehumidificationControlTypeValues()

    @staticmethod
    def humidificationControlTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_humidificationControlTypeValues()

    @staticmethod
    def demandControlledVentilationTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_demandControlledVentilationTypeValues()

    @staticmethod
    def outdoorAirEconomizerTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_outdoorAirEconomizerTypeValues()

    @staticmethod
    def heatRecoveryTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatRecoveryTypeValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_availabilitySchedule(self)

    def maximumHeatingSupplyAirTemperature(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_maximumHeatingSupplyAirTemperature(self)

    def isMaximumHeatingSupplyAirTemperatureDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMaximumHeatingSupplyAirTemperatureDefaulted(self)

    def minimumCoolingSupplyAirTemperature(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_minimumCoolingSupplyAirTemperature(self)

    def isMinimumCoolingSupplyAirTemperatureDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMinimumCoolingSupplyAirTemperatureDefaulted(self)

    def maximumHeatingSupplyAirHumidityRatio(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_maximumHeatingSupplyAirHumidityRatio(self)

    def isMaximumHeatingSupplyAirHumidityRatioDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMaximumHeatingSupplyAirHumidityRatioDefaulted(self)

    def minimumCoolingSupplyAirHumidityRatio(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_minimumCoolingSupplyAirHumidityRatio(self)

    def isMinimumCoolingSupplyAirHumidityRatioDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMinimumCoolingSupplyAirHumidityRatioDefaulted(self)

    def heatingLimit(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatingLimit(self)

    def isHeatingLimitDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isHeatingLimitDefaulted(self)

    def maximumHeatingAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_maximumHeatingAirFlowRate(self)

    def isMaximumHeatingAirFlowRateAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMaximumHeatingAirFlowRateAutosized(self)

    def maximumSensibleHeatingCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_maximumSensibleHeatingCapacity(self)

    def isMaximumSensibleHeatingCapacityAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMaximumSensibleHeatingCapacityAutosized(self)

    def coolingLimit(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_coolingLimit(self)

    def isCoolingLimitDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isCoolingLimitDefaulted(self)

    def maximumCoolingAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_maximumCoolingAirFlowRate(self)

    def isMaximumCoolingAirFlowRateAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMaximumCoolingAirFlowRateAutosized(self)

    def maximumTotalCoolingCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_maximumTotalCoolingCapacity(self)

    def isMaximumTotalCoolingCapacityAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isMaximumTotalCoolingCapacityAutosized(self)

    def heatingAvailabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatingAvailabilitySchedule(self)

    def coolingAvailabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_coolingAvailabilitySchedule(self)

    def dehumidificationControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_dehumidificationControlType(self)

    def isDehumidificationControlTypeDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isDehumidificationControlTypeDefaulted(self)

    def coolingSensibleHeatRatio(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_coolingSensibleHeatRatio(self)

    def isCoolingSensibleHeatRatioDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isCoolingSensibleHeatRatioDefaulted(self)

    def humidificationControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_humidificationControlType(self)

    def isHumidificationControlTypeDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isHumidificationControlTypeDefaulted(self)

    def designSpecificationOutdoorAirObject(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_designSpecificationOutdoorAirObject(self)

    def demandControlledVentilationType(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_demandControlledVentilationType(self)

    def isDemandControlledVentilationTypeDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isDemandControlledVentilationTypeDefaulted(self)

    def outdoorAirEconomizerType(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_outdoorAirEconomizerType(self)

    def isOutdoorAirEconomizerTypeDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isOutdoorAirEconomizerTypeDefaulted(self)

    def heatRecoveryType(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_heatRecoveryType(self)

    def isHeatRecoveryTypeDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isHeatRecoveryTypeDefaulted(self)

    def sensibleHeatRecoveryEffectiveness(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_sensibleHeatRecoveryEffectiveness(self)

    def isSensibleHeatRecoveryEffectivenessDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isSensibleHeatRecoveryEffectivenessDefaulted(self)

    def latentHeatRecoveryEffectiveness(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_latentHeatRecoveryEffectiveness(self)

    def isLatentHeatRecoveryEffectivenessDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_isLatentHeatRecoveryEffectivenessDefaulted(self)

    def setAvailabilitySchedule(self, availabilitySchedule):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setAvailabilitySchedule(self, availabilitySchedule)

    def resetAvailabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetAvailabilitySchedule(self)

    def setMaximumHeatingSupplyAirTemperature(self, maximumHeatingSupplyAirTemperature):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMaximumHeatingSupplyAirTemperature(self, maximumHeatingSupplyAirTemperature)

    def resetMaximumHeatingSupplyAirTemperature(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMaximumHeatingSupplyAirTemperature(self)

    def setMinimumCoolingSupplyAirTemperature(self, minimumCoolingSupplyAirTemperature):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMinimumCoolingSupplyAirTemperature(self, minimumCoolingSupplyAirTemperature)

    def resetMinimumCoolingSupplyAirTemperature(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMinimumCoolingSupplyAirTemperature(self)

    def setMaximumHeatingSupplyAirHumidityRatio(self, maximumHeatingSupplyAirHumidityRatio):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMaximumHeatingSupplyAirHumidityRatio(self, maximumHeatingSupplyAirHumidityRatio)

    def resetMaximumHeatingSupplyAirHumidityRatio(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMaximumHeatingSupplyAirHumidityRatio(self)

    def setMinimumCoolingSupplyAirHumidityRatio(self, minimumCoolingSupplyAirHumidityRatio):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMinimumCoolingSupplyAirHumidityRatio(self, minimumCoolingSupplyAirHumidityRatio)

    def resetMinimumCoolingSupplyAirHumidityRatio(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMinimumCoolingSupplyAirHumidityRatio(self)

    def setHeatingLimit(self, heatingLimit):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setHeatingLimit(self, heatingLimit)

    def resetHeatingLimit(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetHeatingLimit(self)

    def setMaximumHeatingAirFlowRate(self, maximumHeatingAirFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMaximumHeatingAirFlowRate(self, maximumHeatingAirFlowRate)

    def resetMaximumHeatingAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMaximumHeatingAirFlowRate(self)

    def autosizeMaximumHeatingAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizeMaximumHeatingAirFlowRate(self)

    def setMaximumSensibleHeatingCapacity(self, maximumSensibleHeatingCapacity):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMaximumSensibleHeatingCapacity(self, maximumSensibleHeatingCapacity)

    def resetMaximumSensibleHeatingCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMaximumSensibleHeatingCapacity(self)

    def autosizeMaximumSensibleHeatingCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizeMaximumSensibleHeatingCapacity(self)

    def setCoolingLimit(self, coolingLimit):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setCoolingLimit(self, coolingLimit)

    def resetCoolingLimit(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetCoolingLimit(self)

    def setMaximumCoolingAirFlowRate(self, maximumCoolingAirFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMaximumCoolingAirFlowRate(self, maximumCoolingAirFlowRate)

    def resetMaximumCoolingAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMaximumCoolingAirFlowRate(self)

    def autosizeMaximumCoolingAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizeMaximumCoolingAirFlowRate(self)

    def setMaximumTotalCoolingCapacity(self, maximumTotalCoolingCapacity):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setMaximumTotalCoolingCapacity(self, maximumTotalCoolingCapacity)

    def resetMaximumTotalCoolingCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetMaximumTotalCoolingCapacity(self)

    def autosizeMaximumTotalCoolingCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizeMaximumTotalCoolingCapacity(self)

    def setHeatingAvailabilitySchedule(self, heatingAvailabilitySchedule):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setHeatingAvailabilitySchedule(self, heatingAvailabilitySchedule)

    def resetHeatingAvailabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetHeatingAvailabilitySchedule(self)

    def setCoolingAvailabilitySchedule(self, coolingAvailabilitySchedule):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setCoolingAvailabilitySchedule(self, coolingAvailabilitySchedule)

    def resetCoolingAvailabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetCoolingAvailabilitySchedule(self)

    def setDehumidificationControlType(self, dehumidificationControlType):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setDehumidificationControlType(self, dehumidificationControlType)

    def resetDehumidificationControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetDehumidificationControlType(self)

    def setCoolingSensibleHeatRatio(self, coolingSensibleHeatRatio):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setCoolingSensibleHeatRatio(self, coolingSensibleHeatRatio)

    def resetCoolingSensibleHeatRatio(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetCoolingSensibleHeatRatio(self)

    def setHumidificationControlType(self, humidificationControlType):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setHumidificationControlType(self, humidificationControlType)

    def resetHumidificationControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetHumidificationControlType(self)

    def setDesignSpecificationOutdoorAirObject(self, designSpecificationOutdoorAirObject):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setDesignSpecificationOutdoorAirObject(self, designSpecificationOutdoorAirObject)

    def resetDesignSpecificationOutdoorAirObject(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetDesignSpecificationOutdoorAirObject(self)

    def setDemandControlledVentilationType(self, demandControlledVentilationType):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setDemandControlledVentilationType(self, demandControlledVentilationType)

    def resetDemandControlledVentilationType(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetDemandControlledVentilationType(self)

    def setOutdoorAirEconomizerType(self, outdoorAirEconomizerType):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setOutdoorAirEconomizerType(self, outdoorAirEconomizerType)

    def resetOutdoorAirEconomizerType(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetOutdoorAirEconomizerType(self)

    def setHeatRecoveryType(self, heatRecoveryType):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setHeatRecoveryType(self, heatRecoveryType)

    def resetHeatRecoveryType(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetHeatRecoveryType(self)

    def setSensibleHeatRecoveryEffectiveness(self, sensibleHeatRecoveryEffectiveness):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setSensibleHeatRecoveryEffectiveness(self, sensibleHeatRecoveryEffectiveness)

    def resetSensibleHeatRecoveryEffectiveness(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetSensibleHeatRecoveryEffectiveness(self)

    def setLatentHeatRecoveryEffectiveness(self, latentHeatRecoveryEffectiveness):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_setLatentHeatRecoveryEffectiveness(self, latentHeatRecoveryEffectiveness)

    def resetLatentHeatRecoveryEffectiveness(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_resetLatentHeatRecoveryEffectiveness(self)

    def autosizedMaximumHeatingAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizedMaximumHeatingAirFlowRate(self)

    def autosizedMaximumSensibleHeatingCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizedMaximumSensibleHeatingCapacity(self)

    def autosizedMaximumCoolingAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizedMaximumCoolingAirFlowRate(self)

    def autosizedMaximumTotalCoolingCapacity(self):
        return _openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_autosizedMaximumTotalCoolingCapacity(self)

# Register ZoneHVACIdealLoadsAirSystem in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACIdealLoadsAirSystem_swigregister(ZoneHVACIdealLoadsAirSystem)

def toZoneHVACIdealLoadsAirSystem(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACIdealLoadsAirSystem(idfObject)

def getZoneHVACIdealLoadsAirSystem(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACIdealLoadsAirSystem(t_model, t_handle)

def getZoneHVACIdealLoadsAirSystems(t_model):
    return _openstudiomodelzonehvac.getZoneHVACIdealLoadsAirSystems(t_model)

def getZoneHVACIdealLoadsAirSystemByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACIdealLoadsAirSystemByName(t_model, t_name)

def getZoneHVACIdealLoadsAirSystemsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACIdealLoadsAirSystemsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACIdealLoadsAirSystem(self) -> OptionalZoneHVACIdealLoadsAirSystem:
    """Try to cast the ModelObject to a ZoneHVACIdealLoadsAirSystem.

    :return: An Optional ZoneHVACIdealLoadsAirSystem.
    """
    return toZoneHVACIdealLoadsAirSystem(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACIdealLoadsAirSystem = _to_ZoneHVACIdealLoadsAirSystem

def _getZoneHVACIdealLoadsAirSystem(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACIdealLoadsAirSystem:
    """Try to get an object of type ZoneHVACIdealLoadsAirSystem referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACIdealLoadsAirSystem.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACIdealLoadsAirSystem(self, t_handle)
Model.getZoneHVACIdealLoadsAirSystem = _getZoneHVACIdealLoadsAirSystem

def _getZoneHVACIdealLoadsAirSystems(self) -> ZoneHVACIdealLoadsAirSystemVector:
    """Get a vector of all objects of type ZoneHVACIdealLoadsAirSystem in the model.

    :return: A vector of ZoneHVACIdealLoadsAirSystem.
    """
    return getZoneHVACIdealLoadsAirSystems(self)
Model.getZoneHVACIdealLoadsAirSystems = _getZoneHVACIdealLoadsAirSystems

def _getZoneHVACIdealLoadsAirSystemByName(self, t_name: str) -> OptionalZoneHVACIdealLoadsAirSystem:
    """Try to get an object of type ZoneHVACIdealLoadsAirSystem that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACIdealLoadsAirSystem.
    """
    return getZoneHVACIdealLoadsAirSystemByName(self, t_name)
Model.getZoneHVACIdealLoadsAirSystemByName = _getZoneHVACIdealLoadsAirSystemByName

def _getZoneHVACIdealLoadsAirSystemsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACIdealLoadsAirSystemVector:
    """Returns all objects of type ZoneHVACIdealLoadsAirSystem named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACIdealLoadsAirSystemsByName(self, t_name, t_exactMatch)
Model.getZoneHVACIdealLoadsAirSystemsByName = _getZoneHVACIdealLoadsAirSystemsByName

class ZoneHVACLowTemperatureRadiantElectric(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACLowTemperatureRadiantElectric

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACLowTemperatureRadiantElectric(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_iddObjectType()

    @staticmethod
    def radiantSurfaceTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_radiantSurfaceTypeValues()

    @staticmethod
    def temperatureControlTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_temperatureControlTypeValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_availabilitySchedule(self)

    def heatingSetpointTemperatureSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_heatingSetpointTemperatureSchedule(self)

    def radiantSurfaceType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_radiantSurfaceType(self)

    def surfaces(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_surfaces(self)

    def maximumElectricalPowertoPanel(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_maximumElectricalPowertoPanel(self)

    def isMaximumElectricalPowertoPanelDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_isMaximumElectricalPowertoPanelDefaulted(self)

    def isMaximumElectricalPowertoPanelAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_isMaximumElectricalPowertoPanelAutosized(self)

    def temperatureControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_temperatureControlType(self)

    def isTemperatureControlTypeDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_isTemperatureControlTypeDefaulted(self)

    def setpointControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_setpointControlType(self)

    def isSetpointControlTypeDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_isSetpointControlTypeDefaulted(self)

    def heatingThrottlingRange(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_heatingThrottlingRange(self)

    def isHeatingThrottlingRangeDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_isHeatingThrottlingRangeDefaulted(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_setAvailabilitySchedule(self, schedule)

    def setHeatingSetpointTemperatureSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_setHeatingSetpointTemperatureSchedule(self, schedule)

    def setRadiantSurfaceType(self, radiantSurfaceType):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_setRadiantSurfaceType(self, radiantSurfaceType)

    def resetRadiantSurfaceType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_resetRadiantSurfaceType(self)

    def setMaximumElectricalPowertoPanel(self, maximumElectricalPowertoPanel):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_setMaximumElectricalPowertoPanel(self, maximumElectricalPowertoPanel)

    def resetMaximumElectricalPowertoPanel(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_resetMaximumElectricalPowertoPanel(self)

    def autosizeMaximumElectricalPowertoPanel(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_autosizeMaximumElectricalPowertoPanel(self)

    def setTemperatureControlType(self, temperatureControlType):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_setTemperatureControlType(self, temperatureControlType)

    def resetTemperatureControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_resetTemperatureControlType(self)

    def setSetpointControlType(self, setpointControlType):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_setSetpointControlType(self, setpointControlType)

    def resetSetpointControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_resetSetpointControlType(self)

    def setHeatingThrottlingRange(self, heatingThrottlingRange):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_setHeatingThrottlingRange(self, heatingThrottlingRange)

    def resetHeatingThrottlingRange(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_resetHeatingThrottlingRange(self)

    def thermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_thermalZone(self)

    def addToThermalZone(self, thermalZone):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_removeFromThermalZone(self)

    def autosizedMaximumElectricalPowertoPanel(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_autosizedMaximumElectricalPowertoPanel(self)

# Register ZoneHVACLowTemperatureRadiantElectric in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACLowTemperatureRadiantElectric_swigregister(ZoneHVACLowTemperatureRadiantElectric)

def toZoneHVACLowTemperatureRadiantElectric(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACLowTemperatureRadiantElectric(idfObject)

def getZoneHVACLowTemperatureRadiantElectric(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACLowTemperatureRadiantElectric(t_model, t_handle)

def getZoneHVACLowTemperatureRadiantElectrics(t_model):
    return _openstudiomodelzonehvac.getZoneHVACLowTemperatureRadiantElectrics(t_model)

def getZoneHVACLowTemperatureRadiantElectricByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACLowTemperatureRadiantElectricByName(t_model, t_name)

def getZoneHVACLowTemperatureRadiantElectricsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACLowTemperatureRadiantElectricsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACLowTemperatureRadiantElectric(self) -> OptionalZoneHVACLowTemperatureRadiantElectric:
    """Try to cast the ModelObject to a ZoneHVACLowTemperatureRadiantElectric.

    :return: An Optional ZoneHVACLowTemperatureRadiantElectric.
    """
    return toZoneHVACLowTemperatureRadiantElectric(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACLowTemperatureRadiantElectric = _to_ZoneHVACLowTemperatureRadiantElectric

def _getZoneHVACLowTemperatureRadiantElectric(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACLowTemperatureRadiantElectric:
    """Try to get an object of type ZoneHVACLowTemperatureRadiantElectric referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACLowTemperatureRadiantElectric.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACLowTemperatureRadiantElectric(self, t_handle)
Model.getZoneHVACLowTemperatureRadiantElectric = _getZoneHVACLowTemperatureRadiantElectric

def _getZoneHVACLowTemperatureRadiantElectrics(self) -> ZoneHVACLowTemperatureRadiantElectricVector:
    """Get a vector of all objects of type ZoneHVACLowTemperatureRadiantElectric in the model.

    :return: A vector of ZoneHVACLowTemperatureRadiantElectric.
    """
    return getZoneHVACLowTemperatureRadiantElectrics(self)
Model.getZoneHVACLowTemperatureRadiantElectrics = _getZoneHVACLowTemperatureRadiantElectrics

def _getZoneHVACLowTemperatureRadiantElectricByName(self, t_name: str) -> OptionalZoneHVACLowTemperatureRadiantElectric:
    """Try to get an object of type ZoneHVACLowTemperatureRadiantElectric that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACLowTemperatureRadiantElectric.
    """
    return getZoneHVACLowTemperatureRadiantElectricByName(self, t_name)
Model.getZoneHVACLowTemperatureRadiantElectricByName = _getZoneHVACLowTemperatureRadiantElectricByName

def _getZoneHVACLowTemperatureRadiantElectricsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACLowTemperatureRadiantElectricVector:
    """Returns all objects of type ZoneHVACLowTemperatureRadiantElectric named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACLowTemperatureRadiantElectricsByName(self, t_name, t_exactMatch)
Model.getZoneHVACLowTemperatureRadiantElectricsByName = _getZoneHVACLowTemperatureRadiantElectricsByName

class ZoneHVACLowTempRadiantConstFlow(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACLowTempRadiantConstFlow

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACLowTempRadiantConstFlow(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_iddObjectType()

    @staticmethod
    def radiantSurfaceTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_radiantSurfaceTypeValues()

    @staticmethod
    def temperatureControlTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_temperatureControlTypeValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_availabilitySchedule(self)

    def radiantSurfaceType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_radiantSurfaceType(self)

    def surfaces(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_surfaces(self)

    def fluidtoRadiantSurfaceHeatTransferModel(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_fluidtoRadiantSurfaceHeatTransferModel(self)

    def isFluidtoRadiantSurfaceHeatTransferModelDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isFluidtoRadiantSurfaceHeatTransferModelDefaulted(self)

    def hydronicTubingInsideDiameter(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_hydronicTubingInsideDiameter(self)

    def isHydronicTubingInsideDiameterDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isHydronicTubingInsideDiameterDefaulted(self)

    def hydronicTubingOutsideDiameter(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_hydronicTubingOutsideDiameter(self)

    def isHydronicTubingOutsideDiameterDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isHydronicTubingOutsideDiameterDefaulted(self)

    def hydronicTubingLength(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_hydronicTubingLength(self)

    def isHydronicTubingLengthAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isHydronicTubingLengthAutosized(self)

    def hydronicTubingConductivity(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_hydronicTubingConductivity(self)

    def isHydronicTubingConductivityDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isHydronicTubingConductivityDefaulted(self)

    def temperatureControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_temperatureControlType(self)

    def isTemperatureControlTypeDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isTemperatureControlTypeDefaulted(self)

    def runningMeanOutdoorDryBulbTemperatureWeightingFactor(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_runningMeanOutdoorDryBulbTemperatureWeightingFactor(self)

    def isRunningMeanOutdoorDryBulbTemperatureWeightingFactorDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isRunningMeanOutdoorDryBulbTemperatureWeightingFactorDefaulted(self)

    def heatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_heatingCoil(self)

    def coolingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_coolingCoil(self)

    def ratedFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_ratedFlowRate(self)

    def isRatedFlowRateAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isRatedFlowRateAutosized(self)

    def pumpFlowRateSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_pumpFlowRateSchedule(self)

    def ratedPumpHead(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_ratedPumpHead(self)

    def isRatedPumpHeadDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isRatedPumpHeadDefaulted(self)

    def ratedPowerConsumption(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_ratedPowerConsumption(self)

    def motorEfficiency(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_motorEfficiency(self)

    def isMotorEfficiencyDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isMotorEfficiencyDefaulted(self)

    def fractionofMotorInefficienciestoFluidStream(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_fractionofMotorInefficienciestoFluidStream(self)

    def isFractionofMotorInefficienciestoFluidStreamDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_isFractionofMotorInefficienciestoFluidStreamDefaulted(self)

    def numberofCircuits(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_numberofCircuits(self)

    def circuitLength(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_circuitLength(self)

    def changeoverDelayTimePeriodSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_changeoverDelayTimePeriodSchedule(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setAvailabilitySchedule(self, schedule)

    def setRadiantSurfaceType(self, radiantSurfaceType):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setRadiantSurfaceType(self, radiantSurfaceType)

    def resetRadiantSurfaceType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetRadiantSurfaceType(self)

    def setFluidtoRadiantSurfaceHeatTransferModel(self, fluidtoRadiantSurfaceHeatTransferModel):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setFluidtoRadiantSurfaceHeatTransferModel(self, fluidtoRadiantSurfaceHeatTransferModel)

    def resetFluidtoRadiantSurfaceHeatTransferModel(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetFluidtoRadiantSurfaceHeatTransferModel(self)

    def setHydronicTubingInsideDiameter(self, hydronicTubingInsideDiameter):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setHydronicTubingInsideDiameter(self, hydronicTubingInsideDiameter)

    def resetHydronicTubingInsideDiameter(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetHydronicTubingInsideDiameter(self)

    def setHydronicTubingOutsideDiameter(self, hydronicTubingOutsideDiameter):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setHydronicTubingOutsideDiameter(self, hydronicTubingOutsideDiameter)

    def resetHydronicTubingOutsideDiameter(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetHydronicTubingOutsideDiameter(self)

    def setHydronicTubingLength(self, hydronicTubingLength):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setHydronicTubingLength(self, hydronicTubingLength)

    def resetHydronicTubingLength(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetHydronicTubingLength(self)

    def autosizeHydronicTubingLength(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_autosizeHydronicTubingLength(self)

    def setHydronicTubingConductivity(self, hydronicTubingConductivity):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setHydronicTubingConductivity(self, hydronicTubingConductivity)

    def resetHydronicTubingConductivity(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetHydronicTubingConductivity(self)

    def setTemperatureControlType(self, temperatureControlType):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setTemperatureControlType(self, temperatureControlType)

    def resetTemperatureControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetTemperatureControlType(self)

    def setRunningMeanOutdoorDryBulbTemperatureWeightingFactor(self, runningMeanOutdoorDryBulbTemperatureWeightingFactor):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setRunningMeanOutdoorDryBulbTemperatureWeightingFactor(self, runningMeanOutdoorDryBulbTemperatureWeightingFactor)

    def resetRunningMeanOutdoorDryBulbTemperatureWeightingFactor(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetRunningMeanOutdoorDryBulbTemperatureWeightingFactor(self)

    def setHeatingCoil(self, heatingCoil):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setHeatingCoil(self, heatingCoil)

    def setCoolingCoil(self, coolingCoil):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setCoolingCoil(self, coolingCoil)

    def setRatedFlowRate(self, ratedFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setRatedFlowRate(self, ratedFlowRate)

    def resetRatedFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetRatedFlowRate(self)

    def autosizeRatedFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_autosizeRatedFlowRate(self)

    def setPumpFlowRateSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setPumpFlowRateSchedule(self, schedule)

    def resetPumpFlowRateSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetPumpFlowRateSchedule(self)

    def setRatedPumpHead(self, ratedPumpHead):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setRatedPumpHead(self, ratedPumpHead)

    def resetRatedPumpHead(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetRatedPumpHead(self)

    def setRatedPowerConsumption(self, ratedPowerConsumption):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setRatedPowerConsumption(self, ratedPowerConsumption)

    def resetRatedPowerConsumption(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetRatedPowerConsumption(self)

    def setMotorEfficiency(self, motorEfficiency):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setMotorEfficiency(self, motorEfficiency)

    def resetMotorEfficiency(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetMotorEfficiency(self)

    def setFractionofMotorInefficienciestoFluidStream(self, fractionofMotorInefficienciestoFluidStream):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setFractionofMotorInefficienciestoFluidStream(self, fractionofMotorInefficienciestoFluidStream)

    def resetFractionofMotorInefficienciestoFluidStream(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetFractionofMotorInefficienciestoFluidStream(self)

    def setNumberofCircuits(self, numberofCircuits):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setNumberofCircuits(self, numberofCircuits)

    def setCircuitLength(self, circuitLength):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setCircuitLength(self, circuitLength)

    def setChangeoverDelayTimePeriodSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_setChangeoverDelayTimePeriodSchedule(self, schedule)

    def resetChangeoverDelayTimePeriodSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_resetChangeoverDelayTimePeriodSchedule(self)

    def thermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_thermalZone(self)

    def addToThermalZone(self, thermalZone):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_removeFromThermalZone(self)

    def autosizedHydronicTubingLength(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_autosizedHydronicTubingLength(self)

    def autosizedRatedFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_autosizedRatedFlowRate(self)

# Register ZoneHVACLowTempRadiantConstFlow in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACLowTempRadiantConstFlow_swigregister(ZoneHVACLowTempRadiantConstFlow)

def toZoneHVACLowTempRadiantConstFlow(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACLowTempRadiantConstFlow(idfObject)

def getZoneHVACLowTempRadiantConstFlow(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantConstFlow(t_model, t_handle)

def getZoneHVACLowTempRadiantConstFlows(t_model):
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantConstFlows(t_model)

def getZoneHVACLowTempRadiantConstFlowByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantConstFlowByName(t_model, t_name)

def getZoneHVACLowTempRadiantConstFlowsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantConstFlowsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACLowTempRadiantConstFlow(self) -> OptionalZoneHVACLowTempRadiantConstFlow:
    """Try to cast the ModelObject to a ZoneHVACLowTempRadiantConstFlow.

    :return: An Optional ZoneHVACLowTempRadiantConstFlow.
    """
    return toZoneHVACLowTempRadiantConstFlow(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACLowTempRadiantConstFlow = _to_ZoneHVACLowTempRadiantConstFlow

def _getZoneHVACLowTempRadiantConstFlow(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACLowTempRadiantConstFlow:
    """Try to get an object of type ZoneHVACLowTempRadiantConstFlow referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACLowTempRadiantConstFlow.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACLowTempRadiantConstFlow(self, t_handle)
Model.getZoneHVACLowTempRadiantConstFlow = _getZoneHVACLowTempRadiantConstFlow

def _getZoneHVACLowTempRadiantConstFlows(self) -> ZoneHVACLowTempRadiantConstFlowVector:
    """Get a vector of all objects of type ZoneHVACLowTempRadiantConstFlow in the model.

    :return: A vector of ZoneHVACLowTempRadiantConstFlow.
    """
    return getZoneHVACLowTempRadiantConstFlows(self)
Model.getZoneHVACLowTempRadiantConstFlows = _getZoneHVACLowTempRadiantConstFlows

def _getZoneHVACLowTempRadiantConstFlowByName(self, t_name: str) -> OptionalZoneHVACLowTempRadiantConstFlow:
    """Try to get an object of type ZoneHVACLowTempRadiantConstFlow that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACLowTempRadiantConstFlow.
    """
    return getZoneHVACLowTempRadiantConstFlowByName(self, t_name)
Model.getZoneHVACLowTempRadiantConstFlowByName = _getZoneHVACLowTempRadiantConstFlowByName

def _getZoneHVACLowTempRadiantConstFlowsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACLowTempRadiantConstFlowVector:
    """Returns all objects of type ZoneHVACLowTempRadiantConstFlow named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACLowTempRadiantConstFlowsByName(self, t_name, t_exactMatch)
Model.getZoneHVACLowTempRadiantConstFlowsByName = _getZoneHVACLowTempRadiantConstFlowsByName

class ZoneHVACLowTempRadiantVarFlow(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACLowTempRadiantVarFlow

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACLowTempRadiantVarFlow(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_iddObjectType()

    @staticmethod
    def radiantSurfaceTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_radiantSurfaceTypeValues()

    @staticmethod
    def temperatureControlTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_temperatureControlTypeValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_availabilitySchedule(self)

    def heatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_heatingCoil(self)

    def coolingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_coolingCoil(self)

    def radiantSurfaceType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_radiantSurfaceType(self)

    def surfaces(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_surfaces(self)

    def fluidtoRadiantSurfaceHeatTransferModel(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_fluidtoRadiantSurfaceHeatTransferModel(self)

    def isFluidtoRadiantSurfaceHeatTransferModelDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_isFluidtoRadiantSurfaceHeatTransferModelDefaulted(self)

    def hydronicTubingInsideDiameter(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_hydronicTubingInsideDiameter(self)

    def isHydronicTubingInsideDiameterDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_isHydronicTubingInsideDiameterDefaulted(self)

    def hydronicTubingOutsideDiameter(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_hydronicTubingOutsideDiameter(self)

    def isHydronicTubingOutsideDiameterDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_isHydronicTubingOutsideDiameterDefaulted(self)

    def hydronicTubingLength(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_hydronicTubingLength(self)

    def isHydronicTubingLengthDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_isHydronicTubingLengthDefaulted(self)

    def isHydronicTubingLengthAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_isHydronicTubingLengthAutosized(self)

    def hydronicTubingConductivity(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_hydronicTubingConductivity(self)

    def isHydronicTubingConductivityDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_isHydronicTubingConductivityDefaulted(self)

    def temperatureControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_temperatureControlType(self)

    def isTemperatureControlTypeDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_isTemperatureControlTypeDefaulted(self)

    def setpointControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setpointControlType(self)

    def isSetpointControlTypeDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_isSetpointControlTypeDefaulted(self)

    def numberofCircuits(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_numberofCircuits(self)

    def circuitLength(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_circuitLength(self)

    def changeoverDelayTimePeriodSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_changeoverDelayTimePeriodSchedule(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setAvailabilitySchedule(self, schedule)

    def setRadiantSurfaceType(self, radiantSurfaceType):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setRadiantSurfaceType(self, radiantSurfaceType)

    def resetRadiantSurfaceType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetRadiantSurfaceType(self)

    def setFluidtoRadiantSurfaceHeatTransferModel(self, fluidtoRadiantSurfaceHeatTransferModel):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setFluidtoRadiantSurfaceHeatTransferModel(self, fluidtoRadiantSurfaceHeatTransferModel)

    def resetFluidtoRadiantSurfaceHeatTransferModel(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetFluidtoRadiantSurfaceHeatTransferModel(self)

    def setHeatingCoil(self, heatingCoil):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setHeatingCoil(self, heatingCoil)

    def resetHeatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetHeatingCoil(self)

    def setCoolingCoil(self, coolingCoil):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setCoolingCoil(self, coolingCoil)

    def resetCoolingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetCoolingCoil(self)

    def setHydronicTubingInsideDiameter(self, hydronicTubingInsideDiameter):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setHydronicTubingInsideDiameter(self, hydronicTubingInsideDiameter)

    def resetHydronicTubingInsideDiameter(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetHydronicTubingInsideDiameter(self)

    def setHydronicTubingOutsideDiameter(self, hydronicTubingOutsideDiameter):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setHydronicTubingOutsideDiameter(self, hydronicTubingOutsideDiameter)

    def resetHydronicTubingOutsideDiameter(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetHydronicTubingOutsideDiameter(self)

    def setHydronicTubingLength(self, hydronicTubingLength):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setHydronicTubingLength(self, hydronicTubingLength)

    def resetHydronicTubingLength(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetHydronicTubingLength(self)

    def autosizeHydronicTubingLength(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_autosizeHydronicTubingLength(self)

    def setHydronicTubingConductivity(self, hydronicTubingConductivity):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setHydronicTubingConductivity(self, hydronicTubingConductivity)

    def resetHydronicTubingConductivity(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetHydronicTubingConductivity(self)

    def setTemperatureControlType(self, temperatureControlType):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setTemperatureControlType(self, temperatureControlType)

    def resetTemperatureControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetTemperatureControlType(self)

    def setSetpointControlType(self, setpointControlType):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setSetpointControlType(self, setpointControlType)

    def resetSetpointControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetSetpointControlType(self)

    def setNumberofCircuits(self, numberofCircuits):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setNumberofCircuits(self, numberofCircuits)

    def setCircuitLength(self, circuitLength):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setCircuitLength(self, circuitLength)

    def setChangeoverDelayTimePeriodSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_setChangeoverDelayTimePeriodSchedule(self, schedule)

    def resetChangeoverDelayTimePeriodSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_resetChangeoverDelayTimePeriodSchedule(self)

    def thermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_thermalZone(self)

    def addToThermalZone(self, thermalZone):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_addToThermalZone(self, thermalZone)

    def removeFromThermalZone(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_removeFromThermalZone(self)

    def autosizedHydronicTubingLength(self):
        return _openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_autosizedHydronicTubingLength(self)

# Register ZoneHVACLowTempRadiantVarFlow in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACLowTempRadiantVarFlow_swigregister(ZoneHVACLowTempRadiantVarFlow)

def toZoneHVACLowTempRadiantVarFlow(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACLowTempRadiantVarFlow(idfObject)

def getZoneHVACLowTempRadiantVarFlow(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantVarFlow(t_model, t_handle)

def getZoneHVACLowTempRadiantVarFlows(t_model):
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantVarFlows(t_model)

def getZoneHVACLowTempRadiantVarFlowByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantVarFlowByName(t_model, t_name)

def getZoneHVACLowTempRadiantVarFlowsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACLowTempRadiantVarFlowsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACLowTempRadiantVarFlow(self) -> OptionalZoneHVACLowTempRadiantVarFlow:
    """Try to cast the ModelObject to a ZoneHVACLowTempRadiantVarFlow.

    :return: An Optional ZoneHVACLowTempRadiantVarFlow.
    """
    return toZoneHVACLowTempRadiantVarFlow(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACLowTempRadiantVarFlow = _to_ZoneHVACLowTempRadiantVarFlow

def _getZoneHVACLowTempRadiantVarFlow(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACLowTempRadiantVarFlow:
    """Try to get an object of type ZoneHVACLowTempRadiantVarFlow referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACLowTempRadiantVarFlow.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACLowTempRadiantVarFlow(self, t_handle)
Model.getZoneHVACLowTempRadiantVarFlow = _getZoneHVACLowTempRadiantVarFlow

def _getZoneHVACLowTempRadiantVarFlows(self) -> ZoneHVACLowTempRadiantVarFlowVector:
    """Get a vector of all objects of type ZoneHVACLowTempRadiantVarFlow in the model.

    :return: A vector of ZoneHVACLowTempRadiantVarFlow.
    """
    return getZoneHVACLowTempRadiantVarFlows(self)
Model.getZoneHVACLowTempRadiantVarFlows = _getZoneHVACLowTempRadiantVarFlows

def _getZoneHVACLowTempRadiantVarFlowByName(self, t_name: str) -> OptionalZoneHVACLowTempRadiantVarFlow:
    """Try to get an object of type ZoneHVACLowTempRadiantVarFlow that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACLowTempRadiantVarFlow.
    """
    return getZoneHVACLowTempRadiantVarFlowByName(self, t_name)
Model.getZoneHVACLowTempRadiantVarFlowByName = _getZoneHVACLowTempRadiantVarFlowByName

def _getZoneHVACLowTempRadiantVarFlowsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACLowTempRadiantVarFlowVector:
    """Returns all objects of type ZoneHVACLowTempRadiantVarFlow named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACLowTempRadiantVarFlowsByName(self, t_name, t_exactMatch)
Model.getZoneHVACLowTempRadiantVarFlowsByName = _getZoneHVACLowTempRadiantVarFlowsByName

class ZoneHVACPackagedTerminalHeatPump(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACPackagedTerminalHeatPump

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACPackagedTerminalHeatPump(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_iddObjectType()

    @staticmethod
    def outdoorAirMixerObjectTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirMixerObjectTypeValues()

    @staticmethod
    def validOutdoorAirMixerObjectTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_validOutdoorAirMixerObjectTypeValues()

    @staticmethod
    def fanPlacementValues():
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_fanPlacementValues()

    @staticmethod
    def validFanPlacementValues():
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_validFanPlacementValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_availabilitySchedule(self)

    def outdoorAirMixerObjectType(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirMixerObjectType(self)

    def outdoorAirMixerName(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirMixerName(self)

    def supplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_supplyAirFlowRateDuringCoolingOperation(self)

    def isSupplyAirFlowRateDuringCoolingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isSupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def supplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_supplyAirFlowRateDuringHeatingOperation(self)

    def isSupplyAirFlowRateDuringHeatingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isSupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def noLoadSupplyAirFlowRateControlSetToLowSpeed(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_noLoadSupplyAirFlowRateControlSetToLowSpeed(self)

    def outdoorAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirFlowRateDuringCoolingOperation(self)

    def isOutdoorAirFlowRateDuringCoolingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isOutdoorAirFlowRateDuringCoolingOperationAutosized(self)

    def outdoorAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirFlowRateDuringHeatingOperation(self)

    def isOutdoorAirFlowRateDuringHeatingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isOutdoorAirFlowRateDuringHeatingOperationAutosized(self)

    def outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def supplyAirFan(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_supplyAirFan(self)

    def heatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_heatingCoil(self)

    def heatingConvergenceTolerance(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_heatingConvergenceTolerance(self)

    def isHeatingConvergenceToleranceDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isHeatingConvergenceToleranceDefaulted(self)

    def minimumOutdoorDryBulbTemperatureforCompressorOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_minimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def isMinimumOutdoorDryBulbTemperatureforCompressorOperationDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isMinimumOutdoorDryBulbTemperatureforCompressorOperationDefaulted(self)

    def coolingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_coolingCoil(self)

    def coolingConvergenceTolerance(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_coolingConvergenceTolerance(self)

    def isCoolingConvergenceToleranceDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isCoolingConvergenceToleranceDefaulted(self)

    def supplementalHeatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_supplementalHeatingCoil(self)

    def maximumSupplyAirTemperaturefromSupplementalHeater(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_maximumSupplyAirTemperaturefromSupplementalHeater(self)

    def isMaximumSupplyAirTemperaturefromSupplementalHeaterAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isMaximumSupplyAirTemperaturefromSupplementalHeaterAutosized(self)

    def maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def isMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperationDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperationDefaulted(self)

    def fanPlacement(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_fanPlacement(self)

    def isFanPlacementDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_isFanPlacementDefaulted(self)

    def supplyAirFanOperatingModeSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_supplyAirFanOperatingModeSchedule(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setAvailabilitySchedule(self, schedule)

    def setOutdoorAirMixerObjectType(self, outdoorAirMixerObjectType):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setOutdoorAirMixerObjectType(self, outdoorAirMixerObjectType)

    def setOutdoorAirMixerName(self, outdoorAirMixerName):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setOutdoorAirMixerName(self, outdoorAirMixerName)

    def setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation)

    def autosizeSupplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizeSupplyAirFlowRateDuringCoolingOperation(self)

    def setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation)

    def autosizeSupplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizeSupplyAirFlowRateDuringHeatingOperation(self)

    def setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, supplyAirFlowRateWhenNoCoolingorHeatingisNeeded):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, supplyAirFlowRateWhenNoCoolingorHeatingisNeeded)

    def resetSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setNoLoadSupplyAirFlowRateControlSetToLowSpeed(self, noLoadSupplyAirFlowRateControlSetToLowSpeed):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setNoLoadSupplyAirFlowRateControlSetToLowSpeed(self, noLoadSupplyAirFlowRateControlSetToLowSpeed)

    def setOutdoorAirFlowRateDuringCoolingOperation(self, outdoorAirFlowRateDuringCoolingOperation):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setOutdoorAirFlowRateDuringCoolingOperation(self, outdoorAirFlowRateDuringCoolingOperation)

    def autosizeOutdoorAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizeOutdoorAirFlowRateDuringCoolingOperation(self)

    def setOutdoorAirFlowRateDuringHeatingOperation(self, outdoorAirFlowRateDuringHeatingOperation):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setOutdoorAirFlowRateDuringHeatingOperation(self, outdoorAirFlowRateDuringHeatingOperation)

    def autosizeOutdoorAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizeOutdoorAirFlowRateDuringHeatingOperation(self)

    def setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded)

    def resetOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setSupplyAirFan(self, hvacComponent):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setSupplyAirFan(self, hvacComponent)

    def setHeatingCoil(self, hvacComponent):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setHeatingCoil(self, hvacComponent)

    def setHeatingConvergenceTolerance(self, heatingConvergenceTolerance):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setHeatingConvergenceTolerance(self, heatingConvergenceTolerance)

    def resetHeatingConvergenceTolerance(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetHeatingConvergenceTolerance(self)

    def setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation)

    def resetMinimumOutdoorDryBulbTemperatureforCompressorOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetMinimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def setCoolingCoil(self, hvacComponent):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setCoolingCoil(self, hvacComponent)

    def setCoolingConvergenceTolerance(self, coolingConvergenceTolerance):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setCoolingConvergenceTolerance(self, coolingConvergenceTolerance)

    def resetCoolingConvergenceTolerance(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetCoolingConvergenceTolerance(self)

    def setSupplementalHeatingCoil(self, hvacComponent):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setSupplementalHeatingCoil(self, hvacComponent)

    def setMaximumSupplyAirTemperaturefromSupplementalHeater(self, maximumSupplyAirTemperaturefromSupplementalHeater):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setMaximumSupplyAirTemperaturefromSupplementalHeater(self, maximumSupplyAirTemperaturefromSupplementalHeater)

    def autosizeMaximumSupplyAirTemperaturefromSupplementalHeater(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizeMaximumSupplyAirTemperaturefromSupplementalHeater(self)

    def setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation)

    def resetMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def setFanPlacement(self, fanPlacement):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setFanPlacement(self, fanPlacement)

    def resetFanPlacement(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_resetFanPlacement(self)

    def setSupplyAirFanOperatingModeSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def autosizedSupplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizedSupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedSupplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizedSupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizedOutdoorAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizedOutdoorAirFlowRateDuringCoolingOperation(self)

    def autosizedOutdoorAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizedOutdoorAirFlowRateDuringHeatingOperation(self)

    def autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizedMaximumSupplyAirTemperaturefromSupplementalHeater(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_autosizedMaximumSupplyAirTemperaturefromSupplementalHeater(self)

# Register ZoneHVACPackagedTerminalHeatPump in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACPackagedTerminalHeatPump_swigregister(ZoneHVACPackagedTerminalHeatPump)

def toZoneHVACPackagedTerminalHeatPump(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACPackagedTerminalHeatPump(idfObject)

def getZoneHVACPackagedTerminalHeatPump(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalHeatPump(t_model, t_handle)

def getZoneHVACPackagedTerminalHeatPumps(t_model):
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalHeatPumps(t_model)

def getZoneHVACPackagedTerminalHeatPumpByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalHeatPumpByName(t_model, t_name)

def getZoneHVACPackagedTerminalHeatPumpsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalHeatPumpsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACPackagedTerminalHeatPump(self) -> OptionalZoneHVACPackagedTerminalHeatPump:
    """Try to cast the ModelObject to a ZoneHVACPackagedTerminalHeatPump.

    :return: An Optional ZoneHVACPackagedTerminalHeatPump.
    """
    return toZoneHVACPackagedTerminalHeatPump(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACPackagedTerminalHeatPump = _to_ZoneHVACPackagedTerminalHeatPump

def _getZoneHVACPackagedTerminalHeatPump(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACPackagedTerminalHeatPump:
    """Try to get an object of type ZoneHVACPackagedTerminalHeatPump referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACPackagedTerminalHeatPump.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACPackagedTerminalHeatPump(self, t_handle)
Model.getZoneHVACPackagedTerminalHeatPump = _getZoneHVACPackagedTerminalHeatPump

def _getZoneHVACPackagedTerminalHeatPumps(self) -> ZoneHVACPackagedTerminalHeatPumpVector:
    """Get a vector of all objects of type ZoneHVACPackagedTerminalHeatPump in the model.

    :return: A vector of ZoneHVACPackagedTerminalHeatPump.
    """
    return getZoneHVACPackagedTerminalHeatPumps(self)
Model.getZoneHVACPackagedTerminalHeatPumps = _getZoneHVACPackagedTerminalHeatPumps

def _getZoneHVACPackagedTerminalHeatPumpByName(self, t_name: str) -> OptionalZoneHVACPackagedTerminalHeatPump:
    """Try to get an object of type ZoneHVACPackagedTerminalHeatPump that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACPackagedTerminalHeatPump.
    """
    return getZoneHVACPackagedTerminalHeatPumpByName(self, t_name)
Model.getZoneHVACPackagedTerminalHeatPumpByName = _getZoneHVACPackagedTerminalHeatPumpByName

def _getZoneHVACPackagedTerminalHeatPumpsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACPackagedTerminalHeatPumpVector:
    """Returns all objects of type ZoneHVACPackagedTerminalHeatPump named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACPackagedTerminalHeatPumpsByName(self, t_name, t_exactMatch)
Model.getZoneHVACPackagedTerminalHeatPumpsByName = _getZoneHVACPackagedTerminalHeatPumpsByName

class ZoneHVACPackagedTerminalAirConditioner(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACPackagedTerminalAirConditioner

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACPackagedTerminalAirConditioner(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_iddObjectType()

    @staticmethod
    def outdoorAirMixerObjectTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirMixerObjectTypeValues()

    @staticmethod
    def validOutdoorAirMixerObjectTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_validOutdoorAirMixerObjectTypeValues()

    @staticmethod
    def fanPlacementValues():
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_fanPlacementValues()

    @staticmethod
    def validFanPlacementValues():
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_validFanPlacementValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_availabilitySchedule(self)

    def outdoorAirMixerObjectType(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirMixerObjectType(self)

    def outdoorAirMixerName(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirMixerName(self)

    def supplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_supplyAirFlowRateDuringCoolingOperation(self)

    def isSupplyAirFlowRateDuringCoolingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_isSupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def supplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_supplyAirFlowRateDuringHeatingOperation(self)

    def isSupplyAirFlowRateDuringHeatingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_isSupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def noLoadSupplyAirFlowRateControlSetToLowSpeed(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_noLoadSupplyAirFlowRateControlSetToLowSpeed(self)

    def outdoorAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirFlowRateDuringCoolingOperation(self)

    def isOutdoorAirFlowRateDuringCoolingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_isOutdoorAirFlowRateDuringCoolingOperationAutosized(self)

    def outdoorAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirFlowRateDuringHeatingOperation(self)

    def isOutdoorAirFlowRateDuringHeatingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_isOutdoorAirFlowRateDuringHeatingOperationAutosized(self)

    def outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def supplyAirFan(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_supplyAirFan(self)

    def heatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_heatingCoil(self)

    def coolingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_coolingCoil(self)

    def fanPlacement(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_fanPlacement(self)

    def isFanPlacementDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_isFanPlacementDefaulted(self)

    def supplyAirFanOperatingModeSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_supplyAirFanOperatingModeSchedule(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setAvailabilitySchedule(self, schedule)

    def setOutdoorAirMixerObjectType(self, outdoorAirMixerObjectType):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setOutdoorAirMixerObjectType(self, outdoorAirMixerObjectType)

    def setOutdoorAirMixerName(self, outdoorAirMixerName):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setOutdoorAirMixerName(self, outdoorAirMixerName)

    def setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation)

    def autosizeSupplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizeSupplyAirFlowRateDuringCoolingOperation(self)

    def setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation)

    def autosizeSupplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizeSupplyAirFlowRateDuringHeatingOperation(self)

    def setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, supplyAirFlowRateWhenNoCoolingorHeatingisNeeded):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, supplyAirFlowRateWhenNoCoolingorHeatingisNeeded)

    def resetSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_resetSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setNoLoadSupplyAirFlowRateControlSetToLowSpeed(self, noLoadSupplyAirFlowRateControlSetToLowSpeed):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setNoLoadSupplyAirFlowRateControlSetToLowSpeed(self, noLoadSupplyAirFlowRateControlSetToLowSpeed)

    def setOutdoorAirFlowRateDuringCoolingOperation(self, outdoorAirFlowRateDuringCoolingOperation):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setOutdoorAirFlowRateDuringCoolingOperation(self, outdoorAirFlowRateDuringCoolingOperation)

    def autosizeOutdoorAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizeOutdoorAirFlowRateDuringCoolingOperation(self)

    def setOutdoorAirFlowRateDuringHeatingOperation(self, outdoorAirFlowRateDuringHeatingOperation):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setOutdoorAirFlowRateDuringHeatingOperation(self, outdoorAirFlowRateDuringHeatingOperation)

    def autosizeOutdoorAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizeOutdoorAirFlowRateDuringHeatingOperation(self)

    def setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded)

    def resetOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_resetOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setSupplyAirFan(self, fan):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setSupplyAirFan(self, fan)

    def setHeatingCoil(self, heatingCoil):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setHeatingCoil(self, heatingCoil)

    def setCoolingCoil(self, coolingCoil):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setCoolingCoil(self, coolingCoil)

    def setFanPlacement(self, fanPlacement):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setFanPlacement(self, fanPlacement)

    def resetFanPlacement(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_resetFanPlacement(self)

    def setSupplyAirFanOperatingModeSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def autosizedSupplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizedSupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedSupplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizedSupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizedOutdoorAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizedOutdoorAirFlowRateDuringCoolingOperation(self)

    def autosizedOutdoorAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizedOutdoorAirFlowRateDuringHeatingOperation(self)

    def autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

# Register ZoneHVACPackagedTerminalAirConditioner in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACPackagedTerminalAirConditioner_swigregister(ZoneHVACPackagedTerminalAirConditioner)

def toZoneHVACPackagedTerminalAirConditioner(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACPackagedTerminalAirConditioner(idfObject)

def getZoneHVACPackagedTerminalAirConditioner(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalAirConditioner(t_model, t_handle)

def getZoneHVACPackagedTerminalAirConditioners(t_model):
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalAirConditioners(t_model)

def getZoneHVACPackagedTerminalAirConditionerByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalAirConditionerByName(t_model, t_name)

def getZoneHVACPackagedTerminalAirConditionersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACPackagedTerminalAirConditionersByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACPackagedTerminalAirConditioner(self) -> OptionalZoneHVACPackagedTerminalAirConditioner:
    """Try to cast the ModelObject to a ZoneHVACPackagedTerminalAirConditioner.

    :return: An Optional ZoneHVACPackagedTerminalAirConditioner.
    """
    return toZoneHVACPackagedTerminalAirConditioner(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACPackagedTerminalAirConditioner = _to_ZoneHVACPackagedTerminalAirConditioner

def _getZoneHVACPackagedTerminalAirConditioner(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACPackagedTerminalAirConditioner:
    """Try to get an object of type ZoneHVACPackagedTerminalAirConditioner referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACPackagedTerminalAirConditioner.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACPackagedTerminalAirConditioner(self, t_handle)
Model.getZoneHVACPackagedTerminalAirConditioner = _getZoneHVACPackagedTerminalAirConditioner

def _getZoneHVACPackagedTerminalAirConditioners(self) -> ZoneHVACPackagedTerminalAirConditionerVector:
    """Get a vector of all objects of type ZoneHVACPackagedTerminalAirConditioner in the model.

    :return: A vector of ZoneHVACPackagedTerminalAirConditioner.
    """
    return getZoneHVACPackagedTerminalAirConditioners(self)
Model.getZoneHVACPackagedTerminalAirConditioners = _getZoneHVACPackagedTerminalAirConditioners

def _getZoneHVACPackagedTerminalAirConditionerByName(self, t_name: str) -> OptionalZoneHVACPackagedTerminalAirConditioner:
    """Try to get an object of type ZoneHVACPackagedTerminalAirConditioner that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACPackagedTerminalAirConditioner.
    """
    return getZoneHVACPackagedTerminalAirConditionerByName(self, t_name)
Model.getZoneHVACPackagedTerminalAirConditionerByName = _getZoneHVACPackagedTerminalAirConditionerByName

def _getZoneHVACPackagedTerminalAirConditionersByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACPackagedTerminalAirConditionerVector:
    """Returns all objects of type ZoneHVACPackagedTerminalAirConditioner named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACPackagedTerminalAirConditionersByName(self, t_name, t_exactMatch)
Model.getZoneHVACPackagedTerminalAirConditionersByName = _getZoneHVACPackagedTerminalAirConditionersByName

class ZoneHVACTerminalUnitVariableRefrigerantFlow(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACTerminalUnitVariableRefrigerantFlow

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACTerminalUnitVariableRefrigerantFlow(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_iddObjectType()

    @staticmethod
    def supplyAirFanPlacementValues():
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFanPlacementValues()

    def terminalUnitAvailabilityschedule(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_terminalUnitAvailabilityschedule(self)

    def setTerminalUnitAvailabilityschedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setTerminalUnitAvailabilityschedule(self, schedule)

    def supplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFlowRateDuringCoolingOperation(self)

    def isSupplyAirFlowRateDuringCoolingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isSupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setSupplyAirFlowRateDuringCoolingOperation(self, supplyAirFlowRateDuringCoolingOperation)

    def autosizeSupplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeSupplyAirFlowRateDuringCoolingOperation(self)

    def supplyAirFlowRateWhenNoCoolingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFlowRateWhenNoCoolingisNeeded(self)

    def isSupplyAirFlowRateWhenNoCoolingisNeededAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isSupplyAirFlowRateWhenNoCoolingisNeededAutosized(self)

    def setSupplyAirFlowRateWhenNoCoolingisNeeded(self, supplyAirFlowRateWhenNoCoolingisNeeded):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setSupplyAirFlowRateWhenNoCoolingisNeeded(self, supplyAirFlowRateWhenNoCoolingisNeeded)

    def autosizeSupplyAirFlowRateWhenNoCoolingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeSupplyAirFlowRateWhenNoCoolingisNeeded(self)

    def supplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFlowRateDuringHeatingOperation(self)

    def isSupplyAirFlowRateDuringHeatingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isSupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setSupplyAirFlowRateDuringHeatingOperation(self, supplyAirFlowRateDuringHeatingOperation)

    def autosizeSupplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeSupplyAirFlowRateDuringHeatingOperation(self)

    def supplyAirFlowRateWhenNoHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFlowRateWhenNoHeatingisNeeded(self)

    def isSupplyAirFlowRateWhenNoHeatingisNeededAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isSupplyAirFlowRateWhenNoHeatingisNeededAutosized(self)

    def setSupplyAirFlowRateWhenNoHeatingisNeeded(self, supplyAirFlowRateWhenNoHeatingisNeeded):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setSupplyAirFlowRateWhenNoHeatingisNeeded(self, supplyAirFlowRateWhenNoHeatingisNeeded)

    def autosizeSupplyAirFlowRateWhenNoHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeSupplyAirFlowRateWhenNoHeatingisNeeded(self)

    def outdoorAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_outdoorAirFlowRateDuringCoolingOperation(self)

    def isOutdoorAirFlowRateDuringCoolingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isOutdoorAirFlowRateDuringCoolingOperationAutosized(self)

    def setOutdoorAirFlowRateDuringCoolingOperation(self, outdoorAirFlowRateDuringCoolingOperation):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setOutdoorAirFlowRateDuringCoolingOperation(self, outdoorAirFlowRateDuringCoolingOperation)

    def autosizeOutdoorAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeOutdoorAirFlowRateDuringCoolingOperation(self)

    def outdoorAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_outdoorAirFlowRateDuringHeatingOperation(self)

    def isOutdoorAirFlowRateDuringHeatingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isOutdoorAirFlowRateDuringHeatingOperationAutosized(self)

    def setOutdoorAirFlowRateDuringHeatingOperation(self, outdoorAirFlowRateDuringHeatingOperation):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setOutdoorAirFlowRateDuringHeatingOperation(self, outdoorAirFlowRateDuringHeatingOperation)

    def autosizeOutdoorAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeOutdoorAirFlowRateDuringHeatingOperation(self)

    def outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded)

    def autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def supplyAirFanOperatingModeSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFanOperatingModeSchedule(self)

    def setSupplyAirFanOperatingModeSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def supplyAirFan(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFan(self)

    def coolingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_coolingCoil(self)

    def setCoolingCoil(self, coil):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setCoolingCoil(self, coil)

    def heatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_heatingCoil(self)

    def setHeatingCoil(self, coil):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setHeatingCoil(self, coil)

    def zoneTerminalUnitOnParasiticElectricEnergyUse(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_zoneTerminalUnitOnParasiticElectricEnergyUse(self)

    def setZoneTerminalUnitOnParasiticElectricEnergyUse(self, zoneTerminalUnitOnParasiticElectricEnergyUse):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setZoneTerminalUnitOnParasiticElectricEnergyUse(self, zoneTerminalUnitOnParasiticElectricEnergyUse)

    def zoneTerminalUnitOffParasiticElectricEnergyUse(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_zoneTerminalUnitOffParasiticElectricEnergyUse(self)

    def setZoneTerminalUnitOffParasiticElectricEnergyUse(self, zoneTerminalUnitOffParasiticElectricEnergyUse):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setZoneTerminalUnitOffParasiticElectricEnergyUse(self, zoneTerminalUnitOffParasiticElectricEnergyUse)

    def ratedTotalHeatingCapacitySizingRatio(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_ratedTotalHeatingCapacitySizingRatio(self)

    def setRatedTotalHeatingCapacitySizingRatio(self, ratedTotalHeatingCapacitySizingRatio):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setRatedTotalHeatingCapacitySizingRatio(self, ratedTotalHeatingCapacitySizingRatio)

    def supplementalHeatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplementalHeatingCoil(self)

    def setSupplementalHeatingCoil(self, coil):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setSupplementalHeatingCoil(self, coil)

    def resetSupplementalHeatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_resetSupplementalHeatingCoil(self)

    def maximumSupplyAirTemperaturefromSupplementalHeater(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_maximumSupplyAirTemperaturefromSupplementalHeater(self)

    def isMaximumSupplyAirTemperaturefromSupplementalHeaterAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isMaximumSupplyAirTemperaturefromSupplementalHeaterAutosized(self)

    def setMaximumSupplyAirTemperaturefromSupplementalHeater(self, maximumSupplyAirTemperaturefromSupplementalHeater):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setMaximumSupplyAirTemperaturefromSupplementalHeater(self, maximumSupplyAirTemperaturefromSupplementalHeater)

    def autosizeMaximumSupplyAirTemperaturefromSupplementalHeater(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizeMaximumSupplyAirTemperaturefromSupplementalHeater(self)

    def maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation)

    def supplyAirFanPlacement(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_supplyAirFanPlacement(self)

    def setSupplyAirFanPlacement(self, supplyAirFanPlacement):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setSupplyAirFanPlacement(self, supplyAirFanPlacement)

    def controllingZoneorThermostatLocation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_controllingZoneorThermostatLocation(self)

    def setControllingZoneorThermostatLocation(self, thermalZone):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_setControllingZoneorThermostatLocation(self, thermalZone)

    def resetControllingZoneorThermostatLocation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_resetControllingZoneorThermostatLocation(self)

    def autosizedSupplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedSupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedSupplyAirFlowRateWhenNoCoolingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedSupplyAirFlowRateWhenNoCoolingisNeeded(self)

    def autosizedSupplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedSupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSupplyAirFlowRateWhenNoHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedSupplyAirFlowRateWhenNoHeatingisNeeded(self)

    def autosizedOutdoorAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedOutdoorAirFlowRateDuringCoolingOperation(self)

    def autosizedOutdoorAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedOutdoorAirFlowRateDuringHeatingOperation(self)

    def autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizedMaximumSupplyAirTemperaturefromSupplementalHeater(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_autosizedMaximumSupplyAirTemperaturefromSupplementalHeater(self)

    def isFluidTemperatureControl(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_isFluidTemperatureControl(self)

    def vrfSystem(self):
        return _openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_vrfSystem(self)

# Register ZoneHVACTerminalUnitVariableRefrigerantFlow in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACTerminalUnitVariableRefrigerantFlow_swigregister(ZoneHVACTerminalUnitVariableRefrigerantFlow)

def toZoneHVACTerminalUnitVariableRefrigerantFlow(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACTerminalUnitVariableRefrigerantFlow(idfObject)

def getZoneHVACTerminalUnitVariableRefrigerantFlow(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACTerminalUnitVariableRefrigerantFlow(t_model, t_handle)

def getZoneHVACTerminalUnitVariableRefrigerantFlows(t_model):
    return _openstudiomodelzonehvac.getZoneHVACTerminalUnitVariableRefrigerantFlows(t_model)

def getZoneHVACTerminalUnitVariableRefrigerantFlowByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACTerminalUnitVariableRefrigerantFlowByName(t_model, t_name)

def getZoneHVACTerminalUnitVariableRefrigerantFlowsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACTerminalUnitVariableRefrigerantFlowsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACTerminalUnitVariableRefrigerantFlow(self) -> OptionalZoneHVACTerminalUnitVariableRefrigerantFlow:
    """Try to cast the ModelObject to a ZoneHVACTerminalUnitVariableRefrigerantFlow.

    :return: An Optional ZoneHVACTerminalUnitVariableRefrigerantFlow.
    """
    return toZoneHVACTerminalUnitVariableRefrigerantFlow(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACTerminalUnitVariableRefrigerantFlow = _to_ZoneHVACTerminalUnitVariableRefrigerantFlow

def _getZoneHVACTerminalUnitVariableRefrigerantFlow(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACTerminalUnitVariableRefrigerantFlow:
    """Try to get an object of type ZoneHVACTerminalUnitVariableRefrigerantFlow referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACTerminalUnitVariableRefrigerantFlow.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACTerminalUnitVariableRefrigerantFlow(self, t_handle)
Model.getZoneHVACTerminalUnitVariableRefrigerantFlow = _getZoneHVACTerminalUnitVariableRefrigerantFlow

def _getZoneHVACTerminalUnitVariableRefrigerantFlows(self) -> ZoneHVACTerminalUnitVariableRefrigerantFlowVector:
    """Get a vector of all objects of type ZoneHVACTerminalUnitVariableRefrigerantFlow in the model.

    :return: A vector of ZoneHVACTerminalUnitVariableRefrigerantFlow.
    """
    return getZoneHVACTerminalUnitVariableRefrigerantFlows(self)
Model.getZoneHVACTerminalUnitVariableRefrigerantFlows = _getZoneHVACTerminalUnitVariableRefrigerantFlows

def _getZoneHVACTerminalUnitVariableRefrigerantFlowByName(self, t_name: str) -> OptionalZoneHVACTerminalUnitVariableRefrigerantFlow:
    """Try to get an object of type ZoneHVACTerminalUnitVariableRefrigerantFlow that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACTerminalUnitVariableRefrigerantFlow.
    """
    return getZoneHVACTerminalUnitVariableRefrigerantFlowByName(self, t_name)
Model.getZoneHVACTerminalUnitVariableRefrigerantFlowByName = _getZoneHVACTerminalUnitVariableRefrigerantFlowByName

def _getZoneHVACTerminalUnitVariableRefrigerantFlowsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACTerminalUnitVariableRefrigerantFlowVector:
    """Returns all objects of type ZoneHVACTerminalUnitVariableRefrigerantFlow named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACTerminalUnitVariableRefrigerantFlowsByName(self, t_name, t_exactMatch)
Model.getZoneHVACTerminalUnitVariableRefrigerantFlowsByName = _getZoneHVACTerminalUnitVariableRefrigerantFlowsByName

class ZoneHVACUnitHeater(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACUnitHeater

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACUnitHeater_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACUnitHeater(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_iddObjectType()

    @staticmethod
    def fanControlTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_fanControlTypeValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_availabilitySchedule(self)

    def supplyAirFan(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_supplyAirFan(self)

    def maximumSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_maximumSupplyAirFlowRate(self)

    def isMaximumSupplyAirFlowRateAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_isMaximumSupplyAirFlowRateAutosized(self)

    def fanControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_fanControlType(self)

    def heatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_heatingCoil(self)

    def maximumHotWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_maximumHotWaterFlowRate(self)

    def isMaximumHotWaterFlowRateAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_isMaximumHotWaterFlowRateAutosized(self)

    def minimumHotWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_minimumHotWaterFlowRate(self)

    def isMinimumHotWaterFlowRateDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_isMinimumHotWaterFlowRateDefaulted(self)

    def heatingConvergenceTolerance(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_heatingConvergenceTolerance(self)

    def isHeatingConvergenceToleranceDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_isHeatingConvergenceToleranceDefaulted(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setAvailabilitySchedule(self, schedule)

    def setSupplyAirFan(self, fan):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setSupplyAirFan(self, fan)

    def setMaximumSupplyAirFlowRate(self, maximumSupplyAirFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setMaximumSupplyAirFlowRate(self, maximumSupplyAirFlowRate)

    def autosizeMaximumSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_autosizeMaximumSupplyAirFlowRate(self)

    def setFanControlType(self, fanControlType):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setFanControlType(self, fanControlType)

    def setHeatingCoil(self, heatingCoil):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setHeatingCoil(self, heatingCoil)

    def setMaximumHotWaterFlowRate(self, maximumHotWaterFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setMaximumHotWaterFlowRate(self, maximumHotWaterFlowRate)

    def resetMaximumHotWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_resetMaximumHotWaterFlowRate(self)

    def autosizeMaximumHotWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_autosizeMaximumHotWaterFlowRate(self)

    def setMinimumHotWaterFlowRate(self, minimumHotWaterFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setMinimumHotWaterFlowRate(self, minimumHotWaterFlowRate)

    def resetMinimumHotWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_resetMinimumHotWaterFlowRate(self)

    def setHeatingConvergenceTolerance(self, heatingConvergenceTolerance):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_setHeatingConvergenceTolerance(self, heatingConvergenceTolerance)

    def resetHeatingConvergenceTolerance(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_resetHeatingConvergenceTolerance(self)

    def autosizedMaximumSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_autosizedMaximumSupplyAirFlowRate(self)

    def autosizedMaximumHotWaterFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitHeater_autosizedMaximumHotWaterFlowRate(self)

# Register ZoneHVACUnitHeater in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACUnitHeater_swigregister(ZoneHVACUnitHeater)

def toZoneHVACUnitHeater(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACUnitHeater(idfObject)

def getZoneHVACUnitHeater(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACUnitHeater(t_model, t_handle)

def getZoneHVACUnitHeaters(t_model):
    return _openstudiomodelzonehvac.getZoneHVACUnitHeaters(t_model)

def getZoneHVACUnitHeaterByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACUnitHeaterByName(t_model, t_name)

def getZoneHVACUnitHeatersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACUnitHeatersByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACUnitHeater(self) -> OptionalZoneHVACUnitHeater:
    """Try to cast the ModelObject to a ZoneHVACUnitHeater.

    :return: An Optional ZoneHVACUnitHeater.
    """
    return toZoneHVACUnitHeater(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACUnitHeater = _to_ZoneHVACUnitHeater

def _getZoneHVACUnitHeater(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACUnitHeater:
    """Try to get an object of type ZoneHVACUnitHeater referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACUnitHeater.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACUnitHeater(self, t_handle)
Model.getZoneHVACUnitHeater = _getZoneHVACUnitHeater

def _getZoneHVACUnitHeaters(self) -> ZoneHVACUnitHeaterVector:
    """Get a vector of all objects of type ZoneHVACUnitHeater in the model.

    :return: A vector of ZoneHVACUnitHeater.
    """
    return getZoneHVACUnitHeaters(self)
Model.getZoneHVACUnitHeaters = _getZoneHVACUnitHeaters

def _getZoneHVACUnitHeaterByName(self, t_name: str) -> OptionalZoneHVACUnitHeater:
    """Try to get an object of type ZoneHVACUnitHeater that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACUnitHeater.
    """
    return getZoneHVACUnitHeaterByName(self, t_name)
Model.getZoneHVACUnitHeaterByName = _getZoneHVACUnitHeaterByName

def _getZoneHVACUnitHeatersByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACUnitHeaterVector:
    """Returns all objects of type ZoneHVACUnitHeater named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACUnitHeatersByName(self, t_name, t_exactMatch)
Model.getZoneHVACUnitHeatersByName = _getZoneHVACUnitHeatersByName

class ZoneHVACUnitVentilator(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACUnitVentilator

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACUnitVentilator_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACUnitVentilator(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_iddObjectType()

    @staticmethod
    def outdoorAirControlTypeValues():
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_outdoorAirControlTypeValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_availabilitySchedule(self)

    def maximumSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_maximumSupplyAirFlowRate(self)

    def isMaximumSupplyAirFlowRateAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_isMaximumSupplyAirFlowRateAutosized(self)

    def outdoorAirControlType(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_outdoorAirControlType(self)

    def minimumOutdoorAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_minimumOutdoorAirFlowRate(self)

    def isMinimumOutdoorAirFlowRateAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_isMinimumOutdoorAirFlowRateAutosized(self)

    def minimumOutdoorAirSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_minimumOutdoorAirSchedule(self)

    def maximumOutdoorAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_maximumOutdoorAirFlowRate(self)

    def isMaximumOutdoorAirFlowRateAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_isMaximumOutdoorAirFlowRateAutosized(self)

    def maximumOutdoorAirFractionorTemperatureSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_maximumOutdoorAirFractionorTemperatureSchedule(self)

    def supplyAirFan(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_supplyAirFan(self)

    def supplyAirFanOperatingModeSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_supplyAirFanOperatingModeSchedule(self)

    def heatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_heatingCoil(self)

    def heatingConvergenceTolerance(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_heatingConvergenceTolerance(self)

    def coolingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_coolingCoil(self)

    def coolingConvergenceTolerance(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_coolingConvergenceTolerance(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setAvailabilitySchedule(self, schedule)

    def setMaximumSupplyAirFlowRate(self, maximumSupplyAirFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setMaximumSupplyAirFlowRate(self, maximumSupplyAirFlowRate)

    def autosizeMaximumSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_autosizeMaximumSupplyAirFlowRate(self)

    def setOutdoorAirControlType(self, outdoorAirControlType):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setOutdoorAirControlType(self, outdoorAirControlType)

    def setMinimumOutdoorAirFlowRate(self, minimumOutdoorAirFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setMinimumOutdoorAirFlowRate(self, minimumOutdoorAirFlowRate)

    def autosizeMinimumOutdoorAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_autosizeMinimumOutdoorAirFlowRate(self)

    def setMinimumOutdoorAirSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setMinimumOutdoorAirSchedule(self, schedule)

    def setMaximumOutdoorAirFlowRate(self, maximumOutdoorAirFlowRate):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setMaximumOutdoorAirFlowRate(self, maximumOutdoorAirFlowRate)

    def autosizeMaximumOutdoorAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_autosizeMaximumOutdoorAirFlowRate(self)

    def setMaximumOutdoorAirFractionorTemperatureSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setMaximumOutdoorAirFractionorTemperatureSchedule(self, schedule)

    def setSupplyAirFan(self, supplyAirFan):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setSupplyAirFan(self, supplyAirFan)

    def setSupplyAirFanOperatingModeSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def resetSupplyAirFanOperatingModeSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_resetSupplyAirFanOperatingModeSchedule(self)

    def setHeatingCoil(self, heatingCoil):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setHeatingCoil(self, heatingCoil)

    def resetHeatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_resetHeatingCoil(self)

    def setHeatingConvergenceTolerance(self, heatingConvergenceTolerance):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setHeatingConvergenceTolerance(self, heatingConvergenceTolerance)

    def setCoolingCoil(self, coolingCoil):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setCoolingCoil(self, coolingCoil)

    def resetCoolingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_resetCoolingCoil(self)

    def setCoolingConvergenceTolerance(self, coolingConvergenceTolerance):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_setCoolingConvergenceTolerance(self, coolingConvergenceTolerance)

    def autosizedMaximumSupplyAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_autosizedMaximumSupplyAirFlowRate(self)

    def autosizedMinimumOutdoorAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_autosizedMinimumOutdoorAirFlowRate(self)

    def autosizedMaximumOutdoorAirFlowRate(self):
        return _openstudiomodelzonehvac.ZoneHVACUnitVentilator_autosizedMaximumOutdoorAirFlowRate(self)

# Register ZoneHVACUnitVentilator in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACUnitVentilator_swigregister(ZoneHVACUnitVentilator)

def toZoneHVACUnitVentilator(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACUnitVentilator(idfObject)

def getZoneHVACUnitVentilator(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACUnitVentilator(t_model, t_handle)

def getZoneHVACUnitVentilators(t_model):
    return _openstudiomodelzonehvac.getZoneHVACUnitVentilators(t_model)

def getZoneHVACUnitVentilatorByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACUnitVentilatorByName(t_model, t_name)

def getZoneHVACUnitVentilatorsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACUnitVentilatorsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACUnitVentilator(self) -> OptionalZoneHVACUnitVentilator:
    """Try to cast the ModelObject to a ZoneHVACUnitVentilator.

    :return: An Optional ZoneHVACUnitVentilator.
    """
    return toZoneHVACUnitVentilator(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACUnitVentilator = _to_ZoneHVACUnitVentilator

def _getZoneHVACUnitVentilator(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACUnitVentilator:
    """Try to get an object of type ZoneHVACUnitVentilator referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACUnitVentilator.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACUnitVentilator(self, t_handle)
Model.getZoneHVACUnitVentilator = _getZoneHVACUnitVentilator

def _getZoneHVACUnitVentilators(self) -> ZoneHVACUnitVentilatorVector:
    """Get a vector of all objects of type ZoneHVACUnitVentilator in the model.

    :return: A vector of ZoneHVACUnitVentilator.
    """
    return getZoneHVACUnitVentilators(self)
Model.getZoneHVACUnitVentilators = _getZoneHVACUnitVentilators

def _getZoneHVACUnitVentilatorByName(self, t_name: str) -> OptionalZoneHVACUnitVentilator:
    """Try to get an object of type ZoneHVACUnitVentilator that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACUnitVentilator.
    """
    return getZoneHVACUnitVentilatorByName(self, t_name)
Model.getZoneHVACUnitVentilatorByName = _getZoneHVACUnitVentilatorByName

def _getZoneHVACUnitVentilatorsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACUnitVentilatorVector:
    """Returns all objects of type ZoneHVACUnitVentilator named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACUnitVentilatorsByName(self, t_name, t_exactMatch)
Model.getZoneHVACUnitVentilatorsByName = _getZoneHVACUnitVentilatorsByName

class ZoneHVACWaterToAirHeatPump(openstudiomodelhvac.ZoneHVACComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelzonehvac.delete_ZoneHVACWaterToAirHeatPump

    def __init__(self, *args):
        _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_swiginit(self, _openstudiomodelzonehvac.new_ZoneHVACWaterToAirHeatPump(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_iddObjectType()

    @staticmethod
    def fanPlacementValues():
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_fanPlacementValues()

    @staticmethod
    def heatPumpCoilWaterFlowModeValues():
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_heatPumpCoilWaterFlowModeValues()

    def availabilitySchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_availabilitySchedule(self)

    def supplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_supplyAirFlowRateDuringCoolingOperation(self)

    def isSupplyAirFlowRateDuringCoolingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isSupplyAirFlowRateDuringCoolingOperationAutosized(self)

    def supplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_supplyAirFlowRateDuringHeatingOperation(self)

    def isSupplyAirFlowRateDuringHeatingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isSupplyAirFlowRateDuringHeatingOperationAutosized(self)

    def supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_supplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isSupplyAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def noLoadSupplyAirFlowRateControlSetToLowSpeed(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_noLoadSupplyAirFlowRateControlSetToLowSpeed(self)

    def outdoorAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_outdoorAirFlowRateDuringCoolingOperation(self)

    def isOutdoorAirFlowRateDuringCoolingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isOutdoorAirFlowRateDuringCoolingOperationAutosized(self)

    def outdoorAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_outdoorAirFlowRateDuringHeatingOperation(self)

    def isOutdoorAirFlowRateDuringHeatingOperationAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isOutdoorAirFlowRateDuringHeatingOperationAutosized(self)

    def outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_outdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isOutdoorAirFlowRateWhenNoCoolingorHeatingisNeededAutosized(self)

    def supplyAirFan(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_supplyAirFan(self)

    def heatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_heatingCoil(self)

    def coolingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_coolingCoil(self)

    def maximumCyclingRate(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_maximumCyclingRate(self)

    def isMaximumCyclingRateDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isMaximumCyclingRateDefaulted(self)

    def heatPumpTimeConstant(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_heatPumpTimeConstant(self)

    def isHeatPumpTimeConstantDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isHeatPumpTimeConstantDefaulted(self)

    def fractionofOnCyclePowerUse(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_fractionofOnCyclePowerUse(self)

    def isFractionofOnCyclePowerUseDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isFractionofOnCyclePowerUseDefaulted(self)

    def heatPumpFanDelayTime(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_heatPumpFanDelayTime(self)

    def isHeatPumpFanDelayTimeDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isHeatPumpFanDelayTimeDefaulted(self)

    def supplementalHeatingCoil(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_supplementalHeatingCoil(self)

    def maximumSupplyAirTemperaturefromSupplementalHeater(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_maximumSupplyAirTemperaturefromSupplementalHeater(self)

    def isMaximumSupplyAirTemperaturefromSupplementalHeaterAutosized(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isMaximumSupplyAirTemperaturefromSupplementalHeaterAutosized(self)

    def maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_maximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def isMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperationDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperationDefaulted(self)

    def fanPlacement(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_fanPlacement(self)

    def isFanPlacementDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isFanPlacementDefaulted(self)

    def heatPumpCoilWaterFlowMode(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_heatPumpCoilWaterFlowMode(self)

    def isHeatPumpCoilWaterFlowModeDefaulted(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_isHeatPumpCoilWaterFlowModeDefaulted(self)

    def supplyAirFanOperatingModeSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_supplyAirFanOperatingModeSchedule(self)

    def setAvailabilitySchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setAvailabilitySchedule(self, schedule)

    def setSupplyAirFlowRateDuringCoolingOperation(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setSupplyAirFlowRateDuringCoolingOperation(self, *args)

    def resetSupplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetSupplyAirFlowRateDuringCoolingOperation(self)

    def autosizeSupplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizeSupplyAirFlowRateDuringCoolingOperation(self)

    def setSupplyAirFlowRateDuringHeatingOperation(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setSupplyAirFlowRateDuringHeatingOperation(self, *args)

    def resetSupplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetSupplyAirFlowRateDuringHeatingOperation(self)

    def autosizeSupplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizeSupplyAirFlowRateDuringHeatingOperation(self)

    def setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self, *args)

    def resetSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizeSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setNoLoadSupplyAirFlowRateControlSetToLowSpeed(self, noLoadSupplyAirFlowRateControlSetToLowSpeed):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setNoLoadSupplyAirFlowRateControlSetToLowSpeed(self, noLoadSupplyAirFlowRateControlSetToLowSpeed)

    def setOutdoorAirFlowRateDuringCoolingOperation(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setOutdoorAirFlowRateDuringCoolingOperation(self, *args)

    def resetOutdoorAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetOutdoorAirFlowRateDuringCoolingOperation(self)

    def autosizeOutdoorAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizeOutdoorAirFlowRateDuringCoolingOperation(self)

    def setOutdoorAirFlowRateDuringHeatingOperation(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setOutdoorAirFlowRateDuringHeatingOperation(self, *args)

    def resetOutdoorAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetOutdoorAirFlowRateDuringHeatingOperation(self)

    def autosizeOutdoorAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizeOutdoorAirFlowRateDuringHeatingOperation(self)

    def setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self, *args)

    def resetOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizeOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def setSupplyAirFan(self, fansOnOff):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setSupplyAirFan(self, fansOnOff)

    def setHeatingCoil(self, heatingCoils):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setHeatingCoil(self, heatingCoils)

    def setCoolingCoil(self, coolingCoils):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setCoolingCoil(self, coolingCoils)

    def setMaximumCyclingRate(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setMaximumCyclingRate(self, *args)

    def resetMaximumCyclingRate(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetMaximumCyclingRate(self)

    def setHeatPumpTimeConstant(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setHeatPumpTimeConstant(self, *args)

    def resetHeatPumpTimeConstant(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetHeatPumpTimeConstant(self)

    def setFractionofOnCyclePowerUse(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setFractionofOnCyclePowerUse(self, *args)

    def resetFractionofOnCyclePowerUse(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetFractionofOnCyclePowerUse(self)

    def setHeatPumpFanDelayTime(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setHeatPumpFanDelayTime(self, *args)

    def resetHeatPumpFanDelayTime(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetHeatPumpFanDelayTime(self)

    def setSupplementalHeatingCoil(self, heatingCoilName):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setSupplementalHeatingCoil(self, heatingCoilName)

    def setMaximumSupplyAirTemperaturefromSupplementalHeater(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setMaximumSupplyAirTemperaturefromSupplementalHeater(self, *args)

    def resetMaximumSupplyAirTemperaturefromSupplementalHeater(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetMaximumSupplyAirTemperaturefromSupplementalHeater(self)

    def autosizeMaximumSupplyAirTemperaturefromSupplementalHeater(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizeMaximumSupplyAirTemperaturefromSupplementalHeater(self)

    def setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, *args):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self, *args)

    def resetMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetMaximumOutdoorDryBulbTemperatureforSupplementalHeaterOperation(self)

    def setFanPlacement(self, fanPlacement):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setFanPlacement(self, fanPlacement)

    def resetFanPlacement(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetFanPlacement(self)

    def setHeatPumpCoilWaterFlowMode(self, heatPumpCoilWaterFlowMode):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setHeatPumpCoilWaterFlowMode(self, heatPumpCoilWaterFlowMode)

    def resetHeatPumpCoilWaterFlowMode(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetHeatPumpCoilWaterFlowMode(self)

    def setSupplyAirFanOperatingModeSchedule(self, schedule):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_setSupplyAirFanOperatingModeSchedule(self, schedule)

    def resetSupplyAirFanOperatingModeSchedule(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_resetSupplyAirFanOperatingModeSchedule(self)

    def autosizedSupplyAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizedSupplyAirFlowRateDuringCoolingOperation(self)

    def autosizedSupplyAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizedSupplyAirFlowRateDuringHeatingOperation(self)

    def autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizedSupplyAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizedOutdoorAirFlowRateDuringCoolingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizedOutdoorAirFlowRateDuringCoolingOperation(self)

    def autosizedOutdoorAirFlowRateDuringHeatingOperation(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizedOutdoorAirFlowRateDuringHeatingOperation(self)

    def autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizedOutdoorAirFlowRateWhenNoCoolingorHeatingisNeeded(self)

    def autosizedMaximumSupplyAirTemperaturefromSupplementalHeater(self):
        return _openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_autosizedMaximumSupplyAirTemperaturefromSupplementalHeater(self)

# Register ZoneHVACWaterToAirHeatPump in _openstudiomodelzonehvac:
_openstudiomodelzonehvac.ZoneHVACWaterToAirHeatPump_swigregister(ZoneHVACWaterToAirHeatPump)

def toZoneHVACWaterToAirHeatPump(idfObject):
    return _openstudiomodelzonehvac.toZoneHVACWaterToAirHeatPump(idfObject)

def getZoneHVACWaterToAirHeatPump(t_model, t_handle):
    return _openstudiomodelzonehvac.getZoneHVACWaterToAirHeatPump(t_model, t_handle)

def getZoneHVACWaterToAirHeatPumps(t_model):
    return _openstudiomodelzonehvac.getZoneHVACWaterToAirHeatPumps(t_model)

def getZoneHVACWaterToAirHeatPumpByName(t_model, t_name):
    return _openstudiomodelzonehvac.getZoneHVACWaterToAirHeatPumpByName(t_model, t_name)

def getZoneHVACWaterToAirHeatPumpsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelzonehvac.getZoneHVACWaterToAirHeatPumpsByName(t_model, t_name, t_exactMatch)

def _to_ZoneHVACWaterToAirHeatPump(self) -> OptionalZoneHVACWaterToAirHeatPump:
    """Try to cast the ModelObject to a ZoneHVACWaterToAirHeatPump.

    :return: An Optional ZoneHVACWaterToAirHeatPump.
    """
    return toZoneHVACWaterToAirHeatPump(self)
openstudioutilitiesidf.IdfObject.to_ZoneHVACWaterToAirHeatPump = _to_ZoneHVACWaterToAirHeatPump

def _getZoneHVACWaterToAirHeatPump(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZoneHVACWaterToAirHeatPump:
    """Try to get an object of type ZoneHVACWaterToAirHeatPump referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZoneHVACWaterToAirHeatPump.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZoneHVACWaterToAirHeatPump(self, t_handle)
Model.getZoneHVACWaterToAirHeatPump = _getZoneHVACWaterToAirHeatPump

def _getZoneHVACWaterToAirHeatPumps(self) -> ZoneHVACWaterToAirHeatPumpVector:
    """Get a vector of all objects of type ZoneHVACWaterToAirHeatPump in the model.

    :return: A vector of ZoneHVACWaterToAirHeatPump.
    """
    return getZoneHVACWaterToAirHeatPumps(self)
Model.getZoneHVACWaterToAirHeatPumps = _getZoneHVACWaterToAirHeatPumps

def _getZoneHVACWaterToAirHeatPumpByName(self, t_name: str) -> OptionalZoneHVACWaterToAirHeatPump:
    """Try to get an object of type ZoneHVACWaterToAirHeatPump that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZoneHVACWaterToAirHeatPump.
    """
    return getZoneHVACWaterToAirHeatPumpByName(self, t_name)
Model.getZoneHVACWaterToAirHeatPumpByName = _getZoneHVACWaterToAirHeatPumpByName

def _getZoneHVACWaterToAirHeatPumpsByName(self, t_name: str, t_exactMatch: bool) -> ZoneHVACWaterToAirHeatPumpVector:
    """Returns all objects of type ZoneHVACWaterToAirHeatPump named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZoneHVACWaterToAirHeatPumpsByName(self, t_name, t_exactMatch)
Model.getZoneHVACWaterToAirHeatPumpsByName = _getZoneHVACWaterToAirHeatPumpsByName


