# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomeasure
else:
    import _openstudiomeasure

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomeasure.delete_SwigPyIterator

    def value(self):
        return _openstudiomeasure.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudiomeasure.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudiomeasure.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudiomeasure.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudiomeasure.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudiomeasure.SwigPyIterator_copy(self)

    def next(self):
        return _openstudiomeasure.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudiomeasure.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudiomeasure.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudiomeasure.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudiomeasure.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudiomeasure.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudiomeasure.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudiomeasure.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudiomeasure.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudiomeasure.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomeasure:
_openstudiomeasure.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudiomeasure.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudioutilitiesxml
from .import openstudiomodel
from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources
from .import openstudiomodelgeometry
from .import openstudiomodelhvac
from .import openstudiomodelzonehvac
from .import openstudiomodelavailabilitymanager
from .import openstudiomodelplantequipmentoperationscheme
from .import openstudiomodelstraightcomponent
from .import openstudiomodelairflow
from .import openstudiomodelrefrigeration
from .import openstudiomodelgenerators
from .import openstudioalfalfa
class OSOutputVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomeasure.OSOutputVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomeasure.OSOutputVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomeasure.OSOutputVector___bool__(self)

    def __len__(self):
        return _openstudiomeasure.OSOutputVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomeasure.OSOutputVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomeasure.OSOutputVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomeasure.OSOutputVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomeasure.OSOutputVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomeasure.OSOutputVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomeasure.OSOutputVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomeasure.OSOutputVector_pop(self)

    def append(self, x):
        return _openstudiomeasure.OSOutputVector_append(self, x)

    def empty(self):
        return _openstudiomeasure.OSOutputVector_empty(self)

    def size(self):
        return _openstudiomeasure.OSOutputVector_size(self)

    def swap(self, v):
        return _openstudiomeasure.OSOutputVector_swap(self, v)

    def begin(self):
        return _openstudiomeasure.OSOutputVector_begin(self)

    def end(self):
        return _openstudiomeasure.OSOutputVector_end(self)

    def rbegin(self):
        return _openstudiomeasure.OSOutputVector_rbegin(self)

    def rend(self):
        return _openstudiomeasure.OSOutputVector_rend(self)

    def clear(self):
        return _openstudiomeasure.OSOutputVector_clear(self)

    def get_allocator(self):
        return _openstudiomeasure.OSOutputVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomeasure.OSOutputVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomeasure.OSOutputVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomeasure.OSOutputVector_swiginit(self, _openstudiomeasure.new_OSOutputVector(*args))

    def push_back(self, x):
        return _openstudiomeasure.OSOutputVector_push_back(self, x)

    def front(self):
        return _openstudiomeasure.OSOutputVector_front(self)

    def back(self):
        return _openstudiomeasure.OSOutputVector_back(self)

    def assign(self, n, x):
        return _openstudiomeasure.OSOutputVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomeasure.OSOutputVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomeasure.OSOutputVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomeasure.OSOutputVector_reserve(self, n)

    def capacity(self):
        return _openstudiomeasure.OSOutputVector_capacity(self)
    __swig_destroy__ = _openstudiomeasure.delete_OSOutputVector

# Register OSOutputVector in _openstudiomeasure:
_openstudiomeasure.OSOutputVector_swigregister(OSOutputVector)
class OptionalOSOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomeasure.OptionalOSOutput_swiginit(self, _openstudiomeasure.new_OptionalOSOutput(*args))

    def reset(self):
        return _openstudiomeasure.OptionalOSOutput_reset(self)

    def __nonzero__(self):
        return _openstudiomeasure.OptionalOSOutput___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomeasure.OptionalOSOutput___ref__(self)

    def is_initialized(self):
        return _openstudiomeasure.OptionalOSOutput_is_initialized(self)

    def isNull(self):
        return _openstudiomeasure.OptionalOSOutput_isNull(self)

    def empty(self):
        return _openstudiomeasure.OptionalOSOutput_empty(self)

    def get(self):
        return _openstudiomeasure.OptionalOSOutput_get(self)

    def set(self, t):
        return _openstudiomeasure.OptionalOSOutput_set(self, t)

    def value_or(self, default_value):
        return _openstudiomeasure.OptionalOSOutput_value_or(self, default_value)
    __swig_destroy__ = _openstudiomeasure.delete_OptionalOSOutput

# Register OptionalOSOutput in _openstudiomeasure:
_openstudiomeasure.OptionalOSOutput_swigregister(OptionalOSOutput)
class OSArgumentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomeasure.OSArgumentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomeasure.OSArgumentVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomeasure.OSArgumentVector___bool__(self)

    def __len__(self):
        return _openstudiomeasure.OSArgumentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomeasure.OSArgumentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomeasure.OSArgumentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomeasure.OSArgumentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomeasure.OSArgumentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomeasure.OSArgumentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomeasure.OSArgumentVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomeasure.OSArgumentVector_pop(self)

    def append(self, x):
        return _openstudiomeasure.OSArgumentVector_append(self, x)

    def empty(self):
        return _openstudiomeasure.OSArgumentVector_empty(self)

    def size(self):
        return _openstudiomeasure.OSArgumentVector_size(self)

    def swap(self, v):
        return _openstudiomeasure.OSArgumentVector_swap(self, v)

    def begin(self):
        return _openstudiomeasure.OSArgumentVector_begin(self)

    def end(self):
        return _openstudiomeasure.OSArgumentVector_end(self)

    def rbegin(self):
        return _openstudiomeasure.OSArgumentVector_rbegin(self)

    def rend(self):
        return _openstudiomeasure.OSArgumentVector_rend(self)

    def clear(self):
        return _openstudiomeasure.OSArgumentVector_clear(self)

    def get_allocator(self):
        return _openstudiomeasure.OSArgumentVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomeasure.OSArgumentVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomeasure.OSArgumentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomeasure.OSArgumentVector_swiginit(self, _openstudiomeasure.new_OSArgumentVector(*args))

    def push_back(self, x):
        return _openstudiomeasure.OSArgumentVector_push_back(self, x)

    def front(self):
        return _openstudiomeasure.OSArgumentVector_front(self)

    def back(self):
        return _openstudiomeasure.OSArgumentVector_back(self)

    def assign(self, n, x):
        return _openstudiomeasure.OSArgumentVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudiomeasure.OSArgumentVector_resize(self, *args)

    def insert(self, *args):
        return _openstudiomeasure.OSArgumentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomeasure.OSArgumentVector_reserve(self, n)

    def capacity(self):
        return _openstudiomeasure.OSArgumentVector_capacity(self)
    __swig_destroy__ = _openstudiomeasure.delete_OSArgumentVector

# Register OSArgumentVector in _openstudiomeasure:
_openstudiomeasure.OSArgumentVector_swigregister(OSArgumentVector)
class OptionalOSArgument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomeasure.OptionalOSArgument_swiginit(self, _openstudiomeasure.new_OptionalOSArgument(*args))

    def reset(self):
        return _openstudiomeasure.OptionalOSArgument_reset(self)

    def __nonzero__(self):
        return _openstudiomeasure.OptionalOSArgument___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomeasure.OptionalOSArgument___ref__(self)

    def is_initialized(self):
        return _openstudiomeasure.OptionalOSArgument_is_initialized(self)

    def isNull(self):
        return _openstudiomeasure.OptionalOSArgument_isNull(self)

    def empty(self):
        return _openstudiomeasure.OptionalOSArgument_empty(self)

    def get(self):
        return _openstudiomeasure.OptionalOSArgument_get(self)

    def set(self, t):
        return _openstudiomeasure.OptionalOSArgument_set(self, t)

    def value_or(self, default_value):
        return _openstudiomeasure.OptionalOSArgument_value_or(self, default_value)
    __swig_destroy__ = _openstudiomeasure.delete_OptionalOSArgument

# Register OptionalOSArgument in _openstudiomeasure:
_openstudiomeasure.OptionalOSArgument_swigregister(OptionalOSArgument)
class OSArgumentMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomeasure.OSArgumentMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomeasure.OSArgumentMap___nonzero__(self)

    def __bool__(self):
        return _openstudiomeasure.OSArgumentMap___bool__(self)

    def __len__(self):
        return _openstudiomeasure.OSArgumentMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _openstudiomeasure.OSArgumentMap___getitem__(self, key)

    def __delitem__(self, key):
        return _openstudiomeasure.OSArgumentMap___delitem__(self, key)

    def has_key(self, key):
        return _openstudiomeasure.OSArgumentMap_has_key(self, key)

    def keys(self):
        return _openstudiomeasure.OSArgumentMap_keys(self)

    def values(self):
        return _openstudiomeasure.OSArgumentMap_values(self)

    def items(self):
        return _openstudiomeasure.OSArgumentMap_items(self)

    def __contains__(self, key):
        return _openstudiomeasure.OSArgumentMap___contains__(self, key)

    def key_iterator(self):
        return _openstudiomeasure.OSArgumentMap_key_iterator(self)

    def value_iterator(self):
        return _openstudiomeasure.OSArgumentMap_value_iterator(self)

    def __setitem__(self, *args):
        return _openstudiomeasure.OSArgumentMap___setitem__(self, *args)

    def asdict(self):
        return _openstudiomeasure.OSArgumentMap_asdict(self)

    def __init__(self, *args):
        _openstudiomeasure.OSArgumentMap_swiginit(self, _openstudiomeasure.new_OSArgumentMap(*args))

    def empty(self):
        return _openstudiomeasure.OSArgumentMap_empty(self)

    def size(self):
        return _openstudiomeasure.OSArgumentMap_size(self)

    def swap(self, v):
        return _openstudiomeasure.OSArgumentMap_swap(self, v)

    def begin(self):
        return _openstudiomeasure.OSArgumentMap_begin(self)

    def end(self):
        return _openstudiomeasure.OSArgumentMap_end(self)

    def rbegin(self):
        return _openstudiomeasure.OSArgumentMap_rbegin(self)

    def rend(self):
        return _openstudiomeasure.OSArgumentMap_rend(self)

    def clear(self):
        return _openstudiomeasure.OSArgumentMap_clear(self)

    def get_allocator(self):
        return _openstudiomeasure.OSArgumentMap_get_allocator(self)

    def count(self, x):
        return _openstudiomeasure.OSArgumentMap_count(self, x)

    def erase(self, *args):
        return _openstudiomeasure.OSArgumentMap_erase(self, *args)

    def find(self, x):
        return _openstudiomeasure.OSArgumentMap_find(self, x)

    def lower_bound(self, x):
        return _openstudiomeasure.OSArgumentMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _openstudiomeasure.OSArgumentMap_upper_bound(self, x)
    __swig_destroy__ = _openstudiomeasure.delete_OSArgumentMap

# Register OSArgumentMap in _openstudiomeasure:
_openstudiomeasure.OSArgumentMap_swigregister(OSArgumentMap)
class OSArgumentType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomeasure.OSArgumentType_swiginit(self, _openstudiomeasure.new_OSArgumentType(*args))

    def valueName(self):
        return _openstudiomeasure.OSArgumentType_valueName(self)

    def value(self):
        return _openstudiomeasure.OSArgumentType_value(self)

    def valueDescription(self):
        return _openstudiomeasure.OSArgumentType_valueDescription(self)

    def __eq__(self, other):
        return _openstudiomeasure.OSArgumentType___eq__(self, other)

    def __ne__(self, other):
        return _openstudiomeasure.OSArgumentType___ne__(self, other)

    def __gt__(self, other):
        return _openstudiomeasure.OSArgumentType___gt__(self, other)

    def __ge__(self, other):
        return _openstudiomeasure.OSArgumentType___ge__(self, other)

    def __lt__(self, other):
        return _openstudiomeasure.OSArgumentType___lt__(self, other)

    def __le__(self, other):
        return _openstudiomeasure.OSArgumentType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudiomeasure.OSArgumentType_enumName()

    @staticmethod
    def getValues():
        return _openstudiomeasure.OSArgumentType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudiomeasure.OSArgumentType_getLookupMap()

    def __str__(self):
        return _openstudiomeasure.OSArgumentType___str__(self)
    __swig_destroy__ = _openstudiomeasure.delete_OSArgumentType

# Register OSArgumentType in _openstudiomeasure:
_openstudiomeasure.OSArgumentType_swigregister(OSArgumentType)
class OSDomainType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomeasure.OSDomainType_swiginit(self, _openstudiomeasure.new_OSDomainType(*args))

    def valueName(self):
        return _openstudiomeasure.OSDomainType_valueName(self)

    def value(self):
        return _openstudiomeasure.OSDomainType_value(self)

    def valueDescription(self):
        return _openstudiomeasure.OSDomainType_valueDescription(self)

    def __eq__(self, other):
        return _openstudiomeasure.OSDomainType___eq__(self, other)

    def __ne__(self, other):
        return _openstudiomeasure.OSDomainType___ne__(self, other)

    def __gt__(self, other):
        return _openstudiomeasure.OSDomainType___gt__(self, other)

    def __ge__(self, other):
        return _openstudiomeasure.OSDomainType___ge__(self, other)

    def __lt__(self, other):
        return _openstudiomeasure.OSDomainType___lt__(self, other)

    def __le__(self, other):
        return _openstudiomeasure.OSDomainType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudiomeasure.OSDomainType_enumName()

    @staticmethod
    def getValues():
        return _openstudiomeasure.OSDomainType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudiomeasure.OSDomainType_getLookupMap()

    def __str__(self):
        return _openstudiomeasure.OSDomainType___str__(self)
    __swig_destroy__ = _openstudiomeasure.delete_OSDomainType

# Register OSDomainType in _openstudiomeasure:
_openstudiomeasure.OSDomainType_swigregister(OSDomainType)
class OSArgument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomeasure.OSArgument_swiginit(self, _openstudiomeasure.new_OSArgument(*args))

    def clone(self):
        return _openstudiomeasure.OSArgument_clone(self)

    @staticmethod
    def makeBoolArgument(name, required=True, modelDependent=False):
        return _openstudiomeasure.OSArgument_makeBoolArgument(name, required, modelDependent)

    @staticmethod
    def makeDoubleArgument(name, required=True, modelDependent=False):
        return _openstudiomeasure.OSArgument_makeDoubleArgument(name, required, modelDependent)

    @staticmethod
    def makeIntegerArgument(name, required=True, modelDependent=False):
        return _openstudiomeasure.OSArgument_makeIntegerArgument(name, required, modelDependent)

    @staticmethod
    def makeStringArgument(name, required=True, modelDependent=False):
        return _openstudiomeasure.OSArgument_makeStringArgument(name, required, modelDependent)

    @staticmethod
    def makeChoiceArgument(*args):
        return _openstudiomeasure.OSArgument_makeChoiceArgument(*args)

    @staticmethod
    def makePathArgument(name, isRead, extension, required=True, modelDependent=False):
        return _openstudiomeasure.OSArgument_makePathArgument(name, isRead, extension, required, modelDependent)

    @staticmethod
    def makeSeparatorArgument(name, modelDependent=False):
        return _openstudiomeasure.OSArgument_makeSeparatorArgument(name, modelDependent)

    def name(self):
        return _openstudiomeasure.OSArgument_name(self)

    def displayName(self):
        return _openstudiomeasure.OSArgument_displayName(self)

    def description(self):
        return _openstudiomeasure.OSArgument_description(self)

    def type(self):
        return _openstudiomeasure.OSArgument_type(self)

    def units(self):
        return _openstudiomeasure.OSArgument_units(self)

    def required(self):
        return _openstudiomeasure.OSArgument_required(self)

    def modelDependent(self):
        return _openstudiomeasure.OSArgument_modelDependent(self)

    def hasValue(self):
        return _openstudiomeasure.OSArgument_hasValue(self)

    def valueAsBool(self):
        return _openstudiomeasure.OSArgument_valueAsBool(self)

    def valueAsDouble(self):
        return _openstudiomeasure.OSArgument_valueAsDouble(self)

    def valueAsInteger(self):
        return _openstudiomeasure.OSArgument_valueAsInteger(self)

    def valueAsString(self):
        return _openstudiomeasure.OSArgument_valueAsString(self)

    def valueAsPath(self):
        return _openstudiomeasure.OSArgument_valueAsPath(self)

    def valueAsJSON(self):
        return _openstudiomeasure.OSArgument_valueAsJSON(self)

    def hasDefaultValue(self):
        return _openstudiomeasure.OSArgument_hasDefaultValue(self)

    def defaultValueAsBool(self):
        return _openstudiomeasure.OSArgument_defaultValueAsBool(self)

    def defaultValueAsDouble(self):
        return _openstudiomeasure.OSArgument_defaultValueAsDouble(self)

    def defaultValueAsInteger(self):
        return _openstudiomeasure.OSArgument_defaultValueAsInteger(self)

    def defaultValueAsString(self):
        return _openstudiomeasure.OSArgument_defaultValueAsString(self)

    def defaultValueAsPath(self):
        return _openstudiomeasure.OSArgument_defaultValueAsPath(self)

    def defaultValueAsJSON(self):
        return _openstudiomeasure.OSArgument_defaultValueAsJSON(self)

    def hasDomain(self):
        return _openstudiomeasure.OSArgument_hasDomain(self)

    def domainType(self):
        return _openstudiomeasure.OSArgument_domainType(self)

    def domainAsBool(self):
        return _openstudiomeasure.OSArgument_domainAsBool(self)

    def domainAsDouble(self):
        return _openstudiomeasure.OSArgument_domainAsDouble(self)

    def domainAsInteger(self):
        return _openstudiomeasure.OSArgument_domainAsInteger(self)

    def domainAsString(self):
        return _openstudiomeasure.OSArgument_domainAsString(self)

    def domainAsPath(self):
        return _openstudiomeasure.OSArgument_domainAsPath(self)

    def domainAsJSON(self):
        return _openstudiomeasure.OSArgument_domainAsJSON(self)

    def choiceValues(self):
        return _openstudiomeasure.OSArgument_choiceValues(self)

    def choiceValueDisplayNames(self):
        return _openstudiomeasure.OSArgument_choiceValueDisplayNames(self)

    def valueDisplayName(self):
        return _openstudiomeasure.OSArgument_valueDisplayName(self)

    def defaultValueDisplayName(self):
        return _openstudiomeasure.OSArgument_defaultValueDisplayName(self)

    def isRead(self):
        return _openstudiomeasure.OSArgument_isRead(self)

    def extension(self):
        return _openstudiomeasure.OSArgument_extension(self)

    def setDisplayName(self, displayName):
        return _openstudiomeasure.OSArgument_setDisplayName(self, displayName)

    def setDescription(self, description):
        return _openstudiomeasure.OSArgument_setDescription(self, description)

    def setUnits(self, units):
        return _openstudiomeasure.OSArgument_setUnits(self, units)

    def setValue(self, *args):
        return _openstudiomeasure.OSArgument_setValue(self, *args)

    def clearValue(self):
        return _openstudiomeasure.OSArgument_clearValue(self)

    def setDefaultValue(self, *args):
        return _openstudiomeasure.OSArgument_setDefaultValue(self, *args)

    def setDomainType(self, domainType):
        return _openstudiomeasure.OSArgument_setDomainType(self, domainType)

    def setDomain(self, *args):
        return _openstudiomeasure.OSArgument_setDomain(self, *args)

    def clearDomain(self):
        return _openstudiomeasure.OSArgument_clearDomain(self)

    def setMinValue(self, *args):
        return _openstudiomeasure.OSArgument_setMinValue(self, *args)

    def setMaxValue(self, *args):
        return _openstudiomeasure.OSArgument_setMaxValue(self, *args)

    def toString(self):
        return _openstudiomeasure.OSArgument_toString(self)

    def printValue(self, printDefault=True):
        return _openstudiomeasure.OSArgument_printValue(self, printDefault)

    def printDefaultValue(self):
        return _openstudiomeasure.OSArgument_printDefaultValue(self)

    def toJSON(self):
        return _openstudiomeasure.OSArgument_toJSON(self)

    def toJSONString(self):
        return _openstudiomeasure.OSArgument_toJSONString(self)

    def __str__(self):
        return _openstudiomeasure.OSArgument___str__(self)
    __swig_destroy__ = _openstudiomeasure.delete_OSArgument

# Register OSArgument in _openstudiomeasure:
_openstudiomeasure.OSArgument_swigregister(OSArgument)

def makeChoiceArgumentOfWorkspaceObjects(*args):
    return _openstudiomeasure.makeChoiceArgumentOfWorkspaceObjects(*args)

def convertOSArgumentVectorToMap(arguments):
    return _openstudiomeasure.convertOSArgumentVectorToMap(arguments)
class OSOutputType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomeasure.OSOutputType_swiginit(self, _openstudiomeasure.new_OSOutputType(*args))

    def valueName(self):
        return _openstudiomeasure.OSOutputType_valueName(self)

    def value(self):
        return _openstudiomeasure.OSOutputType_value(self)

    def valueDescription(self):
        return _openstudiomeasure.OSOutputType_valueDescription(self)

    def __eq__(self, other):
        return _openstudiomeasure.OSOutputType___eq__(self, other)

    def __ne__(self, other):
        return _openstudiomeasure.OSOutputType___ne__(self, other)

    def __gt__(self, other):
        return _openstudiomeasure.OSOutputType___gt__(self, other)

    def __ge__(self, other):
        return _openstudiomeasure.OSOutputType___ge__(self, other)

    def __lt__(self, other):
        return _openstudiomeasure.OSOutputType___lt__(self, other)

    def __le__(self, other):
        return _openstudiomeasure.OSOutputType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudiomeasure.OSOutputType_enumName()

    @staticmethod
    def getValues():
        return _openstudiomeasure.OSOutputType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudiomeasure.OSOutputType_getLookupMap()

    def __str__(self):
        return _openstudiomeasure.OSOutputType___str__(self)
    __swig_destroy__ = _openstudiomeasure.delete_OSOutputType

# Register OSOutputType in _openstudiomeasure:
_openstudiomeasure.OSOutputType_swigregister(OSOutputType)
class OSOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomeasure.OSOutput_swiginit(self, _openstudiomeasure.new_OSOutput(*args))

    @staticmethod
    def makeBoolOutput(name, modelDependent=False):
        return _openstudiomeasure.OSOutput_makeBoolOutput(name, modelDependent)

    @staticmethod
    def makeDoubleOutput(name, modelDependent=False):
        return _openstudiomeasure.OSOutput_makeDoubleOutput(name, modelDependent)

    @staticmethod
    def makeIntegerOutput(name, modelDependent=False):
        return _openstudiomeasure.OSOutput_makeIntegerOutput(name, modelDependent)

    @staticmethod
    def makeStringOutput(name, modelDependent=False):
        return _openstudiomeasure.OSOutput_makeStringOutput(name, modelDependent)

    def name(self):
        return _openstudiomeasure.OSOutput_name(self)

    def displayName(self):
        return _openstudiomeasure.OSOutput_displayName(self)

    def shortName(self):
        return _openstudiomeasure.OSOutput_shortName(self)

    def description(self):
        return _openstudiomeasure.OSOutput_description(self)

    def type(self):
        return _openstudiomeasure.OSOutput_type(self)

    def units(self):
        return _openstudiomeasure.OSOutput_units(self)

    def modelDependent(self):
        return _openstudiomeasure.OSOutput_modelDependent(self)

    def setDisplayName(self, displayName):
        return _openstudiomeasure.OSOutput_setDisplayName(self, displayName)

    def setShortName(self, shortName):
        return _openstudiomeasure.OSOutput_setShortName(self, shortName)

    def setDescription(self, description):
        return _openstudiomeasure.OSOutput_setDescription(self, description)

    def setUnits(self, units):
        return _openstudiomeasure.OSOutput_setUnits(self, units)

    def toString(self):
        return _openstudiomeasure.OSOutput_toString(self)

    def toJSON(self):
        return _openstudiomeasure.OSOutput_toJSON(self)

    def toJSONString(self):
        return _openstudiomeasure.OSOutput_toJSONString(self)

    def __str__(self):
        return _openstudiomeasure.OSOutput___str__(self)
    __swig_destroy__ = _openstudiomeasure.delete_OSOutput

# Register OSOutput in _openstudiomeasure:
_openstudiomeasure.OSOutput_swigregister(OSOutput)

def __lshift__(*args):
    return _openstudiomeasure.__lshift__(*args)
class OSRunner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, workflow):
        if self.__class__ == OSRunner:
            _self = None
        else:
            _self = self
        _openstudiomeasure.OSRunner_swiginit(self, _openstudiomeasure.new_OSRunner(_self, workflow))
    __swig_destroy__ = _openstudiomeasure.delete_OSRunner

    def workflow(self):
        return _openstudiomeasure.OSRunner_workflow(self)

    def alfalfa(self):
        return _openstudiomeasure.OSRunner_alfalfa(self)

    def unitsPreference(self):
        return _openstudiomeasure.OSRunner_unitsPreference(self)

    def languagePreference(self):
        return _openstudiomeasure.OSRunner_languagePreference(self)

    def result(self):
        return _openstudiomeasure.OSRunner_result(self)

    def halted(self):
        return _openstudiomeasure.OSRunner_halted(self)

    def lastOpenStudioModel(self):
        return _openstudiomeasure.OSRunner_lastOpenStudioModel(self)

    def lastEnergyPlusWorkspace(self):
        return _openstudiomeasure.OSRunner_lastEnergyPlusWorkspace(self)

    def lastEnergyPlusSqlFile(self):
        return _openstudiomeasure.OSRunner_lastEnergyPlusSqlFile(self)

    def lastEpwFile(self):
        return _openstudiomeasure.OSRunner_lastEpwFile(self)

    def lastEpwFilePath(self):
        return _openstudiomeasure.OSRunner_lastEpwFilePath(self)

    def inSelection(self, modelObject):
        return _openstudiomeasure.OSRunner_inSelection(self, modelObject)

    def getUserInput(self, arguments):
        return _openstudiomeasure.OSRunner_getUserInput(self, arguments)

    def prepareForMeasureRun(self, measure):
        return _openstudiomeasure.OSRunner_prepareForMeasureRun(self, measure)

    def registerError(self, message):
        return _openstudiomeasure.OSRunner_registerError(self, message)

    def registerWarning(self, message):
        return _openstudiomeasure.OSRunner_registerWarning(self, message)

    def registerInfo(self, message):
        return _openstudiomeasure.OSRunner_registerInfo(self, message)

    def registerAsNotApplicable(self, message):
        return _openstudiomeasure.OSRunner_registerAsNotApplicable(self, message)

    def registerInitialCondition(self, message):
        return _openstudiomeasure.OSRunner_registerInitialCondition(self, message)

    def registerFinalCondition(self, message):
        return _openstudiomeasure.OSRunner_registerFinalCondition(self, message)

    def registerValue(self, *args):
        return _openstudiomeasure.OSRunner_registerValue(self, *args)

    def haltWorkflow(self, *args):
        return _openstudiomeasure.OSRunner_haltWorkflow(self, *args)

    def createProgressBar(self, text):
        return _openstudiomeasure.OSRunner_createProgressBar(self, text)

    def updateProgress(self, value):
        return _openstudiomeasure.OSRunner_updateProgress(self, value)

    def destroyProgressBar(self):
        return _openstudiomeasure.OSRunner_destroyProgressBar(self)

    def validateUserArguments(self, script_arguments, user_arguments):
        return _openstudiomeasure.OSRunner_validateUserArguments(self, script_arguments, user_arguments)

    def getBoolArgumentValue(self, argument_name, user_arguments):
        return _openstudiomeasure.OSRunner_getBoolArgumentValue(self, argument_name, user_arguments)

    def getOptionalBoolArgumentValue(self, argument_name, user_arguments):
        return _openstudiomeasure.OSRunner_getOptionalBoolArgumentValue(self, argument_name, user_arguments)

    def getDoubleArgumentValue(self, argument_name, user_arguments):
        return _openstudiomeasure.OSRunner_getDoubleArgumentValue(self, argument_name, user_arguments)

    def getOptionalDoubleArgumentValue(self, argument_name, user_arguments):
        return _openstudiomeasure.OSRunner_getOptionalDoubleArgumentValue(self, argument_name, user_arguments)

    def getIntegerArgumentValue(self, argument_name, user_arguments):
        return _openstudiomeasure.OSRunner_getIntegerArgumentValue(self, argument_name, user_arguments)

    def getOptionalIntegerArgumentValue(self, argument_name, user_arguments):
        return _openstudiomeasure.OSRunner_getOptionalIntegerArgumentValue(self, argument_name, user_arguments)

    def getStringArgumentValue(self, argument_name, user_arguments):
        return _openstudiomeasure.OSRunner_getStringArgumentValue(self, argument_name, user_arguments)

    def getOptionalStringArgumentValue(self, argument_name, user_arguments):
        return _openstudiomeasure.OSRunner_getOptionalStringArgumentValue(self, argument_name, user_arguments)

    def getPathArgumentValue(self, argument_name, user_arguments):
        return _openstudiomeasure.OSRunner_getPathArgumentValue(self, argument_name, user_arguments)

    def getOptionalPathArgumentValue(self, argument_name, user_arguments):
        return _openstudiomeasure.OSRunner_getOptionalPathArgumentValue(self, argument_name, user_arguments)

    def getOptionalWorkspaceObjectChoiceValue(self, argument_name, user_arguments, workspace):
        return _openstudiomeasure.OSRunner_getOptionalWorkspaceObjectChoiceValue(self, argument_name, user_arguments, workspace)

    def getArgumentValues(self, script_arguments, user_arguments):
        return _openstudiomeasure.OSRunner_getArgumentValues(self, script_arguments, user_arguments)

    def getPastStepValuesForMeasure(self, measureName):
        return _openstudiomeasure.OSRunner_getPastStepValuesForMeasure(self, measureName)

    def getPastStepValuesForName(self, stepName):
        return _openstudiomeasure.OSRunner_getPastStepValuesForName(self, stepName)

    def reset(self):
        return _openstudiomeasure.OSRunner_reset(self)

    def incrementStep(self):
        return _openstudiomeasure.OSRunner_incrementStep(self)

    def setLastOpenStudioModel(self, lastOpenStudioModel):
        return _openstudiomeasure.OSRunner_setLastOpenStudioModel(self, lastOpenStudioModel)

    def resetLastOpenStudioModel(self):
        return _openstudiomeasure.OSRunner_resetLastOpenStudioModel(self)

    def setLastOpenStudioModelPath(self, lastOpenStudioModelPath):
        return _openstudiomeasure.OSRunner_setLastOpenStudioModelPath(self, lastOpenStudioModelPath)

    def resetLastOpenStudioModelPath(self):
        return _openstudiomeasure.OSRunner_resetLastOpenStudioModelPath(self)

    def setLastEnergyPlusWorkspace(self, lastEnergyPlusWorkspace):
        return _openstudiomeasure.OSRunner_setLastEnergyPlusWorkspace(self, lastEnergyPlusWorkspace)

    def resetLastEnergyPlusWorkspace(self):
        return _openstudiomeasure.OSRunner_resetLastEnergyPlusWorkspace(self)

    def setLastEnergyPlusWorkspacePath(self, lastEnergyPlusWorkspacePath):
        return _openstudiomeasure.OSRunner_setLastEnergyPlusWorkspacePath(self, lastEnergyPlusWorkspacePath)

    def resetLastEnergyPlusWorkspacePath(self):
        return _openstudiomeasure.OSRunner_resetLastEnergyPlusWorkspacePath(self)

    def setLastEnergyPlusSqlFilePath(self, lastEnergyPlusSqlFilePath):
        return _openstudiomeasure.OSRunner_setLastEnergyPlusSqlFilePath(self, lastEnergyPlusSqlFilePath)

    def resetLastEnergyPlusSqlFilePath(self):
        return _openstudiomeasure.OSRunner_resetLastEnergyPlusSqlFilePath(self)

    def setLastEpwFilePath(self, lastEpwFilePath):
        return _openstudiomeasure.OSRunner_setLastEpwFilePath(self, lastEpwFilePath)

    def resetLastEpwFilePath(self):
        return _openstudiomeasure.OSRunner_resetLastEpwFilePath(self)

    def setUnitsPreference(self, unitsPreference):
        return _openstudiomeasure.OSRunner_setUnitsPreference(self, unitsPreference)

    def resetUnitsPreference(self):
        return _openstudiomeasure.OSRunner_resetUnitsPreference(self)

    def setLanguagePreference(self, languagePreference):
        return _openstudiomeasure.OSRunner_setLanguagePreference(self, languagePreference)

    def resetLanguagePreference(self):
        return _openstudiomeasure.OSRunner_resetLanguagePreference(self)

    def registerMsgAlsoLogs(self):
        return _openstudiomeasure.OSRunner_registerMsgAlsoLogs(self)

    def setRegisterMsgAlsoLogs(self, registerMsgAlsoLogs):
        return _openstudiomeasure.OSRunner_setRegisterMsgAlsoLogs(self, registerMsgAlsoLogs)
    def __disown__(self):
        self.this.disown()
        _openstudiomeasure.disown_OSRunner(self)
        return weakref.proxy(self)

# Register OSRunner in _openstudiomeasure:
_openstudiomeasure.OSRunner_swigregister(OSRunner)
class OSMeasure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomeasure.delete_OSMeasure

    def name(self):
        return _openstudiomeasure.OSMeasure_name(self)

    def description(self):
        return _openstudiomeasure.OSMeasure_description(self)

    def taxonomy(self):
        return _openstudiomeasure.OSMeasure_taxonomy(self)

    def modeler_description(self):
        return _openstudiomeasure.OSMeasure_modeler_description(self)

    def measureType(self):
        return _openstudiomeasure.OSMeasure_measureType(self)

    def registerWithSketchUp(self):
        return _openstudiomeasure.OSMeasure_registerWithSketchUp(self)

    def registerWithApplication(self):
        return _openstudiomeasure.OSMeasure_registerWithApplication(self)

    def __init__(self, measureType):
        if self.__class__ == OSMeasure:
            _self = None
        else:
            _self = self
        _openstudiomeasure.OSMeasure_swiginit(self, _openstudiomeasure.new_OSMeasure(_self, measureType))
    def __disown__(self):
        self.this.disown()
        _openstudiomeasure.disown_OSMeasure(self)
        return weakref.proxy(self)

# Register OSMeasure in _openstudiomeasure:
_openstudiomeasure.OSMeasure_swigregister(OSMeasure)
class ModelMeasure(OSMeasure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomeasure.delete_ModelMeasure

    def arguments(self, model):
        return _openstudiomeasure.ModelMeasure_arguments(self, model)

    def outputs(self):
        return _openstudiomeasure.ModelMeasure_outputs(self)

    def run(self, model, runner, user_arguments):
        return _openstudiomeasure.ModelMeasure_run(self, model, runner, user_arguments)

    def __init__(self):
        if self.__class__ == ModelMeasure:
            _self = None
        else:
            _self = self
        _openstudiomeasure.ModelMeasure_swiginit(self, _openstudiomeasure.new_ModelMeasure(_self, ))
    def __disown__(self):
        self.this.disown()
        _openstudiomeasure.disown_ModelMeasure(self)
        return weakref.proxy(self)

# Register ModelMeasure in _openstudiomeasure:
_openstudiomeasure.ModelMeasure_swigregister(ModelMeasure)
class EnergyPlusMeasure(OSMeasure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomeasure.delete_EnergyPlusMeasure

    def arguments(self, workspace):
        return _openstudiomeasure.EnergyPlusMeasure_arguments(self, workspace)

    def outputs(self):
        return _openstudiomeasure.EnergyPlusMeasure_outputs(self)

    def run(self, workspace, runner, user_arguments):
        return _openstudiomeasure.EnergyPlusMeasure_run(self, workspace, runner, user_arguments)

    def __init__(self):
        if self.__class__ == EnergyPlusMeasure:
            _self = None
        else:
            _self = self
        _openstudiomeasure.EnergyPlusMeasure_swiginit(self, _openstudiomeasure.new_EnergyPlusMeasure(_self, ))
    def __disown__(self):
        self.this.disown()
        _openstudiomeasure.disown_EnergyPlusMeasure(self)
        return weakref.proxy(self)

# Register EnergyPlusMeasure in _openstudiomeasure:
_openstudiomeasure.EnergyPlusMeasure_swigregister(EnergyPlusMeasure)
class ReportingMeasure(OSMeasure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomeasure.delete_ReportingMeasure

    def arguments(self, model):
        return _openstudiomeasure.ReportingMeasure_arguments(self, model)

    def outputs(self):
        return _openstudiomeasure.ReportingMeasure_outputs(self)

    def run(self, runner, user_arguments):
        return _openstudiomeasure.ReportingMeasure_run(self, runner, user_arguments)

    def energyPlusOutputRequests(self, runner, user_arguments):
        return _openstudiomeasure.ReportingMeasure_energyPlusOutputRequests(self, runner, user_arguments)

    def __init__(self):
        if self.__class__ == ReportingMeasure:
            _self = None
        else:
            _self = self
        _openstudiomeasure.ReportingMeasure_swiginit(self, _openstudiomeasure.new_ReportingMeasure(_self, ))
    def __disown__(self):
        self.this.disown()
        _openstudiomeasure.disown_ReportingMeasure(self)
        return weakref.proxy(self)

# Register ReportingMeasure in _openstudiomeasure:
_openstudiomeasure.ReportingMeasure_swigregister(ReportingMeasure)

