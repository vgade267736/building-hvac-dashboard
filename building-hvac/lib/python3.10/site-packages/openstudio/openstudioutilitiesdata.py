# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudioutilitiesdata
else:
    import _openstudioutilitiesdata

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesdata.delete_SwigPyIterator

    def value(self):
        return _openstudioutilitiesdata.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudioutilitiesdata.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudioutilitiesdata.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudioutilitiesdata.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudioutilitiesdata.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudioutilitiesdata.SwigPyIterator_copy(self)

    def next(self):
        return _openstudioutilitiesdata.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudioutilitiesdata.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudioutilitiesdata.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudioutilitiesdata.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudioutilitiesdata.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudioutilitiesdata.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudioutilitiesdata.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudioutilitiesdata.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudioutilitiesdata.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudioutilitiesdata.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudioutilitiesdata:
_openstudioutilitiesdata.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudioutilitiesdata.SHARED_PTR_DISOWN
from .import openstudioutilitiestime
from .import openstudioutilitiescore
from .import openstudioutilitiesunits
class InstallLocationTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.InstallLocationTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.InstallLocationTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.InstallLocationTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.InstallLocationTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.InstallLocationTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.InstallLocationTypeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.InstallLocationTypeVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.InstallLocationTypeVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.InstallLocationTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.InstallLocationTypeVector_swiginit(self, _openstudioutilitiesdata.new_InstallLocationTypeVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.InstallLocationTypeVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.InstallLocationTypeVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.InstallLocationTypeVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.InstallLocationTypeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.InstallLocationTypeVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.InstallLocationTypeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_InstallLocationTypeVector

# Register InstallLocationTypeVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.InstallLocationTypeVector_swigregister(InstallLocationTypeVector)
class OptionalInstallLocationType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalInstallLocationType_swiginit(self, _openstudioutilitiesdata.new_OptionalInstallLocationType(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalInstallLocationType_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalInstallLocationType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalInstallLocationType___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalInstallLocationType_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalInstallLocationType_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalInstallLocationType_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalInstallLocationType_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalInstallLocationType_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalInstallLocationType_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalInstallLocationType

# Register OptionalInstallLocationType in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalInstallLocationType_swigregister(OptionalInstallLocationType)
class FuelTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.FuelTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.FuelTypeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.FuelTypeVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.FuelTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.FuelTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.FuelTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.FuelTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.FuelTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.FuelTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.FuelTypeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.FuelTypeVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.FuelTypeVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.FuelTypeVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.FuelTypeVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.FuelTypeVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.FuelTypeVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.FuelTypeVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.FuelTypeVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.FuelTypeVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.FuelTypeVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.FuelTypeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.FuelTypeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.FuelTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.FuelTypeVector_swiginit(self, _openstudioutilitiesdata.new_FuelTypeVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.FuelTypeVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.FuelTypeVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.FuelTypeVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.FuelTypeVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.FuelTypeVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.FuelTypeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.FuelTypeVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.FuelTypeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_FuelTypeVector

# Register FuelTypeVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.FuelTypeVector_swigregister(FuelTypeVector)
class OptionalFuelType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalFuelType_swiginit(self, _openstudioutilitiesdata.new_OptionalFuelType(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalFuelType_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalFuelType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalFuelType___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalFuelType_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalFuelType_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalFuelType_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalFuelType_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalFuelType_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalFuelType_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalFuelType

# Register OptionalFuelType in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalFuelType_swigregister(OptionalFuelType)
class EndUseFuelTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.EndUseFuelTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.EndUseFuelTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.EndUseFuelTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.EndUseFuelTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.EndUseFuelTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.EndUseFuelTypeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.EndUseFuelTypeVector_swiginit(self, _openstudioutilitiesdata.new_EndUseFuelTypeVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.EndUseFuelTypeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_EndUseFuelTypeVector

# Register EndUseFuelTypeVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.EndUseFuelTypeVector_swigregister(EndUseFuelTypeVector)
class OptionalEndUseFuelType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalEndUseFuelType_swiginit(self, _openstudioutilitiesdata.new_OptionalEndUseFuelType(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalEndUseFuelType_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalEndUseFuelType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalEndUseFuelType___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalEndUseFuelType_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalEndUseFuelType_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalEndUseFuelType_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalEndUseFuelType_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalEndUseFuelType_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalEndUseFuelType_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalEndUseFuelType

# Register OptionalEndUseFuelType in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalEndUseFuelType_swigregister(OptionalEndUseFuelType)
class EndUseCategoryTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.EndUseCategoryTypeVector_swiginit(self, _openstudioutilitiesdata.new_EndUseCategoryTypeVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.EndUseCategoryTypeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_EndUseCategoryTypeVector

# Register EndUseCategoryTypeVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.EndUseCategoryTypeVector_swigregister(EndUseCategoryTypeVector)
class OptionalEndUseCategoryType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalEndUseCategoryType_swiginit(self, _openstudioutilitiesdata.new_OptionalEndUseCategoryType(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalEndUseCategoryType_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalEndUseCategoryType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalEndUseCategoryType___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalEndUseCategoryType_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalEndUseCategoryType_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalEndUseCategoryType_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalEndUseCategoryType_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalEndUseCategoryType_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalEndUseCategoryType_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalEndUseCategoryType

# Register OptionalEndUseCategoryType in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalEndUseCategoryType_swigregister(OptionalEndUseCategoryType)
class EndUseTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.EndUseTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.EndUseTypeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.EndUseTypeVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.EndUseTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.EndUseTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.EndUseTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.EndUseTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.EndUseTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.EndUseTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.EndUseTypeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.EndUseTypeVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.EndUseTypeVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.EndUseTypeVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.EndUseTypeVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.EndUseTypeVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.EndUseTypeVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.EndUseTypeVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.EndUseTypeVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.EndUseTypeVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.EndUseTypeVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.EndUseTypeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.EndUseTypeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.EndUseTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.EndUseTypeVector_swiginit(self, _openstudioutilitiesdata.new_EndUseTypeVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.EndUseTypeVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.EndUseTypeVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.EndUseTypeVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.EndUseTypeVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.EndUseTypeVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.EndUseTypeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.EndUseTypeVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.EndUseTypeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_EndUseTypeVector

# Register EndUseTypeVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.EndUseTypeVector_swigregister(EndUseTypeVector)
class OptionalEndUseType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalEndUseType_swiginit(self, _openstudioutilitiesdata.new_OptionalEndUseType(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalEndUseType_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalEndUseType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalEndUseType___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalEndUseType_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalEndUseType_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalEndUseType_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalEndUseType_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalEndUseType_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalEndUseType_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalEndUseType

# Register OptionalEndUseType in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalEndUseType_swigregister(OptionalEndUseType)
class BuildingSectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.BuildingSectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.BuildingSectorVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.BuildingSectorVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.BuildingSectorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.BuildingSectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.BuildingSectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.BuildingSectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.BuildingSectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.BuildingSectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.BuildingSectorVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.BuildingSectorVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.BuildingSectorVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.BuildingSectorVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.BuildingSectorVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.BuildingSectorVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.BuildingSectorVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.BuildingSectorVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.BuildingSectorVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.BuildingSectorVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.BuildingSectorVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.BuildingSectorVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.BuildingSectorVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.BuildingSectorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.BuildingSectorVector_swiginit(self, _openstudioutilitiesdata.new_BuildingSectorVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.BuildingSectorVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.BuildingSectorVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.BuildingSectorVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.BuildingSectorVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.BuildingSectorVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.BuildingSectorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.BuildingSectorVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.BuildingSectorVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_BuildingSectorVector

# Register BuildingSectorVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.BuildingSectorVector_swigregister(BuildingSectorVector)
class OptionalBuildingSector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalBuildingSector_swiginit(self, _openstudioutilitiesdata.new_OptionalBuildingSector(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalBuildingSector_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalBuildingSector___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalBuildingSector___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalBuildingSector_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalBuildingSector_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalBuildingSector_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalBuildingSector_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalBuildingSector_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalBuildingSector_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalBuildingSector

# Register OptionalBuildingSector in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalBuildingSector_swigregister(OptionalBuildingSector)
class AppGFuelTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.AppGFuelTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.AppGFuelTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.AppGFuelTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.AppGFuelTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.AppGFuelTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.AppGFuelTypeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.AppGFuelTypeVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.AppGFuelTypeVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.AppGFuelTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.AppGFuelTypeVector_swiginit(self, _openstudioutilitiesdata.new_AppGFuelTypeVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.AppGFuelTypeVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.AppGFuelTypeVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.AppGFuelTypeVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.AppGFuelTypeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.AppGFuelTypeVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.AppGFuelTypeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_AppGFuelTypeVector

# Register AppGFuelTypeVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.AppGFuelTypeVector_swigregister(AppGFuelTypeVector)
class OptionalAppGFuelType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalAppGFuelType_swiginit(self, _openstudioutilitiesdata.new_OptionalAppGFuelType(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalAppGFuelType_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalAppGFuelType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalAppGFuelType___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalAppGFuelType_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalAppGFuelType_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalAppGFuelType_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalAppGFuelType_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalAppGFuelType_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalAppGFuelType_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalAppGFuelType

# Register OptionalAppGFuelType in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalAppGFuelType_swigregister(OptionalAppGFuelType)
class ComponentTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.ComponentTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.ComponentTypeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.ComponentTypeVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.ComponentTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.ComponentTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.ComponentTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.ComponentTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.ComponentTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.ComponentTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.ComponentTypeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.ComponentTypeVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.ComponentTypeVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.ComponentTypeVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.ComponentTypeVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.ComponentTypeVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.ComponentTypeVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.ComponentTypeVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.ComponentTypeVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.ComponentTypeVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.ComponentTypeVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.ComponentTypeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.ComponentTypeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.ComponentTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.ComponentTypeVector_swiginit(self, _openstudioutilitiesdata.new_ComponentTypeVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.ComponentTypeVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.ComponentTypeVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.ComponentTypeVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.ComponentTypeVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.ComponentTypeVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.ComponentTypeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.ComponentTypeVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.ComponentTypeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_ComponentTypeVector

# Register ComponentTypeVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.ComponentTypeVector_swigregister(ComponentTypeVector)
class OptionalComponentType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalComponentType_swiginit(self, _openstudioutilitiesdata.new_OptionalComponentType(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalComponentType_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalComponentType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalComponentType___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalComponentType_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalComponentType_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalComponentType_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalComponentType_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalComponentType_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalComponentType_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalComponentType

# Register OptionalComponentType in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalComponentType_swigregister(OptionalComponentType)
class AlfalfaComponentTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.AlfalfaComponentTypeVector_swiginit(self, _openstudioutilitiesdata.new_AlfalfaComponentTypeVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.AlfalfaComponentTypeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_AlfalfaComponentTypeVector

# Register AlfalfaComponentTypeVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.AlfalfaComponentTypeVector_swigregister(AlfalfaComponentTypeVector)
class OptionalAlfalfaComponentType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalAlfalfaComponentType_swiginit(self, _openstudioutilitiesdata.new_OptionalAlfalfaComponentType(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentType_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentType___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentType_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentType_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentType_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentType_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentType_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentType_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalAlfalfaComponentType

# Register OptionalAlfalfaComponentType in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalAlfalfaComponentType_swigregister(OptionalAlfalfaComponentType)
class AlfalfaComponentCapabilityVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_swiginit(self, _openstudioutilitiesdata.new_AlfalfaComponentCapabilityVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapabilityVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_AlfalfaComponentCapabilityVector

# Register AlfalfaComponentCapabilityVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.AlfalfaComponentCapabilityVector_swigregister(AlfalfaComponentCapabilityVector)
class OptionalAlfalfaComponentCapability(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalAlfalfaComponentCapability_swiginit(self, _openstudioutilitiesdata.new_OptionalAlfalfaComponentCapability(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentCapability_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentCapability___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentCapability___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentCapability_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentCapability_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentCapability_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentCapability_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentCapability_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalAlfalfaComponentCapability_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalAlfalfaComponentCapability

# Register OptionalAlfalfaComponentCapability in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalAlfalfaComponentCapability_swigregister(OptionalAlfalfaComponentCapability)
class InstallLocationType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.InstallLocationType_swiginit(self, _openstudioutilitiesdata.new_InstallLocationType(*args))

    def valueName(self):
        return _openstudioutilitiesdata.InstallLocationType_valueName(self)

    def value(self):
        return _openstudioutilitiesdata.InstallLocationType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesdata.InstallLocationType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesdata.InstallLocationType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesdata.InstallLocationType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesdata.InstallLocationType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesdata.InstallLocationType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesdata.InstallLocationType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesdata.InstallLocationType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesdata.InstallLocationType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesdata.InstallLocationType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesdata.InstallLocationType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesdata.InstallLocationType___str__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_InstallLocationType

# Register InstallLocationType in _openstudioutilitiesdata:
_openstudioutilitiesdata.InstallLocationType_swigregister(InstallLocationType)
class FuelType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.FuelType_swiginit(self, _openstudioutilitiesdata.new_FuelType(*args))

    def valueName(self):
        return _openstudioutilitiesdata.FuelType_valueName(self)

    def value(self):
        return _openstudioutilitiesdata.FuelType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesdata.FuelType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesdata.FuelType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesdata.FuelType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesdata.FuelType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesdata.FuelType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesdata.FuelType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesdata.FuelType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesdata.FuelType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesdata.FuelType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesdata.FuelType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesdata.FuelType___str__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_FuelType

# Register FuelType in _openstudioutilitiesdata:
_openstudioutilitiesdata.FuelType_swigregister(FuelType)
class EndUseFuelType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.EndUseFuelType_swiginit(self, _openstudioutilitiesdata.new_EndUseFuelType(*args))

    def valueName(self):
        return _openstudioutilitiesdata.EndUseFuelType_valueName(self)

    def value(self):
        return _openstudioutilitiesdata.EndUseFuelType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesdata.EndUseFuelType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesdata.EndUseFuelType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesdata.EndUseFuelType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesdata.EndUseFuelType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesdata.EndUseFuelType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesdata.EndUseFuelType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesdata.EndUseFuelType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesdata.EndUseFuelType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesdata.EndUseFuelType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesdata.EndUseFuelType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesdata.EndUseFuelType___str__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_EndUseFuelType

# Register EndUseFuelType in _openstudioutilitiesdata:
_openstudioutilitiesdata.EndUseFuelType_swigregister(EndUseFuelType)
class EndUseCategoryType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.EndUseCategoryType_swiginit(self, _openstudioutilitiesdata.new_EndUseCategoryType(*args))

    def valueName(self):
        return _openstudioutilitiesdata.EndUseCategoryType_valueName(self)

    def value(self):
        return _openstudioutilitiesdata.EndUseCategoryType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesdata.EndUseCategoryType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesdata.EndUseCategoryType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesdata.EndUseCategoryType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesdata.EndUseCategoryType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesdata.EndUseCategoryType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesdata.EndUseCategoryType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesdata.EndUseCategoryType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesdata.EndUseCategoryType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesdata.EndUseCategoryType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesdata.EndUseCategoryType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesdata.EndUseCategoryType___str__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_EndUseCategoryType

# Register EndUseCategoryType in _openstudioutilitiesdata:
_openstudioutilitiesdata.EndUseCategoryType_swigregister(EndUseCategoryType)
class EndUseType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.EndUseType_swiginit(self, _openstudioutilitiesdata.new_EndUseType(*args))

    def valueName(self):
        return _openstudioutilitiesdata.EndUseType_valueName(self)

    def value(self):
        return _openstudioutilitiesdata.EndUseType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesdata.EndUseType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesdata.EndUseType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesdata.EndUseType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesdata.EndUseType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesdata.EndUseType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesdata.EndUseType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesdata.EndUseType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesdata.EndUseType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesdata.EndUseType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesdata.EndUseType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesdata.EndUseType___str__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_EndUseType

# Register EndUseType in _openstudioutilitiesdata:
_openstudioutilitiesdata.EndUseType_swigregister(EndUseType)
class BuildingSector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.BuildingSector_swiginit(self, _openstudioutilitiesdata.new_BuildingSector(*args))

    def valueName(self):
        return _openstudioutilitiesdata.BuildingSector_valueName(self)

    def value(self):
        return _openstudioutilitiesdata.BuildingSector_value(self)

    def valueDescription(self):
        return _openstudioutilitiesdata.BuildingSector_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesdata.BuildingSector___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesdata.BuildingSector___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesdata.BuildingSector___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesdata.BuildingSector___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesdata.BuildingSector___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesdata.BuildingSector___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesdata.BuildingSector_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesdata.BuildingSector_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesdata.BuildingSector_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesdata.BuildingSector___str__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_BuildingSector

# Register BuildingSector in _openstudioutilitiesdata:
_openstudioutilitiesdata.BuildingSector_swigregister(BuildingSector)
class AppGFuelType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.AppGFuelType_swiginit(self, _openstudioutilitiesdata.new_AppGFuelType(*args))

    def valueName(self):
        return _openstudioutilitiesdata.AppGFuelType_valueName(self)

    def value(self):
        return _openstudioutilitiesdata.AppGFuelType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesdata.AppGFuelType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesdata.AppGFuelType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesdata.AppGFuelType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesdata.AppGFuelType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesdata.AppGFuelType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesdata.AppGFuelType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesdata.AppGFuelType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesdata.AppGFuelType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesdata.AppGFuelType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesdata.AppGFuelType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesdata.AppGFuelType___str__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_AppGFuelType

# Register AppGFuelType in _openstudioutilitiesdata:
_openstudioutilitiesdata.AppGFuelType_swigregister(AppGFuelType)
class ComponentType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.ComponentType_swiginit(self, _openstudioutilitiesdata.new_ComponentType(*args))

    def valueName(self):
        return _openstudioutilitiesdata.ComponentType_valueName(self)

    def value(self):
        return _openstudioutilitiesdata.ComponentType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesdata.ComponentType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesdata.ComponentType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesdata.ComponentType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesdata.ComponentType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesdata.ComponentType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesdata.ComponentType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesdata.ComponentType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesdata.ComponentType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesdata.ComponentType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesdata.ComponentType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesdata.ComponentType___str__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_ComponentType

# Register ComponentType in _openstudioutilitiesdata:
_openstudioutilitiesdata.ComponentType_swigregister(ComponentType)
class AlfalfaComponentCapability(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.AlfalfaComponentCapability_swiginit(self, _openstudioutilitiesdata.new_AlfalfaComponentCapability(*args))

    def valueName(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapability_valueName(self)

    def value(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapability_value(self)

    def valueDescription(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapability_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesdata.AlfalfaComponentCapability___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesdata.AlfalfaComponentCapability___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesdata.AlfalfaComponentCapability___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesdata.AlfalfaComponentCapability___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesdata.AlfalfaComponentCapability___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesdata.AlfalfaComponentCapability___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesdata.AlfalfaComponentCapability_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesdata.AlfalfaComponentCapability_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesdata.AlfalfaComponentCapability_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesdata.AlfalfaComponentCapability___str__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_AlfalfaComponentCapability

# Register AlfalfaComponentCapability in _openstudioutilitiesdata:
_openstudioutilitiesdata.AlfalfaComponentCapability_swigregister(AlfalfaComponentCapability)
class AlfalfaComponentType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.AlfalfaComponentType_swiginit(self, _openstudioutilitiesdata.new_AlfalfaComponentType(*args))

    def valueName(self):
        return _openstudioutilitiesdata.AlfalfaComponentType_valueName(self)

    def value(self):
        return _openstudioutilitiesdata.AlfalfaComponentType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesdata.AlfalfaComponentType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesdata.AlfalfaComponentType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesdata.AlfalfaComponentType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesdata.AlfalfaComponentType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesdata.AlfalfaComponentType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesdata.AlfalfaComponentType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesdata.AlfalfaComponentType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesdata.AlfalfaComponentType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesdata.AlfalfaComponentType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesdata.AlfalfaComponentType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesdata.AlfalfaComponentType___str__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_AlfalfaComponentType

# Register AlfalfaComponentType in _openstudioutilitiesdata:
_openstudioutilitiesdata.AlfalfaComponentType_swigregister(AlfalfaComponentType)

def convertFuelTypeToAppG(fuelType):
    return _openstudioutilitiesdata.convertFuelTypeToAppG(fuelType)
class OptionalAttribute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalAttribute_swiginit(self, _openstudioutilitiesdata.new_OptionalAttribute(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalAttribute_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalAttribute___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalAttribute___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalAttribute_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalAttribute_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalAttribute_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalAttribute_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalAttribute_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalAttribute_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalAttribute

# Register OptionalAttribute in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalAttribute_swigregister(OptionalAttribute)
class AttributeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.AttributeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.AttributeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.AttributeVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.AttributeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.AttributeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.AttributeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.AttributeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.AttributeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.AttributeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.AttributeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.AttributeVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.AttributeVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.AttributeVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.AttributeVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.AttributeVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.AttributeVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.AttributeVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.AttributeVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.AttributeVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.AttributeVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.AttributeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.AttributeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.AttributeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.AttributeVector_swiginit(self, _openstudioutilitiesdata.new_AttributeVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.AttributeVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.AttributeVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.AttributeVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.AttributeVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesdata.AttributeVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesdata.AttributeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.AttributeVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.AttributeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_AttributeVector

# Register AttributeVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.AttributeVector_swigregister(AttributeVector)
class AttributeValueType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.AttributeValueType_swiginit(self, _openstudioutilitiesdata.new_AttributeValueType(*args))

    def valueName(self):
        return _openstudioutilitiesdata.AttributeValueType_valueName(self)

    def value(self):
        return _openstudioutilitiesdata.AttributeValueType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesdata.AttributeValueType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesdata.AttributeValueType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesdata.AttributeValueType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesdata.AttributeValueType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesdata.AttributeValueType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesdata.AttributeValueType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesdata.AttributeValueType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesdata.AttributeValueType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesdata.AttributeValueType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesdata.AttributeValueType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesdata.AttributeValueType___str__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_AttributeValueType

# Register AttributeValueType in _openstudioutilitiesdata:
_openstudioutilitiesdata.AttributeValueType_swigregister(AttributeValueType)
class AttributeDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_openstudioutilitiesdata.AttributeDescription_name_get, _openstudioutilitiesdata.AttributeDescription_name_set)
    displayName = property(_openstudioutilitiesdata.AttributeDescription_displayName_get, _openstudioutilitiesdata.AttributeDescription_displayName_set)
    description = property(_openstudioutilitiesdata.AttributeDescription_description_get, _openstudioutilitiesdata.AttributeDescription_description_set)
    validValueTypes = property(_openstudioutilitiesdata.AttributeDescription_validValueTypes_get, _openstudioutilitiesdata.AttributeDescription_validValueTypes_set)
    required = property(_openstudioutilitiesdata.AttributeDescription_required_get, _openstudioutilitiesdata.AttributeDescription_required_set)
    defaultValue = property(_openstudioutilitiesdata.AttributeDescription_defaultValue_get, _openstudioutilitiesdata.AttributeDescription_defaultValue_set)

    def __init__(self, *args):
        _openstudioutilitiesdata.AttributeDescription_swiginit(self, _openstudioutilitiesdata.new_AttributeDescription(*args))
    __swig_destroy__ = _openstudioutilitiesdata.delete_AttributeDescription

# Register AttributeDescription in _openstudioutilitiesdata:
_openstudioutilitiesdata.AttributeDescription_swigregister(AttributeDescription)
class Attribute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesdata.delete_Attribute

    def __init__(self, *args):
        _openstudioutilitiesdata.Attribute_swiginit(self, _openstudioutilitiesdata.new_Attribute(*args))

    def clone(self):
        return _openstudioutilitiesdata.Attribute_clone(self)

    @staticmethod
    def loadFromXml(xmlPath):
        return _openstudioutilitiesdata.Attribute_loadFromXml(xmlPath)

    def uuid(self):
        return _openstudioutilitiesdata.Attribute_uuid(self)

    def versionUUID(self):
        return _openstudioutilitiesdata.Attribute_versionUUID(self)

    def name(self):
        return _openstudioutilitiesdata.Attribute_name(self)

    def displayName(self, returnName=False):
        return _openstudioutilitiesdata.Attribute_displayName(self, returnName)

    def setDisplayName(self, displayName):
        return _openstudioutilitiesdata.Attribute_setDisplayName(self, displayName)

    def clearDisplayName(self):
        return _openstudioutilitiesdata.Attribute_clearDisplayName(self)

    def source(self):
        return _openstudioutilitiesdata.Attribute_source(self)

    def setSource(self, source):
        return _openstudioutilitiesdata.Attribute_setSource(self, source)

    def clearSource(self):
        return _openstudioutilitiesdata.Attribute_clearSource(self)

    def valueType(self):
        return _openstudioutilitiesdata.Attribute_valueType(self)

    def hasValue(self):
        return _openstudioutilitiesdata.Attribute_hasValue(self)

    def valueAsBoolean(self):
        return _openstudioutilitiesdata.Attribute_valueAsBoolean(self)

    def valueAsInteger(self):
        return _openstudioutilitiesdata.Attribute_valueAsInteger(self)

    def valueAsUnsigned(self):
        return _openstudioutilitiesdata.Attribute_valueAsUnsigned(self)

    def valueAsDouble(self):
        return _openstudioutilitiesdata.Attribute_valueAsDouble(self)

    def valueAsString(self):
        return _openstudioutilitiesdata.Attribute_valueAsString(self)

    def valueAsAttributeVector(self):
        return _openstudioutilitiesdata.Attribute_valueAsAttributeVector(self)

    def setValue(self, *args):
        return _openstudioutilitiesdata.Attribute_setValue(self, *args)

    def findChildByName(self, name):
        return _openstudioutilitiesdata.Attribute_findChildByName(self, name)

    def units(self):
        return _openstudioutilitiesdata.Attribute_units(self)

    def setUnits(self, units):
        return _openstudioutilitiesdata.Attribute_setUnits(self, units)

    def toString(self):
        return _openstudioutilitiesdata.Attribute_toString(self)

    def saveToXml(self, path):
        return _openstudioutilitiesdata.Attribute_saveToXml(self, path)

    def __eq__(self, other):
        return _openstudioutilitiesdata.Attribute___eq__(self, other)

    def toJSON(self, short_version=True):
        return _openstudioutilitiesdata.Attribute_toJSON(self, short_version)

    def toJSONString(self):
        return _openstudioutilitiesdata.Attribute_toJSONString(self)

    def valueAsJSON(self):
        return _openstudioutilitiesdata.Attribute_valueAsJSON(self)

    def __str__(self):
        return _openstudioutilitiesdata.Attribute___str__(self)

# Register Attribute in _openstudioutilitiesdata:
_openstudioutilitiesdata.Attribute_swigregister(Attribute)

def createAttributeFromVector(*args):
    return _openstudioutilitiesdata.createAttributeFromVector(*args)

def getIntVectorFromAttribute(attribute):
    return _openstudioutilitiesdata.getIntVectorFromAttribute(attribute)

def getDoubleVectorFromAttribute(attribute):
    return _openstudioutilitiesdata.getDoubleVectorFromAttribute(attribute)
class OptionalVariant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalVariant_swiginit(self, _openstudioutilitiesdata.new_OptionalVariant(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalVariant_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalVariant___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalVariant___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalVariant_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalVariant_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalVariant_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalVariant_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalVariant_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalVariant_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalVariant

# Register OptionalVariant in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalVariant_swigregister(OptionalVariant)
class VariantVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.VariantVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.VariantVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.VariantVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.VariantVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.VariantVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.VariantVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.VariantVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.VariantVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.VariantVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.VariantVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.VariantVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.VariantVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.VariantVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.VariantVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.VariantVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.VariantVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.VariantVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.VariantVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.VariantVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.VariantVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.VariantVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.VariantVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.VariantVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.VariantVector_swiginit(self, _openstudioutilitiesdata.new_VariantVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.VariantVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.VariantVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.VariantVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.VariantVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.VariantVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.VariantVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.VariantVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.VariantVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_VariantVector

# Register VariantVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.VariantVector_swigregister(VariantVector)
class StringVariantMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.StringVariantMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.StringVariantMap___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.StringVariantMap___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.StringVariantMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _openstudioutilitiesdata.StringVariantMap___getitem__(self, key)

    def __delitem__(self, key):
        return _openstudioutilitiesdata.StringVariantMap___delitem__(self, key)

    def has_key(self, key):
        return _openstudioutilitiesdata.StringVariantMap_has_key(self, key)

    def keys(self):
        return _openstudioutilitiesdata.StringVariantMap_keys(self)

    def values(self):
        return _openstudioutilitiesdata.StringVariantMap_values(self)

    def items(self):
        return _openstudioutilitiesdata.StringVariantMap_items(self)

    def __contains__(self, key):
        return _openstudioutilitiesdata.StringVariantMap___contains__(self, key)

    def key_iterator(self):
        return _openstudioutilitiesdata.StringVariantMap_key_iterator(self)

    def value_iterator(self):
        return _openstudioutilitiesdata.StringVariantMap_value_iterator(self)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.StringVariantMap___setitem__(self, *args)

    def asdict(self):
        return _openstudioutilitiesdata.StringVariantMap_asdict(self)

    def __init__(self, *args):
        _openstudioutilitiesdata.StringVariantMap_swiginit(self, _openstudioutilitiesdata.new_StringVariantMap(*args))

    def empty(self):
        return _openstudioutilitiesdata.StringVariantMap_empty(self)

    def size(self):
        return _openstudioutilitiesdata.StringVariantMap_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.StringVariantMap_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.StringVariantMap_begin(self)

    def end(self):
        return _openstudioutilitiesdata.StringVariantMap_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.StringVariantMap_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.StringVariantMap_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.StringVariantMap_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.StringVariantMap_get_allocator(self)

    def count(self, x):
        return _openstudioutilitiesdata.StringVariantMap_count(self, x)

    def erase(self, *args):
        return _openstudioutilitiesdata.StringVariantMap_erase(self, *args)

    def find(self, x):
        return _openstudioutilitiesdata.StringVariantMap_find(self, x)

    def lower_bound(self, x):
        return _openstudioutilitiesdata.StringVariantMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _openstudioutilitiesdata.StringVariantMap_upper_bound(self, x)
    __swig_destroy__ = _openstudioutilitiesdata.delete_StringVariantMap

# Register StringVariantMap in _openstudioutilitiesdata:
_openstudioutilitiesdata.StringVariantMap_swigregister(StringVariantMap)
class VariantVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.VariantVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.VariantVectorVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.VariantVectorVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.VariantVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.VariantVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.VariantVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.VariantVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.VariantVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.VariantVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.VariantVectorVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.VariantVectorVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.VariantVectorVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.VariantVectorVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.VariantVectorVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.VariantVectorVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.VariantVectorVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.VariantVectorVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.VariantVectorVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.VariantVectorVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.VariantVectorVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.VariantVectorVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.VariantVectorVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.VariantVectorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.VariantVectorVector_swiginit(self, _openstudioutilitiesdata.new_VariantVectorVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.VariantVectorVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.VariantVectorVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.VariantVectorVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.VariantVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.VariantVectorVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.VariantVectorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.VariantVectorVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.VariantVectorVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_VariantVectorVector

# Register VariantVectorVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.VariantVectorVector_swigregister(VariantVectorVector)
class VariantType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.VariantType_swiginit(self, _openstudioutilitiesdata.new_VariantType(*args))

    def valueName(self):
        return _openstudioutilitiesdata.VariantType_valueName(self)

    def value(self):
        return _openstudioutilitiesdata.VariantType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesdata.VariantType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesdata.VariantType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesdata.VariantType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesdata.VariantType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesdata.VariantType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesdata.VariantType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesdata.VariantType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesdata.VariantType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesdata.VariantType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesdata.VariantType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesdata.VariantType___str__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_VariantType

# Register VariantType in _openstudioutilitiesdata:
_openstudioutilitiesdata.VariantType_swigregister(VariantType)
class Variant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.Variant_swiginit(self, _openstudioutilitiesdata.new_Variant(*args))

    def variantType(self):
        return _openstudioutilitiesdata.Variant_variantType(self)

    def valueAsBoolean(self):
        return _openstudioutilitiesdata.Variant_valueAsBoolean(self)

    def valueAsInteger(self):
        return _openstudioutilitiesdata.Variant_valueAsInteger(self)

    def valueAsDouble(self):
        return _openstudioutilitiesdata.Variant_valueAsDouble(self)

    def valueAsString(self):
        return _openstudioutilitiesdata.Variant_valueAsString(self)

    def valueAsJSON(self):
        return _openstudioutilitiesdata.Variant_valueAsJSON(self)

    def isTrueish(self):
        return _openstudioutilitiesdata.Variant_isTrueish(self)

    def __str__(self):
        return _openstudioutilitiesdata.Variant___str__(self)

    def __int__(self):
        return _openstudioutilitiesdata.Variant___int__(self)

    def __float__(self):
        return _openstudioutilitiesdata.Variant___float__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_Variant

# Register Variant in _openstudioutilitiesdata:
_openstudioutilitiesdata.Variant_swigregister(Variant)

def __lshift__(*args):
    return _openstudioutilitiesdata.__lshift__(*args)
class OptionalCalibrationResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalCalibrationResult_swiginit(self, _openstudioutilitiesdata.new_OptionalCalibrationResult(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalCalibrationResult_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalCalibrationResult___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalCalibrationResult___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalCalibrationResult_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalCalibrationResult_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalCalibrationResult_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalCalibrationResult_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalCalibrationResult_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalCalibrationResult_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalCalibrationResult

# Register OptionalCalibrationResult in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalCalibrationResult_swigregister(OptionalCalibrationResult)
class OptionalCalibrationBillingPeriod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalCalibrationBillingPeriod_swiginit(self, _openstudioutilitiesdata.new_OptionalCalibrationBillingPeriod(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalCalibrationBillingPeriod_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalCalibrationBillingPeriod___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalCalibrationBillingPeriod___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalCalibrationBillingPeriod_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalCalibrationBillingPeriod_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalCalibrationBillingPeriod_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalCalibrationBillingPeriod_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalCalibrationBillingPeriod_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalCalibrationBillingPeriod_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalCalibrationBillingPeriod

# Register OptionalCalibrationBillingPeriod in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalCalibrationBillingPeriod_swigregister(OptionalCalibrationBillingPeriod)
class OptionalCalibrationUtilityBill(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalCalibrationUtilityBill_swiginit(self, _openstudioutilitiesdata.new_OptionalCalibrationUtilityBill(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalCalibrationUtilityBill_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalCalibrationUtilityBill___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalCalibrationUtilityBill___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalCalibrationUtilityBill_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalCalibrationUtilityBill_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalCalibrationUtilityBill_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalCalibrationUtilityBill_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalCalibrationUtilityBill_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalCalibrationUtilityBill_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalCalibrationUtilityBill

# Register OptionalCalibrationUtilityBill in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalCalibrationUtilityBill_swigregister(OptionalCalibrationUtilityBill)
class CalibrationResultVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.CalibrationResultVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.CalibrationResultVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.CalibrationResultVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.CalibrationResultVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.CalibrationResultVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.CalibrationResultVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.CalibrationResultVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.CalibrationResultVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.CalibrationResultVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.CalibrationResultVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.CalibrationResultVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.CalibrationResultVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.CalibrationResultVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.CalibrationResultVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.CalibrationResultVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.CalibrationResultVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.CalibrationResultVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.CalibrationResultVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.CalibrationResultVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.CalibrationResultVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.CalibrationResultVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.CalibrationResultVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.CalibrationResultVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.CalibrationResultVector_swiginit(self, _openstudioutilitiesdata.new_CalibrationResultVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.CalibrationResultVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.CalibrationResultVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.CalibrationResultVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.CalibrationResultVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.CalibrationResultVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.CalibrationResultVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.CalibrationResultVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.CalibrationResultVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_CalibrationResultVector

# Register CalibrationResultVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.CalibrationResultVector_swigregister(CalibrationResultVector)
class CalibrationBillingPeriodVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.CalibrationBillingPeriodVector_swiginit(self, _openstudioutilitiesdata.new_CalibrationBillingPeriodVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriodVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_CalibrationBillingPeriodVector

# Register CalibrationBillingPeriodVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.CalibrationBillingPeriodVector_swigregister(CalibrationBillingPeriodVector)
class CalibrationUtilityBillVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.CalibrationUtilityBillVector_swiginit(self, _openstudioutilitiesdata.new_CalibrationUtilityBillVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.CalibrationUtilityBillVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_CalibrationUtilityBillVector

# Register CalibrationUtilityBillVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.CalibrationUtilityBillVector_swigregister(CalibrationUtilityBillVector)
class AttributeValueTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.AttributeValueTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.AttributeValueTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.AttributeValueTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.AttributeValueTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.AttributeValueTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.AttributeValueTypeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.AttributeValueTypeVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.AttributeValueTypeVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.AttributeValueTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.AttributeValueTypeVector_swiginit(self, _openstudioutilitiesdata.new_AttributeValueTypeVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.AttributeValueTypeVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.AttributeValueTypeVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.AttributeValueTypeVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.AttributeValueTypeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.AttributeValueTypeVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.AttributeValueTypeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_AttributeValueTypeVector

# Register AttributeValueTypeVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.AttributeValueTypeVector_swigregister(AttributeValueTypeVector)
class CalibrationBillingPeriod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def attributeName():
        return _openstudioutilitiesdata.CalibrationBillingPeriod_attributeName()

    @staticmethod
    def fromAttribute(attribute):
        return _openstudioutilitiesdata.CalibrationBillingPeriod_fromAttribute(attribute)

    def __init__(self, startDate, numberOfDays, consumptionUnit, peakDemandUnit, consumption, peakDemand, totalCost, modelConsumption, modelPeakDemand, modelTotalCost):
        _openstudioutilitiesdata.CalibrationBillingPeriod_swiginit(self, _openstudioutilitiesdata.new_CalibrationBillingPeriod(startDate, numberOfDays, consumptionUnit, peakDemandUnit, consumption, peakDemand, totalCost, modelConsumption, modelPeakDemand, modelTotalCost))

    def attribute(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriod_attribute(self)

    def startDate(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriod_startDate(self)

    def endDate(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriod_endDate(self)

    def numberOfDays(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriod_numberOfDays(self)

    def consumptionUnit(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriod_consumptionUnit(self)

    def peakDemandUnit(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriod_peakDemandUnit(self)

    def consumption(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriod_consumption(self)

    def peakDemand(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriod_peakDemand(self)

    def totalCost(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriod_totalCost(self)

    def modelConsumption(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriod_modelConsumption(self)

    def modelPeakDemand(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriod_modelPeakDemand(self)

    def modelTotalCost(self):
        return _openstudioutilitiesdata.CalibrationBillingPeriod_modelTotalCost(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_CalibrationBillingPeriod

# Register CalibrationBillingPeriod in _openstudioutilitiesdata:
_openstudioutilitiesdata.CalibrationBillingPeriod_swigregister(CalibrationBillingPeriod)
class CalibrationUtilityBill(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def attributeName():
        return _openstudioutilitiesdata.CalibrationUtilityBill_attributeName()

    @staticmethod
    def fromAttribute(attribute):
        return _openstudioutilitiesdata.CalibrationUtilityBill_fromAttribute(attribute)

    def __init__(self, name, fuelType, meterInstallLocation, meterSpecificInstallLocation, meterEndUseCategory, meterSpecificEndUse, consumptionUnit, consumptionUnitConversionFactor, peakDemandUnit, peakDemandUnitConversionFactor, timestepsInPeakDemandWindow, minutesInPeakDemandWindow, numberBillingPeriodsInCalculations, CVRMSE, NMBE):
        _openstudioutilitiesdata.CalibrationUtilityBill_swiginit(self, _openstudioutilitiesdata.new_CalibrationUtilityBill(name, fuelType, meterInstallLocation, meterSpecificInstallLocation, meterEndUseCategory, meterSpecificEndUse, consumptionUnit, consumptionUnitConversionFactor, peakDemandUnit, peakDemandUnitConversionFactor, timestepsInPeakDemandWindow, minutesInPeakDemandWindow, numberBillingPeriodsInCalculations, CVRMSE, NMBE))

    def attribute(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_attribute(self)

    def name(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_name(self)

    def fuelType(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_fuelType(self)

    def meterInstallLocation(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_meterInstallLocation(self)

    def meterSpecificInstallLocation(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_meterSpecificInstallLocation(self)

    def meterEndUseCategory(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_meterEndUseCategory(self)

    def meterSpecificEndUse(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_meterSpecificEndUse(self)

    def consumptionUnit(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_consumptionUnit(self)

    def consumptionUnitConversionFactor(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_consumptionUnitConversionFactor(self)

    def peakDemandUnit(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_peakDemandUnit(self)

    def peakDemandUnitConversionFactor(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_peakDemandUnitConversionFactor(self)

    def timestepsInPeakDemandWindow(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_timestepsInPeakDemandWindow(self)

    def minutesInPeakDemandWindow(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_minutesInPeakDemandWindow(self)

    def numberBillingPeriodsInCalculations(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_numberBillingPeriodsInCalculations(self)

    def CVRMSE(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_CVRMSE(self)

    def NMBE(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_NMBE(self)

    def billingPeriods(self):
        return _openstudioutilitiesdata.CalibrationUtilityBill_billingPeriods(self)

    def addBillingPeriod(self, billingPeriod):
        return _openstudioutilitiesdata.CalibrationUtilityBill_addBillingPeriod(self, billingPeriod)
    __swig_destroy__ = _openstudioutilitiesdata.delete_CalibrationUtilityBill

# Register CalibrationUtilityBill in _openstudioutilitiesdata:
_openstudioutilitiesdata.CalibrationUtilityBill_swigregister(CalibrationUtilityBill)
class CalibrationResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def attributeName():
        return _openstudioutilitiesdata.CalibrationResult_attributeName()

    @staticmethod
    def fromAttribute(attribute):
        return _openstudioutilitiesdata.CalibrationResult_fromAttribute(attribute)

    def __init__(self):
        _openstudioutilitiesdata.CalibrationResult_swiginit(self, _openstudioutilitiesdata.new_CalibrationResult())

    def attribute(self):
        return _openstudioutilitiesdata.CalibrationResult_attribute(self)

    def utilityBills(self):
        return _openstudioutilitiesdata.CalibrationResult_utilityBills(self)

    def addUtilityBill(self, utilityBill):
        return _openstudioutilitiesdata.CalibrationResult_addUtilityBill(self, utilityBill)
    __swig_destroy__ = _openstudioutilitiesdata.delete_CalibrationResult

# Register CalibrationResult in _openstudioutilitiesdata:
_openstudioutilitiesdata.CalibrationResult_swigregister(CalibrationResult)
class OptionalEndUses(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalEndUses_swiginit(self, _openstudioutilitiesdata.new_OptionalEndUses(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalEndUses_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalEndUses___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalEndUses___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalEndUses_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalEndUses_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalEndUses_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalEndUses_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalEndUses_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalEndUses_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalEndUses

# Register OptionalEndUses in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalEndUses_swigregister(OptionalEndUses)
class EndUsesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.EndUsesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.EndUsesVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.EndUsesVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.EndUsesVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.EndUsesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.EndUsesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.EndUsesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.EndUsesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.EndUsesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.EndUsesVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.EndUsesVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.EndUsesVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.EndUsesVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.EndUsesVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.EndUsesVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.EndUsesVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.EndUsesVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.EndUsesVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.EndUsesVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.EndUsesVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.EndUsesVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.EndUsesVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.EndUsesVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.EndUsesVector_swiginit(self, _openstudioutilitiesdata.new_EndUsesVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.EndUsesVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.EndUsesVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.EndUsesVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.EndUsesVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.EndUsesVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.EndUsesVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.EndUsesVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.EndUsesVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_EndUsesVector

# Register EndUsesVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.EndUsesVector_swigregister(EndUsesVector)
class EndUses(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def attributeName():
        return _openstudioutilitiesdata.EndUses_attributeName()

    @staticmethod
    def getUnitsForFuelType(fuelType):
        return _openstudioutilitiesdata.EndUses_getUnitsForFuelType(fuelType)

    @staticmethod
    def fuelTypes():
        return _openstudioutilitiesdata.EndUses_fuelTypes()

    @staticmethod
    def categories():
        return _openstudioutilitiesdata.EndUses_categories()

    @staticmethod
    def fromAttribute(attribute):
        return _openstudioutilitiesdata.EndUses_fromAttribute(attribute)

    def __init__(self):
        _openstudioutilitiesdata.EndUses_swiginit(self, _openstudioutilitiesdata.new_EndUses())

    def attribute(self):
        return _openstudioutilitiesdata.EndUses_attribute(self)

    def addEndUse(self, *args):
        return _openstudioutilitiesdata.EndUses_addEndUse(self, *args)

    def getEndUse(self, *args):
        return _openstudioutilitiesdata.EndUses_getEndUse(self, *args)

    def getEndUseByCategory(self, *args):
        return _openstudioutilitiesdata.EndUses_getEndUseByCategory(self, *args)

    def getEndUseByFuelType(self, fuelType):
        return _openstudioutilitiesdata.EndUses_getEndUseByFuelType(self, fuelType)

    def subCategories(self):
        return _openstudioutilitiesdata.EndUses_subCategories(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_EndUses

# Register EndUses in _openstudioutilitiesdata:
_openstudioutilitiesdata.EndUses_swigregister(EndUses)
class DoubleFromVectorFunctor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioutilitiesdata.DoubleFromVectorFunctor_swiginit(self, _openstudioutilitiesdata.new_DoubleFromVectorFunctor())
    __swig_destroy__ = _openstudioutilitiesdata.delete_DoubleFromVectorFunctor

# Register DoubleFromVectorFunctor in _openstudioutilitiesdata:
_openstudioutilitiesdata.DoubleFromVectorFunctor_swigregister(DoubleFromVectorFunctor)
class VectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.VectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.VectorVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.VectorVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.VectorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.VectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.VectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.VectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.VectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.VectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.VectorVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.VectorVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.VectorVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.VectorVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.VectorVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.VectorVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.VectorVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.VectorVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.VectorVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.VectorVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.VectorVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.VectorVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.VectorVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.VectorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.VectorVector_swiginit(self, _openstudioutilitiesdata.new_VectorVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.VectorVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.VectorVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.VectorVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.VectorVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.VectorVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.VectorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.VectorVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.VectorVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_VectorVector

# Register VectorVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.VectorVector_swigregister(VectorVector)
class Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.Vector_swiginit(self, _openstudioutilitiesdata.new_Vector(*args))

    def size(self):
        return _openstudioutilitiesdata.Vector_size(self)

    def resize(self, N, preserve=True):
        return _openstudioutilitiesdata.Vector_resize(self, N, preserve)

    def __len__(self):
        return _openstudioutilitiesdata.Vector___len__(self)

    def __getitem__(self, i):
        return _openstudioutilitiesdata.Vector___getitem__(self, i)

    def __setitem__(self, i, x):
        return _openstudioutilitiesdata.Vector___setitem__(self, i, x)

    def __eq__(self, other):
        return _openstudioutilitiesdata.Vector___eq__(self, other)

    def __add__(self, *args):
        return _openstudioutilitiesdata.Vector___add__(self, *args)

    def __sub__(self, *args):
        return _openstudioutilitiesdata.Vector___sub__(self, *args)

    def __mul__(self, d):
        return _openstudioutilitiesdata.Vector___mul__(self, d)

    def __div__(self, d):
        return _openstudioutilitiesdata.Vector___div__(self, d)

    def __str__(self):
        return _openstudioutilitiesdata.Vector___str__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_Vector

# Register Vector in _openstudioutilitiesdata:
_openstudioutilitiesdata.Vector_swigregister(Vector)

def createVector(values):
    return _openstudioutilitiesdata.createVector(values)

def __eq__(*args):
    return _openstudioutilitiesdata.__eq__(*args)

def __ne__(*args):
    return _openstudioutilitiesdata.__ne__(*args)
LinearInterp = _openstudioutilitiesdata.LinearInterp
NearestInterp = _openstudioutilitiesdata.NearestInterp
HoldLastInterp = _openstudioutilitiesdata.HoldLastInterp
HoldNextInterp = _openstudioutilitiesdata.HoldNextInterp
NoneExtrap = _openstudioutilitiesdata.NoneExtrap
NearestExtrap = _openstudioutilitiesdata.NearestExtrap
class InterpInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    extrapolated = property(_openstudioutilitiesdata.InterpInfo_extrapolated_get, _openstudioutilitiesdata.InterpInfo_extrapolated_set)
    ia = property(_openstudioutilitiesdata.InterpInfo_ia_get, _openstudioutilitiesdata.InterpInfo_ia_set)
    ib = property(_openstudioutilitiesdata.InterpInfo_ib_get, _openstudioutilitiesdata.InterpInfo_ib_set)
    wa = property(_openstudioutilitiesdata.InterpInfo_wa_get, _openstudioutilitiesdata.InterpInfo_wa_set)
    wb = property(_openstudioutilitiesdata.InterpInfo_wb_get, _openstudioutilitiesdata.InterpInfo_wb_set)
    ti = property(_openstudioutilitiesdata.InterpInfo_ti_get, _openstudioutilitiesdata.InterpInfo_ti_set)

    def __init__(self):
        _openstudioutilitiesdata.InterpInfo_swiginit(self, _openstudioutilitiesdata.new_InterpInfo())
    __swig_destroy__ = _openstudioutilitiesdata.delete_InterpInfo

# Register InterpInfo in _openstudioutilitiesdata:
_openstudioutilitiesdata.InterpInfo_swigregister(InterpInfo)

def interpInfo(x, xi, ti):
    return _openstudioutilitiesdata.interpInfo(x, xi, ti)

def randVector(a, b, N):
    return _openstudioutilitiesdata.randVector(a, b, N)

def linspace(a, b, N):
    return _openstudioutilitiesdata.linspace(a, b, N)

def deltaSpace(a, b, delta):
    return _openstudioutilitiesdata.deltaSpace(a, b, delta)

def logspace(a, b, N, base=10.0):
    return _openstudioutilitiesdata.logspace(a, b, N, base)

def cumsum(x, runningSum=0.0):
    return _openstudioutilitiesdata.cumsum(x, runningSum)

def dot(*args):
    return _openstudioutilitiesdata.dot(*args)

def variance(vector):
    return _openstudioutilitiesdata.variance(vector)

def stdDev(vector):
    return _openstudioutilitiesdata.stdDev(vector)

def sumVectorFunctor():
    return _openstudioutilitiesdata.sumVectorFunctor()

def maximumVectorFunctor():
    return _openstudioutilitiesdata.maximumVectorFunctor()

def minimumVectorFunctor():
    return _openstudioutilitiesdata.minimumVectorFunctor()

def meanVectorFunctor():
    return _openstudioutilitiesdata.meanVectorFunctor()

def varianceVectorFunctor():
    return _openstudioutilitiesdata.varianceVectorFunctor()

def stdDevVectorFunctor():
    return _openstudioutilitiesdata.stdDevVectorFunctor()

def evaluateDoubleFromVectorFunctor(functor, vector):
    return _openstudioutilitiesdata.evaluateDoubleFromVectorFunctor(functor, vector)
class MatrixVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.MatrixVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.MatrixVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.MatrixVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.MatrixVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.MatrixVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.MatrixVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.MatrixVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.MatrixVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.MatrixVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.MatrixVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.MatrixVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.MatrixVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.MatrixVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.MatrixVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.MatrixVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.MatrixVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.MatrixVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.MatrixVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.MatrixVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.MatrixVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.MatrixVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.MatrixVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.MatrixVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.MatrixVector_swiginit(self, _openstudioutilitiesdata.new_MatrixVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.MatrixVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.MatrixVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.MatrixVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.MatrixVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.MatrixVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.MatrixVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.MatrixVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.MatrixVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_MatrixVector

# Register MatrixVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.MatrixVector_swigregister(MatrixVector)
class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.Matrix_swiginit(self, _openstudioutilitiesdata.new_Matrix(*args))

    def size1(self):
        return _openstudioutilitiesdata.Matrix_size1(self)

    def size2(self):
        return _openstudioutilitiesdata.Matrix_size2(self)

    def resize(self, M, N, preserve):
        return _openstudioutilitiesdata.Matrix_resize(self, M, N, preserve)

    def __getitem__(self, i):
        return _openstudioutilitiesdata.Matrix___getitem__(self, i)

    def __setitem__(self, i, x):
        return _openstudioutilitiesdata.Matrix___setitem__(self, i, x)

    def __eq__(self, other):
        return _openstudioutilitiesdata.Matrix___eq__(self, other)

    def __add__(self, *args):
        return _openstudioutilitiesdata.Matrix___add__(self, *args)

    def __sub__(self, *args):
        return _openstudioutilitiesdata.Matrix___sub__(self, *args)

    def __mul__(self, *args):
        return _openstudioutilitiesdata.Matrix___mul__(self, *args)

    def __div__(self, d):
        return _openstudioutilitiesdata.Matrix___div__(self, d)

    def __str__(self):
        return _openstudioutilitiesdata.Matrix___str__(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_Matrix

# Register Matrix in _openstudioutilitiesdata:
_openstudioutilitiesdata.Matrix_swigregister(Matrix)

def interp(*args):
    return _openstudioutilitiesdata.interp(*args)

def outerProd(lhs, rhs):
    return _openstudioutilitiesdata.outerProd(lhs, rhs)

def log(*args):
    return _openstudioutilitiesdata.log(*args)

def randMatrix(a, b, M, N):
    return _openstudioutilitiesdata.randMatrix(a, b, M, N)

def maximum(*args):
    return _openstudioutilitiesdata.maximum(*args)

def minimum(*args):
    return _openstudioutilitiesdata.minimum(*args)

def mean(*args):
    return _openstudioutilitiesdata.mean(*args)
class TimeSeriesPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioutilitiesdata.TimeSeriesPtr_swiginit(self, _openstudioutilitiesdata.new_TimeSeriesPtr())
    __swig_destroy__ = _openstudioutilitiesdata.delete_TimeSeriesPtr

# Register TimeSeriesPtr in _openstudioutilitiesdata:
_openstudioutilitiesdata.TimeSeriesPtr_swigregister(TimeSeriesPtr)
class OptionalTimeSeries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.OptionalTimeSeries_swiginit(self, _openstudioutilitiesdata.new_OptionalTimeSeries(*args))

    def reset(self):
        return _openstudioutilitiesdata.OptionalTimeSeries_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesdata.OptionalTimeSeries___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesdata.OptionalTimeSeries___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesdata.OptionalTimeSeries_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesdata.OptionalTimeSeries_isNull(self)

    def empty(self):
        return _openstudioutilitiesdata.OptionalTimeSeries_empty(self)

    def get(self):
        return _openstudioutilitiesdata.OptionalTimeSeries_get(self)

    def set(self, t):
        return _openstudioutilitiesdata.OptionalTimeSeries_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesdata.OptionalTimeSeries_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesdata.delete_OptionalTimeSeries

# Register OptionalTimeSeries in _openstudioutilitiesdata:
_openstudioutilitiesdata.OptionalTimeSeries_swigregister(OptionalTimeSeries)
class TimeSeriesPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.TimeSeriesPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.TimeSeriesPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.TimeSeriesPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.TimeSeriesPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.TimeSeriesPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.TimeSeriesPtrVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.TimeSeriesPtrVector_swiginit(self, _openstudioutilitiesdata.new_TimeSeriesPtrVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.TimeSeriesPtrVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_TimeSeriesPtrVector

# Register TimeSeriesPtrVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.TimeSeriesPtrVector_swigregister(TimeSeriesPtrVector)
class TimeSeriesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesdata.TimeSeriesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesdata.TimeSeriesVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesdata.TimeSeriesVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesdata.TimeSeriesVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesdata.TimeSeriesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesdata.TimeSeriesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesdata.TimeSeriesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesdata.TimeSeriesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesdata.TimeSeriesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesdata.TimeSeriesVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesdata.TimeSeriesVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesdata.TimeSeriesVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesdata.TimeSeriesVector_empty(self)

    def size(self):
        return _openstudioutilitiesdata.TimeSeriesVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesdata.TimeSeriesVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesdata.TimeSeriesVector_begin(self)

    def end(self):
        return _openstudioutilitiesdata.TimeSeriesVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesdata.TimeSeriesVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesdata.TimeSeriesVector_rend(self)

    def clear(self):
        return _openstudioutilitiesdata.TimeSeriesVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesdata.TimeSeriesVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesdata.TimeSeriesVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesdata.TimeSeriesVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesdata.TimeSeriesVector_swiginit(self, _openstudioutilitiesdata.new_TimeSeriesVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesdata.TimeSeriesVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesdata.TimeSeriesVector_front(self)

    def back(self):
        return _openstudioutilitiesdata.TimeSeriesVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesdata.TimeSeriesVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesdata.TimeSeriesVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesdata.TimeSeriesVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesdata.TimeSeriesVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesdata.TimeSeriesVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesdata.delete_TimeSeriesVector

# Register TimeSeriesVector in _openstudioutilitiesdata:
_openstudioutilitiesdata.TimeSeriesVector_swigregister(TimeSeriesVector)
class TimeSeriesFromTimeSeriesVectorFunctor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioutilitiesdata.TimeSeriesFromTimeSeriesVectorFunctor_swiginit(self, _openstudioutilitiesdata.new_TimeSeriesFromTimeSeriesVectorFunctor())
    __swig_destroy__ = _openstudioutilitiesdata.delete_TimeSeriesFromTimeSeriesVectorFunctor

# Register TimeSeriesFromTimeSeriesVectorFunctor in _openstudioutilitiesdata:
_openstudioutilitiesdata.TimeSeriesFromTimeSeriesVectorFunctor_swigregister(TimeSeriesFromTimeSeriesVectorFunctor)
class TimeSeries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesdata.TimeSeries_swiginit(self, _openstudioutilitiesdata.new_TimeSeries(*args))
    __swig_destroy__ = _openstudioutilitiesdata.delete_TimeSeries

    def intervalLength(self):
        return _openstudioutilitiesdata.TimeSeries_intervalLength(self)

    def dateTimes(self):
        return _openstudioutilitiesdata.TimeSeries_dateTimes(self)

    def firstReportDateTime(self):
        return _openstudioutilitiesdata.TimeSeries_firstReportDateTime(self)

    def startDateTime(self):
        return _openstudioutilitiesdata.TimeSeries_startDateTime(self)

    def daysFromFirstReport(self, *args):
        return _openstudioutilitiesdata.TimeSeries_daysFromFirstReport(self, *args)

    def secondsFromFirstReport(self, *args):
        return _openstudioutilitiesdata.TimeSeries_secondsFromFirstReport(self, *args)

    def units(self):
        return _openstudioutilitiesdata.TimeSeries_units(self)

    def value(self, *args):
        return _openstudioutilitiesdata.TimeSeries_value(self, *args)

    def values(self, *args):
        return _openstudioutilitiesdata.TimeSeries_values(self, *args)

    def outOfRangeValue(self):
        return _openstudioutilitiesdata.TimeSeries_outOfRangeValue(self)

    def setOutOfRangeValue(self, value):
        return _openstudioutilitiesdata.TimeSeries_setOutOfRangeValue(self, value)

    def __add__(self, other):
        return _openstudioutilitiesdata.TimeSeries___add__(self, other)

    def __sub__(self, other):
        return _openstudioutilitiesdata.TimeSeries___sub__(self, other)

    def __mul__(self, d):
        return _openstudioutilitiesdata.TimeSeries___mul__(self, d)

    def __truediv__(self, *args):
        return _openstudioutilitiesdata.TimeSeries___truediv__(self, *args)
    __div__ = __truediv__



    def integrate(self):
        return _openstudioutilitiesdata.TimeSeries_integrate(self)

    def averageValue(self):
        return _openstudioutilitiesdata.TimeSeries_averageValue(self)

# Register TimeSeries in _openstudioutilitiesdata:
_openstudioutilitiesdata.TimeSeries_swigregister(TimeSeries)

def __mul__(*args):
    return _openstudioutilitiesdata.__mul__(*args)

def sum(*args):
    return _openstudioutilitiesdata.sum(*args)

def sumTimeSeriesFunctor():
    return _openstudioutilitiesdata.sumTimeSeriesFunctor()

def evaluateTimeSeriesFromTimeSeriesVectorFunctor(functor, timeSeriesVector):
    return _openstudioutilitiesdata.evaluateTimeSeriesFromTimeSeriesVectorFunctor(functor, timeSeriesVector)

