# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelresources
else:
    import _openstudiomodelresources

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_SwigPyIterator

    def value(self):
        return _openstudiomodelresources.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudiomodelresources.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudiomodelresources.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudiomodelresources.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudiomodelresources.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudiomodelresources.SwigPyIterator_copy(self)

    def next(self):
        return _openstudiomodelresources.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudiomodelresources.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudiomodelresources.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudiomodelresources.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudiomodelresources.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudiomodelresources.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudiomodelresources.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudiomodelresources.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudiomodelresources.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudiomodelresources.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelresources:
_openstudiomodelresources.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudiomodelresources.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudioutilitiesxml

# Import common modules
import typing
import warnings

from .import openstudiomodelcore
from .import openstudiomodelsimulation

Model = openstudiomodelcore.Model

class ScheduleTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ScheduleTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ScheduleTypeVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ScheduleTypeVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ScheduleTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ScheduleTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ScheduleTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ScheduleTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ScheduleTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ScheduleTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ScheduleTypeVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ScheduleTypeVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ScheduleTypeVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ScheduleTypeVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ScheduleTypeVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ScheduleTypeVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ScheduleTypeVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ScheduleTypeVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ScheduleTypeVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ScheduleTypeVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ScheduleTypeVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ScheduleTypeVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ScheduleTypeVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ScheduleTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleTypeVector_swiginit(self, _openstudiomodelresources.new_ScheduleTypeVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ScheduleTypeVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ScheduleTypeVector_front(self)

    def back(self):
        return _openstudiomodelresources.ScheduleTypeVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ScheduleTypeVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ScheduleTypeVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ScheduleTypeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ScheduleTypeVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ScheduleTypeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleTypeVector

# Register ScheduleTypeVector in _openstudiomodelresources:
_openstudiomodelresources.ScheduleTypeVector_swigregister(ScheduleTypeVector)
class OptionalScheduleType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScheduleType_swiginit(self, _openstudiomodelresources.new_OptionalScheduleType(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalScheduleType_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalScheduleType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalScheduleType___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalScheduleType_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalScheduleType_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalScheduleType_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalScheduleType_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalScheduleType_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalScheduleType_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleType

# Register OptionalScheduleType in _openstudiomodelresources:
_openstudiomodelresources.OptionalScheduleType_swigregister(OptionalScheduleType)
class ScheduleIntervalVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ScheduleIntervalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ScheduleIntervalVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ScheduleIntervalVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ScheduleIntervalVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ScheduleIntervalVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ScheduleIntervalVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ScheduleIntervalVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ScheduleIntervalVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ScheduleIntervalVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ScheduleIntervalVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ScheduleIntervalVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ScheduleIntervalVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ScheduleIntervalVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ScheduleIntervalVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ScheduleIntervalVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ScheduleIntervalVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ScheduleIntervalVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ScheduleIntervalVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ScheduleIntervalVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ScheduleIntervalVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ScheduleIntervalVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ScheduleIntervalVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ScheduleIntervalVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleIntervalVector_swiginit(self, _openstudiomodelresources.new_ScheduleIntervalVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ScheduleIntervalVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ScheduleIntervalVector_front(self)

    def back(self):
        return _openstudiomodelresources.ScheduleIntervalVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ScheduleIntervalVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ScheduleIntervalVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ScheduleIntervalVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ScheduleIntervalVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ScheduleIntervalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleIntervalVector

# Register ScheduleIntervalVector in _openstudiomodelresources:
_openstudiomodelresources.ScheduleIntervalVector_swigregister(ScheduleIntervalVector)
class OptionalScheduleInterval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScheduleInterval_swiginit(self, _openstudiomodelresources.new_OptionalScheduleInterval(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalScheduleInterval_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalScheduleInterval___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalScheduleInterval___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalScheduleInterval_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalScheduleInterval_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalScheduleInterval_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalScheduleInterval_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalScheduleInterval_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalScheduleInterval_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleInterval

# Register OptionalScheduleInterval in _openstudiomodelresources:
_openstudiomodelresources.OptionalScheduleInterval_swigregister(OptionalScheduleInterval)
class ScheduleFixedIntervalVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ScheduleFixedIntervalVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ScheduleFixedIntervalVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ScheduleFixedIntervalVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ScheduleFixedIntervalVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ScheduleFixedIntervalVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ScheduleFixedIntervalVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleFixedIntervalVector_swiginit(self, _openstudiomodelresources.new_ScheduleFixedIntervalVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_front(self)

    def back(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ScheduleFixedIntervalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleFixedIntervalVector

# Register ScheduleFixedIntervalVector in _openstudiomodelresources:
_openstudiomodelresources.ScheduleFixedIntervalVector_swigregister(ScheduleFixedIntervalVector)
class OptionalScheduleFixedInterval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScheduleFixedInterval_swiginit(self, _openstudiomodelresources.new_OptionalScheduleFixedInterval(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalScheduleFixedInterval_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalScheduleFixedInterval___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalScheduleFixedInterval___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalScheduleFixedInterval_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalScheduleFixedInterval_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalScheduleFixedInterval_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalScheduleFixedInterval_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalScheduleFixedInterval_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalScheduleFixedInterval_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleFixedInterval

# Register OptionalScheduleFixedInterval in _openstudiomodelresources:
_openstudiomodelresources.OptionalScheduleFixedInterval_swigregister(OptionalScheduleFixedInterval)
class ExternalFileVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ExternalFileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ExternalFileVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ExternalFileVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ExternalFileVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ExternalFileVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ExternalFileVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ExternalFileVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ExternalFileVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ExternalFileVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ExternalFileVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ExternalFileVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ExternalFileVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ExternalFileVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ExternalFileVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ExternalFileVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ExternalFileVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ExternalFileVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ExternalFileVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ExternalFileVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ExternalFileVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ExternalFileVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ExternalFileVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ExternalFileVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ExternalFileVector_swiginit(self, _openstudiomodelresources.new_ExternalFileVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ExternalFileVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ExternalFileVector_front(self)

    def back(self):
        return _openstudiomodelresources.ExternalFileVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ExternalFileVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ExternalFileVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ExternalFileVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ExternalFileVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ExternalFileVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExternalFileVector

# Register ExternalFileVector in _openstudiomodelresources:
_openstudiomodelresources.ExternalFileVector_swigregister(ExternalFileVector)
class OptionalExternalFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalExternalFile_swiginit(self, _openstudiomodelresources.new_OptionalExternalFile(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalExternalFile_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalExternalFile___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalExternalFile___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalExternalFile_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalExternalFile_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalExternalFile_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalExternalFile_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalExternalFile_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalExternalFile_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExternalFile

# Register OptionalExternalFile in _openstudiomodelresources:
_openstudiomodelresources.OptionalExternalFile_swigregister(OptionalExternalFile)
class ScheduleFileVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ScheduleFileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ScheduleFileVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ScheduleFileVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ScheduleFileVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ScheduleFileVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ScheduleFileVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ScheduleFileVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ScheduleFileVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ScheduleFileVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ScheduleFileVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ScheduleFileVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ScheduleFileVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ScheduleFileVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ScheduleFileVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ScheduleFileVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ScheduleFileVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ScheduleFileVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ScheduleFileVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ScheduleFileVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ScheduleFileVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ScheduleFileVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ScheduleFileVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ScheduleFileVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleFileVector_swiginit(self, _openstudiomodelresources.new_ScheduleFileVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ScheduleFileVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ScheduleFileVector_front(self)

    def back(self):
        return _openstudiomodelresources.ScheduleFileVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ScheduleFileVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ScheduleFileVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ScheduleFileVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ScheduleFileVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ScheduleFileVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleFileVector

# Register ScheduleFileVector in _openstudiomodelresources:
_openstudiomodelresources.ScheduleFileVector_swigregister(ScheduleFileVector)
class OptionalScheduleFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScheduleFile_swiginit(self, _openstudiomodelresources.new_OptionalScheduleFile(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalScheduleFile_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalScheduleFile___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalScheduleFile___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalScheduleFile_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalScheduleFile_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalScheduleFile_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalScheduleFile_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalScheduleFile_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalScheduleFile_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleFile

# Register OptionalScheduleFile in _openstudiomodelresources:
_openstudiomodelresources.OptionalScheduleFile_swigregister(OptionalScheduleFile)
class PythonPluginInstanceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.PythonPluginInstanceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.PythonPluginInstanceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.PythonPluginInstanceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.PythonPluginInstanceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.PythonPluginInstanceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.PythonPluginInstanceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.PythonPluginInstanceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.PythonPluginInstanceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.PythonPluginInstanceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.PythonPluginInstanceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.PythonPluginInstanceVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.PythonPluginInstanceVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.PythonPluginInstanceVector_empty(self)

    def size(self):
        return _openstudiomodelresources.PythonPluginInstanceVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.PythonPluginInstanceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.PythonPluginInstanceVector_begin(self)

    def end(self):
        return _openstudiomodelresources.PythonPluginInstanceVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.PythonPluginInstanceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.PythonPluginInstanceVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.PythonPluginInstanceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.PythonPluginInstanceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.PythonPluginInstanceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.PythonPluginInstanceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.PythonPluginInstanceVector_swiginit(self, _openstudiomodelresources.new_PythonPluginInstanceVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.PythonPluginInstanceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.PythonPluginInstanceVector_front(self)

    def back(self):
        return _openstudiomodelresources.PythonPluginInstanceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.PythonPluginInstanceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.PythonPluginInstanceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.PythonPluginInstanceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.PythonPluginInstanceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.PythonPluginInstanceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_PythonPluginInstanceVector

# Register PythonPluginInstanceVector in _openstudiomodelresources:
_openstudiomodelresources.PythonPluginInstanceVector_swigregister(PythonPluginInstanceVector)
class OptionalPythonPluginInstance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalPythonPluginInstance_swiginit(self, _openstudiomodelresources.new_OptionalPythonPluginInstance(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalPythonPluginInstance_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalPythonPluginInstance___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalPythonPluginInstance___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalPythonPluginInstance_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalPythonPluginInstance_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalPythonPluginInstance_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalPythonPluginInstance_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalPythonPluginInstance_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalPythonPluginInstance_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalPythonPluginInstance

# Register OptionalPythonPluginInstance in _openstudiomodelresources:
_openstudiomodelresources.OptionalPythonPluginInstance_swigregister(OptionalPythonPluginInstance)
class PythonPluginVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.PythonPluginVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.PythonPluginVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.PythonPluginVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.PythonPluginVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.PythonPluginVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.PythonPluginVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.PythonPluginVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.PythonPluginVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.PythonPluginVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.PythonPluginVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.PythonPluginVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.PythonPluginVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.PythonPluginVariableVector_empty(self)

    def size(self):
        return _openstudiomodelresources.PythonPluginVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.PythonPluginVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.PythonPluginVariableVector_begin(self)

    def end(self):
        return _openstudiomodelresources.PythonPluginVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.PythonPluginVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.PythonPluginVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.PythonPluginVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.PythonPluginVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.PythonPluginVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.PythonPluginVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.PythonPluginVariableVector_swiginit(self, _openstudiomodelresources.new_PythonPluginVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.PythonPluginVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.PythonPluginVariableVector_front(self)

    def back(self):
        return _openstudiomodelresources.PythonPluginVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.PythonPluginVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.PythonPluginVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.PythonPluginVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.PythonPluginVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.PythonPluginVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_PythonPluginVariableVector

# Register PythonPluginVariableVector in _openstudiomodelresources:
_openstudiomodelresources.PythonPluginVariableVector_swigregister(PythonPluginVariableVector)
class OptionalPythonPluginVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalPythonPluginVariable_swiginit(self, _openstudiomodelresources.new_OptionalPythonPluginVariable(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalPythonPluginVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalPythonPluginVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalPythonPluginVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalPythonPluginVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalPythonPluginVariable_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalPythonPluginVariable_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalPythonPluginVariable_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalPythonPluginVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalPythonPluginVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalPythonPluginVariable

# Register OptionalPythonPluginVariable in _openstudiomodelresources:
_openstudiomodelresources.OptionalPythonPluginVariable_swigregister(OptionalPythonPluginVariable)
class PythonPluginTrendVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.PythonPluginTrendVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.PythonPluginTrendVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.PythonPluginTrendVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.PythonPluginTrendVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.PythonPluginTrendVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.PythonPluginTrendVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_empty(self)

    def size(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_begin(self)

    def end(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.PythonPluginTrendVariableVector_swiginit(self, _openstudiomodelresources.new_PythonPluginTrendVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_front(self)

    def back(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.PythonPluginTrendVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_PythonPluginTrendVariableVector

# Register PythonPluginTrendVariableVector in _openstudiomodelresources:
_openstudiomodelresources.PythonPluginTrendVariableVector_swigregister(PythonPluginTrendVariableVector)
class OptionalPythonPluginTrendVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalPythonPluginTrendVariable_swiginit(self, _openstudiomodelresources.new_OptionalPythonPluginTrendVariable(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalPythonPluginTrendVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalPythonPluginTrendVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalPythonPluginTrendVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalPythonPluginTrendVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalPythonPluginTrendVariable_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalPythonPluginTrendVariable_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalPythonPluginTrendVariable_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalPythonPluginTrendVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalPythonPluginTrendVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalPythonPluginTrendVariable

# Register OptionalPythonPluginTrendVariable in _openstudiomodelresources:
_openstudiomodelresources.OptionalPythonPluginTrendVariable_swigregister(OptionalPythonPluginTrendVariable)
class PythonPluginOutputVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.PythonPluginOutputVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.PythonPluginOutputVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.PythonPluginOutputVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.PythonPluginOutputVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.PythonPluginOutputVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.PythonPluginOutputVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_empty(self)

    def size(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_begin(self)

    def end(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.PythonPluginOutputVariableVector_swiginit(self, _openstudiomodelresources.new_PythonPluginOutputVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_front(self)

    def back(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.PythonPluginOutputVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_PythonPluginOutputVariableVector

# Register PythonPluginOutputVariableVector in _openstudiomodelresources:
_openstudiomodelresources.PythonPluginOutputVariableVector_swigregister(PythonPluginOutputVariableVector)
class OptionalPythonPluginOutputVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalPythonPluginOutputVariable_swiginit(self, _openstudiomodelresources.new_OptionalPythonPluginOutputVariable(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalPythonPluginOutputVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalPythonPluginOutputVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalPythonPluginOutputVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalPythonPluginOutputVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalPythonPluginOutputVariable_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalPythonPluginOutputVariable_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalPythonPluginOutputVariable_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalPythonPluginOutputVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalPythonPluginOutputVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalPythonPluginOutputVariable

# Register OptionalPythonPluginOutputVariable in _openstudiomodelresources:
_openstudiomodelresources.OptionalPythonPluginOutputVariable_swigregister(OptionalPythonPluginOutputVariable)
class ScheduleVariableIntervalVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ScheduleVariableIntervalVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ScheduleVariableIntervalVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ScheduleVariableIntervalVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ScheduleVariableIntervalVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ScheduleVariableIntervalVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ScheduleVariableIntervalVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleVariableIntervalVector_swiginit(self, _openstudiomodelresources.new_ScheduleVariableIntervalVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_front(self)

    def back(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ScheduleVariableIntervalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleVariableIntervalVector

# Register ScheduleVariableIntervalVector in _openstudiomodelresources:
_openstudiomodelresources.ScheduleVariableIntervalVector_swigregister(ScheduleVariableIntervalVector)
class OptionalScheduleVariableInterval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScheduleVariableInterval_swiginit(self, _openstudiomodelresources.new_OptionalScheduleVariableInterval(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalScheduleVariableInterval_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalScheduleVariableInterval___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalScheduleVariableInterval___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalScheduleVariableInterval_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalScheduleVariableInterval_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalScheduleVariableInterval_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalScheduleVariableInterval_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalScheduleVariableInterval_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalScheduleVariableInterval_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleVariableInterval

# Register OptionalScheduleVariableInterval in _openstudiomodelresources:
_openstudiomodelresources.OptionalScheduleVariableInterval_swigregister(OptionalScheduleVariableInterval)
class ScheduleCompactVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ScheduleCompactVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ScheduleCompactVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ScheduleCompactVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ScheduleCompactVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ScheduleCompactVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ScheduleCompactVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ScheduleCompactVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ScheduleCompactVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ScheduleCompactVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ScheduleCompactVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ScheduleCompactVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ScheduleCompactVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ScheduleCompactVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ScheduleCompactVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ScheduleCompactVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ScheduleCompactVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ScheduleCompactVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ScheduleCompactVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ScheduleCompactVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ScheduleCompactVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ScheduleCompactVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ScheduleCompactVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ScheduleCompactVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleCompactVector_swiginit(self, _openstudiomodelresources.new_ScheduleCompactVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ScheduleCompactVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ScheduleCompactVector_front(self)

    def back(self):
        return _openstudiomodelresources.ScheduleCompactVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ScheduleCompactVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ScheduleCompactVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ScheduleCompactVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ScheduleCompactVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ScheduleCompactVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleCompactVector

# Register ScheduleCompactVector in _openstudiomodelresources:
_openstudiomodelresources.ScheduleCompactVector_swigregister(ScheduleCompactVector)
class OptionalScheduleCompact(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScheduleCompact_swiginit(self, _openstudiomodelresources.new_OptionalScheduleCompact(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalScheduleCompact_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalScheduleCompact___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalScheduleCompact___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalScheduleCompact_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalScheduleCompact_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalScheduleCompact_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalScheduleCompact_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalScheduleCompact_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalScheduleCompact_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleCompact

# Register OptionalScheduleCompact in _openstudiomodelresources:
_openstudiomodelresources.OptionalScheduleCompact_swigregister(OptionalScheduleCompact)
class ScheduleConstantVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ScheduleConstantVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ScheduleConstantVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ScheduleConstantVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ScheduleConstantVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ScheduleConstantVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ScheduleConstantVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ScheduleConstantVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ScheduleConstantVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ScheduleConstantVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ScheduleConstantVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ScheduleConstantVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ScheduleConstantVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ScheduleConstantVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ScheduleConstantVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ScheduleConstantVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ScheduleConstantVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ScheduleConstantVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ScheduleConstantVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ScheduleConstantVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ScheduleConstantVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ScheduleConstantVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ScheduleConstantVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ScheduleConstantVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleConstantVector_swiginit(self, _openstudiomodelresources.new_ScheduleConstantVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ScheduleConstantVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ScheduleConstantVector_front(self)

    def back(self):
        return _openstudiomodelresources.ScheduleConstantVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ScheduleConstantVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ScheduleConstantVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ScheduleConstantVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ScheduleConstantVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ScheduleConstantVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleConstantVector

# Register ScheduleConstantVector in _openstudiomodelresources:
_openstudiomodelresources.ScheduleConstantVector_swigregister(ScheduleConstantVector)
class OptionalScheduleConstant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScheduleConstant_swiginit(self, _openstudiomodelresources.new_OptionalScheduleConstant(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalScheduleConstant_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalScheduleConstant___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalScheduleConstant___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalScheduleConstant_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalScheduleConstant_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalScheduleConstant_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalScheduleConstant_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalScheduleConstant_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalScheduleConstant_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScheduleConstant

# Register OptionalScheduleConstant in _openstudiomodelresources:
_openstudiomodelresources.OptionalScheduleConstant_swigregister(OptionalScheduleConstant)
class DefaultScheduleSetVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.DefaultScheduleSetVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.DefaultScheduleSetVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.DefaultScheduleSetVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.DefaultScheduleSetVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.DefaultScheduleSetVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.DefaultScheduleSetVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.DefaultScheduleSetVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.DefaultScheduleSetVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.DefaultScheduleSetVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.DefaultScheduleSetVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.DefaultScheduleSetVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.DefaultScheduleSetVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.DefaultScheduleSetVector_empty(self)

    def size(self):
        return _openstudiomodelresources.DefaultScheduleSetVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.DefaultScheduleSetVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.DefaultScheduleSetVector_begin(self)

    def end(self):
        return _openstudiomodelresources.DefaultScheduleSetVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.DefaultScheduleSetVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.DefaultScheduleSetVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.DefaultScheduleSetVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.DefaultScheduleSetVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.DefaultScheduleSetVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.DefaultScheduleSetVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.DefaultScheduleSetVector_swiginit(self, _openstudiomodelresources.new_DefaultScheduleSetVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.DefaultScheduleSetVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.DefaultScheduleSetVector_front(self)

    def back(self):
        return _openstudiomodelresources.DefaultScheduleSetVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.DefaultScheduleSetVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.DefaultScheduleSetVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.DefaultScheduleSetVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.DefaultScheduleSetVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.DefaultScheduleSetVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultScheduleSetVector

# Register DefaultScheduleSetVector in _openstudiomodelresources:
_openstudiomodelresources.DefaultScheduleSetVector_swigregister(DefaultScheduleSetVector)
class OptionalDefaultScheduleSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalDefaultScheduleSet_swiginit(self, _openstudiomodelresources.new_OptionalDefaultScheduleSet(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalDefaultScheduleSet_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalDefaultScheduleSet___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalDefaultScheduleSet___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalDefaultScheduleSet_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalDefaultScheduleSet_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalDefaultScheduleSet_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalDefaultScheduleSet_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalDefaultScheduleSet_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalDefaultScheduleSet_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDefaultScheduleSet

# Register OptionalDefaultScheduleSet in _openstudiomodelresources:
_openstudiomodelresources.OptionalDefaultScheduleSet_swigregister(OptionalDefaultScheduleSet)
class SpectralDataFieldVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.SpectralDataFieldVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.SpectralDataFieldVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.SpectralDataFieldVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.SpectralDataFieldVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.SpectralDataFieldVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.SpectralDataFieldVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.SpectralDataFieldVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.SpectralDataFieldVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.SpectralDataFieldVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.SpectralDataFieldVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.SpectralDataFieldVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.SpectralDataFieldVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.SpectralDataFieldVector_empty(self)

    def size(self):
        return _openstudiomodelresources.SpectralDataFieldVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.SpectralDataFieldVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.SpectralDataFieldVector_begin(self)

    def end(self):
        return _openstudiomodelresources.SpectralDataFieldVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.SpectralDataFieldVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.SpectralDataFieldVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.SpectralDataFieldVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.SpectralDataFieldVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.SpectralDataFieldVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.SpectralDataFieldVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.SpectralDataFieldVector_swiginit(self, _openstudiomodelresources.new_SpectralDataFieldVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.SpectralDataFieldVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.SpectralDataFieldVector_front(self)

    def back(self):
        return _openstudiomodelresources.SpectralDataFieldVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.SpectralDataFieldVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.SpectralDataFieldVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.SpectralDataFieldVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.SpectralDataFieldVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.SpectralDataFieldVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_SpectralDataFieldVector

# Register SpectralDataFieldVector in _openstudiomodelresources:
_openstudiomodelresources.SpectralDataFieldVector_swigregister(SpectralDataFieldVector)
class OptionalSpectralDataField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalSpectralDataField_swiginit(self, _openstudiomodelresources.new_OptionalSpectralDataField(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalSpectralDataField_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalSpectralDataField___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalSpectralDataField___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalSpectralDataField_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalSpectralDataField_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalSpectralDataField_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalSpectralDataField_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalSpectralDataField_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalSpectralDataField_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalSpectralDataField

# Register OptionalSpectralDataField in _openstudiomodelresources:
_openstudiomodelresources.OptionalSpectralDataField_swigregister(OptionalSpectralDataField)
class MaterialPropertyGlazingSpectralDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_empty(self)

    def size(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_begin(self)

    def end(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_swiginit(self, _openstudiomodelresources.new_MaterialPropertyGlazingSpectralDataVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_front(self)

    def back(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyGlazingSpectralDataVector

# Register MaterialPropertyGlazingSpectralDataVector in _openstudiomodelresources:
_openstudiomodelresources.MaterialPropertyGlazingSpectralDataVector_swigregister(MaterialPropertyGlazingSpectralDataVector)
class OptionalMaterialPropertyGlazingSpectralData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_swiginit(self, _openstudiomodelresources.new_OptionalMaterialPropertyGlazingSpectralData(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalMaterialPropertyGlazingSpectralData

# Register OptionalMaterialPropertyGlazingSpectralData in _openstudiomodelresources:
_openstudiomodelresources.OptionalMaterialPropertyGlazingSpectralData_swigregister(OptionalMaterialPropertyGlazingSpectralData)
class MaterialPropertyMoisturePenetrationDepthSettingsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_empty(self)

    def size(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_begin(self)

    def end(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_swiginit(self, _openstudiomodelresources.new_MaterialPropertyMoisturePenetrationDepthSettingsVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_front(self)

    def back(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyMoisturePenetrationDepthSettingsVector

# Register MaterialPropertyMoisturePenetrationDepthSettingsVector in _openstudiomodelresources:
_openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettingsVector_swigregister(MaterialPropertyMoisturePenetrationDepthSettingsVector)
class OptionalMaterialPropertyMoisturePenetrationDepthSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_swiginit(self, _openstudiomodelresources.new_OptionalMaterialPropertyMoisturePenetrationDepthSettings(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalMaterialPropertyMoisturePenetrationDepthSettings

# Register OptionalMaterialPropertyMoisturePenetrationDepthSettings in _openstudiomodelresources:
_openstudiomodelresources.OptionalMaterialPropertyMoisturePenetrationDepthSettings_swigregister(OptionalMaterialPropertyMoisturePenetrationDepthSettings)
class TemperatureEnthalpyVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.TemperatureEnthalpyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.TemperatureEnthalpyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.TemperatureEnthalpyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.TemperatureEnthalpyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.TemperatureEnthalpyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.TemperatureEnthalpyVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.TemperatureEnthalpyVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector_empty(self)

    def size(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.TemperatureEnthalpyVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector_begin(self)

    def end(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.TemperatureEnthalpyVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.TemperatureEnthalpyVector_swiginit(self, _openstudiomodelresources.new_TemperatureEnthalpyVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.TemperatureEnthalpyVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector_front(self)

    def back(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.TemperatureEnthalpyVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.TemperatureEnthalpyVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.TemperatureEnthalpyVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.TemperatureEnthalpyVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.TemperatureEnthalpyVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_TemperatureEnthalpyVector

# Register TemperatureEnthalpyVector in _openstudiomodelresources:
_openstudiomodelresources.TemperatureEnthalpyVector_swigregister(TemperatureEnthalpyVector)
class OptionalTemperatureEnthalpy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalTemperatureEnthalpy_swiginit(self, _openstudiomodelresources.new_OptionalTemperatureEnthalpy(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalTemperatureEnthalpy_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalTemperatureEnthalpy___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalTemperatureEnthalpy___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalTemperatureEnthalpy_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalTemperatureEnthalpy_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalTemperatureEnthalpy_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalTemperatureEnthalpy_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalTemperatureEnthalpy_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalTemperatureEnthalpy_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalTemperatureEnthalpy

# Register OptionalTemperatureEnthalpy in _openstudiomodelresources:
_openstudiomodelresources.OptionalTemperatureEnthalpy_swigregister(OptionalTemperatureEnthalpy)
class MaterialPropertyPhaseChangeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_empty(self)

    def size(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_begin(self)

    def end(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.MaterialPropertyPhaseChangeVector_swiginit(self, _openstudiomodelresources.new_MaterialPropertyPhaseChangeVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_front(self)

    def back(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyPhaseChangeVector

# Register MaterialPropertyPhaseChangeVector in _openstudiomodelresources:
_openstudiomodelresources.MaterialPropertyPhaseChangeVector_swigregister(MaterialPropertyPhaseChangeVector)
class OptionalMaterialPropertyPhaseChange(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalMaterialPropertyPhaseChange_swiginit(self, _openstudiomodelresources.new_OptionalMaterialPropertyPhaseChange(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChange_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChange___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChange___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChange_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChange_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChange_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChange_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChange_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChange_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalMaterialPropertyPhaseChange

# Register OptionalMaterialPropertyPhaseChange in _openstudiomodelresources:
_openstudiomodelresources.OptionalMaterialPropertyPhaseChange_swigregister(OptionalMaterialPropertyPhaseChange)
class MaterialPropertyPhaseChangeHysteresisVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_empty(self)

    def size(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_begin(self)

    def end(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_swiginit(self, _openstudiomodelresources.new_MaterialPropertyPhaseChangeHysteresisVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_front(self)

    def back(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyPhaseChangeHysteresisVector

# Register MaterialPropertyPhaseChangeHysteresisVector in _openstudiomodelresources:
_openstudiomodelresources.MaterialPropertyPhaseChangeHysteresisVector_swigregister(MaterialPropertyPhaseChangeHysteresisVector)
class OptionalMaterialPropertyPhaseChangeHysteresis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalMaterialPropertyPhaseChangeHysteresis_swiginit(self, _openstudiomodelresources.new_OptionalMaterialPropertyPhaseChangeHysteresis(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChangeHysteresis_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChangeHysteresis___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChangeHysteresis___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChangeHysteresis_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChangeHysteresis_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChangeHysteresis_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChangeHysteresis_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChangeHysteresis_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalMaterialPropertyPhaseChangeHysteresis_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalMaterialPropertyPhaseChangeHysteresis

# Register OptionalMaterialPropertyPhaseChangeHysteresis in _openstudiomodelresources:
_openstudiomodelresources.OptionalMaterialPropertyPhaseChangeHysteresis_swigregister(OptionalMaterialPropertyPhaseChangeHysteresis)
class MaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.MaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.MaterialVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.MaterialVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.MaterialVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.MaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.MaterialVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.MaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.MaterialVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.MaterialVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.MaterialVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.MaterialVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.MaterialVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.MaterialVector_empty(self)

    def size(self):
        return _openstudiomodelresources.MaterialVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.MaterialVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.MaterialVector_begin(self)

    def end(self):
        return _openstudiomodelresources.MaterialVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.MaterialVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.MaterialVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.MaterialVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.MaterialVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.MaterialVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.MaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.MaterialVector_swiginit(self, _openstudiomodelresources.new_MaterialVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.MaterialVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.MaterialVector_front(self)

    def back(self):
        return _openstudiomodelresources.MaterialVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.MaterialVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.MaterialVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.MaterialVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.MaterialVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.MaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialVector

# Register MaterialVector in _openstudiomodelresources:
_openstudiomodelresources.MaterialVector_swigregister(MaterialVector)
class OptionalMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalMaterial_swiginit(self, _openstudiomodelresources.new_OptionalMaterial(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalMaterial_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalMaterial___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalMaterial___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalMaterial_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalMaterial_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalMaterial_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalMaterial_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalMaterial_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalMaterial_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalMaterial

# Register OptionalMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalMaterial_swigregister(OptionalMaterial)
class FenestrationMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.FenestrationMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.FenestrationMaterialVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.FenestrationMaterialVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.FenestrationMaterialVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.FenestrationMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.FenestrationMaterialVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.FenestrationMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.FenestrationMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.FenestrationMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.FenestrationMaterialVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.FenestrationMaterialVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.FenestrationMaterialVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.FenestrationMaterialVector_empty(self)

    def size(self):
        return _openstudiomodelresources.FenestrationMaterialVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.FenestrationMaterialVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.FenestrationMaterialVector_begin(self)

    def end(self):
        return _openstudiomodelresources.FenestrationMaterialVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.FenestrationMaterialVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.FenestrationMaterialVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.FenestrationMaterialVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.FenestrationMaterialVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.FenestrationMaterialVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.FenestrationMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.FenestrationMaterialVector_swiginit(self, _openstudiomodelresources.new_FenestrationMaterialVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.FenestrationMaterialVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.FenestrationMaterialVector_front(self)

    def back(self):
        return _openstudiomodelresources.FenestrationMaterialVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.FenestrationMaterialVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.FenestrationMaterialVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.FenestrationMaterialVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.FenestrationMaterialVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.FenestrationMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_FenestrationMaterialVector

# Register FenestrationMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.FenestrationMaterialVector_swigregister(FenestrationMaterialVector)
class OptionalFenestrationMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalFenestrationMaterial_swiginit(self, _openstudiomodelresources.new_OptionalFenestrationMaterial(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalFenestrationMaterial_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalFenestrationMaterial___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalFenestrationMaterial___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalFenestrationMaterial_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalFenestrationMaterial_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalFenestrationMaterial_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalFenestrationMaterial_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalFenestrationMaterial_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalFenestrationMaterial_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalFenestrationMaterial

# Register OptionalFenestrationMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalFenestrationMaterial_swigregister(OptionalFenestrationMaterial)
class GasLayerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.GasLayerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.GasLayerVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.GasLayerVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.GasLayerVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.GasLayerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.GasLayerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.GasLayerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.GasLayerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.GasLayerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.GasLayerVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.GasLayerVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.GasLayerVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.GasLayerVector_empty(self)

    def size(self):
        return _openstudiomodelresources.GasLayerVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.GasLayerVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.GasLayerVector_begin(self)

    def end(self):
        return _openstudiomodelresources.GasLayerVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.GasLayerVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.GasLayerVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.GasLayerVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.GasLayerVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.GasLayerVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.GasLayerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.GasLayerVector_swiginit(self, _openstudiomodelresources.new_GasLayerVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.GasLayerVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.GasLayerVector_front(self)

    def back(self):
        return _openstudiomodelresources.GasLayerVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.GasLayerVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.GasLayerVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.GasLayerVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.GasLayerVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.GasLayerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GasLayerVector

# Register GasLayerVector in _openstudiomodelresources:
_openstudiomodelresources.GasLayerVector_swigregister(GasLayerVector)
class OptionalGasLayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalGasLayer_swiginit(self, _openstudiomodelresources.new_OptionalGasLayer(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalGasLayer_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalGasLayer___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalGasLayer___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalGasLayer_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalGasLayer_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalGasLayer_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalGasLayer_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalGasLayer_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalGasLayer_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGasLayer

# Register OptionalGasLayer in _openstudiomodelresources:
_openstudiomodelresources.OptionalGasLayer_swigregister(OptionalGasLayer)
class GlazingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.GlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.GlazingVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.GlazingVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.GlazingVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.GlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.GlazingVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.GlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.GlazingVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.GlazingVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.GlazingVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.GlazingVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.GlazingVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.GlazingVector_empty(self)

    def size(self):
        return _openstudiomodelresources.GlazingVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.GlazingVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.GlazingVector_begin(self)

    def end(self):
        return _openstudiomodelresources.GlazingVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.GlazingVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.GlazingVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.GlazingVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.GlazingVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.GlazingVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.GlazingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.GlazingVector_swiginit(self, _openstudiomodelresources.new_GlazingVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.GlazingVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.GlazingVector_front(self)

    def back(self):
        return _openstudiomodelresources.GlazingVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.GlazingVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.GlazingVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.GlazingVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.GlazingVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.GlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GlazingVector

# Register GlazingVector in _openstudiomodelresources:
_openstudiomodelresources.GlazingVector_swigregister(GlazingVector)
class OptionalGlazing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalGlazing_swiginit(self, _openstudiomodelresources.new_OptionalGlazing(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalGlazing_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalGlazing___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalGlazing___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalGlazing_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalGlazing_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalGlazing_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalGlazing_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalGlazing_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalGlazing_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGlazing

# Register OptionalGlazing in _openstudiomodelresources:
_openstudiomodelresources.OptionalGlazing_swigregister(OptionalGlazing)
class ShadingMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ShadingMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ShadingMaterialVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ShadingMaterialVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ShadingMaterialVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ShadingMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ShadingMaterialVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ShadingMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ShadingMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ShadingMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ShadingMaterialVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ShadingMaterialVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ShadingMaterialVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ShadingMaterialVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ShadingMaterialVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ShadingMaterialVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ShadingMaterialVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ShadingMaterialVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ShadingMaterialVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ShadingMaterialVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ShadingMaterialVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ShadingMaterialVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ShadingMaterialVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ShadingMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ShadingMaterialVector_swiginit(self, _openstudiomodelresources.new_ShadingMaterialVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ShadingMaterialVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ShadingMaterialVector_front(self)

    def back(self):
        return _openstudiomodelresources.ShadingMaterialVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ShadingMaterialVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ShadingMaterialVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ShadingMaterialVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ShadingMaterialVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ShadingMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ShadingMaterialVector

# Register ShadingMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.ShadingMaterialVector_swigregister(ShadingMaterialVector)
class OptionalShadingMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalShadingMaterial_swiginit(self, _openstudiomodelresources.new_OptionalShadingMaterial(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalShadingMaterial_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalShadingMaterial___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalShadingMaterial___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalShadingMaterial_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalShadingMaterial_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalShadingMaterial_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalShadingMaterial_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalShadingMaterial_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalShadingMaterial_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalShadingMaterial

# Register OptionalShadingMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalShadingMaterial_swigregister(OptionalShadingMaterial)
class ModelPartitionMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ModelPartitionMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ModelPartitionMaterialVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ModelPartitionMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ModelPartitionMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ModelPartitionMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ModelPartitionMaterialVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ModelPartitionMaterialVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ModelPartitionMaterialVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ModelPartitionMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ModelPartitionMaterialVector_swiginit(self, _openstudiomodelresources.new_ModelPartitionMaterialVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ModelPartitionMaterialVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector_front(self)

    def back(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ModelPartitionMaterialVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ModelPartitionMaterialVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ModelPartitionMaterialVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ModelPartitionMaterialVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ModelPartitionMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ModelPartitionMaterialVector

# Register ModelPartitionMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.ModelPartitionMaterialVector_swigregister(ModelPartitionMaterialVector)
class OptionalModelPartitionMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalModelPartitionMaterial_swiginit(self, _openstudiomodelresources.new_OptionalModelPartitionMaterial(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalModelPartitionMaterial_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalModelPartitionMaterial___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalModelPartitionMaterial___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalModelPartitionMaterial_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalModelPartitionMaterial_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalModelPartitionMaterial_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalModelPartitionMaterial_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalModelPartitionMaterial_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalModelPartitionMaterial_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalModelPartitionMaterial

# Register OptionalModelPartitionMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalModelPartitionMaterial_swigregister(OptionalModelPartitionMaterial)
class OpaqueMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.OpaqueMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.OpaqueMaterialVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.OpaqueMaterialVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.OpaqueMaterialVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.OpaqueMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.OpaqueMaterialVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.OpaqueMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.OpaqueMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.OpaqueMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.OpaqueMaterialVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.OpaqueMaterialVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.OpaqueMaterialVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.OpaqueMaterialVector_empty(self)

    def size(self):
        return _openstudiomodelresources.OpaqueMaterialVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.OpaqueMaterialVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.OpaqueMaterialVector_begin(self)

    def end(self):
        return _openstudiomodelresources.OpaqueMaterialVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.OpaqueMaterialVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.OpaqueMaterialVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.OpaqueMaterialVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.OpaqueMaterialVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.OpaqueMaterialVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.OpaqueMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.OpaqueMaterialVector_swiginit(self, _openstudiomodelresources.new_OpaqueMaterialVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.OpaqueMaterialVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.OpaqueMaterialVector_front(self)

    def back(self):
        return _openstudiomodelresources.OpaqueMaterialVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.OpaqueMaterialVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.OpaqueMaterialVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.OpaqueMaterialVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.OpaqueMaterialVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.OpaqueMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_OpaqueMaterialVector

# Register OpaqueMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.OpaqueMaterialVector_swigregister(OpaqueMaterialVector)
class OptionalOpaqueMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalOpaqueMaterial_swiginit(self, _openstudiomodelresources.new_OptionalOpaqueMaterial(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalOpaqueMaterial_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalOpaqueMaterial___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalOpaqueMaterial___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalOpaqueMaterial_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalOpaqueMaterial_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalOpaqueMaterial_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalOpaqueMaterial_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalOpaqueMaterial_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalOpaqueMaterial_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalOpaqueMaterial

# Register OptionalOpaqueMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalOpaqueMaterial_swigregister(OptionalOpaqueMaterial)
class BlindVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.BlindVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.BlindVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.BlindVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.BlindVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.BlindVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.BlindVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.BlindVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.BlindVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.BlindVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.BlindVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.BlindVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.BlindVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.BlindVector_empty(self)

    def size(self):
        return _openstudiomodelresources.BlindVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.BlindVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.BlindVector_begin(self)

    def end(self):
        return _openstudiomodelresources.BlindVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.BlindVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.BlindVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.BlindVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.BlindVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.BlindVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.BlindVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.BlindVector_swiginit(self, _openstudiomodelresources.new_BlindVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.BlindVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.BlindVector_front(self)

    def back(self):
        return _openstudiomodelresources.BlindVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.BlindVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.BlindVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.BlindVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.BlindVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.BlindVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_BlindVector

# Register BlindVector in _openstudiomodelresources:
_openstudiomodelresources.BlindVector_swigregister(BlindVector)
class OptionalBlind(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalBlind_swiginit(self, _openstudiomodelresources.new_OptionalBlind(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalBlind_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalBlind___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalBlind___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalBlind_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalBlind_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalBlind_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalBlind_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalBlind_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalBlind_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalBlind

# Register OptionalBlind in _openstudiomodelresources:
_openstudiomodelresources.OptionalBlind_swigregister(OptionalBlind)
class DaylightRedirectionDeviceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_empty(self)

    def size(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_begin(self)

    def end(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.DaylightRedirectionDeviceVector_swiginit(self, _openstudiomodelresources.new_DaylightRedirectionDeviceVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_front(self)

    def back(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.DaylightRedirectionDeviceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DaylightRedirectionDeviceVector

# Register DaylightRedirectionDeviceVector in _openstudiomodelresources:
_openstudiomodelresources.DaylightRedirectionDeviceVector_swigregister(DaylightRedirectionDeviceVector)
class OptionalDaylightRedirectionDevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalDaylightRedirectionDevice_swiginit(self, _openstudiomodelresources.new_OptionalDaylightRedirectionDevice(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalDaylightRedirectionDevice_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDaylightRedirectionDevice

# Register OptionalDaylightRedirectionDevice in _openstudiomodelresources:
_openstudiomodelresources.OptionalDaylightRedirectionDevice_swigregister(OptionalDaylightRedirectionDevice)
class AirGapVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.AirGapVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.AirGapVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.AirGapVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.AirGapVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.AirGapVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.AirGapVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.AirGapVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.AirGapVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.AirGapVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.AirGapVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.AirGapVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.AirGapVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.AirGapVector_empty(self)

    def size(self):
        return _openstudiomodelresources.AirGapVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.AirGapVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.AirGapVector_begin(self)

    def end(self):
        return _openstudiomodelresources.AirGapVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.AirGapVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.AirGapVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.AirGapVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.AirGapVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.AirGapVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.AirGapVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.AirGapVector_swiginit(self, _openstudiomodelresources.new_AirGapVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.AirGapVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.AirGapVector_front(self)

    def back(self):
        return _openstudiomodelresources.AirGapVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.AirGapVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.AirGapVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.AirGapVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.AirGapVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.AirGapVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_AirGapVector

# Register AirGapVector in _openstudiomodelresources:
_openstudiomodelresources.AirGapVector_swigregister(AirGapVector)
class OptionalAirGap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalAirGap_swiginit(self, _openstudiomodelresources.new_OptionalAirGap(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalAirGap_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalAirGap___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalAirGap___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalAirGap_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalAirGap_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalAirGap_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalAirGap_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalAirGap_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalAirGap_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalAirGap

# Register OptionalAirGap in _openstudiomodelresources:
_openstudiomodelresources.OptionalAirGap_swigregister(OptionalAirGap)
class GasVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.GasVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.GasVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.GasVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.GasVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.GasVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.GasVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.GasVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.GasVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.GasVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.GasVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.GasVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.GasVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.GasVector_empty(self)

    def size(self):
        return _openstudiomodelresources.GasVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.GasVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.GasVector_begin(self)

    def end(self):
        return _openstudiomodelresources.GasVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.GasVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.GasVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.GasVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.GasVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.GasVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.GasVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.GasVector_swiginit(self, _openstudiomodelresources.new_GasVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.GasVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.GasVector_front(self)

    def back(self):
        return _openstudiomodelresources.GasVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.GasVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.GasVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.GasVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.GasVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.GasVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GasVector

# Register GasVector in _openstudiomodelresources:
_openstudiomodelresources.GasVector_swigregister(GasVector)
class OptionalGas(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalGas_swiginit(self, _openstudiomodelresources.new_OptionalGas(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalGas_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalGas___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalGas___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalGas_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalGas_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalGas_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalGas_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalGas_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalGas_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGas

# Register OptionalGas in _openstudiomodelresources:
_openstudiomodelresources.OptionalGas_swigregister(OptionalGas)
class GasMixtureVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.GasMixtureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.GasMixtureVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.GasMixtureVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.GasMixtureVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.GasMixtureVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.GasMixtureVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.GasMixtureVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.GasMixtureVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.GasMixtureVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.GasMixtureVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.GasMixtureVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.GasMixtureVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.GasMixtureVector_empty(self)

    def size(self):
        return _openstudiomodelresources.GasMixtureVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.GasMixtureVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.GasMixtureVector_begin(self)

    def end(self):
        return _openstudiomodelresources.GasMixtureVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.GasMixtureVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.GasMixtureVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.GasMixtureVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.GasMixtureVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.GasMixtureVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.GasMixtureVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.GasMixtureVector_swiginit(self, _openstudiomodelresources.new_GasMixtureVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.GasMixtureVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.GasMixtureVector_front(self)

    def back(self):
        return _openstudiomodelresources.GasMixtureVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.GasMixtureVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.GasMixtureVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.GasMixtureVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.GasMixtureVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.GasMixtureVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GasMixtureVector

# Register GasMixtureVector in _openstudiomodelresources:
_openstudiomodelresources.GasMixtureVector_swigregister(GasMixtureVector)
class OptionalGasMixture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalGasMixture_swiginit(self, _openstudiomodelresources.new_OptionalGasMixture(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalGasMixture_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalGasMixture___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalGasMixture___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalGasMixture_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalGasMixture_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalGasMixture_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalGasMixture_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalGasMixture_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalGasMixture_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGasMixture

# Register OptionalGasMixture in _openstudiomodelresources:
_openstudiomodelresources.OptionalGasMixture_swigregister(OptionalGasMixture)
class InfraredTransparentMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.InfraredTransparentMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.InfraredTransparentMaterialVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.InfraredTransparentMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.InfraredTransparentMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.InfraredTransparentMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.InfraredTransparentMaterialVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_empty(self)

    def size(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_begin(self)

    def end(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.InfraredTransparentMaterialVector_swiginit(self, _openstudiomodelresources.new_InfraredTransparentMaterialVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_front(self)

    def back(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.InfraredTransparentMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_InfraredTransparentMaterialVector

# Register InfraredTransparentMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.InfraredTransparentMaterialVector_swigregister(InfraredTransparentMaterialVector)
class OptionalInfraredTransparentMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalInfraredTransparentMaterial_swiginit(self, _openstudiomodelresources.new_OptionalInfraredTransparentMaterial(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalInfraredTransparentMaterial_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalInfraredTransparentMaterial

# Register OptionalInfraredTransparentMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalInfraredTransparentMaterial_swigregister(OptionalInfraredTransparentMaterial)
class MasslessOpaqueMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_empty(self)

    def size(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_begin(self)

    def end(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.MasslessOpaqueMaterialVector_swiginit(self, _openstudiomodelresources.new_MasslessOpaqueMaterialVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_front(self)

    def back(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.MasslessOpaqueMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_MasslessOpaqueMaterialVector

# Register MasslessOpaqueMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.MasslessOpaqueMaterialVector_swigregister(MasslessOpaqueMaterialVector)
class OptionalMasslessOpaqueMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalMasslessOpaqueMaterial_swiginit(self, _openstudiomodelresources.new_OptionalMasslessOpaqueMaterial(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalMasslessOpaqueMaterial_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalMasslessOpaqueMaterial

# Register OptionalMasslessOpaqueMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalMasslessOpaqueMaterial_swigregister(OptionalMasslessOpaqueMaterial)
class RefractionExtinctionGlazingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_empty(self)

    def size(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_begin(self)

    def end(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.RefractionExtinctionGlazingVector_swiginit(self, _openstudiomodelresources.new_RefractionExtinctionGlazingVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_front(self)

    def back(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.RefractionExtinctionGlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_RefractionExtinctionGlazingVector

# Register RefractionExtinctionGlazingVector in _openstudiomodelresources:
_openstudiomodelresources.RefractionExtinctionGlazingVector_swigregister(RefractionExtinctionGlazingVector)
class OptionalRefractionExtinctionGlazing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalRefractionExtinctionGlazing_swiginit(self, _openstudiomodelresources.new_OptionalRefractionExtinctionGlazing(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalRefractionExtinctionGlazing_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalRefractionExtinctionGlazing

# Register OptionalRefractionExtinctionGlazing in _openstudiomodelresources:
_openstudiomodelresources.OptionalRefractionExtinctionGlazing_swigregister(OptionalRefractionExtinctionGlazing)
class RoofVegetationVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.RoofVegetationVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.RoofVegetationVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.RoofVegetationVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.RoofVegetationVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.RoofVegetationVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.RoofVegetationVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.RoofVegetationVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.RoofVegetationVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.RoofVegetationVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.RoofVegetationVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.RoofVegetationVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.RoofVegetationVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.RoofVegetationVector_empty(self)

    def size(self):
        return _openstudiomodelresources.RoofVegetationVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.RoofVegetationVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.RoofVegetationVector_begin(self)

    def end(self):
        return _openstudiomodelresources.RoofVegetationVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.RoofVegetationVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.RoofVegetationVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.RoofVegetationVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.RoofVegetationVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.RoofVegetationVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.RoofVegetationVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.RoofVegetationVector_swiginit(self, _openstudiomodelresources.new_RoofVegetationVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.RoofVegetationVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.RoofVegetationVector_front(self)

    def back(self):
        return _openstudiomodelresources.RoofVegetationVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.RoofVegetationVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.RoofVegetationVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.RoofVegetationVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.RoofVegetationVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.RoofVegetationVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_RoofVegetationVector

# Register RoofVegetationVector in _openstudiomodelresources:
_openstudiomodelresources.RoofVegetationVector_swigregister(RoofVegetationVector)
class OptionalRoofVegetation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalRoofVegetation_swiginit(self, _openstudiomodelresources.new_OptionalRoofVegetation(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalRoofVegetation_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalRoofVegetation___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalRoofVegetation___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalRoofVegetation_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalRoofVegetation_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalRoofVegetation_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalRoofVegetation_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalRoofVegetation_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalRoofVegetation_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalRoofVegetation

# Register OptionalRoofVegetation in _openstudiomodelresources:
_openstudiomodelresources.OptionalRoofVegetation_swigregister(OptionalRoofVegetation)
class ScreenVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ScreenVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ScreenVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ScreenVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ScreenVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ScreenVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ScreenVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ScreenVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ScreenVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ScreenVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ScreenVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ScreenVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ScreenVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ScreenVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ScreenVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ScreenVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ScreenVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ScreenVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ScreenVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ScreenVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ScreenVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ScreenVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ScreenVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ScreenVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ScreenVector_swiginit(self, _openstudiomodelresources.new_ScreenVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ScreenVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ScreenVector_front(self)

    def back(self):
        return _openstudiomodelresources.ScreenVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ScreenVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ScreenVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ScreenVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ScreenVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ScreenVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ScreenVector

# Register ScreenVector in _openstudiomodelresources:
_openstudiomodelresources.ScreenVector_swigregister(ScreenVector)
class OptionalScreen(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalScreen_swiginit(self, _openstudiomodelresources.new_OptionalScreen(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalScreen_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalScreen___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalScreen___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalScreen_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalScreen_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalScreen_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalScreen_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalScreen_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalScreen_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalScreen

# Register OptionalScreen in _openstudiomodelresources:
_openstudiomodelresources.OptionalScreen_swigregister(OptionalScreen)
class ShadeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ShadeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ShadeVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ShadeVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ShadeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ShadeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ShadeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ShadeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ShadeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ShadeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ShadeVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ShadeVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ShadeVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ShadeVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ShadeVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ShadeVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ShadeVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ShadeVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ShadeVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ShadeVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ShadeVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ShadeVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ShadeVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ShadeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ShadeVector_swiginit(self, _openstudiomodelresources.new_ShadeVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ShadeVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ShadeVector_front(self)

    def back(self):
        return _openstudiomodelresources.ShadeVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ShadeVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ShadeVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ShadeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ShadeVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ShadeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ShadeVector

# Register ShadeVector in _openstudiomodelresources:
_openstudiomodelresources.ShadeVector_swigregister(ShadeVector)
class OptionalShade(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalShade_swiginit(self, _openstudiomodelresources.new_OptionalShade(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalShade_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalShade___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalShade___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalShade_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalShade_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalShade_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalShade_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalShade_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalShade_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalShade

# Register OptionalShade in _openstudiomodelresources:
_openstudiomodelresources.OptionalShade_swigregister(OptionalShade)
class SimpleGlazingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.SimpleGlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.SimpleGlazingVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.SimpleGlazingVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.SimpleGlazingVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.SimpleGlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.SimpleGlazingVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.SimpleGlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.SimpleGlazingVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.SimpleGlazingVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.SimpleGlazingVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.SimpleGlazingVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.SimpleGlazingVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.SimpleGlazingVector_empty(self)

    def size(self):
        return _openstudiomodelresources.SimpleGlazingVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.SimpleGlazingVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.SimpleGlazingVector_begin(self)

    def end(self):
        return _openstudiomodelresources.SimpleGlazingVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.SimpleGlazingVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.SimpleGlazingVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.SimpleGlazingVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.SimpleGlazingVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.SimpleGlazingVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.SimpleGlazingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.SimpleGlazingVector_swiginit(self, _openstudiomodelresources.new_SimpleGlazingVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.SimpleGlazingVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.SimpleGlazingVector_front(self)

    def back(self):
        return _openstudiomodelresources.SimpleGlazingVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.SimpleGlazingVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.SimpleGlazingVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.SimpleGlazingVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.SimpleGlazingVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.SimpleGlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_SimpleGlazingVector

# Register SimpleGlazingVector in _openstudiomodelresources:
_openstudiomodelresources.SimpleGlazingVector_swigregister(SimpleGlazingVector)
class OptionalSimpleGlazing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalSimpleGlazing_swiginit(self, _openstudiomodelresources.new_OptionalSimpleGlazing(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalSimpleGlazing_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalSimpleGlazing___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalSimpleGlazing___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalSimpleGlazing_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalSimpleGlazing_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalSimpleGlazing_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalSimpleGlazing_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalSimpleGlazing_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalSimpleGlazing_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalSimpleGlazing

# Register OptionalSimpleGlazing in _openstudiomodelresources:
_openstudiomodelresources.OptionalSimpleGlazing_swigregister(OptionalSimpleGlazing)
class StandardGlazingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.StandardGlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.StandardGlazingVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.StandardGlazingVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.StandardGlazingVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.StandardGlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.StandardGlazingVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.StandardGlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.StandardGlazingVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.StandardGlazingVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.StandardGlazingVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.StandardGlazingVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.StandardGlazingVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.StandardGlazingVector_empty(self)

    def size(self):
        return _openstudiomodelresources.StandardGlazingVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.StandardGlazingVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.StandardGlazingVector_begin(self)

    def end(self):
        return _openstudiomodelresources.StandardGlazingVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.StandardGlazingVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.StandardGlazingVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.StandardGlazingVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.StandardGlazingVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.StandardGlazingVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.StandardGlazingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.StandardGlazingVector_swiginit(self, _openstudiomodelresources.new_StandardGlazingVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.StandardGlazingVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.StandardGlazingVector_front(self)

    def back(self):
        return _openstudiomodelresources.StandardGlazingVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.StandardGlazingVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.StandardGlazingVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.StandardGlazingVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.StandardGlazingVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.StandardGlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_StandardGlazingVector

# Register StandardGlazingVector in _openstudiomodelresources:
_openstudiomodelresources.StandardGlazingVector_swigregister(StandardGlazingVector)
class OptionalStandardGlazing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalStandardGlazing_swiginit(self, _openstudiomodelresources.new_OptionalStandardGlazing(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalStandardGlazing_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalStandardGlazing___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalStandardGlazing___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalStandardGlazing_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalStandardGlazing_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalStandardGlazing_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalStandardGlazing_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalStandardGlazing_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalStandardGlazing_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalStandardGlazing

# Register OptionalStandardGlazing in _openstudiomodelresources:
_openstudiomodelresources.OptionalStandardGlazing_swigregister(OptionalStandardGlazing)
class StandardOpaqueMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.StandardOpaqueMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.StandardOpaqueMaterialVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.StandardOpaqueMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.StandardOpaqueMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.StandardOpaqueMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.StandardOpaqueMaterialVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_empty(self)

    def size(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_begin(self)

    def end(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.StandardOpaqueMaterialVector_swiginit(self, _openstudiomodelresources.new_StandardOpaqueMaterialVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_front(self)

    def back(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.StandardOpaqueMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_StandardOpaqueMaterialVector

# Register StandardOpaqueMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.StandardOpaqueMaterialVector_swigregister(StandardOpaqueMaterialVector)
class OptionalStandardOpaqueMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalStandardOpaqueMaterial_swiginit(self, _openstudiomodelresources.new_OptionalStandardOpaqueMaterial(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalStandardOpaqueMaterial_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalStandardOpaqueMaterial

# Register OptionalStandardOpaqueMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalStandardOpaqueMaterial_swigregister(OptionalStandardOpaqueMaterial)
class ThermochromicGlazingVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ThermochromicGlazingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ThermochromicGlazingVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ThermochromicGlazingVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ThermochromicGlazingVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ThermochromicGlazingVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ThermochromicGlazingVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ThermochromicGlazingVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ThermochromicGlazingVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ThermochromicGlazingVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ThermochromicGlazingVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ThermochromicGlazingVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ThermochromicGlazingVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ThermochromicGlazingVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ThermochromicGlazingVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ThermochromicGlazingVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ThermochromicGlazingVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ThermochromicGlazingVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ThermochromicGlazingVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ThermochromicGlazingVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ThermochromicGlazingVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ThermochromicGlazingVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ThermochromicGlazingVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ThermochromicGlazingVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ThermochromicGlazingVector_swiginit(self, _openstudiomodelresources.new_ThermochromicGlazingVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ThermochromicGlazingVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ThermochromicGlazingVector_front(self)

    def back(self):
        return _openstudiomodelresources.ThermochromicGlazingVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ThermochromicGlazingVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ThermochromicGlazingVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ThermochromicGlazingVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ThermochromicGlazingVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ThermochromicGlazingVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ThermochromicGlazingVector

# Register ThermochromicGlazingVector in _openstudiomodelresources:
_openstudiomodelresources.ThermochromicGlazingVector_swigregister(ThermochromicGlazingVector)
class OptionalThermochromicGlazing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalThermochromicGlazing_swiginit(self, _openstudiomodelresources.new_OptionalThermochromicGlazing(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalThermochromicGlazing_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalThermochromicGlazing___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalThermochromicGlazing___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalThermochromicGlazing_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalThermochromicGlazing_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalThermochromicGlazing_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalThermochromicGlazing_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalThermochromicGlazing_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalThermochromicGlazing_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalThermochromicGlazing

# Register OptionalThermochromicGlazing in _openstudiomodelresources:
_openstudiomodelresources.OptionalThermochromicGlazing_swigregister(OptionalThermochromicGlazing)
class StandardsInformationMaterialVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.StandardsInformationMaterialVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.StandardsInformationMaterialVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.StandardsInformationMaterialVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.StandardsInformationMaterialVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.StandardsInformationMaterialVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.StandardsInformationMaterialVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.StandardsInformationMaterialVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector_empty(self)

    def size(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.StandardsInformationMaterialVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector_begin(self)

    def end(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.StandardsInformationMaterialVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.StandardsInformationMaterialVector_swiginit(self, _openstudiomodelresources.new_StandardsInformationMaterialVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.StandardsInformationMaterialVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector_front(self)

    def back(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.StandardsInformationMaterialVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.StandardsInformationMaterialVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.StandardsInformationMaterialVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.StandardsInformationMaterialVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.StandardsInformationMaterialVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_StandardsInformationMaterialVector

# Register StandardsInformationMaterialVector in _openstudiomodelresources:
_openstudiomodelresources.StandardsInformationMaterialVector_swigregister(StandardsInformationMaterialVector)
class OptionalStandardsInformationMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalStandardsInformationMaterial_swiginit(self, _openstudiomodelresources.new_OptionalStandardsInformationMaterial(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalStandardsInformationMaterial___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalStandardsInformationMaterial___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalStandardsInformationMaterial_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalStandardsInformationMaterial

# Register OptionalStandardsInformationMaterial in _openstudiomodelresources:
_openstudiomodelresources.OptionalStandardsInformationMaterial_swigregister(OptionalStandardsInformationMaterial)
class ConstructionBaseVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ConstructionBaseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ConstructionBaseVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ConstructionBaseVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ConstructionBaseVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ConstructionBaseVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ConstructionBaseVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ConstructionBaseVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ConstructionBaseVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ConstructionBaseVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ConstructionBaseVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ConstructionBaseVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ConstructionBaseVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ConstructionBaseVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ConstructionBaseVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ConstructionBaseVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ConstructionBaseVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ConstructionBaseVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ConstructionBaseVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ConstructionBaseVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ConstructionBaseVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ConstructionBaseVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ConstructionBaseVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ConstructionBaseVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ConstructionBaseVector_swiginit(self, _openstudiomodelresources.new_ConstructionBaseVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ConstructionBaseVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ConstructionBaseVector_front(self)

    def back(self):
        return _openstudiomodelresources.ConstructionBaseVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ConstructionBaseVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ConstructionBaseVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ConstructionBaseVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ConstructionBaseVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ConstructionBaseVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionBaseVector

# Register ConstructionBaseVector in _openstudiomodelresources:
_openstudiomodelresources.ConstructionBaseVector_swigregister(ConstructionBaseVector)
class OptionalConstructionBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalConstructionBase_swiginit(self, _openstudiomodelresources.new_OptionalConstructionBase(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalConstructionBase_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalConstructionBase___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalConstructionBase___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalConstructionBase_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalConstructionBase_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalConstructionBase_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalConstructionBase_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalConstructionBase_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalConstructionBase_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalConstructionBase

# Register OptionalConstructionBase in _openstudiomodelresources:
_openstudiomodelresources.OptionalConstructionBase_swigregister(OptionalConstructionBase)
class LayeredConstructionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.LayeredConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.LayeredConstructionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.LayeredConstructionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.LayeredConstructionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.LayeredConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.LayeredConstructionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.LayeredConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.LayeredConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.LayeredConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.LayeredConstructionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.LayeredConstructionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.LayeredConstructionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.LayeredConstructionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.LayeredConstructionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.LayeredConstructionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.LayeredConstructionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.LayeredConstructionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.LayeredConstructionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.LayeredConstructionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.LayeredConstructionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.LayeredConstructionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.LayeredConstructionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.LayeredConstructionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.LayeredConstructionVector_swiginit(self, _openstudiomodelresources.new_LayeredConstructionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.LayeredConstructionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.LayeredConstructionVector_front(self)

    def back(self):
        return _openstudiomodelresources.LayeredConstructionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.LayeredConstructionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.LayeredConstructionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.LayeredConstructionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.LayeredConstructionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.LayeredConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_LayeredConstructionVector

# Register LayeredConstructionVector in _openstudiomodelresources:
_openstudiomodelresources.LayeredConstructionVector_swigregister(LayeredConstructionVector)
class OptionalLayeredConstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalLayeredConstruction_swiginit(self, _openstudiomodelresources.new_OptionalLayeredConstruction(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalLayeredConstruction_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalLayeredConstruction___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalLayeredConstruction___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalLayeredConstruction_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalLayeredConstruction_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalLayeredConstruction_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalLayeredConstruction_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalLayeredConstruction_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalLayeredConstruction_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalLayeredConstruction

# Register OptionalLayeredConstruction in _openstudiomodelresources:
_openstudiomodelresources.OptionalLayeredConstruction_swigregister(OptionalLayeredConstruction)
class ConstructionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ConstructionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ConstructionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ConstructionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ConstructionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ConstructionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ConstructionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ConstructionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ConstructionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ConstructionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ConstructionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ConstructionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ConstructionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ConstructionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ConstructionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ConstructionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ConstructionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ConstructionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ConstructionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ConstructionVector_swiginit(self, _openstudiomodelresources.new_ConstructionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ConstructionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ConstructionVector_front(self)

    def back(self):
        return _openstudiomodelresources.ConstructionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ConstructionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ConstructionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ConstructionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ConstructionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionVector

# Register ConstructionVector in _openstudiomodelresources:
_openstudiomodelresources.ConstructionVector_swigregister(ConstructionVector)
class OptionalConstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalConstruction_swiginit(self, _openstudiomodelresources.new_OptionalConstruction(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalConstruction_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalConstruction___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalConstruction___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalConstruction_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalConstruction_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalConstruction_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalConstruction_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalConstruction_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalConstruction_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalConstruction

# Register OptionalConstruction in _openstudiomodelresources:
_openstudiomodelresources.OptionalConstruction_swigregister(OptionalConstruction)
class ConstructionAirBoundaryVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ConstructionAirBoundaryVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ConstructionAirBoundaryVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ConstructionAirBoundaryVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ConstructionAirBoundaryVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ConstructionAirBoundaryVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ConstructionAirBoundaryVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ConstructionAirBoundaryVector_swiginit(self, _openstudiomodelresources.new_ConstructionAirBoundaryVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_front(self)

    def back(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ConstructionAirBoundaryVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionAirBoundaryVector

# Register ConstructionAirBoundaryVector in _openstudiomodelresources:
_openstudiomodelresources.ConstructionAirBoundaryVector_swigregister(ConstructionAirBoundaryVector)
class OptionalConstructionAirBoundary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalConstructionAirBoundary_swiginit(self, _openstudiomodelresources.new_OptionalConstructionAirBoundary(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalConstructionAirBoundary_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalConstructionAirBoundary___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalConstructionAirBoundary___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalConstructionAirBoundary_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalConstructionAirBoundary_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalConstructionAirBoundary_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalConstructionAirBoundary_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalConstructionAirBoundary_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalConstructionAirBoundary_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalConstructionAirBoundary

# Register OptionalConstructionAirBoundary in _openstudiomodelresources:
_openstudiomodelresources.OptionalConstructionAirBoundary_swigregister(OptionalConstructionAirBoundary)
class ConstructionWithInternalSourceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ConstructionWithInternalSourceVector_swiginit(self, _openstudiomodelresources.new_ConstructionWithInternalSourceVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_front(self)

    def back(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ConstructionWithInternalSourceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionWithInternalSourceVector

# Register ConstructionWithInternalSourceVector in _openstudiomodelresources:
_openstudiomodelresources.ConstructionWithInternalSourceVector_swigregister(ConstructionWithInternalSourceVector)
class OptionalConstructionWithInternalSource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalConstructionWithInternalSource_swiginit(self, _openstudiomodelresources.new_OptionalConstructionWithInternalSource(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalConstructionWithInternalSource___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalConstructionWithInternalSource___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalConstructionWithInternalSource_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalConstructionWithInternalSource

# Register OptionalConstructionWithInternalSource in _openstudiomodelresources:
_openstudiomodelresources.OptionalConstructionWithInternalSource_swigregister(OptionalConstructionWithInternalSource)
class CFactorUndergroundWallConstructionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CFactorUndergroundWallConstructionVector_swiginit(self, _openstudiomodelresources.new_CFactorUndergroundWallConstructionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_front(self)

    def back(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CFactorUndergroundWallConstructionVector

# Register CFactorUndergroundWallConstructionVector in _openstudiomodelresources:
_openstudiomodelresources.CFactorUndergroundWallConstructionVector_swigregister(CFactorUndergroundWallConstructionVector)
class OptionalCFactorUndergroundWallConstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_swiginit(self, _openstudiomodelresources.new_OptionalCFactorUndergroundWallConstruction(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCFactorUndergroundWallConstruction

# Register OptionalCFactorUndergroundWallConstruction in _openstudiomodelresources:
_openstudiomodelresources.OptionalCFactorUndergroundWallConstruction_swigregister(OptionalCFactorUndergroundWallConstruction)
class FFactorGroundFloorConstructionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.FFactorGroundFloorConstructionVector_swiginit(self, _openstudiomodelresources.new_FFactorGroundFloorConstructionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_front(self)

    def back(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.FFactorGroundFloorConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_FFactorGroundFloorConstructionVector

# Register FFactorGroundFloorConstructionVector in _openstudiomodelresources:
_openstudiomodelresources.FFactorGroundFloorConstructionVector_swigregister(FFactorGroundFloorConstructionVector)
class OptionalFFactorGroundFloorConstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_swiginit(self, _openstudiomodelresources.new_OptionalFFactorGroundFloorConstruction(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalFFactorGroundFloorConstruction_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalFFactorGroundFloorConstruction

# Register OptionalFFactorGroundFloorConstruction in _openstudiomodelresources:
_openstudiomodelresources.OptionalFFactorGroundFloorConstruction_swigregister(OptionalFFactorGroundFloorConstruction)
class StandardsInformationConstructionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.StandardsInformationConstructionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.StandardsInformationConstructionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.StandardsInformationConstructionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.StandardsInformationConstructionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.StandardsInformationConstructionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.StandardsInformationConstructionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.StandardsInformationConstructionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.StandardsInformationConstructionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.StandardsInformationConstructionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.StandardsInformationConstructionVector_swiginit(self, _openstudiomodelresources.new_StandardsInformationConstructionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.StandardsInformationConstructionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector_front(self)

    def back(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.StandardsInformationConstructionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.StandardsInformationConstructionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.StandardsInformationConstructionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.StandardsInformationConstructionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.StandardsInformationConstructionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_StandardsInformationConstructionVector

# Register StandardsInformationConstructionVector in _openstudiomodelresources:
_openstudiomodelresources.StandardsInformationConstructionVector_swigregister(StandardsInformationConstructionVector)
class OptionalStandardsInformationConstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalStandardsInformationConstruction_swiginit(self, _openstudiomodelresources.new_OptionalStandardsInformationConstruction(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalStandardsInformationConstruction___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalStandardsInformationConstruction___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalStandardsInformationConstruction_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalStandardsInformationConstruction

# Register OptionalStandardsInformationConstruction in _openstudiomodelresources:
_openstudiomodelresources.OptionalStandardsInformationConstruction_swigregister(OptionalStandardsInformationConstruction)
class WindowDataFileVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.WindowDataFileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.WindowDataFileVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.WindowDataFileVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.WindowDataFileVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.WindowDataFileVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.WindowDataFileVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.WindowDataFileVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.WindowDataFileVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.WindowDataFileVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.WindowDataFileVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.WindowDataFileVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.WindowDataFileVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.WindowDataFileVector_empty(self)

    def size(self):
        return _openstudiomodelresources.WindowDataFileVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.WindowDataFileVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.WindowDataFileVector_begin(self)

    def end(self):
        return _openstudiomodelresources.WindowDataFileVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.WindowDataFileVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.WindowDataFileVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.WindowDataFileVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.WindowDataFileVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.WindowDataFileVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.WindowDataFileVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.WindowDataFileVector_swiginit(self, _openstudiomodelresources.new_WindowDataFileVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.WindowDataFileVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.WindowDataFileVector_front(self)

    def back(self):
        return _openstudiomodelresources.WindowDataFileVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.WindowDataFileVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.WindowDataFileVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.WindowDataFileVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.WindowDataFileVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.WindowDataFileVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_WindowDataFileVector

# Register WindowDataFileVector in _openstudiomodelresources:
_openstudiomodelresources.WindowDataFileVector_swigregister(WindowDataFileVector)
class OptionalWindowDataFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalWindowDataFile_swiginit(self, _openstudiomodelresources.new_OptionalWindowDataFile(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalWindowDataFile_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalWindowDataFile___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalWindowDataFile___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalWindowDataFile_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalWindowDataFile_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalWindowDataFile_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalWindowDataFile_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalWindowDataFile_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalWindowDataFile_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalWindowDataFile

# Register OptionalWindowDataFile in _openstudiomodelresources:
_openstudiomodelresources.OptionalWindowDataFile_swigregister(OptionalWindowDataFile)
class WindowPropertyFrameAndDividerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_empty(self)

    def size(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_begin(self)

    def end(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.WindowPropertyFrameAndDividerVector_swiginit(self, _openstudiomodelresources.new_WindowPropertyFrameAndDividerVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_front(self)

    def back(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDividerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_WindowPropertyFrameAndDividerVector

# Register WindowPropertyFrameAndDividerVector in _openstudiomodelresources:
_openstudiomodelresources.WindowPropertyFrameAndDividerVector_swigregister(WindowPropertyFrameAndDividerVector)
class OptionalWindowPropertyFrameAndDivider(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_swiginit(self, _openstudiomodelresources.new_OptionalWindowPropertyFrameAndDivider(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalWindowPropertyFrameAndDivider

# Register OptionalWindowPropertyFrameAndDivider in _openstudiomodelresources:
_openstudiomodelresources.OptionalWindowPropertyFrameAndDivider_swigregister(OptionalWindowPropertyFrameAndDivider)
class DefaultSubSurfaceConstructionsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_empty(self)

    def size(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_begin(self)

    def end(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_swiginit(self, _openstudiomodelresources.new_DefaultSubSurfaceConstructionsVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_front(self)

    def back(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructionsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultSubSurfaceConstructionsVector

# Register DefaultSubSurfaceConstructionsVector in _openstudiomodelresources:
_openstudiomodelresources.DefaultSubSurfaceConstructionsVector_swigregister(DefaultSubSurfaceConstructionsVector)
class OptionalDefaultSubSurfaceConstructions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_swiginit(self, _openstudiomodelresources.new_OptionalDefaultSubSurfaceConstructions(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDefaultSubSurfaceConstructions

# Register OptionalDefaultSubSurfaceConstructions in _openstudiomodelresources:
_openstudiomodelresources.OptionalDefaultSubSurfaceConstructions_swigregister(OptionalDefaultSubSurfaceConstructions)
class DefaultSurfaceConstructionsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_empty(self)

    def size(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_begin(self)

    def end(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.DefaultSurfaceConstructionsVector_swiginit(self, _openstudiomodelresources.new_DefaultSurfaceConstructionsVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_front(self)

    def back(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.DefaultSurfaceConstructionsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultSurfaceConstructionsVector

# Register DefaultSurfaceConstructionsVector in _openstudiomodelresources:
_openstudiomodelresources.DefaultSurfaceConstructionsVector_swigregister(DefaultSurfaceConstructionsVector)
class OptionalDefaultSurfaceConstructions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalDefaultSurfaceConstructions_swiginit(self, _openstudiomodelresources.new_OptionalDefaultSurfaceConstructions(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalDefaultSurfaceConstructions_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDefaultSurfaceConstructions

# Register OptionalDefaultSurfaceConstructions in _openstudiomodelresources:
_openstudiomodelresources.OptionalDefaultSurfaceConstructions_swigregister(OptionalDefaultSurfaceConstructions)
class ShadingControlVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ShadingControlVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ShadingControlVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ShadingControlVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ShadingControlVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ShadingControlVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ShadingControlVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ShadingControlVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ShadingControlVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ShadingControlVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ShadingControlVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ShadingControlVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ShadingControlVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ShadingControlVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ShadingControlVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ShadingControlVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ShadingControlVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ShadingControlVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ShadingControlVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ShadingControlVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ShadingControlVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ShadingControlVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ShadingControlVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ShadingControlVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ShadingControlVector_swiginit(self, _openstudiomodelresources.new_ShadingControlVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ShadingControlVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ShadingControlVector_front(self)

    def back(self):
        return _openstudiomodelresources.ShadingControlVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ShadingControlVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ShadingControlVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ShadingControlVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ShadingControlVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ShadingControlVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ShadingControlVector

# Register ShadingControlVector in _openstudiomodelresources:
_openstudiomodelresources.ShadingControlVector_swigregister(ShadingControlVector)
class OptionalShadingControl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalShadingControl_swiginit(self, _openstudiomodelresources.new_OptionalShadingControl(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalShadingControl_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalShadingControl___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalShadingControl___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalShadingControl_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalShadingControl_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalShadingControl_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalShadingControl_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalShadingControl_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalShadingControl_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalShadingControl

# Register OptionalShadingControl in _openstudiomodelresources:
_openstudiomodelresources.OptionalShadingControl_swigregister(OptionalShadingControl)
class CurveVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveVector_swiginit(self, _openstudiomodelresources.new_CurveVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveVector

# Register CurveVector in _openstudiomodelresources:
_openstudiomodelresources.CurveVector_swigregister(CurveVector)
class OptionalCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurve_swiginit(self, _openstudiomodelresources.new_OptionalCurve(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurve_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurve___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurve___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurve_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurve_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurve_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurve_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurve_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurve_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurve

# Register OptionalCurve in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurve_swigregister(OptionalCurve)
class CurveBicubicVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveBicubicVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveBicubicVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveBicubicVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveBicubicVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveBicubicVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveBicubicVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveBicubicVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveBicubicVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveBicubicVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveBicubicVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveBicubicVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveBicubicVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveBicubicVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveBicubicVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveBicubicVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveBicubicVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveBicubicVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveBicubicVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveBicubicVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveBicubicVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveBicubicVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveBicubicVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveBicubicVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveBicubicVector_swiginit(self, _openstudiomodelresources.new_CurveBicubicVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveBicubicVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveBicubicVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveBicubicVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveBicubicVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveBicubicVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveBicubicVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveBicubicVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveBicubicVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveBicubicVector

# Register CurveBicubicVector in _openstudiomodelresources:
_openstudiomodelresources.CurveBicubicVector_swigregister(CurveBicubicVector)
class OptionalCurveBicubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveBicubic_swiginit(self, _openstudiomodelresources.new_OptionalCurveBicubic(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveBicubic_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveBicubic___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveBicubic___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveBicubic_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveBicubic_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveBicubic_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveBicubic_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveBicubic_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveBicubic_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveBicubic

# Register OptionalCurveBicubic in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveBicubic_swigregister(OptionalCurveBicubic)
class CurveBiquadraticVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveBiquadraticVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveBiquadraticVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveBiquadraticVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveBiquadraticVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveBiquadraticVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveBiquadraticVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveBiquadraticVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveBiquadraticVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveBiquadraticVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveBiquadraticVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveBiquadraticVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveBiquadraticVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveBiquadraticVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveBiquadraticVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveBiquadraticVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveBiquadraticVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveBiquadraticVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveBiquadraticVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveBiquadraticVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveBiquadraticVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveBiquadraticVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveBiquadraticVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveBiquadraticVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveBiquadraticVector_swiginit(self, _openstudiomodelresources.new_CurveBiquadraticVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveBiquadraticVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveBiquadraticVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveBiquadraticVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveBiquadraticVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveBiquadraticVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveBiquadraticVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveBiquadraticVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveBiquadraticVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveBiquadraticVector

# Register CurveBiquadraticVector in _openstudiomodelresources:
_openstudiomodelresources.CurveBiquadraticVector_swigregister(CurveBiquadraticVector)
class OptionalCurveBiquadratic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveBiquadratic_swiginit(self, _openstudiomodelresources.new_OptionalCurveBiquadratic(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveBiquadratic_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveBiquadratic___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveBiquadratic___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveBiquadratic_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveBiquadratic_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveBiquadratic_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveBiquadratic_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveBiquadratic_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveBiquadratic_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveBiquadratic

# Register OptionalCurveBiquadratic in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveBiquadratic_swigregister(OptionalCurveBiquadratic)
class CurveCubicVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveCubicVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveCubicVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveCubicVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveCubicVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveCubicVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveCubicVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveCubicVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveCubicVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveCubicVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveCubicVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveCubicVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveCubicVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveCubicVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveCubicVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveCubicVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveCubicVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveCubicVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveCubicVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveCubicVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveCubicVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveCubicVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveCubicVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveCubicVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveCubicVector_swiginit(self, _openstudiomodelresources.new_CurveCubicVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveCubicVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveCubicVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveCubicVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveCubicVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveCubicVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveCubicVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveCubicVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveCubicVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveCubicVector

# Register CurveCubicVector in _openstudiomodelresources:
_openstudiomodelresources.CurveCubicVector_swigregister(CurveCubicVector)
class OptionalCurveCubic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveCubic_swiginit(self, _openstudiomodelresources.new_OptionalCurveCubic(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveCubic_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveCubic___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveCubic___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveCubic_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveCubic_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveCubic_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveCubic_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveCubic_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveCubic_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveCubic

# Register OptionalCurveCubic in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveCubic_swigregister(OptionalCurveCubic)
class CurveDoubleExponentialDecayVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveDoubleExponentialDecayVector_swiginit(self, _openstudiomodelresources.new_CurveDoubleExponentialDecayVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecayVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveDoubleExponentialDecayVector

# Register CurveDoubleExponentialDecayVector in _openstudiomodelresources:
_openstudiomodelresources.CurveDoubleExponentialDecayVector_swigregister(CurveDoubleExponentialDecayVector)
class OptionalCurveDoubleExponentialDecay(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_swiginit(self, _openstudiomodelresources.new_OptionalCurveDoubleExponentialDecay(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveDoubleExponentialDecay_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveDoubleExponentialDecay

# Register OptionalCurveDoubleExponentialDecay in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveDoubleExponentialDecay_swigregister(OptionalCurveDoubleExponentialDecay)
class CurveExponentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveExponentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveExponentVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveExponentVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveExponentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveExponentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveExponentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveExponentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveExponentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveExponentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveExponentVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveExponentVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveExponentVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveExponentVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveExponentVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveExponentVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveExponentVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveExponentVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveExponentVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveExponentVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveExponentVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveExponentVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveExponentVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveExponentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveExponentVector_swiginit(self, _openstudiomodelresources.new_CurveExponentVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveExponentVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveExponentVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveExponentVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveExponentVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveExponentVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveExponentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveExponentVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveExponentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentVector

# Register CurveExponentVector in _openstudiomodelresources:
_openstudiomodelresources.CurveExponentVector_swigregister(CurveExponentVector)
class OptionalCurveExponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveExponent_swiginit(self, _openstudiomodelresources.new_OptionalCurveExponent(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveExponent_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveExponent___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveExponent___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveExponent_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveExponent_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveExponent_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveExponent_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveExponent_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveExponent_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveExponent

# Register OptionalCurveExponent in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveExponent_swigregister(OptionalCurveExponent)
class CurveExponentialDecayVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveExponentialDecayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveExponentialDecayVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveExponentialDecayVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveExponentialDecayVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveExponentialDecayVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveExponentialDecayVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveExponentialDecayVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveExponentialDecayVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveExponentialDecayVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveExponentialDecayVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveExponentialDecayVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveExponentialDecayVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveExponentialDecayVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveExponentialDecayVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveExponentialDecayVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveExponentialDecayVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveExponentialDecayVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveExponentialDecayVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveExponentialDecayVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveExponentialDecayVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveExponentialDecayVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveExponentialDecayVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveExponentialDecayVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveExponentialDecayVector_swiginit(self, _openstudiomodelresources.new_CurveExponentialDecayVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveExponentialDecayVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveExponentialDecayVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveExponentialDecayVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveExponentialDecayVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveExponentialDecayVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveExponentialDecayVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveExponentialDecayVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveExponentialDecayVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentialDecayVector

# Register CurveExponentialDecayVector in _openstudiomodelresources:
_openstudiomodelresources.CurveExponentialDecayVector_swigregister(CurveExponentialDecayVector)
class OptionalCurveExponentialDecay(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveExponentialDecay_swiginit(self, _openstudiomodelresources.new_OptionalCurveExponentialDecay(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveExponentialDecay_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveExponentialDecay___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveExponentialDecay___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveExponentialDecay_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveExponentialDecay_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveExponentialDecay_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveExponentialDecay_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveExponentialDecay_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveExponentialDecay_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveExponentialDecay

# Register OptionalCurveExponentialDecay in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveExponentialDecay_swigregister(OptionalCurveExponentialDecay)
class CurveExponentialSkewNormalVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveExponentialSkewNormalVector_swiginit(self, _openstudiomodelresources.new_CurveExponentialSkewNormalVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveExponentialSkewNormalVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentialSkewNormalVector

# Register CurveExponentialSkewNormalVector in _openstudiomodelresources:
_openstudiomodelresources.CurveExponentialSkewNormalVector_swigregister(CurveExponentialSkewNormalVector)
class OptionalCurveExponentialSkewNormal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveExponentialSkewNormal_swiginit(self, _openstudiomodelresources.new_OptionalCurveExponentialSkewNormal(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveExponentialSkewNormal_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveExponentialSkewNormal

# Register OptionalCurveExponentialSkewNormal in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveExponentialSkewNormal_swigregister(OptionalCurveExponentialSkewNormal)
class CurveFanPressureRiseVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveFanPressureRiseVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveFanPressureRiseVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveFanPressureRiseVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveFanPressureRiseVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveFanPressureRiseVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveFanPressureRiseVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveFanPressureRiseVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveFanPressureRiseVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveFanPressureRiseVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveFanPressureRiseVector_swiginit(self, _openstudiomodelresources.new_CurveFanPressureRiseVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveFanPressureRiseVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveFanPressureRiseVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveFanPressureRiseVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveFanPressureRiseVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveFanPressureRiseVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveFanPressureRiseVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveFanPressureRiseVector

# Register CurveFanPressureRiseVector in _openstudiomodelresources:
_openstudiomodelresources.CurveFanPressureRiseVector_swigregister(CurveFanPressureRiseVector)
class OptionalCurveFanPressureRise(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveFanPressureRise_swiginit(self, _openstudiomodelresources.new_OptionalCurveFanPressureRise(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveFanPressureRise_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveFanPressureRise___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveFanPressureRise___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveFanPressureRise_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveFanPressureRise_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveFanPressureRise_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveFanPressureRise_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveFanPressureRise_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveFanPressureRise_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveFanPressureRise

# Register OptionalCurveFanPressureRise in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveFanPressureRise_swigregister(OptionalCurveFanPressureRise)
class CurveFunctionalPressureDropVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveFunctionalPressureDropVector_swiginit(self, _openstudiomodelresources.new_CurveFunctionalPressureDropVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveFunctionalPressureDropVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveFunctionalPressureDropVector

# Register CurveFunctionalPressureDropVector in _openstudiomodelresources:
_openstudiomodelresources.CurveFunctionalPressureDropVector_swigregister(CurveFunctionalPressureDropVector)
class OptionalCurveFunctionalPressureDrop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_swiginit(self, _openstudiomodelresources.new_OptionalCurveFunctionalPressureDrop(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveFunctionalPressureDrop_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveFunctionalPressureDrop

# Register OptionalCurveFunctionalPressureDrop in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveFunctionalPressureDrop_swigregister(OptionalCurveFunctionalPressureDrop)
class CurveLinearVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveLinearVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveLinearVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveLinearVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveLinearVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveLinearVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveLinearVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveLinearVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveLinearVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveLinearVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveLinearVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveLinearVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveLinearVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveLinearVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveLinearVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveLinearVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveLinearVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveLinearVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveLinearVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveLinearVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveLinearVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveLinearVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveLinearVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveLinearVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveLinearVector_swiginit(self, _openstudiomodelresources.new_CurveLinearVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveLinearVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveLinearVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveLinearVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveLinearVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveLinearVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveLinearVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveLinearVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveLinearVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveLinearVector

# Register CurveLinearVector in _openstudiomodelresources:
_openstudiomodelresources.CurveLinearVector_swigregister(CurveLinearVector)
class OptionalCurveLinear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveLinear_swiginit(self, _openstudiomodelresources.new_OptionalCurveLinear(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveLinear_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveLinear___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveLinear___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveLinear_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveLinear_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveLinear_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveLinear_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveLinear_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveLinear_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveLinear

# Register OptionalCurveLinear in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveLinear_swigregister(OptionalCurveLinear)
class CurveQuadLinearVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveQuadLinearVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveQuadLinearVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveQuadLinearVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveQuadLinearVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveQuadLinearVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveQuadLinearVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveQuadLinearVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveQuadLinearVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveQuadLinearVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveQuadLinearVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveQuadLinearVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveQuadLinearVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveQuadLinearVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveQuadLinearVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveQuadLinearVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveQuadLinearVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveQuadLinearVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveQuadLinearVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveQuadLinearVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveQuadLinearVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveQuadLinearVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveQuadLinearVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveQuadLinearVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveQuadLinearVector_swiginit(self, _openstudiomodelresources.new_CurveQuadLinearVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveQuadLinearVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveQuadLinearVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveQuadLinearVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveQuadLinearVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveQuadLinearVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveQuadLinearVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveQuadLinearVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveQuadLinearVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuadLinearVector

# Register CurveQuadLinearVector in _openstudiomodelresources:
_openstudiomodelresources.CurveQuadLinearVector_swigregister(CurveQuadLinearVector)
class OptionalCurveQuadLinear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveQuadLinear_swiginit(self, _openstudiomodelresources.new_OptionalCurveQuadLinear(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveQuadLinear_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveQuadLinear___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveQuadLinear___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveQuadLinear_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveQuadLinear_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveQuadLinear_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveQuadLinear_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveQuadLinear_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveQuadLinear_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveQuadLinear

# Register OptionalCurveQuadLinear in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveQuadLinear_swigregister(OptionalCurveQuadLinear)
class CurveQuintLinearVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveQuintLinearVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveQuintLinearVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveQuintLinearVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveQuintLinearVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveQuintLinearVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveQuintLinearVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveQuintLinearVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveQuintLinearVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveQuintLinearVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveQuintLinearVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveQuintLinearVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveQuintLinearVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveQuintLinearVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveQuintLinearVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveQuintLinearVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveQuintLinearVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveQuintLinearVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveQuintLinearVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveQuintLinearVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveQuintLinearVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveQuintLinearVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveQuintLinearVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveQuintLinearVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveQuintLinearVector_swiginit(self, _openstudiomodelresources.new_CurveQuintLinearVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveQuintLinearVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveQuintLinearVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveQuintLinearVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveQuintLinearVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveQuintLinearVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveQuintLinearVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveQuintLinearVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveQuintLinearVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuintLinearVector

# Register CurveQuintLinearVector in _openstudiomodelresources:
_openstudiomodelresources.CurveQuintLinearVector_swigregister(CurveQuintLinearVector)
class OptionalCurveQuintLinear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveQuintLinear_swiginit(self, _openstudiomodelresources.new_OptionalCurveQuintLinear(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveQuintLinear_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveQuintLinear___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveQuintLinear___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveQuintLinear_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveQuintLinear_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveQuintLinear_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveQuintLinear_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveQuintLinear_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveQuintLinear_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveQuintLinear

# Register OptionalCurveQuintLinear in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveQuintLinear_swigregister(OptionalCurveQuintLinear)
class CurveQuadraticVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveQuadraticVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveQuadraticVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveQuadraticVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveQuadraticVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveQuadraticVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveQuadraticVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveQuadraticVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveQuadraticVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveQuadraticVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveQuadraticVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveQuadraticVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveQuadraticVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveQuadraticVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveQuadraticVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveQuadraticVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveQuadraticVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveQuadraticVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveQuadraticVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveQuadraticVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveQuadraticVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveQuadraticVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveQuadraticVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveQuadraticVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveQuadraticVector_swiginit(self, _openstudiomodelresources.new_CurveQuadraticVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveQuadraticVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveQuadraticVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveQuadraticVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveQuadraticVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveQuadraticVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveQuadraticVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveQuadraticVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveQuadraticVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuadraticVector

# Register CurveQuadraticVector in _openstudiomodelresources:
_openstudiomodelresources.CurveQuadraticVector_swigregister(CurveQuadraticVector)
class OptionalCurveQuadratic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveQuadratic_swiginit(self, _openstudiomodelresources.new_OptionalCurveQuadratic(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveQuadratic_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveQuadratic___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveQuadratic___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveQuadratic_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveQuadratic_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveQuadratic_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveQuadratic_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveQuadratic_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveQuadratic_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveQuadratic

# Register OptionalCurveQuadratic in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveQuadratic_swigregister(OptionalCurveQuadratic)
class CurveQuadraticLinearVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveQuadraticLinearVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveQuadraticLinearVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveQuadraticLinearVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveQuadraticLinearVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveQuadraticLinearVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveQuadraticLinearVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveQuadraticLinearVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveQuadraticLinearVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveQuadraticLinearVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveQuadraticLinearVector_swiginit(self, _openstudiomodelresources.new_CurveQuadraticLinearVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveQuadraticLinearVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveQuadraticLinearVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveQuadraticLinearVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveQuadraticLinearVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveQuadraticLinearVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveQuadraticLinearVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuadraticLinearVector

# Register CurveQuadraticLinearVector in _openstudiomodelresources:
_openstudiomodelresources.CurveQuadraticLinearVector_swigregister(CurveQuadraticLinearVector)
class OptionalCurveQuadraticLinear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveQuadraticLinear_swiginit(self, _openstudiomodelresources.new_OptionalCurveQuadraticLinear(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveQuadraticLinear___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveQuadraticLinear___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveQuadraticLinear_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveQuadraticLinear

# Register OptionalCurveQuadraticLinear in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveQuadraticLinear_swigregister(OptionalCurveQuadraticLinear)
class CurveQuarticVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveQuarticVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveQuarticVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveQuarticVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveQuarticVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveQuarticVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveQuarticVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveQuarticVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveQuarticVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveQuarticVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveQuarticVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveQuarticVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveQuarticVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveQuarticVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveQuarticVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveQuarticVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveQuarticVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveQuarticVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveQuarticVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveQuarticVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveQuarticVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveQuarticVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveQuarticVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveQuarticVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveQuarticVector_swiginit(self, _openstudiomodelresources.new_CurveQuarticVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveQuarticVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveQuarticVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveQuarticVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveQuarticVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveQuarticVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveQuarticVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveQuarticVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveQuarticVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuarticVector

# Register CurveQuarticVector in _openstudiomodelresources:
_openstudiomodelresources.CurveQuarticVector_swigregister(CurveQuarticVector)
class OptionalCurveQuartic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveQuartic_swiginit(self, _openstudiomodelresources.new_OptionalCurveQuartic(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveQuartic_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveQuartic___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveQuartic___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveQuartic_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveQuartic_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveQuartic_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveQuartic_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveQuartic_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveQuartic_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveQuartic

# Register OptionalCurveQuartic in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveQuartic_swigregister(OptionalCurveQuartic)
class CurveRectangularHyperbola1Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveRectangularHyperbola1Vector_swiginit(self, _openstudiomodelresources.new_CurveRectangularHyperbola1Vector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1Vector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveRectangularHyperbola1Vector

# Register CurveRectangularHyperbola1Vector in _openstudiomodelresources:
_openstudiomodelresources.CurveRectangularHyperbola1Vector_swigregister(CurveRectangularHyperbola1Vector)
class OptionalCurveRectangularHyperbola1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveRectangularHyperbola1_swiginit(self, _openstudiomodelresources.new_OptionalCurveRectangularHyperbola1(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola1_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveRectangularHyperbola1

# Register OptionalCurveRectangularHyperbola1 in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveRectangularHyperbola1_swigregister(OptionalCurveRectangularHyperbola1)
class CurveRectangularHyperbola2Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveRectangularHyperbola2Vector_swiginit(self, _openstudiomodelresources.new_CurveRectangularHyperbola2Vector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2Vector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveRectangularHyperbola2Vector

# Register CurveRectangularHyperbola2Vector in _openstudiomodelresources:
_openstudiomodelresources.CurveRectangularHyperbola2Vector_swigregister(CurveRectangularHyperbola2Vector)
class OptionalCurveRectangularHyperbola2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveRectangularHyperbola2_swiginit(self, _openstudiomodelresources.new_OptionalCurveRectangularHyperbola2(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveRectangularHyperbola2_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveRectangularHyperbola2

# Register OptionalCurveRectangularHyperbola2 in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveRectangularHyperbola2_swigregister(OptionalCurveRectangularHyperbola2)
class CurveSigmoidVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveSigmoidVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveSigmoidVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveSigmoidVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveSigmoidVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveSigmoidVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveSigmoidVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveSigmoidVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveSigmoidVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveSigmoidVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveSigmoidVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveSigmoidVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveSigmoidVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveSigmoidVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveSigmoidVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveSigmoidVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveSigmoidVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveSigmoidVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveSigmoidVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveSigmoidVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveSigmoidVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveSigmoidVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveSigmoidVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveSigmoidVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveSigmoidVector_swiginit(self, _openstudiomodelresources.new_CurveSigmoidVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveSigmoidVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveSigmoidVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveSigmoidVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveSigmoidVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveSigmoidVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveSigmoidVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveSigmoidVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveSigmoidVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveSigmoidVector

# Register CurveSigmoidVector in _openstudiomodelresources:
_openstudiomodelresources.CurveSigmoidVector_swigregister(CurveSigmoidVector)
class OptionalCurveSigmoid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveSigmoid_swiginit(self, _openstudiomodelresources.new_OptionalCurveSigmoid(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveSigmoid_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveSigmoid___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveSigmoid___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveSigmoid_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveSigmoid_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveSigmoid_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveSigmoid_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveSigmoid_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveSigmoid_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveSigmoid

# Register OptionalCurveSigmoid in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveSigmoid_swigregister(OptionalCurveSigmoid)
class CurveTriquadraticVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CurveTriquadraticVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CurveTriquadraticVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CurveTriquadraticVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CurveTriquadraticVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CurveTriquadraticVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CurveTriquadraticVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CurveTriquadraticVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CurveTriquadraticVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CurveTriquadraticVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CurveTriquadraticVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CurveTriquadraticVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CurveTriquadraticVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CurveTriquadraticVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CurveTriquadraticVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CurveTriquadraticVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CurveTriquadraticVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CurveTriquadraticVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CurveTriquadraticVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CurveTriquadraticVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CurveTriquadraticVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CurveTriquadraticVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CurveTriquadraticVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CurveTriquadraticVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CurveTriquadraticVector_swiginit(self, _openstudiomodelresources.new_CurveTriquadraticVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CurveTriquadraticVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CurveTriquadraticVector_front(self)

    def back(self):
        return _openstudiomodelresources.CurveTriquadraticVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CurveTriquadraticVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CurveTriquadraticVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CurveTriquadraticVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CurveTriquadraticVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CurveTriquadraticVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CurveTriquadraticVector

# Register CurveTriquadraticVector in _openstudiomodelresources:
_openstudiomodelresources.CurveTriquadraticVector_swigregister(CurveTriquadraticVector)
class OptionalCurveTriquadratic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCurveTriquadratic_swiginit(self, _openstudiomodelresources.new_OptionalCurveTriquadratic(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCurveTriquadratic_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCurveTriquadratic___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCurveTriquadratic___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCurveTriquadratic_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCurveTriquadratic_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCurveTriquadratic_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCurveTriquadratic_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCurveTriquadratic_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCurveTriquadratic_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCurveTriquadratic

# Register OptionalCurveTriquadratic in _openstudiomodelresources:
_openstudiomodelresources.OptionalCurveTriquadratic_swigregister(OptionalCurveTriquadratic)
class TableMultiVariableLookupPointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_empty(self)

    def size(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_begin(self)

    def end(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.TableMultiVariableLookupPointVector_swiginit(self, _openstudiomodelresources.new_TableMultiVariableLookupPointVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_front(self)

    def back(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.TableMultiVariableLookupPointVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_TableMultiVariableLookupPointVector

# Register TableMultiVariableLookupPointVector in _openstudiomodelresources:
_openstudiomodelresources.TableMultiVariableLookupPointVector_swigregister(TableMultiVariableLookupPointVector)
class OptionalTableMultiVariableLookupPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_swiginit(self, _openstudiomodelresources.new_OptionalTableMultiVariableLookupPoint(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalTableMultiVariableLookupPoint_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalTableMultiVariableLookupPoint

# Register OptionalTableMultiVariableLookupPoint in _openstudiomodelresources:
_openstudiomodelresources.OptionalTableMultiVariableLookupPoint_swigregister(OptionalTableMultiVariableLookupPoint)
class TableMultiVariableLookupVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.TableMultiVariableLookupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.TableMultiVariableLookupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.TableMultiVariableLookupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.TableMultiVariableLookupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.TableMultiVariableLookupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.TableMultiVariableLookupVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.TableMultiVariableLookupVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector_empty(self)

    def size(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.TableMultiVariableLookupVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector_begin(self)

    def end(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.TableMultiVariableLookupVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.TableMultiVariableLookupVector_swiginit(self, _openstudiomodelresources.new_TableMultiVariableLookupVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.TableMultiVariableLookupVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector_front(self)

    def back(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.TableMultiVariableLookupVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.TableMultiVariableLookupVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.TableMultiVariableLookupVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.TableMultiVariableLookupVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.TableMultiVariableLookupVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_TableMultiVariableLookupVector

# Register TableMultiVariableLookupVector in _openstudiomodelresources:
_openstudiomodelresources.TableMultiVariableLookupVector_swigregister(TableMultiVariableLookupVector)
class OptionalTableMultiVariableLookup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalTableMultiVariableLookup_swiginit(self, _openstudiomodelresources.new_OptionalTableMultiVariableLookup(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalTableMultiVariableLookup___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalTableMultiVariableLookup___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalTableMultiVariableLookup_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalTableMultiVariableLookup

# Register OptionalTableMultiVariableLookup in _openstudiomodelresources:
_openstudiomodelresources.OptionalTableMultiVariableLookup_swigregister(OptionalTableMultiVariableLookup)
class TableLookupVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.TableLookupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.TableLookupVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.TableLookupVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.TableLookupVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.TableLookupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.TableLookupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.TableLookupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.TableLookupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.TableLookupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.TableLookupVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.TableLookupVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.TableLookupVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.TableLookupVector_empty(self)

    def size(self):
        return _openstudiomodelresources.TableLookupVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.TableLookupVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.TableLookupVector_begin(self)

    def end(self):
        return _openstudiomodelresources.TableLookupVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.TableLookupVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.TableLookupVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.TableLookupVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.TableLookupVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.TableLookupVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.TableLookupVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.TableLookupVector_swiginit(self, _openstudiomodelresources.new_TableLookupVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.TableLookupVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.TableLookupVector_front(self)

    def back(self):
        return _openstudiomodelresources.TableLookupVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.TableLookupVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.TableLookupVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.TableLookupVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.TableLookupVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.TableLookupVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_TableLookupVector

# Register TableLookupVector in _openstudiomodelresources:
_openstudiomodelresources.TableLookupVector_swigregister(TableLookupVector)
class OptionalTableLookup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalTableLookup_swiginit(self, _openstudiomodelresources.new_OptionalTableLookup(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalTableLookup_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalTableLookup___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalTableLookup___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalTableLookup_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalTableLookup_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalTableLookup_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalTableLookup_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalTableLookup_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalTableLookup_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalTableLookup

# Register OptionalTableLookup in _openstudiomodelresources:
_openstudiomodelresources.OptionalTableLookup_swigregister(OptionalTableLookup)
class TableIndependentVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.TableIndependentVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.TableIndependentVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.TableIndependentVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.TableIndependentVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.TableIndependentVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.TableIndependentVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.TableIndependentVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.TableIndependentVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.TableIndependentVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.TableIndependentVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.TableIndependentVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.TableIndependentVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.TableIndependentVariableVector_empty(self)

    def size(self):
        return _openstudiomodelresources.TableIndependentVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.TableIndependentVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.TableIndependentVariableVector_begin(self)

    def end(self):
        return _openstudiomodelresources.TableIndependentVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.TableIndependentVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.TableIndependentVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.TableIndependentVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.TableIndependentVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.TableIndependentVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.TableIndependentVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.TableIndependentVariableVector_swiginit(self, _openstudiomodelresources.new_TableIndependentVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.TableIndependentVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.TableIndependentVariableVector_front(self)

    def back(self):
        return _openstudiomodelresources.TableIndependentVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.TableIndependentVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.TableIndependentVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.TableIndependentVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.TableIndependentVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.TableIndependentVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_TableIndependentVariableVector

# Register TableIndependentVariableVector in _openstudiomodelresources:
_openstudiomodelresources.TableIndependentVariableVector_swigregister(TableIndependentVariableVector)
class OptionalTableIndependentVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalTableIndependentVariable_swiginit(self, _openstudiomodelresources.new_OptionalTableIndependentVariable(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalTableIndependentVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalTableIndependentVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalTableIndependentVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalTableIndependentVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalTableIndependentVariable_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalTableIndependentVariable_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalTableIndependentVariable_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalTableIndependentVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalTableIndependentVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalTableIndependentVariable

# Register OptionalTableIndependentVariable in _openstudiomodelresources:
_openstudiomodelresources.OptionalTableIndependentVariable_swigregister(OptionalTableIndependentVariable)
class SpaceLoadDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.SpaceLoadDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.SpaceLoadDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.SpaceLoadDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.SpaceLoadDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.SpaceLoadDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.SpaceLoadDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.SpaceLoadDefinitionVector_swiginit(self, _openstudiomodelresources.new_SpaceLoadDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.SpaceLoadDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_SpaceLoadDefinitionVector

# Register SpaceLoadDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.SpaceLoadDefinitionVector_swigregister(SpaceLoadDefinitionVector)
class OptionalSpaceLoadDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalSpaceLoadDefinition_swiginit(self, _openstudiomodelresources.new_OptionalSpaceLoadDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalSpaceLoadDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalSpaceLoadDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalSpaceLoadDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalSpaceLoadDefinition

# Register OptionalSpaceLoadDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalSpaceLoadDefinition_swigregister(OptionalSpaceLoadDefinition)
class PeopleDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.PeopleDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.PeopleDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.PeopleDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.PeopleDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.PeopleDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.PeopleDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.PeopleDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.PeopleDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.PeopleDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.PeopleDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.PeopleDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.PeopleDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.PeopleDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.PeopleDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.PeopleDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.PeopleDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.PeopleDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.PeopleDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.PeopleDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.PeopleDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.PeopleDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.PeopleDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.PeopleDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.PeopleDefinitionVector_swiginit(self, _openstudiomodelresources.new_PeopleDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.PeopleDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.PeopleDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.PeopleDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.PeopleDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.PeopleDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.PeopleDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.PeopleDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.PeopleDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_PeopleDefinitionVector

# Register PeopleDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.PeopleDefinitionVector_swigregister(PeopleDefinitionVector)
class OptionalPeopleDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalPeopleDefinition_swiginit(self, _openstudiomodelresources.new_OptionalPeopleDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalPeopleDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalPeopleDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalPeopleDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalPeopleDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalPeopleDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalPeopleDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalPeopleDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalPeopleDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalPeopleDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalPeopleDefinition

# Register OptionalPeopleDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalPeopleDefinition_swigregister(OptionalPeopleDefinition)
class LightsDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.LightsDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.LightsDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.LightsDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.LightsDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.LightsDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.LightsDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.LightsDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.LightsDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.LightsDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.LightsDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.LightsDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.LightsDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.LightsDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.LightsDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.LightsDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.LightsDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.LightsDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.LightsDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.LightsDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.LightsDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.LightsDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.LightsDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.LightsDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.LightsDefinitionVector_swiginit(self, _openstudiomodelresources.new_LightsDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.LightsDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.LightsDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.LightsDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.LightsDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.LightsDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.LightsDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.LightsDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.LightsDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_LightsDefinitionVector

# Register LightsDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.LightsDefinitionVector_swigregister(LightsDefinitionVector)
class OptionalLightsDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalLightsDefinition_swiginit(self, _openstudiomodelresources.new_OptionalLightsDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalLightsDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalLightsDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalLightsDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalLightsDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalLightsDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalLightsDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalLightsDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalLightsDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalLightsDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalLightsDefinition

# Register OptionalLightsDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalLightsDefinition_swigregister(OptionalLightsDefinition)
class LuminaireDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.LuminaireDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.LuminaireDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.LuminaireDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.LuminaireDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.LuminaireDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.LuminaireDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.LuminaireDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.LuminaireDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.LuminaireDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.LuminaireDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.LuminaireDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.LuminaireDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.LuminaireDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.LuminaireDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.LuminaireDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.LuminaireDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.LuminaireDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.LuminaireDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.LuminaireDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.LuminaireDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.LuminaireDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.LuminaireDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.LuminaireDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.LuminaireDefinitionVector_swiginit(self, _openstudiomodelresources.new_LuminaireDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.LuminaireDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.LuminaireDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.LuminaireDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.LuminaireDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.LuminaireDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.LuminaireDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.LuminaireDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.LuminaireDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_LuminaireDefinitionVector

# Register LuminaireDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.LuminaireDefinitionVector_swigregister(LuminaireDefinitionVector)
class OptionalLuminaireDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalLuminaireDefinition_swiginit(self, _openstudiomodelresources.new_OptionalLuminaireDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalLuminaireDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalLuminaireDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalLuminaireDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalLuminaireDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalLuminaireDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalLuminaireDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalLuminaireDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalLuminaireDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalLuminaireDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalLuminaireDefinition

# Register OptionalLuminaireDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalLuminaireDefinition_swigregister(OptionalLuminaireDefinition)
class ElectricEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ElectricEquipmentDefinitionVector_swiginit(self, _openstudiomodelresources.new_ElectricEquipmentDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ElectricEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ElectricEquipmentDefinitionVector

# Register ElectricEquipmentDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.ElectricEquipmentDefinitionVector_swigregister(ElectricEquipmentDefinitionVector)
class OptionalElectricEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalElectricEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OptionalElectricEquipmentDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalElectricEquipmentDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalElectricEquipmentDefinition

# Register OptionalElectricEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalElectricEquipmentDefinition_swigregister(OptionalElectricEquipmentDefinition)
class ElectricEquipmentITEAirCooledDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_swiginit(self, _openstudiomodelresources.new_ElectricEquipmentITEAirCooledDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ElectricEquipmentITEAirCooledDefinitionVector

# Register ElectricEquipmentITEAirCooledDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.ElectricEquipmentITEAirCooledDefinitionVector_swigregister(ElectricEquipmentITEAirCooledDefinitionVector)
class OptionalElectricEquipmentITEAirCooledDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_swiginit(self, _openstudiomodelresources.new_OptionalElectricEquipmentITEAirCooledDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalElectricEquipmentITEAirCooledDefinition

# Register OptionalElectricEquipmentITEAirCooledDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalElectricEquipmentITEAirCooledDefinition_swigregister(OptionalElectricEquipmentITEAirCooledDefinition)
class GasEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.GasEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.GasEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.GasEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.GasEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.GasEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.GasEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.GasEquipmentDefinitionVector_swiginit(self, _openstudiomodelresources.new_GasEquipmentDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.GasEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_GasEquipmentDefinitionVector

# Register GasEquipmentDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.GasEquipmentDefinitionVector_swigregister(GasEquipmentDefinitionVector)
class OptionalGasEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalGasEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OptionalGasEquipmentDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalGasEquipmentDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalGasEquipmentDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalGasEquipmentDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalGasEquipmentDefinition

# Register OptionalGasEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalGasEquipmentDefinition_swigregister(OptionalGasEquipmentDefinition)
class HotWaterEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.HotWaterEquipmentDefinitionVector_swiginit(self, _openstudiomodelresources.new_HotWaterEquipmentDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_HotWaterEquipmentDefinitionVector

# Register HotWaterEquipmentDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.HotWaterEquipmentDefinitionVector_swigregister(HotWaterEquipmentDefinitionVector)
class OptionalHotWaterEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OptionalHotWaterEquipmentDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalHotWaterEquipmentDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalHotWaterEquipmentDefinition

# Register OptionalHotWaterEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalHotWaterEquipmentDefinition_swigregister(OptionalHotWaterEquipmentDefinition)
class SteamEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.SteamEquipmentDefinitionVector_swiginit(self, _openstudiomodelresources.new_SteamEquipmentDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.SteamEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_SteamEquipmentDefinitionVector

# Register SteamEquipmentDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.SteamEquipmentDefinitionVector_swigregister(SteamEquipmentDefinitionVector)
class OptionalSteamEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalSteamEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OptionalSteamEquipmentDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalSteamEquipmentDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalSteamEquipmentDefinition

# Register OptionalSteamEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalSteamEquipmentDefinition_swigregister(OptionalSteamEquipmentDefinition)
class OtherEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.OtherEquipmentDefinitionVector_swiginit(self, _openstudiomodelresources.new_OtherEquipmentDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.OtherEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_OtherEquipmentDefinitionVector

# Register OtherEquipmentDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.OtherEquipmentDefinitionVector_swigregister(OtherEquipmentDefinitionVector)
class OptionalOtherEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalOtherEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OptionalOtherEquipmentDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalOtherEquipmentDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalOtherEquipmentDefinition

# Register OptionalOtherEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalOtherEquipmentDefinition_swigregister(OptionalOtherEquipmentDefinition)
class InternalMassDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.InternalMassDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.InternalMassDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.InternalMassDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.InternalMassDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.InternalMassDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.InternalMassDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.InternalMassDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.InternalMassDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.InternalMassDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.InternalMassDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.InternalMassDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.InternalMassDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.InternalMassDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.InternalMassDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.InternalMassDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.InternalMassDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.InternalMassDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.InternalMassDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.InternalMassDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.InternalMassDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.InternalMassDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.InternalMassDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.InternalMassDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.InternalMassDefinitionVector_swiginit(self, _openstudiomodelresources.new_InternalMassDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.InternalMassDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.InternalMassDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.InternalMassDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.InternalMassDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.InternalMassDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.InternalMassDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.InternalMassDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.InternalMassDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_InternalMassDefinitionVector

# Register InternalMassDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.InternalMassDefinitionVector_swigregister(InternalMassDefinitionVector)
class OptionalInternalMassDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalInternalMassDefinition_swiginit(self, _openstudiomodelresources.new_OptionalInternalMassDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalInternalMassDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalInternalMassDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalInternalMassDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalInternalMassDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalInternalMassDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalInternalMassDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalInternalMassDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalInternalMassDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalInternalMassDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalInternalMassDefinition

# Register OptionalInternalMassDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalInternalMassDefinition_swigregister(OptionalInternalMassDefinition)
class ExteriorLoadDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ExteriorLoadDefinitionVector_swiginit(self, _openstudiomodelresources.new_ExteriorLoadDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ExteriorLoadDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorLoadDefinitionVector

# Register ExteriorLoadDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.ExteriorLoadDefinitionVector_swigregister(ExteriorLoadDefinitionVector)
class OptionalExteriorLoadDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalExteriorLoadDefinition_swiginit(self, _openstudiomodelresources.new_OptionalExteriorLoadDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalExteriorLoadDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalExteriorLoadDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalExteriorLoadDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExteriorLoadDefinition

# Register OptionalExteriorLoadDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalExteriorLoadDefinition_swigregister(OptionalExteriorLoadDefinition)
class ExteriorLightsDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ExteriorLightsDefinitionVector_swiginit(self, _openstudiomodelresources.new_ExteriorLightsDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ExteriorLightsDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorLightsDefinitionVector

# Register ExteriorLightsDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.ExteriorLightsDefinitionVector_swigregister(ExteriorLightsDefinitionVector)
class OptionalExteriorLightsDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalExteriorLightsDefinition_swiginit(self, _openstudiomodelresources.new_OptionalExteriorLightsDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalExteriorLightsDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalExteriorLightsDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalExteriorLightsDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExteriorLightsDefinition

# Register OptionalExteriorLightsDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalExteriorLightsDefinition_swigregister(OptionalExteriorLightsDefinition)
class ExteriorFuelEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_swiginit(self, _openstudiomodelresources.new_ExteriorFuelEquipmentDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorFuelEquipmentDefinitionVector

# Register ExteriorFuelEquipmentDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.ExteriorFuelEquipmentDefinitionVector_swigregister(ExteriorFuelEquipmentDefinitionVector)
class OptionalExteriorFuelEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OptionalExteriorFuelEquipmentDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExteriorFuelEquipmentDefinition

# Register OptionalExteriorFuelEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalExteriorFuelEquipmentDefinition_swigregister(OptionalExteriorFuelEquipmentDefinition)
class ExteriorWaterEquipmentDefinitionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_empty(self)

    def size(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_begin(self)

    def end(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_swiginit(self, _openstudiomodelresources.new_ExteriorWaterEquipmentDefinitionVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_front(self)

    def back(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorWaterEquipmentDefinitionVector

# Register ExteriorWaterEquipmentDefinitionVector in _openstudiomodelresources:
_openstudiomodelresources.ExteriorWaterEquipmentDefinitionVector_swigregister(ExteriorWaterEquipmentDefinitionVector)
class OptionalExteriorWaterEquipmentDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OptionalExteriorWaterEquipmentDefinition(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalExteriorWaterEquipmentDefinition

# Register OptionalExteriorWaterEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OptionalExteriorWaterEquipmentDefinition_swigregister(OptionalExteriorWaterEquipmentDefinition)
class RenderingColorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.RenderingColorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.RenderingColorVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.RenderingColorVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.RenderingColorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.RenderingColorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.RenderingColorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.RenderingColorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.RenderingColorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.RenderingColorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.RenderingColorVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.RenderingColorVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.RenderingColorVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.RenderingColorVector_empty(self)

    def size(self):
        return _openstudiomodelresources.RenderingColorVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.RenderingColorVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.RenderingColorVector_begin(self)

    def end(self):
        return _openstudiomodelresources.RenderingColorVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.RenderingColorVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.RenderingColorVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.RenderingColorVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.RenderingColorVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.RenderingColorVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.RenderingColorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.RenderingColorVector_swiginit(self, _openstudiomodelresources.new_RenderingColorVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.RenderingColorVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.RenderingColorVector_front(self)

    def back(self):
        return _openstudiomodelresources.RenderingColorVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.RenderingColorVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.RenderingColorVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.RenderingColorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.RenderingColorVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.RenderingColorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_RenderingColorVector

# Register RenderingColorVector in _openstudiomodelresources:
_openstudiomodelresources.RenderingColorVector_swigregister(RenderingColorVector)
class OptionalRenderingColor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalRenderingColor_swiginit(self, _openstudiomodelresources.new_OptionalRenderingColor(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalRenderingColor_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalRenderingColor___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalRenderingColor___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalRenderingColor_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalRenderingColor_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalRenderingColor_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalRenderingColor_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalRenderingColor_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalRenderingColor_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalRenderingColor

# Register OptionalRenderingColor in _openstudiomodelresources:
_openstudiomodelresources.OptionalRenderingColor_swigregister(OptionalRenderingColor)
class DesignSpecificationOutdoorAirVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_empty(self)

    def size(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_begin(self)

    def end(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.DesignSpecificationOutdoorAirVector_swiginit(self, _openstudiomodelresources.new_DesignSpecificationOutdoorAirVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_front(self)

    def back(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAirVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DesignSpecificationOutdoorAirVector

# Register DesignSpecificationOutdoorAirVector in _openstudiomodelresources:
_openstudiomodelresources.DesignSpecificationOutdoorAirVector_swigregister(DesignSpecificationOutdoorAirVector)
class OptionalDesignSpecificationOutdoorAir(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_swiginit(self, _openstudiomodelresources.new_OptionalDesignSpecificationOutdoorAir(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalDesignSpecificationOutdoorAir

# Register OptionalDesignSpecificationOutdoorAir in _openstudiomodelresources:
_openstudiomodelresources.OptionalDesignSpecificationOutdoorAir_swigregister(OptionalDesignSpecificationOutdoorAir)
class CoilCoolingDXCurveFitPerformanceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_swiginit(self, _openstudiomodelresources.new_CoilCoolingDXCurveFitPerformanceVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_front(self)

    def back(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CoilCoolingDXCurveFitPerformanceVector

# Register CoilCoolingDXCurveFitPerformanceVector in _openstudiomodelresources:
_openstudiomodelresources.CoilCoolingDXCurveFitPerformanceVector_swigregister(CoilCoolingDXCurveFitPerformanceVector)
class OptionalCoilCoolingDXCurveFitPerformance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_swiginit(self, _openstudiomodelresources.new_OptionalCoilCoolingDXCurveFitPerformance(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCoilCoolingDXCurveFitPerformance

# Register OptionalCoilCoolingDXCurveFitPerformance in _openstudiomodelresources:
_openstudiomodelresources.OptionalCoilCoolingDXCurveFitPerformance_swigregister(OptionalCoilCoolingDXCurveFitPerformance)
class CoilCoolingDXCurveFitOperatingModeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_swiginit(self, _openstudiomodelresources.new_CoilCoolingDXCurveFitOperatingModeVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_front(self)

    def back(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CoilCoolingDXCurveFitOperatingModeVector

# Register CoilCoolingDXCurveFitOperatingModeVector in _openstudiomodelresources:
_openstudiomodelresources.CoilCoolingDXCurveFitOperatingModeVector_swigregister(CoilCoolingDXCurveFitOperatingModeVector)
class OptionalCoilCoolingDXCurveFitOperatingMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_swiginit(self, _openstudiomodelresources.new_OptionalCoilCoolingDXCurveFitOperatingMode(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCoilCoolingDXCurveFitOperatingMode

# Register OptionalCoilCoolingDXCurveFitOperatingMode in _openstudiomodelresources:
_openstudiomodelresources.OptionalCoilCoolingDXCurveFitOperatingMode_swigregister(OptionalCoilCoolingDXCurveFitOperatingMode)
class CoilCoolingDXCurveFitSpeedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_empty(self)

    def size(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_begin(self)

    def end(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_rend(self)

    def clear(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_swiginit(self, _openstudiomodelresources.new_CoilCoolingDXCurveFitSpeedVector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_front(self)

    def back(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_CoilCoolingDXCurveFitSpeedVector

# Register CoilCoolingDXCurveFitSpeedVector in _openstudiomodelresources:
_openstudiomodelresources.CoilCoolingDXCurveFitSpeedVector_swigregister(CoilCoolingDXCurveFitSpeedVector)
class OptionalCoilCoolingDXCurveFitSpeed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_swiginit(self, _openstudiomodelresources.new_OptionalCoilCoolingDXCurveFitSpeed(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalCoilCoolingDXCurveFitSpeed

# Register OptionalCoilCoolingDXCurveFitSpeed in _openstudiomodelresources:
_openstudiomodelresources.OptionalCoilCoolingDXCurveFitSpeed_swigregister(OptionalCoilCoolingDXCurveFitSpeed)
class HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector___bool__(self)

    def __len__(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_pop(self)

    def append(self, x):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_append(self, x)

    def empty(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_empty(self)

    def size(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_size(self)

    def swap(self, v):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_swap(self, v)

    def begin(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_begin(self)

    def end(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_end(self)

    def rbegin(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_rbegin(self)

    def rend(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_rend(self)

    def clear(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_clear(self)

    def get_allocator(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_swiginit(self, _openstudiomodelresources.new_HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector(*args))

    def push_back(self, x):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_push_back(self, x)

    def front(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_front(self)

    def back(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_back(self)

    def assign(self, n, x):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_capacity(self)
    __swig_destroy__ = _openstudiomodelresources.delete_HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector

# Register HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector in _openstudiomodelresources:
_openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector_swigregister(HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector)
class OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1_swiginit(self, _openstudiomodelresources.new_OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1(*args))

    def reset(self):
        return _openstudiomodelresources.OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1_reset(self)

    def __nonzero__(self):
        return _openstudiomodelresources.OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelresources.OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1___ref__(self)

    def is_initialized(self):
        return _openstudiomodelresources.OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1_is_initialized(self)

    def isNull(self):
        return _openstudiomodelresources.OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1_isNull(self)

    def empty(self):
        return _openstudiomodelresources.OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1_empty(self)

    def get(self):
        return _openstudiomodelresources.OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1_get(self)

    def set(self, t):
        return _openstudiomodelresources.OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelresources.OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelresources.delete_OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1

# Register OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1 in _openstudiomodelresources:
_openstudiomodelresources.OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1_swigregister(OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1)
class ScheduleInterval(openstudiomodelcore.Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleInterval

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleInterval_swiginit(self, _openstudiomodelresources.new_ScheduleInterval(*args))

    @staticmethod
    def fromTimeSeries(timeSeries, model):
        return _openstudiomodelresources.ScheduleInterval_fromTimeSeries(timeSeries, model)

    def timeSeries(self):
        return _openstudiomodelresources.ScheduleInterval_timeSeries(self)

    def setTimeSeries(self, timeSeries):
        return _openstudiomodelresources.ScheduleInterval_setTimeSeries(self, timeSeries)

# Register ScheduleInterval in _openstudiomodelresources:
_openstudiomodelresources.ScheduleInterval_swigregister(ScheduleInterval)

def toScheduleInterval(idfObject):
    return _openstudiomodelresources.toScheduleInterval(idfObject)

def getScheduleInterval(t_model, t_handle):
    return _openstudiomodelresources.getScheduleInterval(t_model, t_handle)

def getScheduleIntervals(t_model):
    return _openstudiomodelresources.getScheduleIntervals(t_model)

def getScheduleIntervalByName(t_model, t_name):
    return _openstudiomodelresources.getScheduleIntervalByName(t_model, t_name)

def getScheduleIntervalsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getScheduleIntervalsByName(t_model, t_name, t_exactMatch)

def _to_ScheduleInterval(self) -> OptionalScheduleInterval:
    """Try to cast the ModelObject to a ScheduleInterval.

    :return: An Optional ScheduleInterval.
    """
    return toScheduleInterval(self)
openstudioutilitiesidf.IdfObject.to_ScheduleInterval = _to_ScheduleInterval

def _getScheduleInterval(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalScheduleInterval:
    """Try to get an object of type ScheduleInterval referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ScheduleInterval.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getScheduleInterval(self, t_handle)
Model.getScheduleInterval = _getScheduleInterval

def _getScheduleIntervals(self) -> ScheduleIntervalVector:
    """Get a vector of all objects of type ScheduleInterval in the model.

    :return: A vector of ScheduleInterval.
    """
    return getScheduleIntervals(self)
Model.getScheduleIntervals = _getScheduleIntervals

def _getScheduleIntervalByName(self, t_name: str) -> OptionalScheduleInterval:
    """Try to get an object of type ScheduleInterval that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ScheduleInterval.
    """
    return getScheduleIntervalByName(self, t_name)
Model.getScheduleIntervalByName = _getScheduleIntervalByName

def _getScheduleIntervalsByName(self, t_name: str, t_exactMatch: bool) -> ScheduleIntervalVector:
    """Returns all objects of type ScheduleInterval named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getScheduleIntervalsByName(self, t_name, t_exactMatch)
Model.getScheduleIntervalsByName = _getScheduleIntervalsByName

class ScheduleFile(ScheduleInterval):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleFile

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleFile_swiginit(self, _openstudiomodelresources.new_ScheduleFile(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ScheduleFile_iddObjectType()

    @staticmethod
    def minutesperItemValues():
        return _openstudiomodelresources.ScheduleFile_minutesperItemValues()

    def scheduleTypeLimits(self):
        return _openstudiomodelresources.ScheduleFile_scheduleTypeLimits(self)

    def externalFile(self):
        return _openstudiomodelresources.ScheduleFile_externalFile(self)

    def columnNumber(self):
        return _openstudiomodelresources.ScheduleFile_columnNumber(self)

    def rowstoSkipatTop(self):
        return _openstudiomodelresources.ScheduleFile_rowstoSkipatTop(self)

    def numberofHoursofData(self):
        return _openstudiomodelresources.ScheduleFile_numberofHoursofData(self)

    def isNumberofHoursofDataDefaulted(self):
        return _openstudiomodelresources.ScheduleFile_isNumberofHoursofDataDefaulted(self)

    def columnSeparator(self):
        return _openstudiomodelresources.ScheduleFile_columnSeparator(self)

    def isColumnSeparatorDefaulted(self):
        return _openstudiomodelresources.ScheduleFile_isColumnSeparatorDefaulted(self)

    def interpolatetoTimestep(self):
        return _openstudiomodelresources.ScheduleFile_interpolatetoTimestep(self)

    def isInterpolatetoTimestepDefaulted(self):
        return _openstudiomodelresources.ScheduleFile_isInterpolatetoTimestepDefaulted(self)

    def minutesperItem(self):
        return _openstudiomodelresources.ScheduleFile_minutesperItem(self)

    def isMinutesperItemDefaulted(self):
        return _openstudiomodelresources.ScheduleFile_isMinutesperItemDefaulted(self)

    def adjustScheduleforDaylightSavings(self):
        return _openstudiomodelresources.ScheduleFile_adjustScheduleforDaylightSavings(self)

    def isAdjustScheduleforDaylightSavingsDefaulted(self):
        return _openstudiomodelresources.ScheduleFile_isAdjustScheduleforDaylightSavingsDefaulted(self)

    def csvFile(self):
        return _openstudiomodelresources.ScheduleFile_csvFile(self)

    def translateFileWithRelativePath(self):
        return _openstudiomodelresources.ScheduleFile_translateFileWithRelativePath(self)

    def isTranslateFileWithRelativePathDefaulted(self):
        return _openstudiomodelresources.ScheduleFile_isTranslateFileWithRelativePathDefaulted(self)

    def setScheduleTypeLimits(self, scheduleTypeLimits):
        return _openstudiomodelresources.ScheduleFile_setScheduleTypeLimits(self, scheduleTypeLimits)

    def resetScheduleTypeLimits(self):
        return _openstudiomodelresources.ScheduleFile_resetScheduleTypeLimits(self)

    def setColumnNumber(self, columnNumber):
        return _openstudiomodelresources.ScheduleFile_setColumnNumber(self, columnNumber)

    def setRowstoSkipatTop(self, rowstoSkipatTop):
        return _openstudiomodelresources.ScheduleFile_setRowstoSkipatTop(self, rowstoSkipatTop)

    def setNumberofHoursofData(self, numberofHours):
        return _openstudiomodelresources.ScheduleFile_setNumberofHoursofData(self, numberofHours)

    def setColumnSeparator(self, columnSeparator):
        return _openstudiomodelresources.ScheduleFile_setColumnSeparator(self, columnSeparator)

    def resetColumnSeparator(self):
        return _openstudiomodelresources.ScheduleFile_resetColumnSeparator(self)

    def setInterpolatetoTimestep(self, interpolatetoTimestep):
        return _openstudiomodelresources.ScheduleFile_setInterpolatetoTimestep(self, interpolatetoTimestep)

    def resetInterpolatetoTimestep(self):
        return _openstudiomodelresources.ScheduleFile_resetInterpolatetoTimestep(self)

    def setMinutesperItem(self, *args):
        return _openstudiomodelresources.ScheduleFile_setMinutesperItem(self, *args)

    def resetMinutesperItem(self):
        return _openstudiomodelresources.ScheduleFile_resetMinutesperItem(self)

    def setAdjustScheduleforDaylightSavings(self, adjustScheduleforDaylightSavings):
        return _openstudiomodelresources.ScheduleFile_setAdjustScheduleforDaylightSavings(self, adjustScheduleforDaylightSavings)

    def resetAdjustScheduleforDaylightSavings(self):
        return _openstudiomodelresources.ScheduleFile_resetAdjustScheduleforDaylightSavings(self)

    def setTranslateFileWithRelativePath(self, translateFileWithRelativePath):
        return _openstudiomodelresources.ScheduleFile_setTranslateFileWithRelativePath(self, translateFileWithRelativePath)

    def resetTranslateFileWithRelativePath(self):
        return _openstudiomodelresources.ScheduleFile_resetTranslateFileWithRelativePath(self)

    def translatedFilePath(self):
        return _openstudiomodelresources.ScheduleFile_translatedFilePath(self)

# Register ScheduleFile in _openstudiomodelresources:
_openstudiomodelresources.ScheduleFile_swigregister(ScheduleFile)

def toScheduleFile(idfObject):
    return _openstudiomodelresources.toScheduleFile(idfObject)

def getScheduleFile(t_model, t_handle):
    return _openstudiomodelresources.getScheduleFile(t_model, t_handle)

def getScheduleFiles(t_model):
    return _openstudiomodelresources.getScheduleFiles(t_model)

def getScheduleFileByName(t_model, t_name):
    return _openstudiomodelresources.getScheduleFileByName(t_model, t_name)

def getScheduleFilesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getScheduleFilesByName(t_model, t_name, t_exactMatch)

def _to_ScheduleFile(self) -> OptionalScheduleFile:
    """Try to cast the ModelObject to a ScheduleFile.

    :return: An Optional ScheduleFile.
    """
    return toScheduleFile(self)
openstudioutilitiesidf.IdfObject.to_ScheduleFile = _to_ScheduleFile

def _getScheduleFile(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalScheduleFile:
    """Try to get an object of type ScheduleFile referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ScheduleFile.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getScheduleFile(self, t_handle)
Model.getScheduleFile = _getScheduleFile

def _getScheduleFiles(self) -> ScheduleFileVector:
    """Get a vector of all objects of type ScheduleFile in the model.

    :return: A vector of ScheduleFile.
    """
    return getScheduleFiles(self)
Model.getScheduleFiles = _getScheduleFiles

def _getScheduleFileByName(self, t_name: str) -> OptionalScheduleFile:
    """Try to get an object of type ScheduleFile that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ScheduleFile.
    """
    return getScheduleFileByName(self, t_name)
Model.getScheduleFileByName = _getScheduleFileByName

def _getScheduleFilesByName(self, t_name: str, t_exactMatch: bool) -> ScheduleFileVector:
    """Returns all objects of type ScheduleFile named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getScheduleFilesByName(self, t_name, t_exactMatch)
Model.getScheduleFilesByName = _getScheduleFilesByName

class PythonPluginInstance(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, externalfile, pluginClassName):
        _openstudiomodelresources.PythonPluginInstance_swiginit(self, _openstudiomodelresources.new_PythonPluginInstance(externalfile, pluginClassName))
    __swig_destroy__ = _openstudiomodelresources.delete_PythonPluginInstance

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.PythonPluginInstance_iddObjectType()

    def externalFile(self):
        return _openstudiomodelresources.PythonPluginInstance_externalFile(self)

    def runDuringWarmupDays(self):
        return _openstudiomodelresources.PythonPluginInstance_runDuringWarmupDays(self)

    def isRunDuringWarmupDaysDefaulted(self):
        return _openstudiomodelresources.PythonPluginInstance_isRunDuringWarmupDaysDefaulted(self)

    def pluginClassName(self):
        return _openstudiomodelresources.PythonPluginInstance_pluginClassName(self)

    def setRunDuringWarmupDays(self, runDuringWarmupDays):
        return _openstudiomodelresources.PythonPluginInstance_setRunDuringWarmupDays(self, runDuringWarmupDays)

    def resetRunDuringWarmupDays(self):
        return _openstudiomodelresources.PythonPluginInstance_resetRunDuringWarmupDays(self)

    def setPluginClassName(self, pluginClassName):
        return _openstudiomodelresources.PythonPluginInstance_setPluginClassName(self, pluginClassName)

    def findPluginClassNameInFile(self, pluginClassName):
        return _openstudiomodelresources.PythonPluginInstance_findPluginClassNameInFile(self, pluginClassName)

    def validPluginClassNamesInFile(self):
        return _openstudiomodelresources.PythonPluginInstance_validPluginClassNamesInFile(self)

# Register PythonPluginInstance in _openstudiomodelresources:
_openstudiomodelresources.PythonPluginInstance_swigregister(PythonPluginInstance)

def toPythonPluginInstance(idfObject):
    return _openstudiomodelresources.toPythonPluginInstance(idfObject)

def getPythonPluginInstance(t_model, t_handle):
    return _openstudiomodelresources.getPythonPluginInstance(t_model, t_handle)

def getPythonPluginInstances(t_model):
    return _openstudiomodelresources.getPythonPluginInstances(t_model)

def getPythonPluginInstanceByName(t_model, t_name):
    return _openstudiomodelresources.getPythonPluginInstanceByName(t_model, t_name)

def getPythonPluginInstancesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getPythonPluginInstancesByName(t_model, t_name, t_exactMatch)

def _to_PythonPluginInstance(self) -> OptionalPythonPluginInstance:
    """Try to cast the ModelObject to a PythonPluginInstance.

    :return: An Optional PythonPluginInstance.
    """
    return toPythonPluginInstance(self)
openstudioutilitiesidf.IdfObject.to_PythonPluginInstance = _to_PythonPluginInstance

def _getPythonPluginInstance(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPythonPluginInstance:
    """Try to get an object of type PythonPluginInstance referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PythonPluginInstance.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPythonPluginInstance(self, t_handle)
Model.getPythonPluginInstance = _getPythonPluginInstance

def _getPythonPluginInstances(self) -> PythonPluginInstanceVector:
    """Get a vector of all objects of type PythonPluginInstance in the model.

    :return: A vector of PythonPluginInstance.
    """
    return getPythonPluginInstances(self)
Model.getPythonPluginInstances = _getPythonPluginInstances

def _getPythonPluginInstanceByName(self, t_name: str) -> OptionalPythonPluginInstance:
    """Try to get an object of type PythonPluginInstance that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PythonPluginInstance.
    """
    return getPythonPluginInstanceByName(self, t_name)
Model.getPythonPluginInstanceByName = _getPythonPluginInstanceByName

def _getPythonPluginInstancesByName(self, t_name: str, t_exactMatch: bool) -> PythonPluginInstanceVector:
    """Returns all objects of type PythonPluginInstance named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPythonPluginInstancesByName(self, t_name, t_exactMatch)
Model.getPythonPluginInstancesByName = _getPythonPluginInstancesByName

class PythonPluginVariable(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model):
        _openstudiomodelresources.PythonPluginVariable_swiginit(self, _openstudiomodelresources.new_PythonPluginVariable(model))
    __swig_destroy__ = _openstudiomodelresources.delete_PythonPluginVariable

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.PythonPluginVariable_iddObjectType()

    def pythonPluginTrendVariables(self):
        return _openstudiomodelresources.PythonPluginVariable_pythonPluginTrendVariables(self)

    def pythonPluginOutputVariables(self):
        return _openstudiomodelresources.PythonPluginVariable_pythonPluginOutputVariables(self)

# Register PythonPluginVariable in _openstudiomodelresources:
_openstudiomodelresources.PythonPluginVariable_swigregister(PythonPluginVariable)

def toPythonPluginVariable(idfObject):
    return _openstudiomodelresources.toPythonPluginVariable(idfObject)

def getPythonPluginVariable(t_model, t_handle):
    return _openstudiomodelresources.getPythonPluginVariable(t_model, t_handle)

def getPythonPluginVariables(t_model):
    return _openstudiomodelresources.getPythonPluginVariables(t_model)

def getPythonPluginVariableByName(t_model, t_name):
    return _openstudiomodelresources.getPythonPluginVariableByName(t_model, t_name)

def getPythonPluginVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getPythonPluginVariablesByName(t_model, t_name, t_exactMatch)

def _to_PythonPluginVariable(self) -> OptionalPythonPluginVariable:
    """Try to cast the ModelObject to a PythonPluginVariable.

    :return: An Optional PythonPluginVariable.
    """
    return toPythonPluginVariable(self)
openstudioutilitiesidf.IdfObject.to_PythonPluginVariable = _to_PythonPluginVariable

def _getPythonPluginVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPythonPluginVariable:
    """Try to get an object of type PythonPluginVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PythonPluginVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPythonPluginVariable(self, t_handle)
Model.getPythonPluginVariable = _getPythonPluginVariable

def _getPythonPluginVariables(self) -> PythonPluginVariableVector:
    """Get a vector of all objects of type PythonPluginVariable in the model.

    :return: A vector of PythonPluginVariable.
    """
    return getPythonPluginVariables(self)
Model.getPythonPluginVariables = _getPythonPluginVariables

def _getPythonPluginVariableByName(self, t_name: str) -> OptionalPythonPluginVariable:
    """Try to get an object of type PythonPluginVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PythonPluginVariable.
    """
    return getPythonPluginVariableByName(self, t_name)
Model.getPythonPluginVariableByName = _getPythonPluginVariableByName

def _getPythonPluginVariablesByName(self, t_name: str, t_exactMatch: bool) -> PythonPluginVariableVector:
    """Returns all objects of type PythonPluginVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPythonPluginVariablesByName(self, t_name, t_exactMatch)
Model.getPythonPluginVariablesByName = _getPythonPluginVariablesByName

class PythonPluginTrendVariable(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pythonPluginVariable):
        _openstudiomodelresources.PythonPluginTrendVariable_swiginit(self, _openstudiomodelresources.new_PythonPluginTrendVariable(pythonPluginVariable))
    __swig_destroy__ = _openstudiomodelresources.delete_PythonPluginTrendVariable

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.PythonPluginTrendVariable_iddObjectType()

    def pythonPluginVariable(self):
        return _openstudiomodelresources.PythonPluginTrendVariable_pythonPluginVariable(self)

    def numberofTimestepstobeLogged(self):
        return _openstudiomodelresources.PythonPluginTrendVariable_numberofTimestepstobeLogged(self)

    def setPythonPluginVariable(self, pythonPluginVariable):
        return _openstudiomodelresources.PythonPluginTrendVariable_setPythonPluginVariable(self, pythonPluginVariable)

    def setNumberofTimestepstobeLogged(self, numberofTimestepstobeLogged):
        return _openstudiomodelresources.PythonPluginTrendVariable_setNumberofTimestepstobeLogged(self, numberofTimestepstobeLogged)

# Register PythonPluginTrendVariable in _openstudiomodelresources:
_openstudiomodelresources.PythonPluginTrendVariable_swigregister(PythonPluginTrendVariable)

def toPythonPluginTrendVariable(idfObject):
    return _openstudiomodelresources.toPythonPluginTrendVariable(idfObject)

def getPythonPluginTrendVariable(t_model, t_handle):
    return _openstudiomodelresources.getPythonPluginTrendVariable(t_model, t_handle)

def getPythonPluginTrendVariables(t_model):
    return _openstudiomodelresources.getPythonPluginTrendVariables(t_model)

def getPythonPluginTrendVariableByName(t_model, t_name):
    return _openstudiomodelresources.getPythonPluginTrendVariableByName(t_model, t_name)

def getPythonPluginTrendVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getPythonPluginTrendVariablesByName(t_model, t_name, t_exactMatch)

def _to_PythonPluginTrendVariable(self) -> OptionalPythonPluginTrendVariable:
    """Try to cast the ModelObject to a PythonPluginTrendVariable.

    :return: An Optional PythonPluginTrendVariable.
    """
    return toPythonPluginTrendVariable(self)
openstudioutilitiesidf.IdfObject.to_PythonPluginTrendVariable = _to_PythonPluginTrendVariable

def _getPythonPluginTrendVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPythonPluginTrendVariable:
    """Try to get an object of type PythonPluginTrendVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PythonPluginTrendVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPythonPluginTrendVariable(self, t_handle)
Model.getPythonPluginTrendVariable = _getPythonPluginTrendVariable

def _getPythonPluginTrendVariables(self) -> PythonPluginTrendVariableVector:
    """Get a vector of all objects of type PythonPluginTrendVariable in the model.

    :return: A vector of PythonPluginTrendVariable.
    """
    return getPythonPluginTrendVariables(self)
Model.getPythonPluginTrendVariables = _getPythonPluginTrendVariables

def _getPythonPluginTrendVariableByName(self, t_name: str) -> OptionalPythonPluginTrendVariable:
    """Try to get an object of type PythonPluginTrendVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PythonPluginTrendVariable.
    """
    return getPythonPluginTrendVariableByName(self, t_name)
Model.getPythonPluginTrendVariableByName = _getPythonPluginTrendVariableByName

def _getPythonPluginTrendVariablesByName(self, t_name: str, t_exactMatch: bool) -> PythonPluginTrendVariableVector:
    """Returns all objects of type PythonPluginTrendVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPythonPluginTrendVariablesByName(self, t_name, t_exactMatch)
Model.getPythonPluginTrendVariablesByName = _getPythonPluginTrendVariablesByName

class PythonPluginOutputVariable(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pythonPluginVariable):
        _openstudiomodelresources.PythonPluginOutputVariable_swiginit(self, _openstudiomodelresources.new_PythonPluginOutputVariable(pythonPluginVariable))
    __swig_destroy__ = _openstudiomodelresources.delete_PythonPluginOutputVariable

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.PythonPluginOutputVariable_iddObjectType()

    @staticmethod
    def typeofDatainVariableValues():
        return _openstudiomodelresources.PythonPluginOutputVariable_typeofDatainVariableValues()

    @staticmethod
    def updateFrequencyValues():
        return _openstudiomodelresources.PythonPluginOutputVariable_updateFrequencyValues()

    @staticmethod
    def resourceTypeValues():
        return _openstudiomodelresources.PythonPluginOutputVariable_resourceTypeValues()

    @staticmethod
    def groupTypeValues():
        return _openstudiomodelresources.PythonPluginOutputVariable_groupTypeValues()

    @staticmethod
    def endUseCategoryValues():
        return _openstudiomodelresources.PythonPluginOutputVariable_endUseCategoryValues()

    def pythonPluginVariable(self):
        return _openstudiomodelresources.PythonPluginOutputVariable_pythonPluginVariable(self)

    def typeofDatainVariable(self):
        return _openstudiomodelresources.PythonPluginOutputVariable_typeofDatainVariable(self)

    def updateFrequency(self):
        return _openstudiomodelresources.PythonPluginOutputVariable_updateFrequency(self)

    def units(self):
        return _openstudiomodelresources.PythonPluginOutputVariable_units(self)

    def resourceType(self):
        return _openstudiomodelresources.PythonPluginOutputVariable_resourceType(self)

    def groupType(self):
        return _openstudiomodelresources.PythonPluginOutputVariable_groupType(self)

    def endUseCategory(self):
        return _openstudiomodelresources.PythonPluginOutputVariable_endUseCategory(self)

    def endUseSubcategory(self):
        return _openstudiomodelresources.PythonPluginOutputVariable_endUseSubcategory(self)

    def setPythonPluginVariable(self, pythonPluginVariable):
        return _openstudiomodelresources.PythonPluginOutputVariable_setPythonPluginVariable(self, pythonPluginVariable)

    def setTypeofDatainVariable(self, typeofDatainVariable):
        return _openstudiomodelresources.PythonPluginOutputVariable_setTypeofDatainVariable(self, typeofDatainVariable)

    def setUpdateFrequency(self, updateFrequency):
        return _openstudiomodelresources.PythonPluginOutputVariable_setUpdateFrequency(self, updateFrequency)

    def setUnits(self, units):
        return _openstudiomodelresources.PythonPluginOutputVariable_setUnits(self, units)

    def resetUnits(self):
        return _openstudiomodelresources.PythonPluginOutputVariable_resetUnits(self)

    def setResourceType(self, resourceType):
        return _openstudiomodelresources.PythonPluginOutputVariable_setResourceType(self, resourceType)

    def resetResourceType(self):
        return _openstudiomodelresources.PythonPluginOutputVariable_resetResourceType(self)

    def setGroupType(self, groupType):
        return _openstudiomodelresources.PythonPluginOutputVariable_setGroupType(self, groupType)

    def resetGroupType(self):
        return _openstudiomodelresources.PythonPluginOutputVariable_resetGroupType(self)

    def setEndUseCategory(self, endUseCategory):
        return _openstudiomodelresources.PythonPluginOutputVariable_setEndUseCategory(self, endUseCategory)

    def resetEndUseCategory(self):
        return _openstudiomodelresources.PythonPluginOutputVariable_resetEndUseCategory(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelresources.PythonPluginOutputVariable_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelresources.PythonPluginOutputVariable_resetEndUseSubcategory(self)

# Register PythonPluginOutputVariable in _openstudiomodelresources:
_openstudiomodelresources.PythonPluginOutputVariable_swigregister(PythonPluginOutputVariable)

def toPythonPluginOutputVariable(idfObject):
    return _openstudiomodelresources.toPythonPluginOutputVariable(idfObject)

def getPythonPluginOutputVariable(t_model, t_handle):
    return _openstudiomodelresources.getPythonPluginOutputVariable(t_model, t_handle)

def getPythonPluginOutputVariables(t_model):
    return _openstudiomodelresources.getPythonPluginOutputVariables(t_model)

def getPythonPluginOutputVariableByName(t_model, t_name):
    return _openstudiomodelresources.getPythonPluginOutputVariableByName(t_model, t_name)

def getPythonPluginOutputVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getPythonPluginOutputVariablesByName(t_model, t_name, t_exactMatch)

def _to_PythonPluginOutputVariable(self) -> OptionalPythonPluginOutputVariable:
    """Try to cast the ModelObject to a PythonPluginOutputVariable.

    :return: An Optional PythonPluginOutputVariable.
    """
    return toPythonPluginOutputVariable(self)
openstudioutilitiesidf.IdfObject.to_PythonPluginOutputVariable = _to_PythonPluginOutputVariable

def _getPythonPluginOutputVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPythonPluginOutputVariable:
    """Try to get an object of type PythonPluginOutputVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PythonPluginOutputVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPythonPluginOutputVariable(self, t_handle)
Model.getPythonPluginOutputVariable = _getPythonPluginOutputVariable

def _getPythonPluginOutputVariables(self) -> PythonPluginOutputVariableVector:
    """Get a vector of all objects of type PythonPluginOutputVariable in the model.

    :return: A vector of PythonPluginOutputVariable.
    """
    return getPythonPluginOutputVariables(self)
Model.getPythonPluginOutputVariables = _getPythonPluginOutputVariables

def _getPythonPluginOutputVariableByName(self, t_name: str) -> OptionalPythonPluginOutputVariable:
    """Try to get an object of type PythonPluginOutputVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PythonPluginOutputVariable.
    """
    return getPythonPluginOutputVariableByName(self, t_name)
Model.getPythonPluginOutputVariableByName = _getPythonPluginOutputVariableByName

def _getPythonPluginOutputVariablesByName(self, t_name: str, t_exactMatch: bool) -> PythonPluginOutputVariableVector:
    """Returns all objects of type PythonPluginOutputVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPythonPluginOutputVariablesByName(self, t_name, t_exactMatch)
Model.getPythonPluginOutputVariablesByName = _getPythonPluginOutputVariablesByName

class ExternalFile(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ExternalFile

    def __init__(self, *args):
        _openstudiomodelresources.ExternalFile_swiginit(self, _openstudiomodelresources.new_ExternalFile(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ExternalFile_iddObjectType()

    @staticmethod
    def columnSeparatorValues():
        return _openstudiomodelresources.ExternalFile_columnSeparatorValues()

    @staticmethod
    def getExternalFile(model, filename, copyFile=True):
        return _openstudiomodelresources.ExternalFile_getExternalFile(model, filename, copyFile)

    def fileName(self):
        return _openstudiomodelresources.ExternalFile_fileName(self)

    def filePath(self):
        return _openstudiomodelresources.ExternalFile_filePath(self)

    def scheduleFiles(self):
        return _openstudiomodelresources.ExternalFile_scheduleFiles(self)

    def pythonPluginInstances(self):
        return _openstudiomodelresources.ExternalFile_pythonPluginInstances(self)

    def chillerElectricASHRAE205s(self):
        return _openstudiomodelresources.ExternalFile_chillerElectricASHRAE205s(self)

# Register ExternalFile in _openstudiomodelresources:
_openstudiomodelresources.ExternalFile_swigregister(ExternalFile)

def toExternalFile(idfObject):
    return _openstudiomodelresources.toExternalFile(idfObject)

def getExternalFile(t_model, t_handle):
    return _openstudiomodelresources.getExternalFile(t_model, t_handle)

def getExternalFiles(t_model):
    return _openstudiomodelresources.getExternalFiles(t_model)

def getExternalFileByName(t_model, t_name):
    return _openstudiomodelresources.getExternalFileByName(t_model, t_name)

def getExternalFilesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getExternalFilesByName(t_model, t_name, t_exactMatch)

def _to_ExternalFile(self) -> OptionalExternalFile:
    """Try to cast the ModelObject to a ExternalFile.

    :return: An Optional ExternalFile.
    """
    return toExternalFile(self)
openstudioutilitiesidf.IdfObject.to_ExternalFile = _to_ExternalFile

def _getExternalFile(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExternalFile:
    """Try to get an object of type ExternalFile referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExternalFile.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExternalFile(self, t_handle)
Model.getExternalFile = _getExternalFile

def _getExternalFiles(self) -> ExternalFileVector:
    """Get a vector of all objects of type ExternalFile in the model.

    :return: A vector of ExternalFile.
    """
    return getExternalFiles(self)
Model.getExternalFiles = _getExternalFiles

def _getExternalFileByName(self, t_name: str) -> OptionalExternalFile:
    """Try to get an object of type ExternalFile that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExternalFile.
    """
    return getExternalFileByName(self, t_name)
Model.getExternalFileByName = _getExternalFileByName

def _getExternalFilesByName(self, t_name: str, t_exactMatch: bool) -> ExternalFileVector:
    """Returns all objects of type ExternalFile named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExternalFilesByName(self, t_name, t_exactMatch)
Model.getExternalFilesByName = _getExternalFilesByName

class ScheduleFixedInterval(ScheduleInterval):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleFixedInterval

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleFixedInterval_swiginit(self, _openstudiomodelresources.new_ScheduleFixedInterval(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ScheduleFixedInterval_iddObjectType()

    def interpolatetoTimestep(self):
        return _openstudiomodelresources.ScheduleFixedInterval_interpolatetoTimestep(self)

    def isInterpolatetoTimestepDefaulted(self):
        return _openstudiomodelresources.ScheduleFixedInterval_isInterpolatetoTimestepDefaulted(self)

    def translatetoScheduleFile(self):
        return _openstudiomodelresources.ScheduleFixedInterval_translatetoScheduleFile(self)

    def isTranslatetoScheduleFileDefaulted(self):
        return _openstudiomodelresources.ScheduleFixedInterval_isTranslatetoScheduleFileDefaulted(self)

    def intervalLength(self):
        return _openstudiomodelresources.ScheduleFixedInterval_intervalLength(self)

    def outOfRangeValue(self):
        return _openstudiomodelresources.ScheduleFixedInterval_outOfRangeValue(self)

    def isOutOfRangeValueDefaulted(self):
        return _openstudiomodelresources.ScheduleFixedInterval_isOutOfRangeValueDefaulted(self)

    def startMonth(self):
        return _openstudiomodelresources.ScheduleFixedInterval_startMonth(self)

    def startDay(self):
        return _openstudiomodelresources.ScheduleFixedInterval_startDay(self)

    def setInterpolatetoTimestep(self, interpolatetoTimestep):
        return _openstudiomodelresources.ScheduleFixedInterval_setInterpolatetoTimestep(self, interpolatetoTimestep)

    def resetInterpolatetoTimestep(self):
        return _openstudiomodelresources.ScheduleFixedInterval_resetInterpolatetoTimestep(self)

    def setTranslatetoScheduleFile(self, translatetoScheduleFile):
        return _openstudiomodelresources.ScheduleFixedInterval_setTranslatetoScheduleFile(self, translatetoScheduleFile)

    def resetTranslatetoScheduleFile(self):
        return _openstudiomodelresources.ScheduleFixedInterval_resetTranslatetoScheduleFile(self)

    def setIntervalLength(self, intervalLength):
        return _openstudiomodelresources.ScheduleFixedInterval_setIntervalLength(self, intervalLength)

    def setOutOfRangeValue(self, outOfRangeValue):
        return _openstudiomodelresources.ScheduleFixedInterval_setOutOfRangeValue(self, outOfRangeValue)

    def resetOutOfRangeValue(self):
        return _openstudiomodelresources.ScheduleFixedInterval_resetOutOfRangeValue(self)

    def setStartMonth(self, startMonth):
        return _openstudiomodelresources.ScheduleFixedInterval_setStartMonth(self, startMonth)

    def setStartDay(self, startDay):
        return _openstudiomodelresources.ScheduleFixedInterval_setStartDay(self, startDay)

# Register ScheduleFixedInterval in _openstudiomodelresources:
_openstudiomodelresources.ScheduleFixedInterval_swigregister(ScheduleFixedInterval)

def toScheduleFixedInterval(idfObject):
    return _openstudiomodelresources.toScheduleFixedInterval(idfObject)

def getScheduleFixedInterval(t_model, t_handle):
    return _openstudiomodelresources.getScheduleFixedInterval(t_model, t_handle)

def getScheduleFixedIntervals(t_model):
    return _openstudiomodelresources.getScheduleFixedIntervals(t_model)

def getScheduleFixedIntervalByName(t_model, t_name):
    return _openstudiomodelresources.getScheduleFixedIntervalByName(t_model, t_name)

def getScheduleFixedIntervalsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getScheduleFixedIntervalsByName(t_model, t_name, t_exactMatch)

def _to_ScheduleFixedInterval(self) -> OptionalScheduleFixedInterval:
    """Try to cast the ModelObject to a ScheduleFixedInterval.

    :return: An Optional ScheduleFixedInterval.
    """
    return toScheduleFixedInterval(self)
openstudioutilitiesidf.IdfObject.to_ScheduleFixedInterval = _to_ScheduleFixedInterval

def _getScheduleFixedInterval(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalScheduleFixedInterval:
    """Try to get an object of type ScheduleFixedInterval referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ScheduleFixedInterval.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getScheduleFixedInterval(self, t_handle)
Model.getScheduleFixedInterval = _getScheduleFixedInterval

def _getScheduleFixedIntervals(self) -> ScheduleFixedIntervalVector:
    """Get a vector of all objects of type ScheduleFixedInterval in the model.

    :return: A vector of ScheduleFixedInterval.
    """
    return getScheduleFixedIntervals(self)
Model.getScheduleFixedIntervals = _getScheduleFixedIntervals

def _getScheduleFixedIntervalByName(self, t_name: str) -> OptionalScheduleFixedInterval:
    """Try to get an object of type ScheduleFixedInterval that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ScheduleFixedInterval.
    """
    return getScheduleFixedIntervalByName(self, t_name)
Model.getScheduleFixedIntervalByName = _getScheduleFixedIntervalByName

def _getScheduleFixedIntervalsByName(self, t_name: str, t_exactMatch: bool) -> ScheduleFixedIntervalVector:
    """Returns all objects of type ScheduleFixedInterval named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getScheduleFixedIntervalsByName(self, t_name, t_exactMatch)
Model.getScheduleFixedIntervalsByName = _getScheduleFixedIntervalsByName

class ScheduleVariableInterval(ScheduleInterval):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleVariableInterval

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleVariableInterval_swiginit(self, _openstudiomodelresources.new_ScheduleVariableInterval(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ScheduleVariableInterval_iddObjectType()

    def interpolatetoTimestep(self):
        return _openstudiomodelresources.ScheduleVariableInterval_interpolatetoTimestep(self)

    def isInterpolatetoTimestepDefaulted(self):
        return _openstudiomodelresources.ScheduleVariableInterval_isInterpolatetoTimestepDefaulted(self)

    def outOfRangeValue(self):
        return _openstudiomodelresources.ScheduleVariableInterval_outOfRangeValue(self)

    def isOutOfRangeValueDefaulted(self):
        return _openstudiomodelresources.ScheduleVariableInterval_isOutOfRangeValueDefaulted(self)

    def startMonth(self):
        return _openstudiomodelresources.ScheduleVariableInterval_startMonth(self)

    def startDay(self):
        return _openstudiomodelresources.ScheduleVariableInterval_startDay(self)

    def setInterpolatetoTimestep(self, interpolatetoTimestep):
        return _openstudiomodelresources.ScheduleVariableInterval_setInterpolatetoTimestep(self, interpolatetoTimestep)

    def resetInterpolatetoTimestep(self):
        return _openstudiomodelresources.ScheduleVariableInterval_resetInterpolatetoTimestep(self)

    def setOutOfRangeValue(self, outOfRangeValue):
        return _openstudiomodelresources.ScheduleVariableInterval_setOutOfRangeValue(self, outOfRangeValue)

    def resetOutOfRangeValue(self):
        return _openstudiomodelresources.ScheduleVariableInterval_resetOutOfRangeValue(self)

    def setStartMonth(self, startMonth):
        return _openstudiomodelresources.ScheduleVariableInterval_setStartMonth(self, startMonth)

    def setStartDay(self, startDay):
        return _openstudiomodelresources.ScheduleVariableInterval_setStartDay(self, startDay)

# Register ScheduleVariableInterval in _openstudiomodelresources:
_openstudiomodelresources.ScheduleVariableInterval_swigregister(ScheduleVariableInterval)

def toScheduleVariableInterval(idfObject):
    return _openstudiomodelresources.toScheduleVariableInterval(idfObject)

def getScheduleVariableInterval(t_model, t_handle):
    return _openstudiomodelresources.getScheduleVariableInterval(t_model, t_handle)

def getScheduleVariableIntervals(t_model):
    return _openstudiomodelresources.getScheduleVariableIntervals(t_model)

def getScheduleVariableIntervalByName(t_model, t_name):
    return _openstudiomodelresources.getScheduleVariableIntervalByName(t_model, t_name)

def getScheduleVariableIntervalsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getScheduleVariableIntervalsByName(t_model, t_name, t_exactMatch)

def _to_ScheduleVariableInterval(self) -> OptionalScheduleVariableInterval:
    """Try to cast the ModelObject to a ScheduleVariableInterval.

    :return: An Optional ScheduleVariableInterval.
    """
    return toScheduleVariableInterval(self)
openstudioutilitiesidf.IdfObject.to_ScheduleVariableInterval = _to_ScheduleVariableInterval

def _getScheduleVariableInterval(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalScheduleVariableInterval:
    """Try to get an object of type ScheduleVariableInterval referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ScheduleVariableInterval.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getScheduleVariableInterval(self, t_handle)
Model.getScheduleVariableInterval = _getScheduleVariableInterval

def _getScheduleVariableIntervals(self) -> ScheduleVariableIntervalVector:
    """Get a vector of all objects of type ScheduleVariableInterval in the model.

    :return: A vector of ScheduleVariableInterval.
    """
    return getScheduleVariableIntervals(self)
Model.getScheduleVariableIntervals = _getScheduleVariableIntervals

def _getScheduleVariableIntervalByName(self, t_name: str) -> OptionalScheduleVariableInterval:
    """Try to get an object of type ScheduleVariableInterval that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ScheduleVariableInterval.
    """
    return getScheduleVariableIntervalByName(self, t_name)
Model.getScheduleVariableIntervalByName = _getScheduleVariableIntervalByName

def _getScheduleVariableIntervalsByName(self, t_name: str, t_exactMatch: bool) -> ScheduleVariableIntervalVector:
    """Returns all objects of type ScheduleVariableInterval named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getScheduleVariableIntervalsByName(self, t_name, t_exactMatch)
Model.getScheduleVariableIntervalsByName = _getScheduleVariableIntervalsByName

class ScheduleCompact(openstudiomodelcore.Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleCompact

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleCompact_swiginit(self, _openstudiomodelresources.new_ScheduleCompact(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ScheduleCompact_iddObjectType()

    def setToConstantValue(self, value):
        return _openstudiomodelresources.ScheduleCompact_setToConstantValue(self, value)

    def isConstantValue(self):
        return _openstudiomodelresources.ScheduleCompact_isConstantValue(self)

    def constantValue(self):
        return _openstudiomodelresources.ScheduleCompact_constantValue(self)

# Register ScheduleCompact in _openstudiomodelresources:
_openstudiomodelresources.ScheduleCompact_swigregister(ScheduleCompact)

def toScheduleCompact(idfObject):
    return _openstudiomodelresources.toScheduleCompact(idfObject)

def getScheduleCompact(t_model, t_handle):
    return _openstudiomodelresources.getScheduleCompact(t_model, t_handle)

def getScheduleCompacts(t_model):
    return _openstudiomodelresources.getScheduleCompacts(t_model)

def getScheduleCompactByName(t_model, t_name):
    return _openstudiomodelresources.getScheduleCompactByName(t_model, t_name)

def getScheduleCompactsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getScheduleCompactsByName(t_model, t_name, t_exactMatch)

def _to_ScheduleCompact(self) -> OptionalScheduleCompact:
    """Try to cast the ModelObject to a ScheduleCompact.

    :return: An Optional ScheduleCompact.
    """
    return toScheduleCompact(self)
openstudioutilitiesidf.IdfObject.to_ScheduleCompact = _to_ScheduleCompact

def _getScheduleCompact(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalScheduleCompact:
    """Try to get an object of type ScheduleCompact referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ScheduleCompact.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getScheduleCompact(self, t_handle)
Model.getScheduleCompact = _getScheduleCompact

def _getScheduleCompacts(self) -> ScheduleCompactVector:
    """Get a vector of all objects of type ScheduleCompact in the model.

    :return: A vector of ScheduleCompact.
    """
    return getScheduleCompacts(self)
Model.getScheduleCompacts = _getScheduleCompacts

def _getScheduleCompactByName(self, t_name: str) -> OptionalScheduleCompact:
    """Try to get an object of type ScheduleCompact that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ScheduleCompact.
    """
    return getScheduleCompactByName(self, t_name)
Model.getScheduleCompactByName = _getScheduleCompactByName

def _getScheduleCompactsByName(self, t_name: str, t_exactMatch: bool) -> ScheduleCompactVector:
    """Returns all objects of type ScheduleCompact named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getScheduleCompactsByName(self, t_name, t_exactMatch)
Model.getScheduleCompactsByName = _getScheduleCompactsByName

class ScheduleConstant(openstudiomodelcore.Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleConstant

    def __init__(self, *args):
        _openstudiomodelresources.ScheduleConstant_swiginit(self, _openstudiomodelresources.new_ScheduleConstant(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ScheduleConstant_iddObjectType()

    def value(self):
        return _openstudiomodelresources.ScheduleConstant_value(self)

    def setValue(self, value):
        return _openstudiomodelresources.ScheduleConstant_setValue(self, value)

# Register ScheduleConstant in _openstudiomodelresources:
_openstudiomodelresources.ScheduleConstant_swigregister(ScheduleConstant)

def toScheduleConstant(idfObject):
    return _openstudiomodelresources.toScheduleConstant(idfObject)

def getScheduleConstant(t_model, t_handle):
    return _openstudiomodelresources.getScheduleConstant(t_model, t_handle)

def getScheduleConstants(t_model):
    return _openstudiomodelresources.getScheduleConstants(t_model)

def getScheduleConstantByName(t_model, t_name):
    return _openstudiomodelresources.getScheduleConstantByName(t_model, t_name)

def getScheduleConstantsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getScheduleConstantsByName(t_model, t_name, t_exactMatch)

def _to_ScheduleConstant(self) -> OptionalScheduleConstant:
    """Try to cast the ModelObject to a ScheduleConstant.

    :return: An Optional ScheduleConstant.
    """
    return toScheduleConstant(self)
openstudioutilitiesidf.IdfObject.to_ScheduleConstant = _to_ScheduleConstant

def _getScheduleConstant(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalScheduleConstant:
    """Try to get an object of type ScheduleConstant referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ScheduleConstant.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getScheduleConstant(self, t_handle)
Model.getScheduleConstant = _getScheduleConstant

def _getScheduleConstants(self) -> ScheduleConstantVector:
    """Get a vector of all objects of type ScheduleConstant in the model.

    :return: A vector of ScheduleConstant.
    """
    return getScheduleConstants(self)
Model.getScheduleConstants = _getScheduleConstants

def _getScheduleConstantByName(self, t_name: str) -> OptionalScheduleConstant:
    """Try to get an object of type ScheduleConstant that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ScheduleConstant.
    """
    return getScheduleConstantByName(self, t_name)
Model.getScheduleConstantByName = _getScheduleConstantByName

def _getScheduleConstantsByName(self, t_name: str, t_exactMatch: bool) -> ScheduleConstantVector:
    """Returns all objects of type ScheduleConstant named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getScheduleConstantsByName(self, t_name, t_exactMatch)
Model.getScheduleConstantsByName = _getScheduleConstantsByName

class DefaultScheduleType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.DefaultScheduleType_swiginit(self, _openstudiomodelresources.new_DefaultScheduleType(*args))

    def valueName(self):
        return _openstudiomodelresources.DefaultScheduleType_valueName(self)

    def value(self):
        return _openstudiomodelresources.DefaultScheduleType_value(self)

    def valueDescription(self):
        return _openstudiomodelresources.DefaultScheduleType_valueDescription(self)

    def __eq__(self, other):
        return _openstudiomodelresources.DefaultScheduleType___eq__(self, other)

    def __ne__(self, other):
        return _openstudiomodelresources.DefaultScheduleType___ne__(self, other)

    def __gt__(self, other):
        return _openstudiomodelresources.DefaultScheduleType___gt__(self, other)

    def __ge__(self, other):
        return _openstudiomodelresources.DefaultScheduleType___ge__(self, other)

    def __lt__(self, other):
        return _openstudiomodelresources.DefaultScheduleType___lt__(self, other)

    def __le__(self, other):
        return _openstudiomodelresources.DefaultScheduleType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudiomodelresources.DefaultScheduleType_enumName()

    @staticmethod
    def getValues():
        return _openstudiomodelresources.DefaultScheduleType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudiomodelresources.DefaultScheduleType_getLookupMap()

    def __str__(self):
        return _openstudiomodelresources.DefaultScheduleType___str__(self)
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultScheduleType

# Register DefaultScheduleType in _openstudiomodelresources:
_openstudiomodelresources.DefaultScheduleType_swigregister(DefaultScheduleType)
class DefaultScheduleSet(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultScheduleSet

    def __init__(self, *args):
        _openstudiomodelresources.DefaultScheduleSet_swiginit(self, _openstudiomodelresources.new_DefaultScheduleSet(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.DefaultScheduleSet_iddObjectType()

    def hoursofOperationSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_hoursofOperationSchedule(self)

    def numberofPeopleSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_numberofPeopleSchedule(self)

    def peopleActivityLevelSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_peopleActivityLevelSchedule(self)

    def lightingSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_lightingSchedule(self)

    def electricEquipmentSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_electricEquipmentSchedule(self)

    def gasEquipmentSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_gasEquipmentSchedule(self)

    def hotWaterEquipmentSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_hotWaterEquipmentSchedule(self)

    def infiltrationSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_infiltrationSchedule(self)

    def steamEquipmentSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_steamEquipmentSchedule(self)

    def otherEquipmentSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_otherEquipmentSchedule(self)

    def setHoursofOperationSchedule(self, schedule):
        return _openstudiomodelresources.DefaultScheduleSet_setHoursofOperationSchedule(self, schedule)

    def resetHoursofOperationSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_resetHoursofOperationSchedule(self)

    def setNumberofPeopleSchedule(self, schedule):
        return _openstudiomodelresources.DefaultScheduleSet_setNumberofPeopleSchedule(self, schedule)

    def resetNumberofPeopleSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_resetNumberofPeopleSchedule(self)

    def setPeopleActivityLevelSchedule(self, schedule):
        return _openstudiomodelresources.DefaultScheduleSet_setPeopleActivityLevelSchedule(self, schedule)

    def resetPeopleActivityLevelSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_resetPeopleActivityLevelSchedule(self)

    def setLightingSchedule(self, schedule):
        return _openstudiomodelresources.DefaultScheduleSet_setLightingSchedule(self, schedule)

    def resetLightingSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_resetLightingSchedule(self)

    def setElectricEquipmentSchedule(self, schedule):
        return _openstudiomodelresources.DefaultScheduleSet_setElectricEquipmentSchedule(self, schedule)

    def resetElectricEquipmentSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_resetElectricEquipmentSchedule(self)

    def setGasEquipmentSchedule(self, schedule):
        return _openstudiomodelresources.DefaultScheduleSet_setGasEquipmentSchedule(self, schedule)

    def resetGasEquipmentSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_resetGasEquipmentSchedule(self)

    def setHotWaterEquipmentSchedule(self, schedule):
        return _openstudiomodelresources.DefaultScheduleSet_setHotWaterEquipmentSchedule(self, schedule)

    def resetHotWaterEquipmentSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_resetHotWaterEquipmentSchedule(self)

    def setInfiltrationSchedule(self, schedule):
        return _openstudiomodelresources.DefaultScheduleSet_setInfiltrationSchedule(self, schedule)

    def resetInfiltrationSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_resetInfiltrationSchedule(self)

    def setSteamEquipmentSchedule(self, schedule):
        return _openstudiomodelresources.DefaultScheduleSet_setSteamEquipmentSchedule(self, schedule)

    def resetSteamEquipmentSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_resetSteamEquipmentSchedule(self)

    def setOtherEquipmentSchedule(self, schedule):
        return _openstudiomodelresources.DefaultScheduleSet_setOtherEquipmentSchedule(self, schedule)

    def resetOtherEquipmentSchedule(self):
        return _openstudiomodelresources.DefaultScheduleSet_resetOtherEquipmentSchedule(self)

    def getDefaultSchedule(self, defaultScheduleType):
        return _openstudiomodelresources.DefaultScheduleSet_getDefaultSchedule(self, defaultScheduleType)

    def merge(self, other):
        return _openstudiomodelresources.DefaultScheduleSet_merge(self, other)

# Register DefaultScheduleSet in _openstudiomodelresources:
_openstudiomodelresources.DefaultScheduleSet_swigregister(DefaultScheduleSet)

def toDefaultScheduleSet(idfObject):
    return _openstudiomodelresources.toDefaultScheduleSet(idfObject)

def getDefaultScheduleSet(t_model, t_handle):
    return _openstudiomodelresources.getDefaultScheduleSet(t_model, t_handle)

def getDefaultScheduleSets(t_model):
    return _openstudiomodelresources.getDefaultScheduleSets(t_model)

def getDefaultScheduleSetByName(t_model, t_name):
    return _openstudiomodelresources.getDefaultScheduleSetByName(t_model, t_name)

def getDefaultScheduleSetsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getDefaultScheduleSetsByName(t_model, t_name, t_exactMatch)

def _to_DefaultScheduleSet(self) -> OptionalDefaultScheduleSet:
    """Try to cast the ModelObject to a DefaultScheduleSet.

    :return: An Optional DefaultScheduleSet.
    """
    return toDefaultScheduleSet(self)
openstudioutilitiesidf.IdfObject.to_DefaultScheduleSet = _to_DefaultScheduleSet

def _getDefaultScheduleSet(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalDefaultScheduleSet:
    """Try to get an object of type DefaultScheduleSet referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional DefaultScheduleSet.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getDefaultScheduleSet(self, t_handle)
Model.getDefaultScheduleSet = _getDefaultScheduleSet

def _getDefaultScheduleSets(self) -> DefaultScheduleSetVector:
    """Get a vector of all objects of type DefaultScheduleSet in the model.

    :return: A vector of DefaultScheduleSet.
    """
    return getDefaultScheduleSets(self)
Model.getDefaultScheduleSets = _getDefaultScheduleSets

def _getDefaultScheduleSetByName(self, t_name: str) -> OptionalDefaultScheduleSet:
    """Try to get an object of type DefaultScheduleSet that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional DefaultScheduleSet.
    """
    return getDefaultScheduleSetByName(self, t_name)
Model.getDefaultScheduleSetByName = _getDefaultScheduleSetByName

def _getDefaultScheduleSetsByName(self, t_name: str, t_exactMatch: bool) -> DefaultScheduleSetVector:
    """Returns all objects of type DefaultScheduleSet named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getDefaultScheduleSetsByName(self, t_name, t_exactMatch)
Model.getDefaultScheduleSetsByName = _getDefaultScheduleSetsByName

class SpectralDataField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, wavelength, transmittance, frontReflectance, backReflectance):
        _openstudiomodelresources.SpectralDataField_swiginit(self, _openstudiomodelresources.new_SpectralDataField(wavelength, transmittance, frontReflectance, backReflectance))

    def wavelength(self):
        return _openstudiomodelresources.SpectralDataField_wavelength(self)

    def transmittance(self):
        return _openstudiomodelresources.SpectralDataField_transmittance(self)

    def frontReflectance(self):
        return _openstudiomodelresources.SpectralDataField_frontReflectance(self)

    def backReflectance(self):
        return _openstudiomodelresources.SpectralDataField_backReflectance(self)
    __swig_destroy__ = _openstudiomodelresources.delete_SpectralDataField

# Register SpectralDataField in _openstudiomodelresources:
_openstudiomodelresources.SpectralDataField_swigregister(SpectralDataField)
class MaterialPropertyGlazingSpectralData(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyGlazingSpectralData

    def __init__(self, *args):
        _openstudiomodelresources.MaterialPropertyGlazingSpectralData_swiginit(self, _openstudiomodelresources.new_MaterialPropertyGlazingSpectralData(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_iddObjectType()

    def spectralDataFields(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_spectralDataFields(self)

    def setSpectralDataFields(self, spectralDataFields):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_setSpectralDataFields(self, spectralDataFields)

    def addSpectralDataField(self, *args):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_addSpectralDataField(self, *args)

    def resetSpectralDataFields(self):
        return _openstudiomodelresources.MaterialPropertyGlazingSpectralData_resetSpectralDataFields(self)

# Register MaterialPropertyGlazingSpectralData in _openstudiomodelresources:
_openstudiomodelresources.MaterialPropertyGlazingSpectralData_swigregister(MaterialPropertyGlazingSpectralData)

def toMaterialPropertyGlazingSpectralData(idfObject):
    return _openstudiomodelresources.toMaterialPropertyGlazingSpectralData(idfObject)

def getMaterialPropertyGlazingSpectralData(t_model, t_handle):
    return _openstudiomodelresources.getMaterialPropertyGlazingSpectralData(t_model, t_handle)

def getMaterialPropertyGlazingSpectralDatas(t_model):
    return _openstudiomodelresources.getMaterialPropertyGlazingSpectralDatas(t_model)

def getMaterialPropertyGlazingSpectralDataByName(t_model, t_name):
    return _openstudiomodelresources.getMaterialPropertyGlazingSpectralDataByName(t_model, t_name)

def getMaterialPropertyGlazingSpectralDatasByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getMaterialPropertyGlazingSpectralDatasByName(t_model, t_name, t_exactMatch)

def _to_MaterialPropertyGlazingSpectralData(self) -> OptionalMaterialPropertyGlazingSpectralData:
    """Try to cast the ModelObject to a MaterialPropertyGlazingSpectralData.

    :return: An Optional MaterialPropertyGlazingSpectralData.
    """
    return toMaterialPropertyGlazingSpectralData(self)
openstudioutilitiesidf.IdfObject.to_MaterialPropertyGlazingSpectralData = _to_MaterialPropertyGlazingSpectralData

def _getMaterialPropertyGlazingSpectralData(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalMaterialPropertyGlazingSpectralData:
    """Try to get an object of type MaterialPropertyGlazingSpectralData referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional MaterialPropertyGlazingSpectralData.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getMaterialPropertyGlazingSpectralData(self, t_handle)
Model.getMaterialPropertyGlazingSpectralData = _getMaterialPropertyGlazingSpectralData

def _getMaterialPropertyGlazingSpectralDatas(self) -> MaterialPropertyGlazingSpectralDataVector:
    """Get a vector of all objects of type MaterialPropertyGlazingSpectralData in the model.

    :return: A vector of MaterialPropertyGlazingSpectralData.
    """
    return getMaterialPropertyGlazingSpectralDatas(self)
Model.getMaterialPropertyGlazingSpectralDatas = _getMaterialPropertyGlazingSpectralDatas

def _getMaterialPropertyGlazingSpectralDataByName(self, t_name: str) -> OptionalMaterialPropertyGlazingSpectralData:
    """Try to get an object of type MaterialPropertyGlazingSpectralData that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional MaterialPropertyGlazingSpectralData.
    """
    return getMaterialPropertyGlazingSpectralDataByName(self, t_name)
Model.getMaterialPropertyGlazingSpectralDataByName = _getMaterialPropertyGlazingSpectralDataByName

def _getMaterialPropertyGlazingSpectralDatasByName(self, t_name: str, t_exactMatch: bool) -> MaterialPropertyGlazingSpectralDataVector:
    """Returns all objects of type MaterialPropertyGlazingSpectralData named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getMaterialPropertyGlazingSpectralDatasByName(self, t_name, t_exactMatch)
Model.getMaterialPropertyGlazingSpectralDatasByName = _getMaterialPropertyGlazingSpectralDatasByName

class MaterialPropertyMoisturePenetrationDepthSettings(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyMoisturePenetrationDepthSettings

    def __init__(self, *args):
        _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_swiginit(self, _openstudiomodelresources.new_MaterialPropertyMoisturePenetrationDepthSettings(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_iddObjectType()

    def materialName(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_materialName(self)

    def material(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_material(self)

    def waterVaporDiffusionResistanceFactor(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_waterVaporDiffusionResistanceFactor(self)

    def moistureEquationCoefficientA(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficientA(self)

    def moistureEquationCoefficientB(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficientB(self)

    def moistureEquationCoefficientC(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficientC(self)

    def moistureEquationCoefficientD(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficientD(self)

    def moistureEquationCoefficients(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_moistureEquationCoefficients(self)

    def surfaceLayerPenetrationDepth(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_surfaceLayerPenetrationDepth(self)

    def isSurfaceLayerPenetrationDepthAutocalculated(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_isSurfaceLayerPenetrationDepthAutocalculated(self)

    def deepLayerPenetrationDepth(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_deepLayerPenetrationDepth(self)

    def isDeepLayerPenetrationDepthAutocalculated(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_isDeepLayerPenetrationDepthAutocalculated(self)

    def coatingLayerThickness(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_coatingLayerThickness(self)

    def coatingLayerWaterVaporDiffusionResistanceFactor(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_coatingLayerWaterVaporDiffusionResistanceFactor(self)

    def setWaterVaporDiffusionResistanceFactor(self, waterVaporDiffusionResistanceFactor):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setWaterVaporDiffusionResistanceFactor(self, waterVaporDiffusionResistanceFactor)

    def setMoistureEquationCoefficientA(self, moistureEquationCoefficientA):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficientA(self, moistureEquationCoefficientA)

    def setMoistureEquationCoefficientB(self, moistureEquationCoefficientB):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficientB(self, moistureEquationCoefficientB)

    def setMoistureEquationCoefficientC(self, moistureEquationCoefficientC):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficientC(self, moistureEquationCoefficientC)

    def setMoistureEquationCoefficientD(self, moistureEquationCoefficientD):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficientD(self, moistureEquationCoefficientD)

    def setMoistureEquationCoefficients(self, moistureEquationCoefficientA, moistureEquationCoefficientB, moistureEquationCoefficientC, moistureEquationCoefficientD):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setMoistureEquationCoefficients(self, moistureEquationCoefficientA, moistureEquationCoefficientB, moistureEquationCoefficientC, moistureEquationCoefficientD)

    def setSurfaceLayerPenetrationDepth(self, surfaceLayerPenetrationDepth):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setSurfaceLayerPenetrationDepth(self, surfaceLayerPenetrationDepth)

    def autocalculateSurfaceLayerPenetrationDepth(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_autocalculateSurfaceLayerPenetrationDepth(self)

    def setDeepLayerPenetrationDepth(self, deepLayerPenetrationDepth):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setDeepLayerPenetrationDepth(self, deepLayerPenetrationDepth)

    def autocalculateDeepLayerPenetrationDepth(self):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_autocalculateDeepLayerPenetrationDepth(self)

    def setCoatingLayerThickness(self, coatingLayerThickness):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setCoatingLayerThickness(self, coatingLayerThickness)

    def setCoatingLayerWaterVaporDiffusionResistanceFactor(self, coatingLayerWaterVaporDiffusionResistanceFactor):
        return _openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_setCoatingLayerWaterVaporDiffusionResistanceFactor(self, coatingLayerWaterVaporDiffusionResistanceFactor)

# Register MaterialPropertyMoisturePenetrationDepthSettings in _openstudiomodelresources:
_openstudiomodelresources.MaterialPropertyMoisturePenetrationDepthSettings_swigregister(MaterialPropertyMoisturePenetrationDepthSettings)

def toMaterialPropertyMoisturePenetrationDepthSettings(idfObject):
    return _openstudiomodelresources.toMaterialPropertyMoisturePenetrationDepthSettings(idfObject)

def getMaterialPropertyMoisturePenetrationDepthSettings(t_model, t_handle):
    return _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettings(t_model, t_handle)

def getMaterialPropertyMoisturePenetrationDepthSettingss(t_model):
    return _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettingss(t_model)

def getMaterialPropertyMoisturePenetrationDepthSettingsByName(t_model, t_name):
    return _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettingsByName(t_model, t_name)

def getMaterialPropertyMoisturePenetrationDepthSettingssByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getMaterialPropertyMoisturePenetrationDepthSettingssByName(t_model, t_name, t_exactMatch)

def _to_MaterialPropertyMoisturePenetrationDepthSettings(self) -> OptionalMaterialPropertyMoisturePenetrationDepthSettings:
    """Try to cast the ModelObject to a MaterialPropertyMoisturePenetrationDepthSettings.

    :return: An Optional MaterialPropertyMoisturePenetrationDepthSettings.
    """
    return toMaterialPropertyMoisturePenetrationDepthSettings(self)
openstudioutilitiesidf.IdfObject.to_MaterialPropertyMoisturePenetrationDepthSettings = _to_MaterialPropertyMoisturePenetrationDepthSettings

def _getMaterialPropertyMoisturePenetrationDepthSettings(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalMaterialPropertyMoisturePenetrationDepthSettings:
    """Try to get an object of type MaterialPropertyMoisturePenetrationDepthSettings referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional MaterialPropertyMoisturePenetrationDepthSettings.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getMaterialPropertyMoisturePenetrationDepthSettings(self, t_handle)
Model.getMaterialPropertyMoisturePenetrationDepthSettings = _getMaterialPropertyMoisturePenetrationDepthSettings

def _getMaterialPropertyMoisturePenetrationDepthSettingss(self) -> MaterialPropertyMoisturePenetrationDepthSettingsVector:
    """Get a vector of all objects of type MaterialPropertyMoisturePenetrationDepthSettings in the model.

    :return: A vector of MaterialPropertyMoisturePenetrationDepthSettings.
    """
    return getMaterialPropertyMoisturePenetrationDepthSettingss(self)
Model.getMaterialPropertyMoisturePenetrationDepthSettingss = _getMaterialPropertyMoisturePenetrationDepthSettingss

def _getMaterialPropertyMoisturePenetrationDepthSettingsByName(self, t_name: str) -> OptionalMaterialPropertyMoisturePenetrationDepthSettings:
    """Try to get an object of type MaterialPropertyMoisturePenetrationDepthSettings that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional MaterialPropertyMoisturePenetrationDepthSettings.
    """
    return getMaterialPropertyMoisturePenetrationDepthSettingsByName(self, t_name)
Model.getMaterialPropertyMoisturePenetrationDepthSettingsByName = _getMaterialPropertyMoisturePenetrationDepthSettingsByName

def _getMaterialPropertyMoisturePenetrationDepthSettingssByName(self, t_name: str, t_exactMatch: bool) -> MaterialPropertyMoisturePenetrationDepthSettingsVector:
    """Returns all objects of type MaterialPropertyMoisturePenetrationDepthSettings named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getMaterialPropertyMoisturePenetrationDepthSettingssByName(self, t_name, t_exactMatch)
Model.getMaterialPropertyMoisturePenetrationDepthSettingssByName = _getMaterialPropertyMoisturePenetrationDepthSettingssByName

class TemperatureEnthalpy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, temperature, enthalpy):
        _openstudiomodelresources.TemperatureEnthalpy_swiginit(self, _openstudiomodelresources.new_TemperatureEnthalpy(temperature, enthalpy))

    def temperature(self):
        return _openstudiomodelresources.TemperatureEnthalpy_temperature(self)

    def enthalpy(self):
        return _openstudiomodelresources.TemperatureEnthalpy_enthalpy(self)

    def __str__(self):
        return _openstudiomodelresources.TemperatureEnthalpy___str__(self)
    __swig_destroy__ = _openstudiomodelresources.delete_TemperatureEnthalpy

# Register TemperatureEnthalpy in _openstudiomodelresources:
_openstudiomodelresources.TemperatureEnthalpy_swigregister(TemperatureEnthalpy)
class MaterialPropertyPhaseChange(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.MaterialPropertyPhaseChange_swiginit(self, _openstudiomodelresources.new_MaterialPropertyPhaseChange(*args))
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyPhaseChange

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.MaterialPropertyPhaseChange_iddObjectType()

    def materialName(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChange_materialName(self)

    def material(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChange_material(self)

    def temperatureCoefficientforThermalConductivity(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChange_temperatureCoefficientforThermalConductivity(self)

    def isTemperatureCoefficientforThermalConductivityDefaulted(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChange_isTemperatureCoefficientforThermalConductivityDefaulted(self)

    def temperatureEnthalpys(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChange_temperatureEnthalpys(self)

    def numberofTemperatureEnthalpys(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChange_numberofTemperatureEnthalpys(self)

    def setTemperatureCoefficientforThermalConductivity(self, temperatureCoefficientforThermalConductivity):
        return _openstudiomodelresources.MaterialPropertyPhaseChange_setTemperatureCoefficientforThermalConductivity(self, temperatureCoefficientforThermalConductivity)

    def resetTemperatureCoefficientforThermalConductivity(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChange_resetTemperatureCoefficientforThermalConductivity(self)

    def addTemperatureEnthalpy(self, *args):
        return _openstudiomodelresources.MaterialPropertyPhaseChange_addTemperatureEnthalpy(self, *args)

    def addTemperatureEnthalpys(self, temperatureEnthalpys):
        return _openstudiomodelresources.MaterialPropertyPhaseChange_addTemperatureEnthalpys(self, temperatureEnthalpys)

    def removeTemperatureEnthalpy(self, groupIndex):
        return _openstudiomodelresources.MaterialPropertyPhaseChange_removeTemperatureEnthalpy(self, groupIndex)

    def removeAllTemperatureEnthalpys(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChange_removeAllTemperatureEnthalpys(self)

# Register MaterialPropertyPhaseChange in _openstudiomodelresources:
_openstudiomodelresources.MaterialPropertyPhaseChange_swigregister(MaterialPropertyPhaseChange)

def toMaterialPropertyPhaseChange(idfObject):
    return _openstudiomodelresources.toMaterialPropertyPhaseChange(idfObject)

def getMaterialPropertyPhaseChange(t_model, t_handle):
    return _openstudiomodelresources.getMaterialPropertyPhaseChange(t_model, t_handle)

def getMaterialPropertyPhaseChanges(t_model):
    return _openstudiomodelresources.getMaterialPropertyPhaseChanges(t_model)

def getMaterialPropertyPhaseChangeByName(t_model, t_name):
    return _openstudiomodelresources.getMaterialPropertyPhaseChangeByName(t_model, t_name)

def getMaterialPropertyPhaseChangesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getMaterialPropertyPhaseChangesByName(t_model, t_name, t_exactMatch)

def _to_MaterialPropertyPhaseChange(self) -> OptionalMaterialPropertyPhaseChange:
    """Try to cast the ModelObject to a MaterialPropertyPhaseChange.

    :return: An Optional MaterialPropertyPhaseChange.
    """
    return toMaterialPropertyPhaseChange(self)
openstudioutilitiesidf.IdfObject.to_MaterialPropertyPhaseChange = _to_MaterialPropertyPhaseChange

def _getMaterialPropertyPhaseChange(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalMaterialPropertyPhaseChange:
    """Try to get an object of type MaterialPropertyPhaseChange referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional MaterialPropertyPhaseChange.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getMaterialPropertyPhaseChange(self, t_handle)
Model.getMaterialPropertyPhaseChange = _getMaterialPropertyPhaseChange

def _getMaterialPropertyPhaseChanges(self) -> MaterialPropertyPhaseChangeVector:
    """Get a vector of all objects of type MaterialPropertyPhaseChange in the model.

    :return: A vector of MaterialPropertyPhaseChange.
    """
    return getMaterialPropertyPhaseChanges(self)
Model.getMaterialPropertyPhaseChanges = _getMaterialPropertyPhaseChanges

def _getMaterialPropertyPhaseChangeByName(self, t_name: str) -> OptionalMaterialPropertyPhaseChange:
    """Try to get an object of type MaterialPropertyPhaseChange that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional MaterialPropertyPhaseChange.
    """
    return getMaterialPropertyPhaseChangeByName(self, t_name)
Model.getMaterialPropertyPhaseChangeByName = _getMaterialPropertyPhaseChangeByName

def _getMaterialPropertyPhaseChangesByName(self, t_name: str, t_exactMatch: bool) -> MaterialPropertyPhaseChangeVector:
    """Returns all objects of type MaterialPropertyPhaseChange named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getMaterialPropertyPhaseChangesByName(self, t_name, t_exactMatch)
Model.getMaterialPropertyPhaseChangesByName = _getMaterialPropertyPhaseChangesByName

class MaterialPropertyPhaseChangeHysteresis(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_swiginit(self, _openstudiomodelresources.new_MaterialPropertyPhaseChangeHysteresis(*args))
    __swig_destroy__ = _openstudiomodelresources.delete_MaterialPropertyPhaseChangeHysteresis

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_iddObjectType()

    def materialName(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_materialName(self)

    def material(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_material(self)

    def latentHeatduringtheEntirePhaseChangeProcess(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_latentHeatduringtheEntirePhaseChangeProcess(self)

    def liquidStateThermalConductivity(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_liquidStateThermalConductivity(self)

    def liquidStateDensity(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_liquidStateDensity(self)

    def liquidStateSpecificHeat(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_liquidStateSpecificHeat(self)

    def highTemperatureDifferenceofMeltingCurve(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_highTemperatureDifferenceofMeltingCurve(self)

    def peakMeltingTemperature(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_peakMeltingTemperature(self)

    def lowTemperatureDifferenceofMeltingCurve(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_lowTemperatureDifferenceofMeltingCurve(self)

    def solidStateThermalConductivity(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_solidStateThermalConductivity(self)

    def solidStateDensity(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_solidStateDensity(self)

    def solidStateSpecificHeat(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_solidStateSpecificHeat(self)

    def highTemperatureDifferenceofFreezingCurve(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_highTemperatureDifferenceofFreezingCurve(self)

    def peakFreezingTemperature(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_peakFreezingTemperature(self)

    def lowTemperatureDifferenceofFreezingCurve(self):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_lowTemperatureDifferenceofFreezingCurve(self)

    def setLatentHeatduringtheEntirePhaseChangeProcess(self, latentHeatduringtheEntirePhaseChangeProcess):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_setLatentHeatduringtheEntirePhaseChangeProcess(self, latentHeatduringtheEntirePhaseChangeProcess)

    def setLiquidStateThermalConductivity(self, liquidStateThermalConductivity):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_setLiquidStateThermalConductivity(self, liquidStateThermalConductivity)

    def setLiquidStateDensity(self, liquidStateDensity):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_setLiquidStateDensity(self, liquidStateDensity)

    def setLiquidStateSpecificHeat(self, liquidStateSpecificHeat):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_setLiquidStateSpecificHeat(self, liquidStateSpecificHeat)

    def setHighTemperatureDifferenceofMeltingCurve(self, highTemperatureDifferenceofMeltingCurve):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_setHighTemperatureDifferenceofMeltingCurve(self, highTemperatureDifferenceofMeltingCurve)

    def setPeakMeltingTemperature(self, peakMeltingTemperature):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_setPeakMeltingTemperature(self, peakMeltingTemperature)

    def setLowTemperatureDifferenceofMeltingCurve(self, lowTemperatureDifferenceofMeltingCurve):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_setLowTemperatureDifferenceofMeltingCurve(self, lowTemperatureDifferenceofMeltingCurve)

    def setSolidStateThermalConductivity(self, solidStateThermalConductivity):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_setSolidStateThermalConductivity(self, solidStateThermalConductivity)

    def setSolidStateDensity(self, solidStateDensity):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_setSolidStateDensity(self, solidStateDensity)

    def setSolidStateSpecificHeat(self, solidStateSpecificHeat):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_setSolidStateSpecificHeat(self, solidStateSpecificHeat)

    def setHighTemperatureDifferenceofFreezingCurve(self, highTemperatureDifferenceofFreezingCurve):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_setHighTemperatureDifferenceofFreezingCurve(self, highTemperatureDifferenceofFreezingCurve)

    def setPeakFreezingTemperature(self, peakFreezingTemperature):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_setPeakFreezingTemperature(self, peakFreezingTemperature)

    def setLowTemperatureDifferenceofFreezingCurve(self, lowTemperatureDifferenceofFreezingCurve):
        return _openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_setLowTemperatureDifferenceofFreezingCurve(self, lowTemperatureDifferenceofFreezingCurve)

# Register MaterialPropertyPhaseChangeHysteresis in _openstudiomodelresources:
_openstudiomodelresources.MaterialPropertyPhaseChangeHysteresis_swigregister(MaterialPropertyPhaseChangeHysteresis)

def toMaterialPropertyPhaseChangeHysteresis(idfObject):
    return _openstudiomodelresources.toMaterialPropertyPhaseChangeHysteresis(idfObject)

def getMaterialPropertyPhaseChangeHysteresis(t_model, t_handle):
    return _openstudiomodelresources.getMaterialPropertyPhaseChangeHysteresis(t_model, t_handle)

def getMaterialPropertyPhaseChangeHysteresiss(t_model):
    return _openstudiomodelresources.getMaterialPropertyPhaseChangeHysteresiss(t_model)

def getMaterialPropertyPhaseChangeHysteresisByName(t_model, t_name):
    return _openstudiomodelresources.getMaterialPropertyPhaseChangeHysteresisByName(t_model, t_name)

def getMaterialPropertyPhaseChangeHysteresissByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getMaterialPropertyPhaseChangeHysteresissByName(t_model, t_name, t_exactMatch)

def _to_MaterialPropertyPhaseChangeHysteresis(self) -> OptionalMaterialPropertyPhaseChangeHysteresis:
    """Try to cast the ModelObject to a MaterialPropertyPhaseChangeHysteresis.

    :return: An Optional MaterialPropertyPhaseChangeHysteresis.
    """
    return toMaterialPropertyPhaseChangeHysteresis(self)
openstudioutilitiesidf.IdfObject.to_MaterialPropertyPhaseChangeHysteresis = _to_MaterialPropertyPhaseChangeHysteresis

def _getMaterialPropertyPhaseChangeHysteresis(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalMaterialPropertyPhaseChangeHysteresis:
    """Try to get an object of type MaterialPropertyPhaseChangeHysteresis referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional MaterialPropertyPhaseChangeHysteresis.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getMaterialPropertyPhaseChangeHysteresis(self, t_handle)
Model.getMaterialPropertyPhaseChangeHysteresis = _getMaterialPropertyPhaseChangeHysteresis

def _getMaterialPropertyPhaseChangeHysteresiss(self) -> MaterialPropertyPhaseChangeHysteresisVector:
    """Get a vector of all objects of type MaterialPropertyPhaseChangeHysteresis in the model.

    :return: A vector of MaterialPropertyPhaseChangeHysteresis.
    """
    return getMaterialPropertyPhaseChangeHysteresiss(self)
Model.getMaterialPropertyPhaseChangeHysteresiss = _getMaterialPropertyPhaseChangeHysteresiss

def _getMaterialPropertyPhaseChangeHysteresisByName(self, t_name: str) -> OptionalMaterialPropertyPhaseChangeHysteresis:
    """Try to get an object of type MaterialPropertyPhaseChangeHysteresis that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional MaterialPropertyPhaseChangeHysteresis.
    """
    return getMaterialPropertyPhaseChangeHysteresisByName(self, t_name)
Model.getMaterialPropertyPhaseChangeHysteresisByName = _getMaterialPropertyPhaseChangeHysteresisByName

def _getMaterialPropertyPhaseChangeHysteresissByName(self, t_name: str, t_exactMatch: bool) -> MaterialPropertyPhaseChangeHysteresisVector:
    """Returns all objects of type MaterialPropertyPhaseChangeHysteresis named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getMaterialPropertyPhaseChangeHysteresissByName(self, t_name, t_exactMatch)
Model.getMaterialPropertyPhaseChangeHysteresissByName = _getMaterialPropertyPhaseChangeHysteresissByName

class Material(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_Material

    def __init__(self, *args):
        _openstudiomodelresources.Material_swiginit(self, _openstudiomodelresources.new_Material(*args))

    def thickness(self):
        return _openstudiomodelresources.Material_thickness(self)

    def getVisibleTransmittance(self):
        return _openstudiomodelresources.Material_getVisibleTransmittance(self)

    def interiorVisibleAbsorptance(self):
        return _openstudiomodelresources.Material_interiorVisibleAbsorptance(self)

    def exteriorVisibleAbsorptance(self):
        return _openstudiomodelresources.Material_exteriorVisibleAbsorptance(self)

    def standardsInformation(self):
        return _openstudiomodelresources.Material_standardsInformation(self)

    def setThickness(self, value):
        return _openstudiomodelresources.Material_setThickness(self, value)

# Register Material in _openstudiomodelresources:
_openstudiomodelresources.Material_swigregister(Material)

def toMaterial(idfObject):
    return _openstudiomodelresources.toMaterial(idfObject)

def getMaterial(t_model, t_handle):
    return _openstudiomodelresources.getMaterial(t_model, t_handle)

def getMaterials(t_model):
    return _openstudiomodelresources.getMaterials(t_model)

def getMaterialByName(t_model, t_name):
    return _openstudiomodelresources.getMaterialByName(t_model, t_name)

def getMaterialsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getMaterialsByName(t_model, t_name, t_exactMatch)

def _to_Material(self) -> OptionalMaterial:
    """Try to cast the ModelObject to a Material.

    :return: An Optional Material.
    """
    return toMaterial(self)
openstudioutilitiesidf.IdfObject.to_Material = _to_Material

def _getMaterial(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalMaterial:
    """Try to get an object of type Material referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Material.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getMaterial(self, t_handle)
Model.getMaterial = _getMaterial

def _getMaterials(self) -> MaterialVector:
    """Get a vector of all objects of type Material in the model.

    :return: A vector of Material.
    """
    return getMaterials(self)
Model.getMaterials = _getMaterials

def _getMaterialByName(self, t_name: str) -> OptionalMaterial:
    """Try to get an object of type Material that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Material.
    """
    return getMaterialByName(self, t_name)
Model.getMaterialByName = _getMaterialByName

def _getMaterialsByName(self, t_name: str, t_exactMatch: bool) -> MaterialVector:
    """Returns all objects of type Material named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getMaterialsByName(self, t_name, t_exactMatch)
Model.getMaterialsByName = _getMaterialsByName

class FenestrationMaterial(Material):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_FenestrationMaterial

    def __init__(self, *args):
        _openstudiomodelresources.FenestrationMaterial_swiginit(self, _openstudiomodelresources.new_FenestrationMaterial(*args))

    @staticmethod
    def ufactorInsideAirTemperature():
        return _openstudiomodelresources.FenestrationMaterial_ufactorInsideAirTemperature()

    @staticmethod
    def ufactorOutsideAirTemperature():
        return _openstudiomodelresources.FenestrationMaterial_ufactorOutsideAirTemperature()

    @staticmethod
    def airThermalConductivityCoefficients():
        return _openstudiomodelresources.FenestrationMaterial_airThermalConductivityCoefficients()

    @staticmethod
    def airViscosityCoefficients():
        return _openstudiomodelresources.FenestrationMaterial_airViscosityCoefficients()

    @staticmethod
    def airSpecificHeatCoefficients():
        return _openstudiomodelresources.FenestrationMaterial_airSpecificHeatCoefficients()

    @staticmethod
    def airMolecularWeight():
        return _openstudiomodelresources.FenestrationMaterial_airMolecularWeight()

    @staticmethod
    def argonThermalConductivityCoefficients():
        return _openstudiomodelresources.FenestrationMaterial_argonThermalConductivityCoefficients()

    @staticmethod
    def argonViscosityCoefficients():
        return _openstudiomodelresources.FenestrationMaterial_argonViscosityCoefficients()

    @staticmethod
    def argonSpecificHeatCoefficients():
        return _openstudiomodelresources.FenestrationMaterial_argonSpecificHeatCoefficients()

    @staticmethod
    def argonMolecularWeight():
        return _openstudiomodelresources.FenestrationMaterial_argonMolecularWeight()

    @staticmethod
    def kryptonThermalConductivityCoefficients():
        return _openstudiomodelresources.FenestrationMaterial_kryptonThermalConductivityCoefficients()

    @staticmethod
    def kryptonViscosityCoefficients():
        return _openstudiomodelresources.FenestrationMaterial_kryptonViscosityCoefficients()

    @staticmethod
    def kryptonSpecificHeatCoefficients():
        return _openstudiomodelresources.FenestrationMaterial_kryptonSpecificHeatCoefficients()

    @staticmethod
    def kryptonMolecularWeight():
        return _openstudiomodelresources.FenestrationMaterial_kryptonMolecularWeight()

    @staticmethod
    def xenonThermalConductivityCoefficients():
        return _openstudiomodelresources.FenestrationMaterial_xenonThermalConductivityCoefficients()

    @staticmethod
    def xenonViscosityCoefficients():
        return _openstudiomodelresources.FenestrationMaterial_xenonViscosityCoefficients()

    @staticmethod
    def xenonSpecificHeatCoefficients():
        return _openstudiomodelresources.FenestrationMaterial_xenonSpecificHeatCoefficients()

    @staticmethod
    def xenonMolecularWeight():
        return _openstudiomodelresources.FenestrationMaterial_xenonMolecularWeight()

# Register FenestrationMaterial in _openstudiomodelresources:
_openstudiomodelresources.FenestrationMaterial_swigregister(FenestrationMaterial)

def toFenestrationMaterial(idfObject):
    return _openstudiomodelresources.toFenestrationMaterial(idfObject)

def getFenestrationMaterial(t_model, t_handle):
    return _openstudiomodelresources.getFenestrationMaterial(t_model, t_handle)

def getFenestrationMaterials(t_model):
    return _openstudiomodelresources.getFenestrationMaterials(t_model)

def getFenestrationMaterialByName(t_model, t_name):
    return _openstudiomodelresources.getFenestrationMaterialByName(t_model, t_name)

def getFenestrationMaterialsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getFenestrationMaterialsByName(t_model, t_name, t_exactMatch)

def _to_FenestrationMaterial(self) -> OptionalFenestrationMaterial:
    """Try to cast the ModelObject to a FenestrationMaterial.

    :return: An Optional FenestrationMaterial.
    """
    return toFenestrationMaterial(self)
openstudioutilitiesidf.IdfObject.to_FenestrationMaterial = _to_FenestrationMaterial

def _getFenestrationMaterial(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalFenestrationMaterial:
    """Try to get an object of type FenestrationMaterial referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional FenestrationMaterial.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getFenestrationMaterial(self, t_handle)
Model.getFenestrationMaterial = _getFenestrationMaterial

def _getFenestrationMaterials(self) -> FenestrationMaterialVector:
    """Get a vector of all objects of type FenestrationMaterial in the model.

    :return: A vector of FenestrationMaterial.
    """
    return getFenestrationMaterials(self)
Model.getFenestrationMaterials = _getFenestrationMaterials

def _getFenestrationMaterialByName(self, t_name: str) -> OptionalFenestrationMaterial:
    """Try to get an object of type FenestrationMaterial that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional FenestrationMaterial.
    """
    return getFenestrationMaterialByName(self, t_name)
Model.getFenestrationMaterialByName = _getFenestrationMaterialByName

def _getFenestrationMaterialsByName(self, t_name: str, t_exactMatch: bool) -> FenestrationMaterialVector:
    """Returns all objects of type FenestrationMaterial named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getFenestrationMaterialsByName(self, t_name, t_exactMatch)
Model.getFenestrationMaterialsByName = _getFenestrationMaterialsByName

class GasLayer(FenestrationMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_GasLayer

    def __init__(self, *args):
        _openstudiomodelresources.GasLayer_swiginit(self, _openstudiomodelresources.new_GasLayer(*args))

# Register GasLayer in _openstudiomodelresources:
_openstudiomodelresources.GasLayer_swigregister(GasLayer)

def toGasLayer(idfObject):
    return _openstudiomodelresources.toGasLayer(idfObject)

def getGasLayer(t_model, t_handle):
    return _openstudiomodelresources.getGasLayer(t_model, t_handle)

def getGasLayers(t_model):
    return _openstudiomodelresources.getGasLayers(t_model)

def getGasLayerByName(t_model, t_name):
    return _openstudiomodelresources.getGasLayerByName(t_model, t_name)

def getGasLayersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getGasLayersByName(t_model, t_name, t_exactMatch)

def _to_GasLayer(self) -> OptionalGasLayer:
    """Try to cast the ModelObject to a GasLayer.

    :return: An Optional GasLayer.
    """
    return toGasLayer(self)
openstudioutilitiesidf.IdfObject.to_GasLayer = _to_GasLayer

def _getGasLayer(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGasLayer:
    """Try to get an object of type GasLayer referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GasLayer.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGasLayer(self, t_handle)
Model.getGasLayer = _getGasLayer

def _getGasLayers(self) -> GasLayerVector:
    """Get a vector of all objects of type GasLayer in the model.

    :return: A vector of GasLayer.
    """
    return getGasLayers(self)
Model.getGasLayers = _getGasLayers

def _getGasLayerByName(self, t_name: str) -> OptionalGasLayer:
    """Try to get an object of type GasLayer that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GasLayer.
    """
    return getGasLayerByName(self, t_name)
Model.getGasLayerByName = _getGasLayerByName

def _getGasLayersByName(self, t_name: str, t_exactMatch: bool) -> GasLayerVector:
    """Returns all objects of type GasLayer named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGasLayersByName(self, t_name, t_exactMatch)
Model.getGasLayersByName = _getGasLayersByName

class Glazing(FenestrationMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_Glazing

    def __init__(self, *args):
        _openstudiomodelresources.Glazing_swiginit(self, _openstudiomodelresources.new_Glazing(*args))

# Register Glazing in _openstudiomodelresources:
_openstudiomodelresources.Glazing_swigregister(Glazing)

def toGlazing(idfObject):
    return _openstudiomodelresources.toGlazing(idfObject)

def getGlazing(t_model, t_handle):
    return _openstudiomodelresources.getGlazing(t_model, t_handle)

def getGlazings(t_model):
    return _openstudiomodelresources.getGlazings(t_model)

def getGlazingByName(t_model, t_name):
    return _openstudiomodelresources.getGlazingByName(t_model, t_name)

def getGlazingsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getGlazingsByName(t_model, t_name, t_exactMatch)

def _to_Glazing(self) -> OptionalGlazing:
    """Try to cast the ModelObject to a Glazing.

    :return: An Optional Glazing.
    """
    return toGlazing(self)
openstudioutilitiesidf.IdfObject.to_Glazing = _to_Glazing

def _getGlazing(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGlazing:
    """Try to get an object of type Glazing referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Glazing.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGlazing(self, t_handle)
Model.getGlazing = _getGlazing

def _getGlazings(self) -> GlazingVector:
    """Get a vector of all objects of type Glazing in the model.

    :return: A vector of Glazing.
    """
    return getGlazings(self)
Model.getGlazings = _getGlazings

def _getGlazingByName(self, t_name: str) -> OptionalGlazing:
    """Try to get an object of type Glazing that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Glazing.
    """
    return getGlazingByName(self, t_name)
Model.getGlazingByName = _getGlazingByName

def _getGlazingsByName(self, t_name: str, t_exactMatch: bool) -> GlazingVector:
    """Returns all objects of type Glazing named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGlazingsByName(self, t_name, t_exactMatch)
Model.getGlazingsByName = _getGlazingsByName

class ShadingMaterial(FenestrationMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ShadingMaterial

    def __init__(self, *args):
        _openstudiomodelresources.ShadingMaterial_swiginit(self, _openstudiomodelresources.new_ShadingMaterial(*args))

# Register ShadingMaterial in _openstudiomodelresources:
_openstudiomodelresources.ShadingMaterial_swigregister(ShadingMaterial)

def toShadingMaterial(idfObject):
    return _openstudiomodelresources.toShadingMaterial(idfObject)

def getShadingMaterial(t_model, t_handle):
    return _openstudiomodelresources.getShadingMaterial(t_model, t_handle)

def getShadingMaterials(t_model):
    return _openstudiomodelresources.getShadingMaterials(t_model)

def getShadingMaterialByName(t_model, t_name):
    return _openstudiomodelresources.getShadingMaterialByName(t_model, t_name)

def getShadingMaterialsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getShadingMaterialsByName(t_model, t_name, t_exactMatch)

def _to_ShadingMaterial(self) -> OptionalShadingMaterial:
    """Try to cast the ModelObject to a ShadingMaterial.

    :return: An Optional ShadingMaterial.
    """
    return toShadingMaterial(self)
openstudioutilitiesidf.IdfObject.to_ShadingMaterial = _to_ShadingMaterial

def _getShadingMaterial(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalShadingMaterial:
    """Try to get an object of type ShadingMaterial referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ShadingMaterial.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getShadingMaterial(self, t_handle)
Model.getShadingMaterial = _getShadingMaterial

def _getShadingMaterials(self) -> ShadingMaterialVector:
    """Get a vector of all objects of type ShadingMaterial in the model.

    :return: A vector of ShadingMaterial.
    """
    return getShadingMaterials(self)
Model.getShadingMaterials = _getShadingMaterials

def _getShadingMaterialByName(self, t_name: str) -> OptionalShadingMaterial:
    """Try to get an object of type ShadingMaterial that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ShadingMaterial.
    """
    return getShadingMaterialByName(self, t_name)
Model.getShadingMaterialByName = _getShadingMaterialByName

def _getShadingMaterialsByName(self, t_name: str, t_exactMatch: bool) -> ShadingMaterialVector:
    """Returns all objects of type ShadingMaterial named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getShadingMaterialsByName(self, t_name, t_exactMatch)
Model.getShadingMaterialsByName = _getShadingMaterialsByName

class ModelPartitionMaterial(Material):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ModelPartitionMaterial

    def __init__(self, *args):
        _openstudiomodelresources.ModelPartitionMaterial_swiginit(self, _openstudiomodelresources.new_ModelPartitionMaterial(*args))

# Register ModelPartitionMaterial in _openstudiomodelresources:
_openstudiomodelresources.ModelPartitionMaterial_swigregister(ModelPartitionMaterial)

def toModelPartitionMaterial(idfObject):
    return _openstudiomodelresources.toModelPartitionMaterial(idfObject)

def getModelPartitionMaterial(t_model, t_handle):
    return _openstudiomodelresources.getModelPartitionMaterial(t_model, t_handle)

def getModelPartitionMaterials(t_model):
    return _openstudiomodelresources.getModelPartitionMaterials(t_model)

def getModelPartitionMaterialByName(t_model, t_name):
    return _openstudiomodelresources.getModelPartitionMaterialByName(t_model, t_name)

def getModelPartitionMaterialsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getModelPartitionMaterialsByName(t_model, t_name, t_exactMatch)

def _to_ModelPartitionMaterial(self) -> OptionalModelPartitionMaterial:
    """Try to cast the ModelObject to a ModelPartitionMaterial.

    :return: An Optional ModelPartitionMaterial.
    """
    return toModelPartitionMaterial(self)
openstudioutilitiesidf.IdfObject.to_ModelPartitionMaterial = _to_ModelPartitionMaterial

def _getModelPartitionMaterial(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalModelPartitionMaterial:
    """Try to get an object of type ModelPartitionMaterial referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ModelPartitionMaterial.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getModelPartitionMaterial(self, t_handle)
Model.getModelPartitionMaterial = _getModelPartitionMaterial

def _getModelPartitionMaterials(self) -> ModelPartitionMaterialVector:
    """Get a vector of all objects of type ModelPartitionMaterial in the model.

    :return: A vector of ModelPartitionMaterial.
    """
    return getModelPartitionMaterials(self)
Model.getModelPartitionMaterials = _getModelPartitionMaterials

def _getModelPartitionMaterialByName(self, t_name: str) -> OptionalModelPartitionMaterial:
    """Try to get an object of type ModelPartitionMaterial that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ModelPartitionMaterial.
    """
    return getModelPartitionMaterialByName(self, t_name)
Model.getModelPartitionMaterialByName = _getModelPartitionMaterialByName

def _getModelPartitionMaterialsByName(self, t_name: str, t_exactMatch: bool) -> ModelPartitionMaterialVector:
    """Returns all objects of type ModelPartitionMaterial named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getModelPartitionMaterialsByName(self, t_name, t_exactMatch)
Model.getModelPartitionMaterialsByName = _getModelPartitionMaterialsByName

class OpaqueMaterial(Material):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_OpaqueMaterial

    def __init__(self, *args):
        _openstudiomodelresources.OpaqueMaterial_swiginit(self, _openstudiomodelresources.new_OpaqueMaterial(*args))

    def thermalConductivity(self):
        return _openstudiomodelresources.OpaqueMaterial_thermalConductivity(self)

    def thermalConductance(self):
        return _openstudiomodelresources.OpaqueMaterial_thermalConductance(self)

    def thermalResistivity(self):
        return _openstudiomodelresources.OpaqueMaterial_thermalResistivity(self)

    def thermalResistance(self):
        return _openstudiomodelresources.OpaqueMaterial_thermalResistance(self)

    def thermalAbsorptance(self):
        return _openstudiomodelresources.OpaqueMaterial_thermalAbsorptance(self)

    def thermalReflectance(self):
        return _openstudiomodelresources.OpaqueMaterial_thermalReflectance(self)

    def solarAbsorptance(self):
        return _openstudiomodelresources.OpaqueMaterial_solarAbsorptance(self)

    def solarReflectance(self):
        return _openstudiomodelresources.OpaqueMaterial_solarReflectance(self)

    def visibleAbsorptance(self):
        return _openstudiomodelresources.OpaqueMaterial_visibleAbsorptance(self)

    def visibleReflectance(self):
        return _openstudiomodelresources.OpaqueMaterial_visibleReflectance(self)

    def setThermalConductivity(self, value):
        return _openstudiomodelresources.OpaqueMaterial_setThermalConductivity(self, value)

    def setThermalConductance(self, value):
        return _openstudiomodelresources.OpaqueMaterial_setThermalConductance(self, value)

    def setThermalResistivity(self, value):
        return _openstudiomodelresources.OpaqueMaterial_setThermalResistivity(self, value)

    def setThermalResistance(self, value):
        return _openstudiomodelresources.OpaqueMaterial_setThermalResistance(self, value)

    def setThermalAbsorptance(self, value):
        return _openstudiomodelresources.OpaqueMaterial_setThermalAbsorptance(self, value)

    def setThermalReflectance(self, value):
        return _openstudiomodelresources.OpaqueMaterial_setThermalReflectance(self, value)

    def setSolarAbsorptance(self, value):
        return _openstudiomodelresources.OpaqueMaterial_setSolarAbsorptance(self, value)

    def setSolarReflectance(self, value):
        return _openstudiomodelresources.OpaqueMaterial_setSolarReflectance(self, value)

    def setVisibleAbsorptance(self, value):
        return _openstudiomodelresources.OpaqueMaterial_setVisibleAbsorptance(self, value)

    def setVisibleReflectance(self, value):
        return _openstudiomodelresources.OpaqueMaterial_setVisibleReflectance(self, value)

    def heatCapacity(self):
        return _openstudiomodelresources.OpaqueMaterial_heatCapacity(self)

# Register OpaqueMaterial in _openstudiomodelresources:
_openstudiomodelresources.OpaqueMaterial_swigregister(OpaqueMaterial)

def toOpaqueMaterial(idfObject):
    return _openstudiomodelresources.toOpaqueMaterial(idfObject)

def getOpaqueMaterial(t_model, t_handle):
    return _openstudiomodelresources.getOpaqueMaterial(t_model, t_handle)

def getOpaqueMaterials(t_model):
    return _openstudiomodelresources.getOpaqueMaterials(t_model)

def getOpaqueMaterialByName(t_model, t_name):
    return _openstudiomodelresources.getOpaqueMaterialByName(t_model, t_name)

def getOpaqueMaterialsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getOpaqueMaterialsByName(t_model, t_name, t_exactMatch)

def _to_OpaqueMaterial(self) -> OptionalOpaqueMaterial:
    """Try to cast the ModelObject to a OpaqueMaterial.

    :return: An Optional OpaqueMaterial.
    """
    return toOpaqueMaterial(self)
openstudioutilitiesidf.IdfObject.to_OpaqueMaterial = _to_OpaqueMaterial

def _getOpaqueMaterial(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalOpaqueMaterial:
    """Try to get an object of type OpaqueMaterial referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional OpaqueMaterial.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getOpaqueMaterial(self, t_handle)
Model.getOpaqueMaterial = _getOpaqueMaterial

def _getOpaqueMaterials(self) -> OpaqueMaterialVector:
    """Get a vector of all objects of type OpaqueMaterial in the model.

    :return: A vector of OpaqueMaterial.
    """
    return getOpaqueMaterials(self)
Model.getOpaqueMaterials = _getOpaqueMaterials

def _getOpaqueMaterialByName(self, t_name: str) -> OptionalOpaqueMaterial:
    """Try to get an object of type OpaqueMaterial that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional OpaqueMaterial.
    """
    return getOpaqueMaterialByName(self, t_name)
Model.getOpaqueMaterialByName = _getOpaqueMaterialByName

def _getOpaqueMaterialsByName(self, t_name: str, t_exactMatch: bool) -> OpaqueMaterialVector:
    """Returns all objects of type OpaqueMaterial named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getOpaqueMaterialsByName(self, t_name, t_exactMatch)
Model.getOpaqueMaterialsByName = _getOpaqueMaterialsByName

class Blind(ShadingMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_Blind

    def __init__(self, *args):
        _openstudiomodelresources.Blind_swiginit(self, _openstudiomodelresources.new_Blind(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.Blind_iddObjectType()

    @staticmethod
    def slatOrientationValues():
        return _openstudiomodelresources.Blind_slatOrientationValues()

    def slatOrientation(self):
        return _openstudiomodelresources.Blind_slatOrientation(self)

    def isSlatOrientationDefaulted(self):
        return _openstudiomodelresources.Blind_isSlatOrientationDefaulted(self)

    def slatWidth(self):
        return _openstudiomodelresources.Blind_slatWidth(self)

    def slatSeparation(self):
        return _openstudiomodelresources.Blind_slatSeparation(self)

    def slatThickness(self):
        return _openstudiomodelresources.Blind_slatThickness(self)

    def isSlatThicknessDefaulted(self):
        return _openstudiomodelresources.Blind_isSlatThicknessDefaulted(self)

    def slatAngle(self):
        return _openstudiomodelresources.Blind_slatAngle(self)

    def isSlatAngleDefaulted(self):
        return _openstudiomodelresources.Blind_isSlatAngleDefaulted(self)

    def slatConductivity(self):
        return _openstudiomodelresources.Blind_slatConductivity(self)

    def isSlatConductivityDefaulted(self):
        return _openstudiomodelresources.Blind_isSlatConductivityDefaulted(self)

    def slatBeamSolarTransmittance(self):
        return _openstudiomodelresources.Blind_slatBeamSolarTransmittance(self)

    def isSlatBeamSolarTransmittanceDefaulted(self):
        return _openstudiomodelresources.Blind_isSlatBeamSolarTransmittanceDefaulted(self)

    def frontSideSlatBeamSolarReflectance(self):
        return _openstudiomodelresources.Blind_frontSideSlatBeamSolarReflectance(self)

    def backSideSlatBeamSolarReflectance(self):
        return _openstudiomodelresources.Blind_backSideSlatBeamSolarReflectance(self)

    def slatDiffuseSolarTransmittance(self):
        return _openstudiomodelresources.Blind_slatDiffuseSolarTransmittance(self)

    def isSlatDiffuseSolarTransmittanceDefaulted(self):
        return _openstudiomodelresources.Blind_isSlatDiffuseSolarTransmittanceDefaulted(self)

    def frontSideSlatDiffuseSolarReflectance(self):
        return _openstudiomodelresources.Blind_frontSideSlatDiffuseSolarReflectance(self)

    def backSideSlatDiffuseSolarReflectance(self):
        return _openstudiomodelresources.Blind_backSideSlatDiffuseSolarReflectance(self)

    def slatBeamVisibleTransmittance(self):
        return _openstudiomodelresources.Blind_slatBeamVisibleTransmittance(self)

    def frontSideSlatBeamVisibleReflectance(self):
        return _openstudiomodelresources.Blind_frontSideSlatBeamVisibleReflectance(self)

    def backSideSlatBeamVisibleReflectance(self):
        return _openstudiomodelresources.Blind_backSideSlatBeamVisibleReflectance(self)

    def slatDiffuseVisibleTransmittance(self):
        return _openstudiomodelresources.Blind_slatDiffuseVisibleTransmittance(self)

    def isSlatDiffuseVisibleTransmittanceDefaulted(self):
        return _openstudiomodelresources.Blind_isSlatDiffuseVisibleTransmittanceDefaulted(self)

    def frontSideSlatDiffuseVisibleReflectance(self):
        return _openstudiomodelresources.Blind_frontSideSlatDiffuseVisibleReflectance(self)

    def backSideSlatDiffuseVisibleReflectance(self):
        return _openstudiomodelresources.Blind_backSideSlatDiffuseVisibleReflectance(self)

    def slatInfraredHemisphericalTransmittance(self):
        return _openstudiomodelresources.Blind_slatInfraredHemisphericalTransmittance(self)

    def isSlatInfraredHemisphericalTransmittanceDefaulted(self):
        return _openstudiomodelresources.Blind_isSlatInfraredHemisphericalTransmittanceDefaulted(self)

    def frontSideSlatInfraredHemisphericalEmissivity(self):
        return _openstudiomodelresources.Blind_frontSideSlatInfraredHemisphericalEmissivity(self)

    def isFrontSideSlatInfraredHemisphericalEmissivityDefaulted(self):
        return _openstudiomodelresources.Blind_isFrontSideSlatInfraredHemisphericalEmissivityDefaulted(self)

    def backSideSlatInfraredHemisphericalEmissivity(self):
        return _openstudiomodelresources.Blind_backSideSlatInfraredHemisphericalEmissivity(self)

    def isBackSideSlatInfraredHemisphericalEmissivityDefaulted(self):
        return _openstudiomodelresources.Blind_isBackSideSlatInfraredHemisphericalEmissivityDefaulted(self)

    def blindtoGlassDistance(self):
        return _openstudiomodelresources.Blind_blindtoGlassDistance(self)

    def isBlindtoGlassDistanceDefaulted(self):
        return _openstudiomodelresources.Blind_isBlindtoGlassDistanceDefaulted(self)

    def blindTopOpeningMultiplier(self):
        return _openstudiomodelresources.Blind_blindTopOpeningMultiplier(self)

    def isBlindTopOpeningMultiplierDefaulted(self):
        return _openstudiomodelresources.Blind_isBlindTopOpeningMultiplierDefaulted(self)

    def blindBottomOpeningMultiplier(self):
        return _openstudiomodelresources.Blind_blindBottomOpeningMultiplier(self)

    def isBlindBottomOpeningMultiplierDefaulted(self):
        return _openstudiomodelresources.Blind_isBlindBottomOpeningMultiplierDefaulted(self)

    def blindLeftSideOpeningMultiplier(self):
        return _openstudiomodelresources.Blind_blindLeftSideOpeningMultiplier(self)

    def isBlindLeftSideOpeningMultiplierDefaulted(self):
        return _openstudiomodelresources.Blind_isBlindLeftSideOpeningMultiplierDefaulted(self)

    def blindRightSideOpeningMultiplier(self):
        return _openstudiomodelresources.Blind_blindRightSideOpeningMultiplier(self)

    def isBlindRightSideOpeningMultiplierDefaulted(self):
        return _openstudiomodelresources.Blind_isBlindRightSideOpeningMultiplierDefaulted(self)

    def minimumSlatAngle(self):
        return _openstudiomodelresources.Blind_minimumSlatAngle(self)

    def isMinimumSlatAngleDefaulted(self):
        return _openstudiomodelresources.Blind_isMinimumSlatAngleDefaulted(self)

    def maximumSlatAngle(self):
        return _openstudiomodelresources.Blind_maximumSlatAngle(self)

    def isMaximumSlatAngleDefaulted(self):
        return _openstudiomodelresources.Blind_isMaximumSlatAngleDefaulted(self)

    def setSlatOrientation(self, slatOrientation):
        return _openstudiomodelresources.Blind_setSlatOrientation(self, slatOrientation)

    def resetSlatOrientation(self):
        return _openstudiomodelresources.Blind_resetSlatOrientation(self)

    def setSlatWidth(self, slatWidth):
        return _openstudiomodelresources.Blind_setSlatWidth(self, slatWidth)

    def setSlatSeparation(self, slatSeparation):
        return _openstudiomodelresources.Blind_setSlatSeparation(self, slatSeparation)

    def setSlatThickness(self, slatThickness):
        return _openstudiomodelresources.Blind_setSlatThickness(self, slatThickness)

    def resetSlatThickness(self):
        return _openstudiomodelresources.Blind_resetSlatThickness(self)

    def setSlatAngle(self, slatAngle):
        return _openstudiomodelresources.Blind_setSlatAngle(self, slatAngle)

    def resetSlatAngle(self):
        return _openstudiomodelresources.Blind_resetSlatAngle(self)

    def setSlatConductivity(self, slatConductivity):
        return _openstudiomodelresources.Blind_setSlatConductivity(self, slatConductivity)

    def resetSlatConductivity(self):
        return _openstudiomodelresources.Blind_resetSlatConductivity(self)

    def setSlatBeamSolarTransmittance(self, slatBeamSolarTransmittance):
        return _openstudiomodelresources.Blind_setSlatBeamSolarTransmittance(self, slatBeamSolarTransmittance)

    def resetSlatBeamSolarTransmittance(self):
        return _openstudiomodelresources.Blind_resetSlatBeamSolarTransmittance(self)

    def setFrontSideSlatBeamSolarReflectance(self, frontSideSlatBeamSolarReflectance):
        return _openstudiomodelresources.Blind_setFrontSideSlatBeamSolarReflectance(self, frontSideSlatBeamSolarReflectance)

    def setBackSideSlatBeamSolarReflectance(self, backSideSlatBeamSolarReflectance):
        return _openstudiomodelresources.Blind_setBackSideSlatBeamSolarReflectance(self, backSideSlatBeamSolarReflectance)

    def setSlatDiffuseSolarTransmittance(self, slatDiffuseSolarTransmittance):
        return _openstudiomodelresources.Blind_setSlatDiffuseSolarTransmittance(self, slatDiffuseSolarTransmittance)

    def resetSlatDiffuseSolarTransmittance(self):
        return _openstudiomodelresources.Blind_resetSlatDiffuseSolarTransmittance(self)

    def setFrontSideSlatDiffuseSolarReflectance(self, frontSideSlatDiffuseSolarReflectance):
        return _openstudiomodelresources.Blind_setFrontSideSlatDiffuseSolarReflectance(self, frontSideSlatDiffuseSolarReflectance)

    def setBackSideSlatDiffuseSolarReflectance(self, backSideSlatDiffuseSolarReflectance):
        return _openstudiomodelresources.Blind_setBackSideSlatDiffuseSolarReflectance(self, backSideSlatDiffuseSolarReflectance)

    def setSlatBeamVisibleTransmittance(self, slatBeamVisibleTransmittance):
        return _openstudiomodelresources.Blind_setSlatBeamVisibleTransmittance(self, slatBeamVisibleTransmittance)

    def setFrontSideSlatBeamVisibleReflectance(self, frontSideSlatBeamVisibleReflectance):
        return _openstudiomodelresources.Blind_setFrontSideSlatBeamVisibleReflectance(self, frontSideSlatBeamVisibleReflectance)

    def resetFrontSideSlatBeamVisibleReflectance(self):
        return _openstudiomodelresources.Blind_resetFrontSideSlatBeamVisibleReflectance(self)

    def setBackSideSlatBeamVisibleReflectance(self, backSideSlatBeamVisibleReflectance):
        return _openstudiomodelresources.Blind_setBackSideSlatBeamVisibleReflectance(self, backSideSlatBeamVisibleReflectance)

    def resetBackSideSlatBeamVisibleReflectance(self):
        return _openstudiomodelresources.Blind_resetBackSideSlatBeamVisibleReflectance(self)

    def setSlatDiffuseVisibleTransmittance(self, slatDiffuseVisibleTransmittance):
        return _openstudiomodelresources.Blind_setSlatDiffuseVisibleTransmittance(self, slatDiffuseVisibleTransmittance)

    def resetSlatDiffuseVisibleTransmittance(self):
        return _openstudiomodelresources.Blind_resetSlatDiffuseVisibleTransmittance(self)

    def setFrontSideSlatDiffuseVisibleReflectance(self, frontSideSlatDiffuseVisibleReflectance):
        return _openstudiomodelresources.Blind_setFrontSideSlatDiffuseVisibleReflectance(self, frontSideSlatDiffuseVisibleReflectance)

    def resetFrontSideSlatDiffuseVisibleReflectance(self):
        return _openstudiomodelresources.Blind_resetFrontSideSlatDiffuseVisibleReflectance(self)

    def setBackSideSlatDiffuseVisibleReflectance(self, backSideSlatDiffuseVisibleReflectance):
        return _openstudiomodelresources.Blind_setBackSideSlatDiffuseVisibleReflectance(self, backSideSlatDiffuseVisibleReflectance)

    def resetBackSideSlatDiffuseVisibleReflectance(self):
        return _openstudiomodelresources.Blind_resetBackSideSlatDiffuseVisibleReflectance(self)

    def setSlatInfraredHemisphericalTransmittance(self, slatInfraredHemisphericalTransmittance):
        return _openstudiomodelresources.Blind_setSlatInfraredHemisphericalTransmittance(self, slatInfraredHemisphericalTransmittance)

    def resetSlatInfraredHemisphericalTransmittance(self):
        return _openstudiomodelresources.Blind_resetSlatInfraredHemisphericalTransmittance(self)

    def setFrontSideSlatInfraredHemisphericalEmissivity(self, frontSideSlatInfraredHemisphericalEmissivity):
        return _openstudiomodelresources.Blind_setFrontSideSlatInfraredHemisphericalEmissivity(self, frontSideSlatInfraredHemisphericalEmissivity)

    def resetFrontSideSlatInfraredHemisphericalEmissivity(self):
        return _openstudiomodelresources.Blind_resetFrontSideSlatInfraredHemisphericalEmissivity(self)

    def setBackSideSlatInfraredHemisphericalEmissivity(self, backSideSlatInfraredHemisphericalEmissivity):
        return _openstudiomodelresources.Blind_setBackSideSlatInfraredHemisphericalEmissivity(self, backSideSlatInfraredHemisphericalEmissivity)

    def resetBackSideSlatInfraredHemisphericalEmissivity(self):
        return _openstudiomodelresources.Blind_resetBackSideSlatInfraredHemisphericalEmissivity(self)

    def setBlindtoGlassDistance(self, blindtoGlassDistance):
        return _openstudiomodelresources.Blind_setBlindtoGlassDistance(self, blindtoGlassDistance)

    def resetBlindtoGlassDistance(self):
        return _openstudiomodelresources.Blind_resetBlindtoGlassDistance(self)

    def setBlindTopOpeningMultiplier(self, blindTopOpeningMultiplier):
        return _openstudiomodelresources.Blind_setBlindTopOpeningMultiplier(self, blindTopOpeningMultiplier)

    def resetBlindTopOpeningMultiplier(self):
        return _openstudiomodelresources.Blind_resetBlindTopOpeningMultiplier(self)

    def setBlindBottomOpeningMultiplier(self, blindBottomOpeningMultiplier):
        return _openstudiomodelresources.Blind_setBlindBottomOpeningMultiplier(self, blindBottomOpeningMultiplier)

    def resetBlindBottomOpeningMultiplier(self):
        return _openstudiomodelresources.Blind_resetBlindBottomOpeningMultiplier(self)

    def setBlindLeftSideOpeningMultiplier(self, blindLeftSideOpeningMultiplier):
        return _openstudiomodelresources.Blind_setBlindLeftSideOpeningMultiplier(self, blindLeftSideOpeningMultiplier)

    def resetBlindLeftSideOpeningMultiplier(self):
        return _openstudiomodelresources.Blind_resetBlindLeftSideOpeningMultiplier(self)

    def setBlindRightSideOpeningMultiplier(self, blindRightSideOpeningMultiplier):
        return _openstudiomodelresources.Blind_setBlindRightSideOpeningMultiplier(self, blindRightSideOpeningMultiplier)

    def resetBlindRightSideOpeningMultiplier(self):
        return _openstudiomodelresources.Blind_resetBlindRightSideOpeningMultiplier(self)

    def setMinimumSlatAngle(self, minimumSlatAngle):
        return _openstudiomodelresources.Blind_setMinimumSlatAngle(self, minimumSlatAngle)

    def resetMinimumSlatAngle(self):
        return _openstudiomodelresources.Blind_resetMinimumSlatAngle(self)

    def setMaximumSlatAngle(self, maximumSlatAngle):
        return _openstudiomodelresources.Blind_setMaximumSlatAngle(self, maximumSlatAngle)

    def resetMaximumSlatAngle(self):
        return _openstudiomodelresources.Blind_resetMaximumSlatAngle(self)

# Register Blind in _openstudiomodelresources:
_openstudiomodelresources.Blind_swigregister(Blind)

def toBlind(idfObject):
    return _openstudiomodelresources.toBlind(idfObject)

def getBlind(t_model, t_handle):
    return _openstudiomodelresources.getBlind(t_model, t_handle)

def getBlinds(t_model):
    return _openstudiomodelresources.getBlinds(t_model)

def getBlindByName(t_model, t_name):
    return _openstudiomodelresources.getBlindByName(t_model, t_name)

def getBlindsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getBlindsByName(t_model, t_name, t_exactMatch)

def _to_Blind(self) -> OptionalBlind:
    """Try to cast the ModelObject to a Blind.

    :return: An Optional Blind.
    """
    return toBlind(self)
openstudioutilitiesidf.IdfObject.to_Blind = _to_Blind

def _getBlind(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalBlind:
    """Try to get an object of type Blind referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Blind.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getBlind(self, t_handle)
Model.getBlind = _getBlind

def _getBlinds(self) -> BlindVector:
    """Get a vector of all objects of type Blind in the model.

    :return: A vector of Blind.
    """
    return getBlinds(self)
Model.getBlinds = _getBlinds

def _getBlindByName(self, t_name: str) -> OptionalBlind:
    """Try to get an object of type Blind that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Blind.
    """
    return getBlindByName(self, t_name)
Model.getBlindByName = _getBlindByName

def _getBlindsByName(self, t_name: str, t_exactMatch: bool) -> BlindVector:
    """Returns all objects of type Blind named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getBlindsByName(self, t_name, t_exactMatch)
Model.getBlindsByName = _getBlindsByName

class DaylightRedirectionDevice(ShadingMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_DaylightRedirectionDevice

    def __init__(self, *args):
        _openstudiomodelresources.DaylightRedirectionDevice_swiginit(self, _openstudiomodelresources.new_DaylightRedirectionDevice(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.DaylightRedirectionDevice_iddObjectType()

    @staticmethod
    def daylightRedirectionDeviceTypeValues():
        return _openstudiomodelresources.DaylightRedirectionDevice_daylightRedirectionDeviceTypeValues()

    def daylightRedirectionDeviceType(self):
        return _openstudiomodelresources.DaylightRedirectionDevice_daylightRedirectionDeviceType(self)

    def isDaylightRedirectionDeviceTypeDefaulted(self):
        return _openstudiomodelresources.DaylightRedirectionDevice_isDaylightRedirectionDeviceTypeDefaulted(self)

    def setDaylightRedirectionDeviceType(self, daylightRedirectionDeviceType):
        return _openstudiomodelresources.DaylightRedirectionDevice_setDaylightRedirectionDeviceType(self, daylightRedirectionDeviceType)

    def resetDaylightRedirectionDeviceType(self):
        return _openstudiomodelresources.DaylightRedirectionDevice_resetDaylightRedirectionDeviceType(self)

# Register DaylightRedirectionDevice in _openstudiomodelresources:
_openstudiomodelresources.DaylightRedirectionDevice_swigregister(DaylightRedirectionDevice)

def toDaylightRedirectionDevice(idfObject):
    return _openstudiomodelresources.toDaylightRedirectionDevice(idfObject)

def getDaylightRedirectionDevice(t_model, t_handle):
    return _openstudiomodelresources.getDaylightRedirectionDevice(t_model, t_handle)

def getDaylightRedirectionDevices(t_model):
    return _openstudiomodelresources.getDaylightRedirectionDevices(t_model)

def getDaylightRedirectionDeviceByName(t_model, t_name):
    return _openstudiomodelresources.getDaylightRedirectionDeviceByName(t_model, t_name)

def getDaylightRedirectionDevicesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getDaylightRedirectionDevicesByName(t_model, t_name, t_exactMatch)

def _to_DaylightRedirectionDevice(self) -> OptionalDaylightRedirectionDevice:
    """Try to cast the ModelObject to a DaylightRedirectionDevice.

    :return: An Optional DaylightRedirectionDevice.
    """
    return toDaylightRedirectionDevice(self)
openstudioutilitiesidf.IdfObject.to_DaylightRedirectionDevice = _to_DaylightRedirectionDevice

def _getDaylightRedirectionDevice(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalDaylightRedirectionDevice:
    """Try to get an object of type DaylightRedirectionDevice referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional DaylightRedirectionDevice.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getDaylightRedirectionDevice(self, t_handle)
Model.getDaylightRedirectionDevice = _getDaylightRedirectionDevice

def _getDaylightRedirectionDevices(self) -> DaylightRedirectionDeviceVector:
    """Get a vector of all objects of type DaylightRedirectionDevice in the model.

    :return: A vector of DaylightRedirectionDevice.
    """
    return getDaylightRedirectionDevices(self)
Model.getDaylightRedirectionDevices = _getDaylightRedirectionDevices

def _getDaylightRedirectionDeviceByName(self, t_name: str) -> OptionalDaylightRedirectionDevice:
    """Try to get an object of type DaylightRedirectionDevice that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional DaylightRedirectionDevice.
    """
    return getDaylightRedirectionDeviceByName(self, t_name)
Model.getDaylightRedirectionDeviceByName = _getDaylightRedirectionDeviceByName

def _getDaylightRedirectionDevicesByName(self, t_name: str, t_exactMatch: bool) -> DaylightRedirectionDeviceVector:
    """Returns all objects of type DaylightRedirectionDevice named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getDaylightRedirectionDevicesByName(self, t_name, t_exactMatch)
Model.getDaylightRedirectionDevicesByName = _getDaylightRedirectionDevicesByName

class AirGap(OpaqueMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_AirGap

    def __init__(self, *args):
        _openstudiomodelresources.AirGap_swiginit(self, _openstudiomodelresources.new_AirGap(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.AirGap_iddObjectType()

    def thermalResistance(self):
        return _openstudiomodelresources.AirGap_thermalResistance(self)

    def setThermalResistance(self, thermalResistance):
        return _openstudiomodelresources.AirGap_setThermalResistance(self, thermalResistance)

    def resetThermalResistance(self):
        return _openstudiomodelresources.AirGap_resetThermalResistance(self)

# Register AirGap in _openstudiomodelresources:
_openstudiomodelresources.AirGap_swigregister(AirGap)

def toAirGap(idfObject):
    return _openstudiomodelresources.toAirGap(idfObject)

def getAirGap(t_model, t_handle):
    return _openstudiomodelresources.getAirGap(t_model, t_handle)

def getAirGaps(t_model):
    return _openstudiomodelresources.getAirGaps(t_model)

def getAirGapByName(t_model, t_name):
    return _openstudiomodelresources.getAirGapByName(t_model, t_name)

def getAirGapsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getAirGapsByName(t_model, t_name, t_exactMatch)

def _to_AirGap(self) -> OptionalAirGap:
    """Try to cast the ModelObject to a AirGap.

    :return: An Optional AirGap.
    """
    return toAirGap(self)
openstudioutilitiesidf.IdfObject.to_AirGap = _to_AirGap

def _getAirGap(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirGap:
    """Try to get an object of type AirGap referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirGap.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirGap(self, t_handle)
Model.getAirGap = _getAirGap

def _getAirGaps(self) -> AirGapVector:
    """Get a vector of all objects of type AirGap in the model.

    :return: A vector of AirGap.
    """
    return getAirGaps(self)
Model.getAirGaps = _getAirGaps

def _getAirGapByName(self, t_name: str) -> OptionalAirGap:
    """Try to get an object of type AirGap that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirGap.
    """
    return getAirGapByName(self, t_name)
Model.getAirGapByName = _getAirGapByName

def _getAirGapsByName(self, t_name: str, t_exactMatch: bool) -> AirGapVector:
    """Returns all objects of type AirGap named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirGapsByName(self, t_name, t_exactMatch)
Model.getAirGapsByName = _getAirGapsByName

class Gas(GasLayer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_Gas

    def __init__(self, *args):
        _openstudiomodelresources.Gas_swiginit(self, _openstudiomodelresources.new_Gas(*args))

    @staticmethod
    def validGasTypes():
        return _openstudiomodelresources.Gas_validGasTypes()

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.Gas_iddObjectType()

    @staticmethod
    def gasTypeValues():
        return _openstudiomodelresources.Gas_gasTypeValues()

    def gasType(self):
        return _openstudiomodelresources.Gas_gasType(self)

    def getThermalConductivity(self, temperature):
        return _openstudiomodelresources.Gas_getThermalConductivity(self, temperature)

    def getThermalConductance(self, temperature):
        return _openstudiomodelresources.Gas_getThermalConductance(self, temperature)

    def getThermalResistivity(self, temperature):
        return _openstudiomodelresources.Gas_getThermalResistivity(self, temperature)

    def getThermalResistance(self, temperature):
        return _openstudiomodelresources.Gas_getThermalResistance(self, temperature)

    def getViscosity(self, temperature):
        return _openstudiomodelresources.Gas_getViscosity(self, temperature)

    def getSpecificHeat(self, temperature):
        return _openstudiomodelresources.Gas_getSpecificHeat(self, temperature)

    def customConductivityCoefficientA(self):
        return _openstudiomodelresources.Gas_customConductivityCoefficientA(self)

    def customConductivityCoefficientB(self):
        return _openstudiomodelresources.Gas_customConductivityCoefficientB(self)

    def customConductivityCoefficientC(self):
        return _openstudiomodelresources.Gas_customConductivityCoefficientC(self)

    def customViscosityCoefficientA(self):
        return _openstudiomodelresources.Gas_customViscosityCoefficientA(self)

    def customViscosityCoefficientB(self):
        return _openstudiomodelresources.Gas_customViscosityCoefficientB(self)

    def customViscosityCoefficientC(self):
        return _openstudiomodelresources.Gas_customViscosityCoefficientC(self)

    def customSpecificHeatCoefficientA(self):
        return _openstudiomodelresources.Gas_customSpecificHeatCoefficientA(self)

    def customSpecificHeatCoefficientB(self):
        return _openstudiomodelresources.Gas_customSpecificHeatCoefficientB(self)

    def customSpecificHeatCoefficientC(self):
        return _openstudiomodelresources.Gas_customSpecificHeatCoefficientC(self)

    def customMolecularWeight(self):
        return _openstudiomodelresources.Gas_customMolecularWeight(self)

    def specificHeatRatio(self):
        return _openstudiomodelresources.Gas_specificHeatRatio(self)

    def thickness(self):
        return _openstudiomodelresources.Gas_thickness(self)

    def conductivityCoefficientA(self):
        return _openstudiomodelresources.Gas_conductivityCoefficientA(self)

    def conductivityCoefficientB(self):
        return _openstudiomodelresources.Gas_conductivityCoefficientB(self)

    def conductivityCoefficientC(self):
        return _openstudiomodelresources.Gas_conductivityCoefficientC(self)

    def viscosityCoefficientA(self):
        return _openstudiomodelresources.Gas_viscosityCoefficientA(self)

    def viscosityCoefficientB(self):
        return _openstudiomodelresources.Gas_viscosityCoefficientB(self)

    def viscosityCoefficientC(self):
        return _openstudiomodelresources.Gas_viscosityCoefficientC(self)

    def specificHeatCoefficientA(self):
        return _openstudiomodelresources.Gas_specificHeatCoefficientA(self)

    def specificHeatCoefficientB(self):
        return _openstudiomodelresources.Gas_specificHeatCoefficientB(self)

    def specificHeatCoefficientC(self):
        return _openstudiomodelresources.Gas_specificHeatCoefficientC(self)

    def molecularWeight(self):
        return _openstudiomodelresources.Gas_molecularWeight(self)

    def setCustomConductivity(self, A, B, C):
        return _openstudiomodelresources.Gas_setCustomConductivity(self, A, B, C)

    def setCustomViscosity(self, A, B, C):
        return _openstudiomodelresources.Gas_setCustomViscosity(self, A, B, C)

    def setCustomSpecificHeat(self, A, B, C):
        return _openstudiomodelresources.Gas_setCustomSpecificHeat(self, A, B, C)

    def setCustomMolecularWeight(self, value):
        return _openstudiomodelresources.Gas_setCustomMolecularWeight(self, value)

    def setGasType(self, gasType):
        return _openstudiomodelresources.Gas_setGasType(self, gasType)

    def setThickness(self, thickness):
        return _openstudiomodelresources.Gas_setThickness(self, thickness)

    def setConductivityCoefficientA(self, conductivityCoefficientA):
        return _openstudiomodelresources.Gas_setConductivityCoefficientA(self, conductivityCoefficientA)

    def resetConductivityCoefficientA(self):
        return _openstudiomodelresources.Gas_resetConductivityCoefficientA(self)

    def setConductivityCoefficientB(self, conductivityCoefficientB):
        return _openstudiomodelresources.Gas_setConductivityCoefficientB(self, conductivityCoefficientB)

    def resetConductivityCoefficientB(self):
        return _openstudiomodelresources.Gas_resetConductivityCoefficientB(self)

    def setConductivityCoefficientC(self, conductivityCoefficientC):
        return _openstudiomodelresources.Gas_setConductivityCoefficientC(self, conductivityCoefficientC)

    def resetConductivityCoefficientC(self):
        return _openstudiomodelresources.Gas_resetConductivityCoefficientC(self)

    def setViscosityCoefficientA(self, viscosityCoefficientA):
        return _openstudiomodelresources.Gas_setViscosityCoefficientA(self, viscosityCoefficientA)

    def resetViscosityCoefficientA(self):
        return _openstudiomodelresources.Gas_resetViscosityCoefficientA(self)

    def setViscosityCoefficientB(self, viscosityCoefficientB):
        return _openstudiomodelresources.Gas_setViscosityCoefficientB(self, viscosityCoefficientB)

    def resetViscosityCoefficientB(self):
        return _openstudiomodelresources.Gas_resetViscosityCoefficientB(self)

    def setViscosityCoefficientC(self, viscosityCoefficientC):
        return _openstudiomodelresources.Gas_setViscosityCoefficientC(self, viscosityCoefficientC)

    def resetViscosityCoefficientC(self):
        return _openstudiomodelresources.Gas_resetViscosityCoefficientC(self)

    def setSpecificHeatCoefficientA(self, specificHeatCoefficientA):
        return _openstudiomodelresources.Gas_setSpecificHeatCoefficientA(self, specificHeatCoefficientA)

    def resetSpecificHeatCoefficientA(self):
        return _openstudiomodelresources.Gas_resetSpecificHeatCoefficientA(self)

    def setSpecificHeatCoefficientB(self, specificHeatCoefficientB):
        return _openstudiomodelresources.Gas_setSpecificHeatCoefficientB(self, specificHeatCoefficientB)

    def resetSpecificHeatCoefficientB(self):
        return _openstudiomodelresources.Gas_resetSpecificHeatCoefficientB(self)

    def setSpecificHeatCoefficientC(self, specificHeatCoefficientC):
        return _openstudiomodelresources.Gas_setSpecificHeatCoefficientC(self, specificHeatCoefficientC)

    def resetSpecificHeatCoefficientC(self):
        return _openstudiomodelresources.Gas_resetSpecificHeatCoefficientC(self)

    def setMolecularWeight(self, molecularWeight):
        return _openstudiomodelresources.Gas_setMolecularWeight(self, molecularWeight)

    def resetMolecularWeight(self):
        return _openstudiomodelresources.Gas_resetMolecularWeight(self)

    def setSpecificHeatRatio(self, specificHeatRatio):
        return _openstudiomodelresources.Gas_setSpecificHeatRatio(self, specificHeatRatio)

    def resetSpecificHeatRatio(self):
        return _openstudiomodelresources.Gas_resetSpecificHeatRatio(self)

# Register Gas in _openstudiomodelresources:
_openstudiomodelresources.Gas_swigregister(Gas)

def toGas(idfObject):
    return _openstudiomodelresources.toGas(idfObject)

def getGas(t_model, t_handle):
    return _openstudiomodelresources.getGas(t_model, t_handle)

def getGass(t_model):
    return _openstudiomodelresources.getGass(t_model)

def getGasByName(t_model, t_name):
    return _openstudiomodelresources.getGasByName(t_model, t_name)

def getGassByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getGassByName(t_model, t_name, t_exactMatch)

def _to_Gas(self) -> OptionalGas:
    """Try to cast the ModelObject to a Gas.

    :return: An Optional Gas.
    """
    return toGas(self)
openstudioutilitiesidf.IdfObject.to_Gas = _to_Gas

def _getGas(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGas:
    """Try to get an object of type Gas referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Gas.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGas(self, t_handle)
Model.getGas = _getGas

def _getGass(self) -> GasVector:
    """Get a vector of all objects of type Gas in the model.

    :return: A vector of Gas.
    """
    return getGass(self)
Model.getGass = _getGass

def _getGasByName(self, t_name: str) -> OptionalGas:
    """Try to get an object of type Gas that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Gas.
    """
    return getGasByName(self, t_name)
Model.getGasByName = _getGasByName

def _getGassByName(self, t_name: str, t_exactMatch: bool) -> GasVector:
    """Returns all objects of type Gas named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGassByName(self, t_name, t_exactMatch)
Model.getGassByName = _getGassByName

class GasMixture(GasLayer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_GasMixture

    def __init__(self, *args):
        _openstudiomodelresources.GasMixture_swiginit(self, _openstudiomodelresources.new_GasMixture(*args))

    @staticmethod
    def validGasTypes():
        return _openstudiomodelresources.GasMixture_validGasTypes()

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.GasMixture_iddObjectType()

    @staticmethod
    def gas1TypeValues():
        return _openstudiomodelresources.GasMixture_gas1TypeValues()

    @staticmethod
    def gas2TypeValues():
        return _openstudiomodelresources.GasMixture_gas2TypeValues()

    @staticmethod
    def gas3TypeValues():
        return _openstudiomodelresources.GasMixture_gas3TypeValues()

    @staticmethod
    def gas4TypeValues():
        return _openstudiomodelresources.GasMixture_gas4TypeValues()

    def getGasType(self, index):
        return _openstudiomodelresources.GasMixture_getGasType(self, index)

    def getGasFraction(self, index):
        return _openstudiomodelresources.GasMixture_getGasFraction(self, index)

    def getThermalConductivity(self, temperature):
        return _openstudiomodelresources.GasMixture_getThermalConductivity(self, temperature)

    def getThermalConductance(self, temperature):
        return _openstudiomodelresources.GasMixture_getThermalConductance(self, temperature)

    def getThermalResistivity(self, temperature):
        return _openstudiomodelresources.GasMixture_getThermalResistivity(self, temperature)

    def getThermalResistance(self, temperature):
        return _openstudiomodelresources.GasMixture_getThermalResistance(self, temperature)

    def getViscosity(self, temperature):
        return _openstudiomodelresources.GasMixture_getViscosity(self, temperature)

    def getSpecificHeat(self, temperature):
        return _openstudiomodelresources.GasMixture_getSpecificHeat(self, temperature)

    def thickness(self):
        return _openstudiomodelresources.GasMixture_thickness(self)

    def numberofGasesinMixture(self):
        return _openstudiomodelresources.GasMixture_numberofGasesinMixture(self)

    def gas1Type(self):
        return _openstudiomodelresources.GasMixture_gas1Type(self)

    def gas1Fraction(self):
        return _openstudiomodelresources.GasMixture_gas1Fraction(self)

    def gas2Type(self):
        return _openstudiomodelresources.GasMixture_gas2Type(self)

    def gas2Fraction(self):
        return _openstudiomodelresources.GasMixture_gas2Fraction(self)

    def gas3Type(self):
        return _openstudiomodelresources.GasMixture_gas3Type(self)

    def gas3Fraction(self):
        return _openstudiomodelresources.GasMixture_gas3Fraction(self)

    def gas4Type(self):
        return _openstudiomodelresources.GasMixture_gas4Type(self)

    def gas4Fraction(self):
        return _openstudiomodelresources.GasMixture_gas4Fraction(self)

    def setGas(self, index, type, fraction):
        return _openstudiomodelresources.GasMixture_setGas(self, index, type, fraction)

    def setGasType(self, index, type):
        return _openstudiomodelresources.GasMixture_setGasType(self, index, type)

    def setGasFraction(self, index, fraction):
        return _openstudiomodelresources.GasMixture_setGasFraction(self, index, fraction)

    def addGas(self, type, fraction):
        return _openstudiomodelresources.GasMixture_addGas(self, type, fraction)

    def setFractions(self, fractions):
        return _openstudiomodelresources.GasMixture_setFractions(self, fractions)

    def balanceFractions(self, index):
        return _openstudiomodelresources.GasMixture_balanceFractions(self, index)

    def setThickness(self, thickness):
        return _openstudiomodelresources.GasMixture_setThickness(self, thickness)

    def setNumberofGasesinMixture(self, numberofGasesinMixture):
        return _openstudiomodelresources.GasMixture_setNumberofGasesinMixture(self, numberofGasesinMixture)

    def setGas1Type(self, gas1Type):
        return _openstudiomodelresources.GasMixture_setGas1Type(self, gas1Type)

    def resetGas1Type(self):
        return _openstudiomodelresources.GasMixture_resetGas1Type(self)

    def setGas1Fraction(self, gas1Fraction):
        return _openstudiomodelresources.GasMixture_setGas1Fraction(self, gas1Fraction)

    def resetGas1Fraction(self):
        return _openstudiomodelresources.GasMixture_resetGas1Fraction(self)

    def setGas2Type(self, gas2Type):
        return _openstudiomodelresources.GasMixture_setGas2Type(self, gas2Type)

    def resetGas2Type(self):
        return _openstudiomodelresources.GasMixture_resetGas2Type(self)

    def setGas2Fraction(self, gas2Fraction):
        return _openstudiomodelresources.GasMixture_setGas2Fraction(self, gas2Fraction)

    def resetGas2Fraction(self):
        return _openstudiomodelresources.GasMixture_resetGas2Fraction(self)

    def setGas3Type(self, gas3Type):
        return _openstudiomodelresources.GasMixture_setGas3Type(self, gas3Type)

    def resetGas3Type(self):
        return _openstudiomodelresources.GasMixture_resetGas3Type(self)

    def setGas3Fraction(self, gas3Fraction):
        return _openstudiomodelresources.GasMixture_setGas3Fraction(self, gas3Fraction)

    def resetGas3Fraction(self):
        return _openstudiomodelresources.GasMixture_resetGas3Fraction(self)

    def setGas4Type(self, gas4Type):
        return _openstudiomodelresources.GasMixture_setGas4Type(self, gas4Type)

    def resetGas4Type(self):
        return _openstudiomodelresources.GasMixture_resetGas4Type(self)

    def setGas4Fraction(self, gas4Fraction):
        return _openstudiomodelresources.GasMixture_setGas4Fraction(self, gas4Fraction)

    def resetGas4Fraction(self):
        return _openstudiomodelresources.GasMixture_resetGas4Fraction(self)

    def numGases(self):
        return _openstudiomodelresources.GasMixture_numGases(self)

# Register GasMixture in _openstudiomodelresources:
_openstudiomodelresources.GasMixture_swigregister(GasMixture)

def toGasMixture(idfObject):
    return _openstudiomodelresources.toGasMixture(idfObject)

def getGasMixture(t_model, t_handle):
    return _openstudiomodelresources.getGasMixture(t_model, t_handle)

def getGasMixtures(t_model):
    return _openstudiomodelresources.getGasMixtures(t_model)

def getGasMixtureByName(t_model, t_name):
    return _openstudiomodelresources.getGasMixtureByName(t_model, t_name)

def getGasMixturesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getGasMixturesByName(t_model, t_name, t_exactMatch)

def _to_GasMixture(self) -> OptionalGasMixture:
    """Try to cast the ModelObject to a GasMixture.

    :return: An Optional GasMixture.
    """
    return toGasMixture(self)
openstudioutilitiesidf.IdfObject.to_GasMixture = _to_GasMixture

def _getGasMixture(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGasMixture:
    """Try to get an object of type GasMixture referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GasMixture.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGasMixture(self, t_handle)
Model.getGasMixture = _getGasMixture

def _getGasMixtures(self) -> GasMixtureVector:
    """Get a vector of all objects of type GasMixture in the model.

    :return: A vector of GasMixture.
    """
    return getGasMixtures(self)
Model.getGasMixtures = _getGasMixtures

def _getGasMixtureByName(self, t_name: str) -> OptionalGasMixture:
    """Try to get an object of type GasMixture that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GasMixture.
    """
    return getGasMixtureByName(self, t_name)
Model.getGasMixtureByName = _getGasMixtureByName

def _getGasMixturesByName(self, t_name: str, t_exactMatch: bool) -> GasMixtureVector:
    """Returns all objects of type GasMixture named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGasMixturesByName(self, t_name, t_exactMatch)
Model.getGasMixturesByName = _getGasMixturesByName

class InfraredTransparentMaterial(ModelPartitionMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_InfraredTransparentMaterial

    def __init__(self, *args):
        _openstudiomodelresources.InfraredTransparentMaterial_swiginit(self, _openstudiomodelresources.new_InfraredTransparentMaterial(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.InfraredTransparentMaterial_iddObjectType()

# Register InfraredTransparentMaterial in _openstudiomodelresources:
_openstudiomodelresources.InfraredTransparentMaterial_swigregister(InfraredTransparentMaterial)

def toInfraredTransparentMaterial(idfObject):
    return _openstudiomodelresources.toInfraredTransparentMaterial(idfObject)

def getInfraredTransparentMaterial(t_model, t_handle):
    return _openstudiomodelresources.getInfraredTransparentMaterial(t_model, t_handle)

def getInfraredTransparentMaterials(t_model):
    return _openstudiomodelresources.getInfraredTransparentMaterials(t_model)

def getInfraredTransparentMaterialByName(t_model, t_name):
    return _openstudiomodelresources.getInfraredTransparentMaterialByName(t_model, t_name)

def getInfraredTransparentMaterialsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getInfraredTransparentMaterialsByName(t_model, t_name, t_exactMatch)

def _to_InfraredTransparentMaterial(self) -> OptionalInfraredTransparentMaterial:
    """Try to cast the ModelObject to a InfraredTransparentMaterial.

    :return: An Optional InfraredTransparentMaterial.
    """
    return toInfraredTransparentMaterial(self)
openstudioutilitiesidf.IdfObject.to_InfraredTransparentMaterial = _to_InfraredTransparentMaterial

def _getInfraredTransparentMaterial(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalInfraredTransparentMaterial:
    """Try to get an object of type InfraredTransparentMaterial referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional InfraredTransparentMaterial.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getInfraredTransparentMaterial(self, t_handle)
Model.getInfraredTransparentMaterial = _getInfraredTransparentMaterial

def _getInfraredTransparentMaterials(self) -> InfraredTransparentMaterialVector:
    """Get a vector of all objects of type InfraredTransparentMaterial in the model.

    :return: A vector of InfraredTransparentMaterial.
    """
    return getInfraredTransparentMaterials(self)
Model.getInfraredTransparentMaterials = _getInfraredTransparentMaterials

def _getInfraredTransparentMaterialByName(self, t_name: str) -> OptionalInfraredTransparentMaterial:
    """Try to get an object of type InfraredTransparentMaterial that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional InfraredTransparentMaterial.
    """
    return getInfraredTransparentMaterialByName(self, t_name)
Model.getInfraredTransparentMaterialByName = _getInfraredTransparentMaterialByName

def _getInfraredTransparentMaterialsByName(self, t_name: str, t_exactMatch: bool) -> InfraredTransparentMaterialVector:
    """Returns all objects of type InfraredTransparentMaterial named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getInfraredTransparentMaterialsByName(self, t_name, t_exactMatch)
Model.getInfraredTransparentMaterialsByName = _getInfraredTransparentMaterialsByName

class MasslessOpaqueMaterial(OpaqueMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_MasslessOpaqueMaterial

    def __init__(self, *args):
        _openstudiomodelresources.MasslessOpaqueMaterial_swiginit(self, _openstudiomodelresources.new_MasslessOpaqueMaterial(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.MasslessOpaqueMaterial_iddObjectType()

    @staticmethod
    def roughnessValues():
        return _openstudiomodelresources.MasslessOpaqueMaterial_roughnessValues()

    def roughness(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_roughness(self)

    def thermalResistance(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_thermalResistance(self)

    def thermalAbsorptance(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_thermalAbsorptance(self)

    def isThermalAbsorptanceDefaulted(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_isThermalAbsorptanceDefaulted(self)

    def solarAbsorptance(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_solarAbsorptance(self)

    def isSolarAbsorptanceDefaulted(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_isSolarAbsorptanceDefaulted(self)

    def visibleAbsorptance(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_visibleAbsorptance(self)

    def isVisibleAbsorptanceDefaulted(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_isVisibleAbsorptanceDefaulted(self)

    def setRoughness(self, roughness):
        return _openstudiomodelresources.MasslessOpaqueMaterial_setRoughness(self, roughness)

    def setThermalResistance(self, thermalResistance):
        return _openstudiomodelresources.MasslessOpaqueMaterial_setThermalResistance(self, thermalResistance)

    def setThermalAbsorptance(self, thermalAbsorptance):
        return _openstudiomodelresources.MasslessOpaqueMaterial_setThermalAbsorptance(self, thermalAbsorptance)

    def resetThermalAbsorptance(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_resetThermalAbsorptance(self)

    def setSolarAbsorptance(self, solarAbsorptance):
        return _openstudiomodelresources.MasslessOpaqueMaterial_setSolarAbsorptance(self, solarAbsorptance)

    def resetSolarAbsorptance(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_resetSolarAbsorptance(self)

    def setVisibleAbsorptance(self, visibleAbsorptance):
        return _openstudiomodelresources.MasslessOpaqueMaterial_setVisibleAbsorptance(self, visibleAbsorptance)

    def resetVisibleAbsorptance(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_resetVisibleAbsorptance(self)

    def createMaterialPropertyMoisturePenetrationDepthSettings(self, waterVaporDiffusionResistanceFactor, moistureEquationCoefficientA, moistureEquationCoefficientB, moistureEquationCoefficientC, moistureEquationCoefficientD, coatingLayerThickness, coatingLayerWaterVaporDiffusionResistanceFactor):
        return _openstudiomodelresources.MasslessOpaqueMaterial_createMaterialPropertyMoisturePenetrationDepthSettings(self, waterVaporDiffusionResistanceFactor, moistureEquationCoefficientA, moistureEquationCoefficientB, moistureEquationCoefficientC, moistureEquationCoefficientD, coatingLayerThickness, coatingLayerWaterVaporDiffusionResistanceFactor)

    def materialPropertyMoisturePenetrationDepthSettings(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_materialPropertyMoisturePenetrationDepthSettings(self)

    def resetMaterialPropertyMoisturePenetrationDepthSettings(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_resetMaterialPropertyMoisturePenetrationDepthSettings(self)

    def createMaterialPropertyPhaseChange(self, *args):
        return _openstudiomodelresources.MasslessOpaqueMaterial_createMaterialPropertyPhaseChange(self, *args)

    def materialPropertyPhaseChange(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_materialPropertyPhaseChange(self)

    def resetMaterialPropertyPhaseChange(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_resetMaterialPropertyPhaseChange(self)

    def createMaterialPropertyPhaseChangeHysteresis(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_createMaterialPropertyPhaseChangeHysteresis(self)

    def materialPropertyPhaseChangeHysteresis(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_materialPropertyPhaseChangeHysteresis(self)

    def resetMaterialPropertyPhaseChangeHysteresis(self):
        return _openstudiomodelresources.MasslessOpaqueMaterial_resetMaterialPropertyPhaseChangeHysteresis(self)

# Register MasslessOpaqueMaterial in _openstudiomodelresources:
_openstudiomodelresources.MasslessOpaqueMaterial_swigregister(MasslessOpaqueMaterial)

def toMasslessOpaqueMaterial(idfObject):
    return _openstudiomodelresources.toMasslessOpaqueMaterial(idfObject)

def getMasslessOpaqueMaterial(t_model, t_handle):
    return _openstudiomodelresources.getMasslessOpaqueMaterial(t_model, t_handle)

def getMasslessOpaqueMaterials(t_model):
    return _openstudiomodelresources.getMasslessOpaqueMaterials(t_model)

def getMasslessOpaqueMaterialByName(t_model, t_name):
    return _openstudiomodelresources.getMasslessOpaqueMaterialByName(t_model, t_name)

def getMasslessOpaqueMaterialsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getMasslessOpaqueMaterialsByName(t_model, t_name, t_exactMatch)

def _to_MasslessOpaqueMaterial(self) -> OptionalMasslessOpaqueMaterial:
    """Try to cast the ModelObject to a MasslessOpaqueMaterial.

    :return: An Optional MasslessOpaqueMaterial.
    """
    return toMasslessOpaqueMaterial(self)
openstudioutilitiesidf.IdfObject.to_MasslessOpaqueMaterial = _to_MasslessOpaqueMaterial

def _getMasslessOpaqueMaterial(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalMasslessOpaqueMaterial:
    """Try to get an object of type MasslessOpaqueMaterial referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional MasslessOpaqueMaterial.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getMasslessOpaqueMaterial(self, t_handle)
Model.getMasslessOpaqueMaterial = _getMasslessOpaqueMaterial

def _getMasslessOpaqueMaterials(self) -> MasslessOpaqueMaterialVector:
    """Get a vector of all objects of type MasslessOpaqueMaterial in the model.

    :return: A vector of MasslessOpaqueMaterial.
    """
    return getMasslessOpaqueMaterials(self)
Model.getMasslessOpaqueMaterials = _getMasslessOpaqueMaterials

def _getMasslessOpaqueMaterialByName(self, t_name: str) -> OptionalMasslessOpaqueMaterial:
    """Try to get an object of type MasslessOpaqueMaterial that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional MasslessOpaqueMaterial.
    """
    return getMasslessOpaqueMaterialByName(self, t_name)
Model.getMasslessOpaqueMaterialByName = _getMasslessOpaqueMaterialByName

def _getMasslessOpaqueMaterialsByName(self, t_name: str, t_exactMatch: bool) -> MasslessOpaqueMaterialVector:
    """Returns all objects of type MasslessOpaqueMaterial named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getMasslessOpaqueMaterialsByName(self, t_name, t_exactMatch)
Model.getMasslessOpaqueMaterialsByName = _getMasslessOpaqueMaterialsByName

class RefractionExtinctionGlazing(Glazing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_RefractionExtinctionGlazing

    def __init__(self, *args):
        _openstudiomodelresources.RefractionExtinctionGlazing_swiginit(self, _openstudiomodelresources.new_RefractionExtinctionGlazing(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.RefractionExtinctionGlazing_iddObjectType()

    def thermalConductivity(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalConductivity(self)

    def thermalConductance(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalConductance(self)

    def thermalResistivity(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalResistivity(self)

    def thermalResistance(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalResistance(self)

    def thermalTransmittance(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_thermalTransmittance(self)

    def thickness(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_thickness(self)

    def solarIndexofRefraction(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_solarIndexofRefraction(self)

    def solarExtinctionCoefficient(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_solarExtinctionCoefficient(self)

    def visibleIndexofRefraction(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_visibleIndexofRefraction(self)

    def visibleExtinctionCoefficient(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_visibleExtinctionCoefficient(self)

    def infraredTransmittanceatNormalIncidence(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_infraredTransmittanceatNormalIncidence(self)

    def isInfraredTransmittanceatNormalIncidenceDefaulted(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_isInfraredTransmittanceatNormalIncidenceDefaulted(self)

    def infraredHemisphericalEmissivity(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_infraredHemisphericalEmissivity(self)

    def isInfraredHemisphericalEmissivityDefaulted(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_isInfraredHemisphericalEmissivityDefaulted(self)

    def conductivity(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_conductivity(self)

    def isConductivityDefaulted(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_isConductivityDefaulted(self)

    def dirtCorrectionFactorforSolarandVisibleTransmittance(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_dirtCorrectionFactorforSolarandVisibleTransmittance(self)

    def isDirtCorrectionFactorforSolarandVisibleTransmittanceDefaulted(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_isDirtCorrectionFactorforSolarandVisibleTransmittanceDefaulted(self)

    def solarDiffusing(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_solarDiffusing(self)

    def isSolarDiffusingDefaulted(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_isSolarDiffusingDefaulted(self)

    def setThermalConductivity(self, value):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalConductivity(self, value)

    def setThermalConductance(self, value):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalConductance(self, value)

    def setThermalResistivity(self, value):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalResistivity(self, value)

    def setThermalResistance(self, value):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalResistance(self, value)

    def setThermalTransmittance(self, value):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThermalTransmittance(self, value)

    def setThickness(self, thickness):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setThickness(self, thickness)

    def setSolarIndexofRefraction(self, solarIndexofRefraction):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setSolarIndexofRefraction(self, solarIndexofRefraction)

    def setSolarExtinctionCoefficient(self, solarExtinctionCoefficient):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setSolarExtinctionCoefficient(self, solarExtinctionCoefficient)

    def setVisibleIndexofRefraction(self, visibleIndexofRefraction):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setVisibleIndexofRefraction(self, visibleIndexofRefraction)

    def setVisibleExtinctionCoefficient(self, visibleExtinctionCoefficient):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setVisibleExtinctionCoefficient(self, visibleExtinctionCoefficient)

    def setInfraredTransmittanceatNormalIncidence(self, infraredTransmittanceatNormalIncidence):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setInfraredTransmittanceatNormalIncidence(self, infraredTransmittanceatNormalIncidence)

    def resetInfraredTransmittanceatNormalIncidence(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetInfraredTransmittanceatNormalIncidence(self)

    def setInfraredHemisphericalEmissivity(self, infraredHemisphericalEmissivity):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setInfraredHemisphericalEmissivity(self, infraredHemisphericalEmissivity)

    def resetInfraredHemisphericalEmissivity(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetInfraredHemisphericalEmissivity(self)

    def setConductivity(self, conductivity):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setConductivity(self, conductivity)

    def resetConductivity(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetConductivity(self)

    def setDirtCorrectionFactorforSolarandVisibleTransmittance(self, dirtCorrectionFactorforSolarandVisibleTransmittance):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setDirtCorrectionFactorforSolarandVisibleTransmittance(self, dirtCorrectionFactorforSolarandVisibleTransmittance)

    def resetDirtCorrectionFactorforSolarandVisibleTransmittance(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetDirtCorrectionFactorforSolarandVisibleTransmittance(self)

    def setSolarDiffusing(self, solarDiffusing):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setSolarDiffusing(self, solarDiffusing)

    def setSolarDiffusingNoFail(self, solarDiffusing):
        return _openstudiomodelresources.RefractionExtinctionGlazing_setSolarDiffusingNoFail(self, solarDiffusing)

    def resetSolarDiffusing(self):
        return _openstudiomodelresources.RefractionExtinctionGlazing_resetSolarDiffusing(self)

# Register RefractionExtinctionGlazing in _openstudiomodelresources:
_openstudiomodelresources.RefractionExtinctionGlazing_swigregister(RefractionExtinctionGlazing)

def toRefractionExtinctionGlazing(idfObject):
    return _openstudiomodelresources.toRefractionExtinctionGlazing(idfObject)

def getRefractionExtinctionGlazing(t_model, t_handle):
    return _openstudiomodelresources.getRefractionExtinctionGlazing(t_model, t_handle)

def getRefractionExtinctionGlazings(t_model):
    return _openstudiomodelresources.getRefractionExtinctionGlazings(t_model)

def getRefractionExtinctionGlazingByName(t_model, t_name):
    return _openstudiomodelresources.getRefractionExtinctionGlazingByName(t_model, t_name)

def getRefractionExtinctionGlazingsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getRefractionExtinctionGlazingsByName(t_model, t_name, t_exactMatch)

def _to_RefractionExtinctionGlazing(self) -> OptionalRefractionExtinctionGlazing:
    """Try to cast the ModelObject to a RefractionExtinctionGlazing.

    :return: An Optional RefractionExtinctionGlazing.
    """
    return toRefractionExtinctionGlazing(self)
openstudioutilitiesidf.IdfObject.to_RefractionExtinctionGlazing = _to_RefractionExtinctionGlazing

def _getRefractionExtinctionGlazing(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRefractionExtinctionGlazing:
    """Try to get an object of type RefractionExtinctionGlazing referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RefractionExtinctionGlazing.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRefractionExtinctionGlazing(self, t_handle)
Model.getRefractionExtinctionGlazing = _getRefractionExtinctionGlazing

def _getRefractionExtinctionGlazings(self) -> RefractionExtinctionGlazingVector:
    """Get a vector of all objects of type RefractionExtinctionGlazing in the model.

    :return: A vector of RefractionExtinctionGlazing.
    """
    return getRefractionExtinctionGlazings(self)
Model.getRefractionExtinctionGlazings = _getRefractionExtinctionGlazings

def _getRefractionExtinctionGlazingByName(self, t_name: str) -> OptionalRefractionExtinctionGlazing:
    """Try to get an object of type RefractionExtinctionGlazing that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RefractionExtinctionGlazing.
    """
    return getRefractionExtinctionGlazingByName(self, t_name)
Model.getRefractionExtinctionGlazingByName = _getRefractionExtinctionGlazingByName

def _getRefractionExtinctionGlazingsByName(self, t_name: str, t_exactMatch: bool) -> RefractionExtinctionGlazingVector:
    """Returns all objects of type RefractionExtinctionGlazing named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRefractionExtinctionGlazingsByName(self, t_name, t_exactMatch)
Model.getRefractionExtinctionGlazingsByName = _getRefractionExtinctionGlazingsByName

class RoofVegetation(OpaqueMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_RoofVegetation

    def __init__(self, *args):
        _openstudiomodelresources.RoofVegetation_swiginit(self, _openstudiomodelresources.new_RoofVegetation(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.RoofVegetation_iddObjectType()

    @staticmethod
    def roughnessValues():
        return _openstudiomodelresources.RoofVegetation_roughnessValues()

    @staticmethod
    def moistureDiffusionCalculationMethodValues():
        return _openstudiomodelresources.RoofVegetation_moistureDiffusionCalculationMethodValues()

    def heightofPlants(self):
        return _openstudiomodelresources.RoofVegetation_heightofPlants(self)

    def isHeightofPlantsDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isHeightofPlantsDefaulted(self)

    def leafAreaIndex(self):
        return _openstudiomodelresources.RoofVegetation_leafAreaIndex(self)

    def isLeafAreaIndexDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isLeafAreaIndexDefaulted(self)

    def leafReflectivity(self):
        return _openstudiomodelresources.RoofVegetation_leafReflectivity(self)

    def isLeafReflectivityDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isLeafReflectivityDefaulted(self)

    def leafEmissivity(self):
        return _openstudiomodelresources.RoofVegetation_leafEmissivity(self)

    def isLeafEmissivityDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isLeafEmissivityDefaulted(self)

    def minimumStomatalResistance(self):
        return _openstudiomodelresources.RoofVegetation_minimumStomatalResistance(self)

    def isMinimumStomatalResistanceDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isMinimumStomatalResistanceDefaulted(self)

    def soilLayerName(self):
        return _openstudiomodelresources.RoofVegetation_soilLayerName(self)

    def isSoilLayerNameDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isSoilLayerNameDefaulted(self)

    def roughness(self):
        return _openstudiomodelresources.RoofVegetation_roughness(self)

    def density(self):
        return _openstudiomodelresources.RoofVegetation_density(self)

    def specificHeat(self):
        return _openstudiomodelresources.RoofVegetation_specificHeat(self)

    def saturationVolumetricMoistureContent(self):
        return _openstudiomodelresources.RoofVegetation_saturationVolumetricMoistureContent(self)

    def residualVolumetricMoistureContent(self):
        return _openstudiomodelresources.RoofVegetation_residualVolumetricMoistureContent(self)

    def initialVolumetricMoistureContent(self):
        return _openstudiomodelresources.RoofVegetation_initialVolumetricMoistureContent(self)

    def isRoughnessDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isRoughnessDefaulted(self)

    def thickness(self):
        return _openstudiomodelresources.RoofVegetation_thickness(self)

    def isThicknessDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isThicknessDefaulted(self)

    def conductivityofDrySoil(self):
        return _openstudiomodelresources.RoofVegetation_conductivityofDrySoil(self)

    def isConductivityofDrySoilDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isConductivityofDrySoilDefaulted(self)

    def densityofDrySoil(self):
        return _openstudiomodelresources.RoofVegetation_densityofDrySoil(self)

    def isDensityofDrySoilDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isDensityofDrySoilDefaulted(self)

    def specificHeatofDrySoil(self):
        return _openstudiomodelresources.RoofVegetation_specificHeatofDrySoil(self)

    def isSpecificHeatofDrySoilDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isSpecificHeatofDrySoilDefaulted(self)

    def thermalAbsorptance(self):
        return _openstudiomodelresources.RoofVegetation_thermalAbsorptance(self)

    def isThermalAbsorptanceDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isThermalAbsorptanceDefaulted(self)

    def solarAbsorptance(self):
        return _openstudiomodelresources.RoofVegetation_solarAbsorptance(self)

    def isSolarAbsorptanceDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isSolarAbsorptanceDefaulted(self)

    def visibleAbsorptance(self):
        return _openstudiomodelresources.RoofVegetation_visibleAbsorptance(self)

    def isVisibleAbsorptanceDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isVisibleAbsorptanceDefaulted(self)

    def saturationVolumetricMoistureContentoftheSoilLayer(self):
        return _openstudiomodelresources.RoofVegetation_saturationVolumetricMoistureContentoftheSoilLayer(self)

    def isSaturationVolumetricMoistureContentoftheSoilLayerDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isSaturationVolumetricMoistureContentoftheSoilLayerDefaulted(self)

    def residualVolumetricMoistureContentoftheSoilLayer(self):
        return _openstudiomodelresources.RoofVegetation_residualVolumetricMoistureContentoftheSoilLayer(self)

    def isResidualVolumetricMoistureContentoftheSoilLayerDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isResidualVolumetricMoistureContentoftheSoilLayerDefaulted(self)

    def initialVolumetricMoistureContentoftheSoilLayer(self):
        return _openstudiomodelresources.RoofVegetation_initialVolumetricMoistureContentoftheSoilLayer(self)

    def isInitialVolumetricMoistureContentoftheSoilLayerDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isInitialVolumetricMoistureContentoftheSoilLayerDefaulted(self)

    def moistureDiffusionCalculationMethod(self):
        return _openstudiomodelresources.RoofVegetation_moistureDiffusionCalculationMethod(self)

    def isMoistureDiffusionCalculationMethodDefaulted(self):
        return _openstudiomodelresources.RoofVegetation_isMoistureDiffusionCalculationMethodDefaulted(self)

    def setLeafAreaIndex(self, leafAreaIndex):
        return _openstudiomodelresources.RoofVegetation_setLeafAreaIndex(self, leafAreaIndex)

    def setLeafReflectivity(self, leafReflectivity):
        return _openstudiomodelresources.RoofVegetation_setLeafReflectivity(self, leafReflectivity)

    def setLeafEmissivity(self, leafEmissivity):
        return _openstudiomodelresources.RoofVegetation_setLeafEmissivity(self, leafEmissivity)

    def setMinimumStomatalResistance(self, value):
        return _openstudiomodelresources.RoofVegetation_setMinimumStomatalResistance(self, value)

    def setSoilLayerName(self, name):
        return _openstudiomodelresources.RoofVegetation_setSoilLayerName(self, name)

    def setRoughness(self, value):
        return _openstudiomodelresources.RoofVegetation_setRoughness(self, value)

    def setDensity(self, value):
        return _openstudiomodelresources.RoofVegetation_setDensity(self, value)

    def setSpecificHeat(self, value):
        return _openstudiomodelresources.RoofVegetation_setSpecificHeat(self, value)

    def setSaturationVolumetricMoistureContent(self, value):
        return _openstudiomodelresources.RoofVegetation_setSaturationVolumetricMoistureContent(self, value)

    def setResidualVolumetricMoistureContent(self, value):
        return _openstudiomodelresources.RoofVegetation_setResidualVolumetricMoistureContent(self, value)

    def setInitialVolumetricMoistureConent(self, value):
        return _openstudiomodelresources.RoofVegetation_setInitialVolumetricMoistureConent(self, value)

    def setMoistureDiffusionCalculationMethod(self, value):
        return _openstudiomodelresources.RoofVegetation_setMoistureDiffusionCalculationMethod(self, value)

    def setHeightofPlants(self, heightofPlants):
        return _openstudiomodelresources.RoofVegetation_setHeightofPlants(self, heightofPlants)

    def resetHeightofPlants(self):
        return _openstudiomodelresources.RoofVegetation_resetHeightofPlants(self)

    def resetLeafAreaIndex(self):
        return _openstudiomodelresources.RoofVegetation_resetLeafAreaIndex(self)

    def resetLeafReflectivity(self):
        return _openstudiomodelresources.RoofVegetation_resetLeafReflectivity(self)

    def resetLeafEmissivity(self):
        return _openstudiomodelresources.RoofVegetation_resetLeafEmissivity(self)

    def resetMinimumStomatalResistance(self):
        return _openstudiomodelresources.RoofVegetation_resetMinimumStomatalResistance(self)

    def resetSoilLayerName(self):
        return _openstudiomodelresources.RoofVegetation_resetSoilLayerName(self)

    def resetRoughness(self):
        return _openstudiomodelresources.RoofVegetation_resetRoughness(self)

    def setThickness(self, thickness):
        return _openstudiomodelresources.RoofVegetation_setThickness(self, thickness)

    def resetThickness(self):
        return _openstudiomodelresources.RoofVegetation_resetThickness(self)

    def setConductivityofDrySoil(self, conductivityofDrySoil):
        return _openstudiomodelresources.RoofVegetation_setConductivityofDrySoil(self, conductivityofDrySoil)

    def resetConductivityofDrySoil(self):
        return _openstudiomodelresources.RoofVegetation_resetConductivityofDrySoil(self)

    def setDensityofDrySoil(self, densityofDrySoil):
        return _openstudiomodelresources.RoofVegetation_setDensityofDrySoil(self, densityofDrySoil)

    def resetDensityofDrySoil(self):
        return _openstudiomodelresources.RoofVegetation_resetDensityofDrySoil(self)

    def setSpecificHeatofDrySoil(self, specificHeatofDrySoil):
        return _openstudiomodelresources.RoofVegetation_setSpecificHeatofDrySoil(self, specificHeatofDrySoil)

    def resetSpecificHeatofDrySoil(self):
        return _openstudiomodelresources.RoofVegetation_resetSpecificHeatofDrySoil(self)

    def setThermalAbsorptance(self, thermalAbsorptance):
        return _openstudiomodelresources.RoofVegetation_setThermalAbsorptance(self, thermalAbsorptance)

    def resetThermalAbsorptance(self):
        return _openstudiomodelresources.RoofVegetation_resetThermalAbsorptance(self)

    def setSolarAbsorptance(self, solarAbsorptance):
        return _openstudiomodelresources.RoofVegetation_setSolarAbsorptance(self, solarAbsorptance)

    def resetSolarAbsorptance(self):
        return _openstudiomodelresources.RoofVegetation_resetSolarAbsorptance(self)

    def setVisibleAbsorptance(self, visibleAbsorptance):
        return _openstudiomodelresources.RoofVegetation_setVisibleAbsorptance(self, visibleAbsorptance)

    def resetVisibleAbsorptance(self):
        return _openstudiomodelresources.RoofVegetation_resetVisibleAbsorptance(self)

    def setSaturationVolumetricMoistureContentoftheSoilLayer(self, saturationVolumetricMoistureContentoftheSoilLayer):
        return _openstudiomodelresources.RoofVegetation_setSaturationVolumetricMoistureContentoftheSoilLayer(self, saturationVolumetricMoistureContentoftheSoilLayer)

    def resetSaturationVolumetricMoistureContentoftheSoilLayer(self):
        return _openstudiomodelresources.RoofVegetation_resetSaturationVolumetricMoistureContentoftheSoilLayer(self)

    def setResidualVolumetricMoistureContentoftheSoilLayer(self, residualVolumetricMoistureContentoftheSoilLayer):
        return _openstudiomodelresources.RoofVegetation_setResidualVolumetricMoistureContentoftheSoilLayer(self, residualVolumetricMoistureContentoftheSoilLayer)

    def resetResidualVolumetricMoistureContentoftheSoilLayer(self):
        return _openstudiomodelresources.RoofVegetation_resetResidualVolumetricMoistureContentoftheSoilLayer(self)

    def setInitialVolumetricMoistureContentoftheSoilLayer(self, initialVolumetricMoistureContentoftheSoilLayer):
        return _openstudiomodelresources.RoofVegetation_setInitialVolumetricMoistureContentoftheSoilLayer(self, initialVolumetricMoistureContentoftheSoilLayer)

    def resetInitialVolumetricMoistureContentoftheSoilLayer(self):
        return _openstudiomodelresources.RoofVegetation_resetInitialVolumetricMoistureContentoftheSoilLayer(self)

    def resetMoistureDiffusionCalculationMethod(self):
        return _openstudiomodelresources.RoofVegetation_resetMoistureDiffusionCalculationMethod(self)

# Register RoofVegetation in _openstudiomodelresources:
_openstudiomodelresources.RoofVegetation_swigregister(RoofVegetation)

def toRoofVegetation(idfObject):
    return _openstudiomodelresources.toRoofVegetation(idfObject)

def getRoofVegetation(t_model, t_handle):
    return _openstudiomodelresources.getRoofVegetation(t_model, t_handle)

def getRoofVegetations(t_model):
    return _openstudiomodelresources.getRoofVegetations(t_model)

def getRoofVegetationByName(t_model, t_name):
    return _openstudiomodelresources.getRoofVegetationByName(t_model, t_name)

def getRoofVegetationsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getRoofVegetationsByName(t_model, t_name, t_exactMatch)

def _to_RoofVegetation(self) -> OptionalRoofVegetation:
    """Try to cast the ModelObject to a RoofVegetation.

    :return: An Optional RoofVegetation.
    """
    return toRoofVegetation(self)
openstudioutilitiesidf.IdfObject.to_RoofVegetation = _to_RoofVegetation

def _getRoofVegetation(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRoofVegetation:
    """Try to get an object of type RoofVegetation referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RoofVegetation.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRoofVegetation(self, t_handle)
Model.getRoofVegetation = _getRoofVegetation

def _getRoofVegetations(self) -> RoofVegetationVector:
    """Get a vector of all objects of type RoofVegetation in the model.

    :return: A vector of RoofVegetation.
    """
    return getRoofVegetations(self)
Model.getRoofVegetations = _getRoofVegetations

def _getRoofVegetationByName(self, t_name: str) -> OptionalRoofVegetation:
    """Try to get an object of type RoofVegetation that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RoofVegetation.
    """
    return getRoofVegetationByName(self, t_name)
Model.getRoofVegetationByName = _getRoofVegetationByName

def _getRoofVegetationsByName(self, t_name: str, t_exactMatch: bool) -> RoofVegetationVector:
    """Returns all objects of type RoofVegetation named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRoofVegetationsByName(self, t_name, t_exactMatch)
Model.getRoofVegetationsByName = _getRoofVegetationsByName

class Screen(ShadingMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_Screen

    def __init__(self, *args):
        _openstudiomodelresources.Screen_swiginit(self, _openstudiomodelresources.new_Screen(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.Screen_iddObjectType()

    @staticmethod
    def reflectedBeamTransmittanceAccountingMethodValues():
        return _openstudiomodelresources.Screen_reflectedBeamTransmittanceAccountingMethodValues()

    @staticmethod
    def angleofResolutionforScreenTransmittanceOutputMapValues():
        return _openstudiomodelresources.Screen_angleofResolutionforScreenTransmittanceOutputMapValues()

    def thermalConductivity(self):
        return _openstudiomodelresources.Screen_thermalConductivity(self)

    def thermalConductance(self):
        return _openstudiomodelresources.Screen_thermalConductance(self)

    def thermalResistivity(self):
        return _openstudiomodelresources.Screen_thermalResistivity(self)

    def thermalResistance(self):
        return _openstudiomodelresources.Screen_thermalResistance(self)

    def reflectedBeamTransmittanceAccountingMethod(self):
        return _openstudiomodelresources.Screen_reflectedBeamTransmittanceAccountingMethod(self)

    def isReflectedBeamTransmittanceAccountingMethodDefaulted(self):
        return _openstudiomodelresources.Screen_isReflectedBeamTransmittanceAccountingMethodDefaulted(self)

    def diffuseSolarReflectance(self):
        return _openstudiomodelresources.Screen_diffuseSolarReflectance(self)

    def diffuseVisibleReflectance(self):
        return _openstudiomodelresources.Screen_diffuseVisibleReflectance(self)

    def thermalHemisphericalEmissivity(self):
        return _openstudiomodelresources.Screen_thermalHemisphericalEmissivity(self)

    def isThermalHemisphericalEmissivityDefaulted(self):
        return _openstudiomodelresources.Screen_isThermalHemisphericalEmissivityDefaulted(self)

    def conductivity(self):
        return _openstudiomodelresources.Screen_conductivity(self)

    def isConductivityDefaulted(self):
        return _openstudiomodelresources.Screen_isConductivityDefaulted(self)

    def screenMaterialSpacing(self):
        return _openstudiomodelresources.Screen_screenMaterialSpacing(self)

    def screenMaterialDiameter(self):
        return _openstudiomodelresources.Screen_screenMaterialDiameter(self)

    def screentoGlassDistance(self):
        return _openstudiomodelresources.Screen_screentoGlassDistance(self)

    def isScreentoGlassDistanceDefaulted(self):
        return _openstudiomodelresources.Screen_isScreentoGlassDistanceDefaulted(self)

    def topOpeningMultiplier(self):
        return _openstudiomodelresources.Screen_topOpeningMultiplier(self)

    def isTopOpeningMultiplierDefaulted(self):
        return _openstudiomodelresources.Screen_isTopOpeningMultiplierDefaulted(self)

    def bottomOpeningMultiplier(self):
        return _openstudiomodelresources.Screen_bottomOpeningMultiplier(self)

    def isBottomOpeningMultiplierDefaulted(self):
        return _openstudiomodelresources.Screen_isBottomOpeningMultiplierDefaulted(self)

    def leftSideOpeningMultiplier(self):
        return _openstudiomodelresources.Screen_leftSideOpeningMultiplier(self)

    def isLeftSideOpeningMultiplierDefaulted(self):
        return _openstudiomodelresources.Screen_isLeftSideOpeningMultiplierDefaulted(self)

    def rightSideOpeningMultiplier(self):
        return _openstudiomodelresources.Screen_rightSideOpeningMultiplier(self)

    def isRightSideOpeningMultiplierDefaulted(self):
        return _openstudiomodelresources.Screen_isRightSideOpeningMultiplierDefaulted(self)

    def angleofResolutionforScreenTransmittanceOutputMap(self):
        return _openstudiomodelresources.Screen_angleofResolutionforScreenTransmittanceOutputMap(self)

    def isAngleofResolutionforScreenTransmittanceOutputMapDefaulted(self):
        return _openstudiomodelresources.Screen_isAngleofResolutionforScreenTransmittanceOutputMapDefaulted(self)

    def setThermalConductivity(self, value):
        return _openstudiomodelresources.Screen_setThermalConductivity(self, value)

    def setThermalResistivity(self, value):
        return _openstudiomodelresources.Screen_setThermalResistivity(self, value)

    def setReflectedBeamTransmittanceAccountingMethod(self, reflectedBeamTransmittanceAccountingMethod):
        return _openstudiomodelresources.Screen_setReflectedBeamTransmittanceAccountingMethod(self, reflectedBeamTransmittanceAccountingMethod)

    def resetReflectedBeamTransmittanceAccountingMethod(self):
        return _openstudiomodelresources.Screen_resetReflectedBeamTransmittanceAccountingMethod(self)

    def setDiffuseSolarReflectance(self, diffuseSolarReflectance):
        return _openstudiomodelresources.Screen_setDiffuseSolarReflectance(self, diffuseSolarReflectance)

    def setDiffuseVisibleReflectance(self, diffuseVisibleReflectance):
        return _openstudiomodelresources.Screen_setDiffuseVisibleReflectance(self, diffuseVisibleReflectance)

    def setThermalHemisphericalEmissivity(self, thermalHemisphericalEmissivity):
        return _openstudiomodelresources.Screen_setThermalHemisphericalEmissivity(self, thermalHemisphericalEmissivity)

    def resetThermalHemisphericalEmissivity(self):
        return _openstudiomodelresources.Screen_resetThermalHemisphericalEmissivity(self)

    def setConductivity(self, conductivity):
        return _openstudiomodelresources.Screen_setConductivity(self, conductivity)

    def resetConductivity(self):
        return _openstudiomodelresources.Screen_resetConductivity(self)

    def setScreenMaterialSpacing(self, screenMaterialSpacing):
        return _openstudiomodelresources.Screen_setScreenMaterialSpacing(self, screenMaterialSpacing)

    def setScreenMaterialDiameter(self, screenMaterialDiameter):
        return _openstudiomodelresources.Screen_setScreenMaterialDiameter(self, screenMaterialDiameter)

    def setScreentoGlassDistance(self, screentoGlassDistance):
        return _openstudiomodelresources.Screen_setScreentoGlassDistance(self, screentoGlassDistance)

    def resetScreentoGlassDistance(self):
        return _openstudiomodelresources.Screen_resetScreentoGlassDistance(self)

    def setTopOpeningMultiplier(self, topOpeningMultiplier):
        return _openstudiomodelresources.Screen_setTopOpeningMultiplier(self, topOpeningMultiplier)

    def resetTopOpeningMultiplier(self):
        return _openstudiomodelresources.Screen_resetTopOpeningMultiplier(self)

    def setBottomOpeningMultiplier(self, bottomOpeningMultiplier):
        return _openstudiomodelresources.Screen_setBottomOpeningMultiplier(self, bottomOpeningMultiplier)

    def resetBottomOpeningMultiplier(self):
        return _openstudiomodelresources.Screen_resetBottomOpeningMultiplier(self)

    def setLeftSideOpeningMultiplier(self, leftSideOpeningMultiplier):
        return _openstudiomodelresources.Screen_setLeftSideOpeningMultiplier(self, leftSideOpeningMultiplier)

    def resetLeftSideOpeningMultiplier(self):
        return _openstudiomodelresources.Screen_resetLeftSideOpeningMultiplier(self)

    def setRightSideOpeningMultiplier(self, rightSideOpeningMultiplier):
        return _openstudiomodelresources.Screen_setRightSideOpeningMultiplier(self, rightSideOpeningMultiplier)

    def resetRightSideOpeningMultiplier(self):
        return _openstudiomodelresources.Screen_resetRightSideOpeningMultiplier(self)

    def setAngleofResolutionforScreenTransmittanceOutputMap(self, angleofResolutionforScreenTransmittanceOutputMap):
        return _openstudiomodelresources.Screen_setAngleofResolutionforScreenTransmittanceOutputMap(self, angleofResolutionforScreenTransmittanceOutputMap)

    def resetAngleofResolutionforScreenTransmittanceOutputMap(self):
        return _openstudiomodelresources.Screen_resetAngleofResolutionforScreenTransmittanceOutputMap(self)

# Register Screen in _openstudiomodelresources:
_openstudiomodelresources.Screen_swigregister(Screen)

def toScreen(idfObject):
    return _openstudiomodelresources.toScreen(idfObject)

def getScreen(t_model, t_handle):
    return _openstudiomodelresources.getScreen(t_model, t_handle)

def getScreens(t_model):
    return _openstudiomodelresources.getScreens(t_model)

def getScreenByName(t_model, t_name):
    return _openstudiomodelresources.getScreenByName(t_model, t_name)

def getScreensByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getScreensByName(t_model, t_name, t_exactMatch)

def _to_Screen(self) -> OptionalScreen:
    """Try to cast the ModelObject to a Screen.

    :return: An Optional Screen.
    """
    return toScreen(self)
openstudioutilitiesidf.IdfObject.to_Screen = _to_Screen

def _getScreen(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalScreen:
    """Try to get an object of type Screen referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Screen.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getScreen(self, t_handle)
Model.getScreen = _getScreen

def _getScreens(self) -> ScreenVector:
    """Get a vector of all objects of type Screen in the model.

    :return: A vector of Screen.
    """
    return getScreens(self)
Model.getScreens = _getScreens

def _getScreenByName(self, t_name: str) -> OptionalScreen:
    """Try to get an object of type Screen that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Screen.
    """
    return getScreenByName(self, t_name)
Model.getScreenByName = _getScreenByName

def _getScreensByName(self, t_name: str, t_exactMatch: bool) -> ScreenVector:
    """Returns all objects of type Screen named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getScreensByName(self, t_name, t_exactMatch)
Model.getScreensByName = _getScreensByName

class Shade(ShadingMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_Shade

    def __init__(self, *args):
        _openstudiomodelresources.Shade_swiginit(self, _openstudiomodelresources.new_Shade(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.Shade_iddObjectType()

    def thermalConductivity(self):
        return _openstudiomodelresources.Shade_thermalConductivity(self)

    def thermalConductance(self):
        return _openstudiomodelresources.Shade_thermalConductance(self)

    def thermalResistivity(self):
        return _openstudiomodelresources.Shade_thermalResistivity(self)

    def thermalResistance(self):
        return _openstudiomodelresources.Shade_thermalResistance(self)

    def solarTransmittance(self):
        return _openstudiomodelresources.Shade_solarTransmittance(self)

    def solarReflectance(self):
        return _openstudiomodelresources.Shade_solarReflectance(self)

    def visibleTransmittance(self):
        return _openstudiomodelresources.Shade_visibleTransmittance(self)

    def visibleReflectance(self):
        return _openstudiomodelresources.Shade_visibleReflectance(self)

    def thermalHemisphericalEmissivity(self):
        return _openstudiomodelresources.Shade_thermalHemisphericalEmissivity(self)

    def thermalTransmittance(self):
        return _openstudiomodelresources.Shade_thermalTransmittance(self)

    def solarAbsorptance(self):
        return _openstudiomodelresources.Shade_solarAbsorptance(self)

    def visibleAbsorptance(self):
        return _openstudiomodelresources.Shade_visibleAbsorptance(self)

    def thickness(self):
        return _openstudiomodelresources.Shade_thickness(self)

    def conductivity(self):
        return _openstudiomodelresources.Shade_conductivity(self)

    def shadetoGlassDistance(self):
        return _openstudiomodelresources.Shade_shadetoGlassDistance(self)

    def isShadetoGlassDistanceDefaulted(self):
        return _openstudiomodelresources.Shade_isShadetoGlassDistanceDefaulted(self)

    def topOpeningMultiplier(self):
        return _openstudiomodelresources.Shade_topOpeningMultiplier(self)

    def isTopOpeningMultiplierDefaulted(self):
        return _openstudiomodelresources.Shade_isTopOpeningMultiplierDefaulted(self)

    def bottomOpeningMultiplier(self):
        return _openstudiomodelresources.Shade_bottomOpeningMultiplier(self)

    def isBottomOpeningMultiplierDefaulted(self):
        return _openstudiomodelresources.Shade_isBottomOpeningMultiplierDefaulted(self)

    def leftSideOpeningMultiplier(self):
        return _openstudiomodelresources.Shade_leftSideOpeningMultiplier(self)

    def isLeftSideOpeningMultiplierDefaulted(self):
        return _openstudiomodelresources.Shade_isLeftSideOpeningMultiplierDefaulted(self)

    def rightSideOpeningMultiplier(self):
        return _openstudiomodelresources.Shade_rightSideOpeningMultiplier(self)

    def isRightSideOpeningMultiplierDefaulted(self):
        return _openstudiomodelresources.Shade_isRightSideOpeningMultiplierDefaulted(self)

    def airflowPermeability(self):
        return _openstudiomodelresources.Shade_airflowPermeability(self)

    def isAirflowPermeabilityDefaulted(self):
        return _openstudiomodelresources.Shade_isAirflowPermeabilityDefaulted(self)

    def setThermalConductivity(self, value):
        return _openstudiomodelresources.Shade_setThermalConductivity(self, value)

    def setThermalConductance(self, value):
        return _openstudiomodelresources.Shade_setThermalConductance(self, value)

    def setThermalResistivity(self, value):
        return _openstudiomodelresources.Shade_setThermalResistivity(self, value)

    def setThermalResistance(self, value):
        return _openstudiomodelresources.Shade_setThermalResistance(self, value)

    def setThermalTransmittance(self, thermalTransmittance):
        return _openstudiomodelresources.Shade_setThermalTransmittance(self, thermalTransmittance)

    def setSolarTransmittance(self, solarTransmittance):
        return _openstudiomodelresources.Shade_setSolarTransmittance(self, solarTransmittance)

    def setSolarReflectance(self, solarReflectance):
        return _openstudiomodelresources.Shade_setSolarReflectance(self, solarReflectance)

    def setVisibleTransmittance(self, visibleTransmittance):
        return _openstudiomodelresources.Shade_setVisibleTransmittance(self, visibleTransmittance)

    def setVisibleReflectance(self, visibleReflectance):
        return _openstudiomodelresources.Shade_setVisibleReflectance(self, visibleReflectance)

    def setThermalHemisphericalEmissivity(self, thermalHemisphericalEmissivity):
        return _openstudiomodelresources.Shade_setThermalHemisphericalEmissivity(self, thermalHemisphericalEmissivity)

    def setThickness(self, thickness):
        return _openstudiomodelresources.Shade_setThickness(self, thickness)

    def setConductivity(self, conductivity):
        return _openstudiomodelresources.Shade_setConductivity(self, conductivity)

    def setShadetoGlassDistance(self, shadetoGlassDistance):
        return _openstudiomodelresources.Shade_setShadetoGlassDistance(self, shadetoGlassDistance)

    def resetShadetoGlassDistance(self):
        return _openstudiomodelresources.Shade_resetShadetoGlassDistance(self)

    def setTopOpeningMultiplier(self, topOpeningMultiplier):
        return _openstudiomodelresources.Shade_setTopOpeningMultiplier(self, topOpeningMultiplier)

    def resetTopOpeningMultiplier(self):
        return _openstudiomodelresources.Shade_resetTopOpeningMultiplier(self)

    def setBottomOpeningMultiplier(self, bottomOpeningMultiplier):
        return _openstudiomodelresources.Shade_setBottomOpeningMultiplier(self, bottomOpeningMultiplier)

    def resetBottomOpeningMultiplier(self):
        return _openstudiomodelresources.Shade_resetBottomOpeningMultiplier(self)

    def setLeftSideOpeningMultiplier(self, leftSideOpeningMultiplier):
        return _openstudiomodelresources.Shade_setLeftSideOpeningMultiplier(self, leftSideOpeningMultiplier)

    def resetLeftSideOpeningMultiplier(self):
        return _openstudiomodelresources.Shade_resetLeftSideOpeningMultiplier(self)

    def setRightSideOpeningMultiplier(self, rightSideOpeningMultiplier):
        return _openstudiomodelresources.Shade_setRightSideOpeningMultiplier(self, rightSideOpeningMultiplier)

    def resetRightSideOpeningMultiplier(self):
        return _openstudiomodelresources.Shade_resetRightSideOpeningMultiplier(self)

    def setAirflowPermeability(self, airflowPermeability):
        return _openstudiomodelresources.Shade_setAirflowPermeability(self, airflowPermeability)

    def resetAirflowPermeability(self):
        return _openstudiomodelresources.Shade_resetAirflowPermeability(self)

# Register Shade in _openstudiomodelresources:
_openstudiomodelresources.Shade_swigregister(Shade)

def toShade(idfObject):
    return _openstudiomodelresources.toShade(idfObject)

def getShade(t_model, t_handle):
    return _openstudiomodelresources.getShade(t_model, t_handle)

def getShades(t_model):
    return _openstudiomodelresources.getShades(t_model)

def getShadeByName(t_model, t_name):
    return _openstudiomodelresources.getShadeByName(t_model, t_name)

def getShadesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getShadesByName(t_model, t_name, t_exactMatch)

def _to_Shade(self) -> OptionalShade:
    """Try to cast the ModelObject to a Shade.

    :return: An Optional Shade.
    """
    return toShade(self)
openstudioutilitiesidf.IdfObject.to_Shade = _to_Shade

def _getShade(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalShade:
    """Try to get an object of type Shade referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Shade.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getShade(self, t_handle)
Model.getShade = _getShade

def _getShades(self) -> ShadeVector:
    """Get a vector of all objects of type Shade in the model.

    :return: A vector of Shade.
    """
    return getShades(self)
Model.getShades = _getShades

def _getShadeByName(self, t_name: str) -> OptionalShade:
    """Try to get an object of type Shade that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Shade.
    """
    return getShadeByName(self, t_name)
Model.getShadeByName = _getShadeByName

def _getShadesByName(self, t_name: str, t_exactMatch: bool) -> ShadeVector:
    """Returns all objects of type Shade named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getShadesByName(self, t_name, t_exactMatch)
Model.getShadesByName = _getShadesByName

class SimpleGlazing(Glazing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_SimpleGlazing

    def __init__(self, *args):
        _openstudiomodelresources.SimpleGlazing_swiginit(self, _openstudiomodelresources.new_SimpleGlazing(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.SimpleGlazing_iddObjectType()

    def uFactor(self):
        return _openstudiomodelresources.SimpleGlazing_uFactor(self)

    def solarHeatGainCoefficient(self):
        return _openstudiomodelresources.SimpleGlazing_solarHeatGainCoefficient(self)

    def visibleTransmittance(self):
        return _openstudiomodelresources.SimpleGlazing_visibleTransmittance(self)

    def setUFactor(self, uFactor):
        return _openstudiomodelresources.SimpleGlazing_setUFactor(self, uFactor)

    def setSolarHeatGainCoefficient(self, solarHeatGainCoefficient):
        return _openstudiomodelresources.SimpleGlazing_setSolarHeatGainCoefficient(self, solarHeatGainCoefficient)

    def setVisibleTransmittance(self, visibleTransmittance):
        return _openstudiomodelresources.SimpleGlazing_setVisibleTransmittance(self, visibleTransmittance)

    def resetVisibleTransmittance(self):
        return _openstudiomodelresources.SimpleGlazing_resetVisibleTransmittance(self)

# Register SimpleGlazing in _openstudiomodelresources:
_openstudiomodelresources.SimpleGlazing_swigregister(SimpleGlazing)

def toSimpleGlazing(idfObject):
    return _openstudiomodelresources.toSimpleGlazing(idfObject)

def getSimpleGlazing(t_model, t_handle):
    return _openstudiomodelresources.getSimpleGlazing(t_model, t_handle)

def getSimpleGlazings(t_model):
    return _openstudiomodelresources.getSimpleGlazings(t_model)

def getSimpleGlazingByName(t_model, t_name):
    return _openstudiomodelresources.getSimpleGlazingByName(t_model, t_name)

def getSimpleGlazingsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getSimpleGlazingsByName(t_model, t_name, t_exactMatch)

def _to_SimpleGlazing(self) -> OptionalSimpleGlazing:
    """Try to cast the ModelObject to a SimpleGlazing.

    :return: An Optional SimpleGlazing.
    """
    return toSimpleGlazing(self)
openstudioutilitiesidf.IdfObject.to_SimpleGlazing = _to_SimpleGlazing

def _getSimpleGlazing(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSimpleGlazing:
    """Try to get an object of type SimpleGlazing referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SimpleGlazing.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSimpleGlazing(self, t_handle)
Model.getSimpleGlazing = _getSimpleGlazing

def _getSimpleGlazings(self) -> SimpleGlazingVector:
    """Get a vector of all objects of type SimpleGlazing in the model.

    :return: A vector of SimpleGlazing.
    """
    return getSimpleGlazings(self)
Model.getSimpleGlazings = _getSimpleGlazings

def _getSimpleGlazingByName(self, t_name: str) -> OptionalSimpleGlazing:
    """Try to get an object of type SimpleGlazing that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SimpleGlazing.
    """
    return getSimpleGlazingByName(self, t_name)
Model.getSimpleGlazingByName = _getSimpleGlazingByName

def _getSimpleGlazingsByName(self, t_name: str, t_exactMatch: bool) -> SimpleGlazingVector:
    """Returns all objects of type SimpleGlazing named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSimpleGlazingsByName(self, t_name, t_exactMatch)
Model.getSimpleGlazingsByName = _getSimpleGlazingsByName

class StandardGlazing(Glazing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_StandardGlazing

    def __init__(self, *args):
        _openstudiomodelresources.StandardGlazing_swiginit(self, _openstudiomodelresources.new_StandardGlazing(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.StandardGlazing_iddObjectType()

    @staticmethod
    def opticalDataTypeValues():
        return _openstudiomodelresources.StandardGlazing_opticalDataTypeValues()

    def opticalDataType(self):
        return _openstudiomodelresources.StandardGlazing_opticalDataType(self)

    def thickness(self):
        return _openstudiomodelresources.StandardGlazing_thickness(self)

    def windowGlassSpectralDataSetName(self):
        return _openstudiomodelresources.StandardGlazing_windowGlassSpectralDataSetName(self)

    def windowGlassSpectralDataSet(self):
        return _openstudiomodelresources.StandardGlazing_windowGlassSpectralDataSet(self)

    def solarTransmittance(self):
        return _openstudiomodelresources.StandardGlazing_solarTransmittance(self)

    def solarTransmittanceatNormalIncidence(self):
        return _openstudiomodelresources.StandardGlazing_solarTransmittanceatNormalIncidence(self)

    def frontSideSolarReflectanceatNormalIncidence(self):
        return _openstudiomodelresources.StandardGlazing_frontSideSolarReflectanceatNormalIncidence(self)

    def backSideSolarReflectanceatNormalIncidence(self):
        return _openstudiomodelresources.StandardGlazing_backSideSolarReflectanceatNormalIncidence(self)

    def visibleTransmittanceatNormalIncidence(self):
        return _openstudiomodelresources.StandardGlazing_visibleTransmittanceatNormalIncidence(self)

    def frontSideVisibleReflectanceatNormalIncidence(self):
        return _openstudiomodelresources.StandardGlazing_frontSideVisibleReflectanceatNormalIncidence(self)

    def backSideVisibleReflectanceatNormalIncidence(self):
        return _openstudiomodelresources.StandardGlazing_backSideVisibleReflectanceatNormalIncidence(self)

    def infraredTransmittance(self):
        return _openstudiomodelresources.StandardGlazing_infraredTransmittance(self)

    def infraredTransmittanceatNormalIncidence(self):
        return _openstudiomodelresources.StandardGlazing_infraredTransmittanceatNormalIncidence(self)

    def isInfraredTransmittanceatNormalIncidenceDefaulted(self):
        return _openstudiomodelresources.StandardGlazing_isInfraredTransmittanceatNormalIncidenceDefaulted(self)

    def frontSideInfraredHemisphericalEmissivity(self):
        return _openstudiomodelresources.StandardGlazing_frontSideInfraredHemisphericalEmissivity(self)

    def isFrontSideInfraredHemisphericalEmissivityDefaulted(self):
        return _openstudiomodelresources.StandardGlazing_isFrontSideInfraredHemisphericalEmissivityDefaulted(self)

    def backSideInfraredHemisphericalEmissivity(self):
        return _openstudiomodelresources.StandardGlazing_backSideInfraredHemisphericalEmissivity(self)

    def isBackSideInfraredHemisphericalEmissivityDefaulted(self):
        return _openstudiomodelresources.StandardGlazing_isBackSideInfraredHemisphericalEmissivityDefaulted(self)

    def conductivity(self):
        return _openstudiomodelresources.StandardGlazing_conductivity(self)

    def isConductivityDefaulted(self):
        return _openstudiomodelresources.StandardGlazing_isConductivityDefaulted(self)

    def dirtCorrectionFactorforSolarandVisibleTransmittance(self):
        return _openstudiomodelresources.StandardGlazing_dirtCorrectionFactorforSolarandVisibleTransmittance(self)

    def isDirtCorrectionFactorforSolarandVisibleTransmittanceDefaulted(self):
        return _openstudiomodelresources.StandardGlazing_isDirtCorrectionFactorforSolarandVisibleTransmittanceDefaulted(self)

    def solarDiffusing(self):
        return _openstudiomodelresources.StandardGlazing_solarDiffusing(self)

    def isSolarDiffusingDefaulted(self):
        return _openstudiomodelresources.StandardGlazing_isSolarDiffusingDefaulted(self)

    def setOpticalDataType(self, opticalDataType):
        return _openstudiomodelresources.StandardGlazing_setOpticalDataType(self, opticalDataType)

    def setWindowGlassSpectralDataSetName(self, windowGlassSpectralDataSetName):
        return _openstudiomodelresources.StandardGlazing_setWindowGlassSpectralDataSetName(self, windowGlassSpectralDataSetName)

    def resetWindowGlassSpectralDataSetName(self):
        return _openstudiomodelresources.StandardGlazing_resetWindowGlassSpectralDataSetName(self)

    def setWindowGlassSpectralDataSet(self, spectralData):
        return _openstudiomodelresources.StandardGlazing_setWindowGlassSpectralDataSet(self, spectralData)

    def resetWindowGlassSpectralDataSet(self):
        return _openstudiomodelresources.StandardGlazing_resetWindowGlassSpectralDataSet(self)

    def setThickness(self, thickness):
        return _openstudiomodelresources.StandardGlazing_setThickness(self, thickness)

    def setSolarTransmittance(self, value):
        return _openstudiomodelresources.StandardGlazing_setSolarTransmittance(self, value)

    def setSolarTransmittanceatNormalIncidence(self, solarTransmittanceatNormalIncidence):
        return _openstudiomodelresources.StandardGlazing_setSolarTransmittanceatNormalIncidence(self, solarTransmittanceatNormalIncidence)

    def resetSolarTransmittanceatNormalIncidence(self):
        return _openstudiomodelresources.StandardGlazing_resetSolarTransmittanceatNormalIncidence(self)

    def setFrontSideSolarReflectanceatNormalIncidence(self, frontSideSolarReflectanceatNormalIncidence):
        return _openstudiomodelresources.StandardGlazing_setFrontSideSolarReflectanceatNormalIncidence(self, frontSideSolarReflectanceatNormalIncidence)

    def resetFrontSideSolarReflectanceatNormalIncidence(self):
        return _openstudiomodelresources.StandardGlazing_resetFrontSideSolarReflectanceatNormalIncidence(self)

    def setBackSideSolarReflectanceatNormalIncidence(self, backSideSolarReflectanceatNormalIncidence):
        return _openstudiomodelresources.StandardGlazing_setBackSideSolarReflectanceatNormalIncidence(self, backSideSolarReflectanceatNormalIncidence)

    def resetBackSideSolarReflectanceatNormalIncidence(self):
        return _openstudiomodelresources.StandardGlazing_resetBackSideSolarReflectanceatNormalIncidence(self)

    def setVisibleTransmittance(self, value):
        return _openstudiomodelresources.StandardGlazing_setVisibleTransmittance(self, value)

    def setVisibleTransmittanceatNormalIncidence(self, visibleTransmittanceatNormalIncidence):
        return _openstudiomodelresources.StandardGlazing_setVisibleTransmittanceatNormalIncidence(self, visibleTransmittanceatNormalIncidence)

    def resetVisibleTransmittanceatNormalIncidence(self):
        return _openstudiomodelresources.StandardGlazing_resetVisibleTransmittanceatNormalIncidence(self)

    def setFrontSideVisibleReflectanceatNormalIncidence(self, frontSideVisibleReflectanceatNormalIncidence):
        return _openstudiomodelresources.StandardGlazing_setFrontSideVisibleReflectanceatNormalIncidence(self, frontSideVisibleReflectanceatNormalIncidence)

    def resetFrontSideVisibleReflectanceatNormalIncidence(self):
        return _openstudiomodelresources.StandardGlazing_resetFrontSideVisibleReflectanceatNormalIncidence(self)

    def setBackSideVisibleReflectanceatNormalIncidence(self, backSideVisibleReflectanceatNormalIncidence):
        return _openstudiomodelresources.StandardGlazing_setBackSideVisibleReflectanceatNormalIncidence(self, backSideVisibleReflectanceatNormalIncidence)

    def resetBackSideVisibleReflectanceatNormalIncidence(self):
        return _openstudiomodelresources.StandardGlazing_resetBackSideVisibleReflectanceatNormalIncidence(self)

    def setInfraredTransmittance(self, value):
        return _openstudiomodelresources.StandardGlazing_setInfraredTransmittance(self, value)

    def setInfraredTransmittanceatNormalIncidence(self, infraredTransmittanceatNormalIncidence):
        return _openstudiomodelresources.StandardGlazing_setInfraredTransmittanceatNormalIncidence(self, infraredTransmittanceatNormalIncidence)

    def resetInfraredTransmittanceatNormalIncidence(self):
        return _openstudiomodelresources.StandardGlazing_resetInfraredTransmittanceatNormalIncidence(self)

    def setFrontSideInfraredHemisphericalEmissivity(self, frontSideInfraredHemisphericalEmissivity):
        return _openstudiomodelresources.StandardGlazing_setFrontSideInfraredHemisphericalEmissivity(self, frontSideInfraredHemisphericalEmissivity)

    def resetFrontSideInfraredHemisphericalEmissivity(self):
        return _openstudiomodelresources.StandardGlazing_resetFrontSideInfraredHemisphericalEmissivity(self)

    def setBackSideInfraredHemisphericalEmissivity(self, backSideInfraredHemisphericalEmissivity):
        return _openstudiomodelresources.StandardGlazing_setBackSideInfraredHemisphericalEmissivity(self, backSideInfraredHemisphericalEmissivity)

    def resetBackSideInfraredHemisphericalEmissivity(self):
        return _openstudiomodelresources.StandardGlazing_resetBackSideInfraredHemisphericalEmissivity(self)

    def setConductivity(self, conductivity):
        return _openstudiomodelresources.StandardGlazing_setConductivity(self, conductivity)

    def resetConductivity(self):
        return _openstudiomodelresources.StandardGlazing_resetConductivity(self)

    def setDirtCorrectionFactorforSolarandVisibleTransmittance(self, dirtCorrectionFactorforSolarandVisibleTransmittance):
        return _openstudiomodelresources.StandardGlazing_setDirtCorrectionFactorforSolarandVisibleTransmittance(self, dirtCorrectionFactorforSolarandVisibleTransmittance)

    def resetDirtCorrectionFactorforSolarandVisibleTransmittance(self):
        return _openstudiomodelresources.StandardGlazing_resetDirtCorrectionFactorforSolarandVisibleTransmittance(self)

    def setSolarDiffusing(self, solarDiffusing):
        return _openstudiomodelresources.StandardGlazing_setSolarDiffusing(self, solarDiffusing)

    def setSolarDiffusingNoFail(self, solarDiffusing):
        return _openstudiomodelresources.StandardGlazing_setSolarDiffusingNoFail(self, solarDiffusing)

    def resetSolarDiffusing(self):
        return _openstudiomodelresources.StandardGlazing_resetSolarDiffusing(self)

    def interiorVisibleReflectance(self):
        return _openstudiomodelresources.StandardGlazing_interiorVisibleReflectance(self)

    def exteriorVisibleReflectance(self):
        return _openstudiomodelresources.StandardGlazing_exteriorVisibleReflectance(self)

    def thermalConductivity(self):
        return _openstudiomodelresources.StandardGlazing_thermalConductivity(self)

    def thermalConductance(self):
        return _openstudiomodelresources.StandardGlazing_thermalConductance(self)

    def thermalResistivity(self):
        return _openstudiomodelresources.StandardGlazing_thermalResistivity(self)

    def thermalResistance(self):
        return _openstudiomodelresources.StandardGlazing_thermalResistance(self)

    def setThermalConductivity(self, value):
        return _openstudiomodelresources.StandardGlazing_setThermalConductivity(self, value)

    def setThermalConductance(self, value):
        return _openstudiomodelresources.StandardGlazing_setThermalConductance(self, value)

    def setThermalResistivity(self, value):
        return _openstudiomodelresources.StandardGlazing_setThermalResistivity(self, value)

    def setThermalResistance(self, value):
        return _openstudiomodelresources.StandardGlazing_setThermalResistance(self, value)

# Register StandardGlazing in _openstudiomodelresources:
_openstudiomodelresources.StandardGlazing_swigregister(StandardGlazing)

def toStandardGlazing(idfObject):
    return _openstudiomodelresources.toStandardGlazing(idfObject)

def getStandardGlazing(t_model, t_handle):
    return _openstudiomodelresources.getStandardGlazing(t_model, t_handle)

def getStandardGlazings(t_model):
    return _openstudiomodelresources.getStandardGlazings(t_model)

def getStandardGlazingByName(t_model, t_name):
    return _openstudiomodelresources.getStandardGlazingByName(t_model, t_name)

def getStandardGlazingsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getStandardGlazingsByName(t_model, t_name, t_exactMatch)

def _to_StandardGlazing(self) -> OptionalStandardGlazing:
    """Try to cast the ModelObject to a StandardGlazing.

    :return: An Optional StandardGlazing.
    """
    return toStandardGlazing(self)
openstudioutilitiesidf.IdfObject.to_StandardGlazing = _to_StandardGlazing

def _getStandardGlazing(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalStandardGlazing:
    """Try to get an object of type StandardGlazing referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional StandardGlazing.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getStandardGlazing(self, t_handle)
Model.getStandardGlazing = _getStandardGlazing

def _getStandardGlazings(self) -> StandardGlazingVector:
    """Get a vector of all objects of type StandardGlazing in the model.

    :return: A vector of StandardGlazing.
    """
    return getStandardGlazings(self)
Model.getStandardGlazings = _getStandardGlazings

def _getStandardGlazingByName(self, t_name: str) -> OptionalStandardGlazing:
    """Try to get an object of type StandardGlazing that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional StandardGlazing.
    """
    return getStandardGlazingByName(self, t_name)
Model.getStandardGlazingByName = _getStandardGlazingByName

def _getStandardGlazingsByName(self, t_name: str, t_exactMatch: bool) -> StandardGlazingVector:
    """Returns all objects of type StandardGlazing named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getStandardGlazingsByName(self, t_name, t_exactMatch)
Model.getStandardGlazingsByName = _getStandardGlazingsByName

class StandardOpaqueMaterial(OpaqueMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_StandardOpaqueMaterial

    def __init__(self, *args):
        _openstudiomodelresources.StandardOpaqueMaterial_swiginit(self, _openstudiomodelresources.new_StandardOpaqueMaterial(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.StandardOpaqueMaterial_iddObjectType()

    @staticmethod
    def roughnessValues():
        return _openstudiomodelresources.StandardOpaqueMaterial_roughnessValues()

    def thermalConductivity(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalConductivity(self)

    def thermalConductance(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalConductance(self)

    def thermalResistivity(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalResistivity(self)

    def thermalResistance(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalResistance(self)

    def thermalReflectance(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalReflectance(self)

    def solarReflectance(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_solarReflectance(self)

    def visibleReflectance(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_visibleReflectance(self)

    def roughness(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_roughness(self)

    def thickness(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_thickness(self)

    def conductivity(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_conductivity(self)

    def density(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_density(self)

    def specificHeat(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_specificHeat(self)

    def thermalAbsorptance(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_thermalAbsorptance(self)

    def isThermalAbsorptanceDefaulted(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_isThermalAbsorptanceDefaulted(self)

    def solarAbsorptance(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_solarAbsorptance(self)

    def isSolarAbsorptanceDefaulted(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_isSolarAbsorptanceDefaulted(self)

    def visibleAbsorptance(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_visibleAbsorptance(self)

    def isVisibleAbsorptanceDefaulted(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_isVisibleAbsorptanceDefaulted(self)

    def setThermalConductivity(self, value):
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalConductivity(self, value)

    def setThermalConductance(self, value):
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalConductance(self, value)

    def setThermalResistivity(self, value):
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalResistivity(self, value)

    def setThermalResistance(self, value):
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalResistance(self, value)

    def setThermalReflectance(self, value):
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalReflectance(self, value)

    def setSolarReflectance(self, value):
        return _openstudiomodelresources.StandardOpaqueMaterial_setSolarReflectance(self, value)

    def setVisibleReflectance(self, value):
        return _openstudiomodelresources.StandardOpaqueMaterial_setVisibleReflectance(self, value)

    def setRoughness(self, roughness):
        return _openstudiomodelresources.StandardOpaqueMaterial_setRoughness(self, roughness)

    def setThickness(self, thickness):
        return _openstudiomodelresources.StandardOpaqueMaterial_setThickness(self, thickness)

    def setConductivity(self, conductivity):
        return _openstudiomodelresources.StandardOpaqueMaterial_setConductivity(self, conductivity)

    def setDensity(self, density):
        return _openstudiomodelresources.StandardOpaqueMaterial_setDensity(self, density)

    def setSpecificHeat(self, specificHeat):
        return _openstudiomodelresources.StandardOpaqueMaterial_setSpecificHeat(self, specificHeat)

    def setThermalAbsorptance(self, *args):
        return _openstudiomodelresources.StandardOpaqueMaterial_setThermalAbsorptance(self, *args)

    def resetThermalAbsorptance(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_resetThermalAbsorptance(self)

    def setSolarAbsorptance(self, *args):
        return _openstudiomodelresources.StandardOpaqueMaterial_setSolarAbsorptance(self, *args)

    def resetSolarAbsorptance(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_resetSolarAbsorptance(self)

    def setVisibleAbsorptance(self, *args):
        return _openstudiomodelresources.StandardOpaqueMaterial_setVisibleAbsorptance(self, *args)

    def resetVisibleAbsorptance(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_resetVisibleAbsorptance(self)

    def createMaterialPropertyMoisturePenetrationDepthSettings(self, waterVaporDiffusionResistanceFactor, moistureEquationCoefficientA, moistureEquationCoefficientB, moistureEquationCoefficientC, moistureEquationCoefficientD, coatingLayerThickness, coatingLayerWaterVaporDiffusionResistanceFactor):
        return _openstudiomodelresources.StandardOpaqueMaterial_createMaterialPropertyMoisturePenetrationDepthSettings(self, waterVaporDiffusionResistanceFactor, moistureEquationCoefficientA, moistureEquationCoefficientB, moistureEquationCoefficientC, moistureEquationCoefficientD, coatingLayerThickness, coatingLayerWaterVaporDiffusionResistanceFactor)

    def materialPropertyMoisturePenetrationDepthSettings(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_materialPropertyMoisturePenetrationDepthSettings(self)

    def resetMaterialPropertyMoisturePenetrationDepthSettings(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_resetMaterialPropertyMoisturePenetrationDepthSettings(self)

    def createMaterialPropertyPhaseChange(self, *args):
        return _openstudiomodelresources.StandardOpaqueMaterial_createMaterialPropertyPhaseChange(self, *args)

    def materialPropertyPhaseChange(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_materialPropertyPhaseChange(self)

    def resetMaterialPropertyPhaseChange(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_resetMaterialPropertyPhaseChange(self)

    def createMaterialPropertyPhaseChangeHysteresis(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_createMaterialPropertyPhaseChangeHysteresis(self)

    def materialPropertyPhaseChangeHysteresis(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_materialPropertyPhaseChangeHysteresis(self)

    def resetMaterialPropertyPhaseChangeHysteresis(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_resetMaterialPropertyPhaseChangeHysteresis(self)

    def heatCapacity(self):
        return _openstudiomodelresources.StandardOpaqueMaterial_heatCapacity(self)

# Register StandardOpaqueMaterial in _openstudiomodelresources:
_openstudiomodelresources.StandardOpaqueMaterial_swigregister(StandardOpaqueMaterial)

def toStandardOpaqueMaterial(idfObject):
    return _openstudiomodelresources.toStandardOpaqueMaterial(idfObject)

def getStandardOpaqueMaterial(t_model, t_handle):
    return _openstudiomodelresources.getStandardOpaqueMaterial(t_model, t_handle)

def getStandardOpaqueMaterials(t_model):
    return _openstudiomodelresources.getStandardOpaqueMaterials(t_model)

def getStandardOpaqueMaterialByName(t_model, t_name):
    return _openstudiomodelresources.getStandardOpaqueMaterialByName(t_model, t_name)

def getStandardOpaqueMaterialsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getStandardOpaqueMaterialsByName(t_model, t_name, t_exactMatch)

def _to_StandardOpaqueMaterial(self) -> OptionalStandardOpaqueMaterial:
    """Try to cast the ModelObject to a StandardOpaqueMaterial.

    :return: An Optional StandardOpaqueMaterial.
    """
    return toStandardOpaqueMaterial(self)
openstudioutilitiesidf.IdfObject.to_StandardOpaqueMaterial = _to_StandardOpaqueMaterial

def _getStandardOpaqueMaterial(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalStandardOpaqueMaterial:
    """Try to get an object of type StandardOpaqueMaterial referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional StandardOpaqueMaterial.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getStandardOpaqueMaterial(self, t_handle)
Model.getStandardOpaqueMaterial = _getStandardOpaqueMaterial

def _getStandardOpaqueMaterials(self) -> StandardOpaqueMaterialVector:
    """Get a vector of all objects of type StandardOpaqueMaterial in the model.

    :return: A vector of StandardOpaqueMaterial.
    """
    return getStandardOpaqueMaterials(self)
Model.getStandardOpaqueMaterials = _getStandardOpaqueMaterials

def _getStandardOpaqueMaterialByName(self, t_name: str) -> OptionalStandardOpaqueMaterial:
    """Try to get an object of type StandardOpaqueMaterial that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional StandardOpaqueMaterial.
    """
    return getStandardOpaqueMaterialByName(self, t_name)
Model.getStandardOpaqueMaterialByName = _getStandardOpaqueMaterialByName

def _getStandardOpaqueMaterialsByName(self, t_name: str, t_exactMatch: bool) -> StandardOpaqueMaterialVector:
    """Returns all objects of type StandardOpaqueMaterial named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getStandardOpaqueMaterialsByName(self, t_name, t_exactMatch)
Model.getStandardOpaqueMaterialsByName = _getStandardOpaqueMaterialsByName

class ThermochromicGlazing(Glazing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ThermochromicGlazing

    def __init__(self, *args):
        _openstudiomodelresources.ThermochromicGlazing_swiginit(self, _openstudiomodelresources.new_ThermochromicGlazing(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ThermochromicGlazing_iddObjectType()

    def opticalDataTemperature(self):
        return _openstudiomodelresources.ThermochromicGlazing_opticalDataTemperature(self)

    def setOpticalDataTemperature(self, value):
        return _openstudiomodelresources.ThermochromicGlazing_setOpticalDataTemperature(self, value)

# Register ThermochromicGlazing in _openstudiomodelresources:
_openstudiomodelresources.ThermochromicGlazing_swigregister(ThermochromicGlazing)

def toThermochromicGlazing(idfObject):
    return _openstudiomodelresources.toThermochromicGlazing(idfObject)

def getThermochromicGlazing(t_model, t_handle):
    return _openstudiomodelresources.getThermochromicGlazing(t_model, t_handle)

def getThermochromicGlazings(t_model):
    return _openstudiomodelresources.getThermochromicGlazings(t_model)

def getThermochromicGlazingByName(t_model, t_name):
    return _openstudiomodelresources.getThermochromicGlazingByName(t_model, t_name)

def getThermochromicGlazingsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getThermochromicGlazingsByName(t_model, t_name, t_exactMatch)

def _to_ThermochromicGlazing(self) -> OptionalThermochromicGlazing:
    """Try to cast the ModelObject to a ThermochromicGlazing.

    :return: An Optional ThermochromicGlazing.
    """
    return toThermochromicGlazing(self)
openstudioutilitiesidf.IdfObject.to_ThermochromicGlazing = _to_ThermochromicGlazing

def _getThermochromicGlazing(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalThermochromicGlazing:
    """Try to get an object of type ThermochromicGlazing referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ThermochromicGlazing.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getThermochromicGlazing(self, t_handle)
Model.getThermochromicGlazing = _getThermochromicGlazing

def _getThermochromicGlazings(self) -> ThermochromicGlazingVector:
    """Get a vector of all objects of type ThermochromicGlazing in the model.

    :return: A vector of ThermochromicGlazing.
    """
    return getThermochromicGlazings(self)
Model.getThermochromicGlazings = _getThermochromicGlazings

def _getThermochromicGlazingByName(self, t_name: str) -> OptionalThermochromicGlazing:
    """Try to get an object of type ThermochromicGlazing that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ThermochromicGlazing.
    """
    return getThermochromicGlazingByName(self, t_name)
Model.getThermochromicGlazingByName = _getThermochromicGlazingByName

def _getThermochromicGlazingsByName(self, t_name: str, t_exactMatch: bool) -> ThermochromicGlazingVector:
    """Returns all objects of type ThermochromicGlazing named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getThermochromicGlazingsByName(self, t_name, t_exactMatch)
Model.getThermochromicGlazingsByName = _getThermochromicGlazingsByName

class StandardsInformationMaterial(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_StandardsInformationMaterial

    def __init__(self, *args):
        _openstudiomodelresources.StandardsInformationMaterial_swiginit(self, _openstudiomodelresources.new_StandardsInformationMaterial(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.StandardsInformationMaterial_iddObjectType()

    def material(self):
        return _openstudiomodelresources.StandardsInformationMaterial_material(self)

    def materialStandard(self):
        return _openstudiomodelresources.StandardsInformationMaterial_materialStandard(self)

    def suggestedMaterialStandards(self):
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedMaterialStandards(self)

    def materialStandardSource(self):
        return _openstudiomodelresources.StandardsInformationMaterial_materialStandardSource(self)

    def suggestedMaterialStandardSources(self):
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedMaterialStandardSources(self)

    def standardsCategory(self):
        return _openstudiomodelresources.StandardsInformationMaterial_standardsCategory(self)

    def suggestedStandardsCategories(self):
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedStandardsCategories(self)

    def isCompositeMaterial(self):
        return _openstudiomodelresources.StandardsInformationMaterial_isCompositeMaterial(self)

    def standardsIdentifier(self):
        return _openstudiomodelresources.StandardsInformationMaterial_standardsIdentifier(self)

    def suggestedStandardsIdentifiers(self):
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedStandardsIdentifiers(self)

    def compositeFramingMaterial(self):
        return _openstudiomodelresources.StandardsInformationMaterial_compositeFramingMaterial(self)

    def suggestedCompositeFramingMaterials(self):
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeFramingMaterials(self)

    def compositeFramingConfiguration(self):
        return _openstudiomodelresources.StandardsInformationMaterial_compositeFramingConfiguration(self)

    def suggestedCompositeFramingConfigurations(self):
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeFramingConfigurations(self)

    def compositeFramingDepth(self):
        return _openstudiomodelresources.StandardsInformationMaterial_compositeFramingDepth(self)

    def suggestedCompositeFramingDepths(self):
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeFramingDepths(self)

    def compositeFramingSize(self):
        return _openstudiomodelresources.StandardsInformationMaterial_compositeFramingSize(self)

    def suggestedCompositeFramingSizes(self):
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeFramingSizes(self)

    def compositeCavityInsulation(self):
        return _openstudiomodelresources.StandardsInformationMaterial_compositeCavityInsulation(self)

    def suggestedCompositeCavityInsulations(self):
        return _openstudiomodelresources.StandardsInformationMaterial_suggestedCompositeCavityInsulations(self)

    def setMaterialStandard(self, materialStandard):
        return _openstudiomodelresources.StandardsInformationMaterial_setMaterialStandard(self, materialStandard)

    def resetMaterialStandard(self):
        return _openstudiomodelresources.StandardsInformationMaterial_resetMaterialStandard(self)

    def setMaterialStandardSource(self, materialStandardSource):
        return _openstudiomodelresources.StandardsInformationMaterial_setMaterialStandardSource(self, materialStandardSource)

    def resetMaterialStandardSource(self):
        return _openstudiomodelresources.StandardsInformationMaterial_resetMaterialStandardSource(self)

    def setStandardsCategory(self, standardsCategory):
        return _openstudiomodelresources.StandardsInformationMaterial_setStandardsCategory(self, standardsCategory)

    def resetStandardsCategory(self):
        return _openstudiomodelresources.StandardsInformationMaterial_resetStandardsCategory(self)

    def setStandardsIdentifier(self, standardsIdentifier):
        return _openstudiomodelresources.StandardsInformationMaterial_setStandardsIdentifier(self, standardsIdentifier)

    def resetStandardsIdentifier(self):
        return _openstudiomodelresources.StandardsInformationMaterial_resetStandardsIdentifier(self)

    def setCompositeFramingMaterial(self, compositeFramingMaterial):
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeFramingMaterial(self, compositeFramingMaterial)

    def resetCompositeFramingMaterial(self):
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeFramingMaterial(self)

    def setCompositeFramingConfiguration(self, compositeFramingConfiguration):
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeFramingConfiguration(self, compositeFramingConfiguration)

    def resetCompositeFramingConfiguration(self):
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeFramingConfiguration(self)

    def setCompositeFramingDepth(self, compositeFramingDepth):
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeFramingDepth(self, compositeFramingDepth)

    def resetCompositeFramingDepth(self):
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeFramingDepth(self)

    def setCompositeFramingSize(self, compositeFramingSize):
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeFramingSize(self, compositeFramingSize)

    def resetCompositeFramingSize(self):
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeFramingSize(self)

    def setCompositeCavityInsulation(self, compositeCavityInsulation):
        return _openstudiomodelresources.StandardsInformationMaterial_setCompositeCavityInsulation(self, compositeCavityInsulation)

    def resetCompositeCavityInsulation(self):
        return _openstudiomodelresources.StandardsInformationMaterial_resetCompositeCavityInsulation(self)

# Register StandardsInformationMaterial in _openstudiomodelresources:
_openstudiomodelresources.StandardsInformationMaterial_swigregister(StandardsInformationMaterial)

def toStandardsInformationMaterial(idfObject):
    return _openstudiomodelresources.toStandardsInformationMaterial(idfObject)

def getStandardsInformationMaterial(t_model, t_handle):
    return _openstudiomodelresources.getStandardsInformationMaterial(t_model, t_handle)

def getStandardsInformationMaterials(t_model):
    return _openstudiomodelresources.getStandardsInformationMaterials(t_model)

def getStandardsInformationMaterialByName(t_model, t_name):
    return _openstudiomodelresources.getStandardsInformationMaterialByName(t_model, t_name)

def getStandardsInformationMaterialsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getStandardsInformationMaterialsByName(t_model, t_name, t_exactMatch)

def _to_StandardsInformationMaterial(self) -> OptionalStandardsInformationMaterial:
    """Try to cast the ModelObject to a StandardsInformationMaterial.

    :return: An Optional StandardsInformationMaterial.
    """
    return toStandardsInformationMaterial(self)
openstudioutilitiesidf.IdfObject.to_StandardsInformationMaterial = _to_StandardsInformationMaterial

def _getStandardsInformationMaterial(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalStandardsInformationMaterial:
    """Try to get an object of type StandardsInformationMaterial referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional StandardsInformationMaterial.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getStandardsInformationMaterial(self, t_handle)
Model.getStandardsInformationMaterial = _getStandardsInformationMaterial

def _getStandardsInformationMaterials(self) -> StandardsInformationMaterialVector:
    """Get a vector of all objects of type StandardsInformationMaterial in the model.

    :return: A vector of StandardsInformationMaterial.
    """
    return getStandardsInformationMaterials(self)
Model.getStandardsInformationMaterials = _getStandardsInformationMaterials

def _getStandardsInformationMaterialByName(self, t_name: str) -> OptionalStandardsInformationMaterial:
    """Try to get an object of type StandardsInformationMaterial that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional StandardsInformationMaterial.
    """
    return getStandardsInformationMaterialByName(self, t_name)
Model.getStandardsInformationMaterialByName = _getStandardsInformationMaterialByName

def _getStandardsInformationMaterialsByName(self, t_name: str, t_exactMatch: bool) -> StandardsInformationMaterialVector:
    """Returns all objects of type StandardsInformationMaterial named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getStandardsInformationMaterialsByName(self, t_name, t_exactMatch)
Model.getStandardsInformationMaterialsByName = _getStandardsInformationMaterialsByName

class ConstructionBase(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionBase

    def __init__(self, *args):
        _openstudiomodelresources.ConstructionBase_swiginit(self, _openstudiomodelresources.new_ConstructionBase(*args))

    def standardsInformation(self):
        return _openstudiomodelresources.ConstructionBase_standardsInformation(self)

    def getNetArea(self):
        return _openstudiomodelresources.ConstructionBase_getNetArea(self)

    def setUFactor(self, *args):
        return _openstudiomodelresources.ConstructionBase_setUFactor(self, *args)

    def setConductance(self, *args):
        return _openstudiomodelresources.ConstructionBase_setConductance(self, *args)

    def isOpaque(self):
        return _openstudiomodelresources.ConstructionBase_isOpaque(self)

    def isFenestration(self):
        return _openstudiomodelresources.ConstructionBase_isFenestration(self)

    def isSolarDiffusing(self):
        return _openstudiomodelresources.ConstructionBase_isSolarDiffusing(self)

    def isModelPartition(self):
        return _openstudiomodelresources.ConstructionBase_isModelPartition(self)

    def isGreenRoof(self):
        return _openstudiomodelresources.ConstructionBase_isGreenRoof(self)

    def uFactor(self, *args):
        return _openstudiomodelresources.ConstructionBase_uFactor(self, *args)

    def thermalConductance(self, *args):
        return _openstudiomodelresources.ConstructionBase_thermalConductance(self, *args)

    def heatCapacity(self):
        return _openstudiomodelresources.ConstructionBase_heatCapacity(self)

    def interiorVisibleAbsorptance(self):
        return _openstudiomodelresources.ConstructionBase_interiorVisibleAbsorptance(self)

    def exteriorVisibleAbsorptance(self):
        return _openstudiomodelresources.ConstructionBase_exteriorVisibleAbsorptance(self)

    def visibleTransmittance(self):
        return _openstudiomodelresources.ConstructionBase_visibleTransmittance(self)

    def renderingColor(self):
        return _openstudiomodelresources.ConstructionBase_renderingColor(self)

    def setRenderingColor(self, renderingColor):
        return _openstudiomodelresources.ConstructionBase_setRenderingColor(self, renderingColor)

    def resetRenderingColor(self):
        return _openstudiomodelresources.ConstructionBase_resetRenderingColor(self)

# Register ConstructionBase in _openstudiomodelresources:
_openstudiomodelresources.ConstructionBase_swigregister(ConstructionBase)

def toConstructionBase(idfObject):
    return _openstudiomodelresources.toConstructionBase(idfObject)

def getConstructionBase(t_model, t_handle):
    return _openstudiomodelresources.getConstructionBase(t_model, t_handle)

def getConstructionBases(t_model):
    return _openstudiomodelresources.getConstructionBases(t_model)

def getConstructionBaseByName(t_model, t_name):
    return _openstudiomodelresources.getConstructionBaseByName(t_model, t_name)

def getConstructionBasesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getConstructionBasesByName(t_model, t_name, t_exactMatch)

def _to_ConstructionBase(self) -> OptionalConstructionBase:
    """Try to cast the ModelObject to a ConstructionBase.

    :return: An Optional ConstructionBase.
    """
    return toConstructionBase(self)
openstudioutilitiesidf.IdfObject.to_ConstructionBase = _to_ConstructionBase

def _getConstructionBase(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalConstructionBase:
    """Try to get an object of type ConstructionBase referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ConstructionBase.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getConstructionBase(self, t_handle)
Model.getConstructionBase = _getConstructionBase

def _getConstructionBases(self) -> ConstructionBaseVector:
    """Get a vector of all objects of type ConstructionBase in the model.

    :return: A vector of ConstructionBase.
    """
    return getConstructionBases(self)
Model.getConstructionBases = _getConstructionBases

def _getConstructionBaseByName(self, t_name: str) -> OptionalConstructionBase:
    """Try to get an object of type ConstructionBase that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ConstructionBase.
    """
    return getConstructionBaseByName(self, t_name)
Model.getConstructionBaseByName = _getConstructionBaseByName

def _getConstructionBasesByName(self, t_name: str, t_exactMatch: bool) -> ConstructionBaseVector:
    """Returns all objects of type ConstructionBase named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getConstructionBasesByName(self, t_name, t_exactMatch)
Model.getConstructionBasesByName = _getConstructionBasesByName

class LayeredConstruction(ConstructionBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_LayeredConstruction

    def __init__(self, *args):
        _openstudiomodelresources.LayeredConstruction_swiginit(self, _openstudiomodelresources.new_LayeredConstruction(*args))

    @staticmethod
    def layersAreValid(*args):
        return _openstudiomodelresources.LayeredConstruction_layersAreValid(*args)

    def layers(self):
        return _openstudiomodelresources.LayeredConstruction_layers(self)

    def getLayer(self, layerIndex):
        return _openstudiomodelresources.LayeredConstruction_getLayer(self, layerIndex)

    def eraseLayer(self, layerIndex):
        return _openstudiomodelresources.LayeredConstruction_eraseLayer(self, layerIndex)

    def insertLayer(self, layerIndex, material):
        return _openstudiomodelresources.LayeredConstruction_insertLayer(self, layerIndex, material)

    def setLayers(self, materials):
        return _openstudiomodelresources.LayeredConstruction_setLayers(self, materials)

    def setLayer(self, *args):
        return _openstudiomodelresources.LayeredConstruction_setLayer(self, *args)

    def isSymmetric(self):
        return _openstudiomodelresources.LayeredConstruction_isSymmetric(self)

    def equalLayers(self, other):
        return _openstudiomodelresources.LayeredConstruction_equalLayers(self, other)

    def reverseEqualLayers(self, other):
        return _openstudiomodelresources.LayeredConstruction_reverseEqualLayers(self, other)

    def nullLayers(self):
        return _openstudiomodelresources.LayeredConstruction_nullLayers(self)

    def numLayers(self):
        return _openstudiomodelresources.LayeredConstruction_numLayers(self)

    def getLayerIndices(self, material):
        return _openstudiomodelresources.LayeredConstruction_getLayerIndices(self, material)

    def insulation(self):
        return _openstudiomodelresources.LayeredConstruction_insulation(self)

    def setInsulation(self, insulationLayer):
        return _openstudiomodelresources.LayeredConstruction_setInsulation(self, insulationLayer)

    def resetInsulation(self):
        return _openstudiomodelresources.LayeredConstruction_resetInsulation(self)

    def ensureUniqueLayers(self):
        return _openstudiomodelresources.LayeredConstruction_ensureUniqueLayers(self)

# Register LayeredConstruction in _openstudiomodelresources:
_openstudiomodelresources.LayeredConstruction_swigregister(LayeredConstruction)

def toLayeredConstruction(idfObject):
    return _openstudiomodelresources.toLayeredConstruction(idfObject)

def getLayeredConstruction(t_model, t_handle):
    return _openstudiomodelresources.getLayeredConstruction(t_model, t_handle)

def getLayeredConstructions(t_model):
    return _openstudiomodelresources.getLayeredConstructions(t_model)

def getLayeredConstructionByName(t_model, t_name):
    return _openstudiomodelresources.getLayeredConstructionByName(t_model, t_name)

def getLayeredConstructionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getLayeredConstructionsByName(t_model, t_name, t_exactMatch)

def _to_LayeredConstruction(self) -> OptionalLayeredConstruction:
    """Try to cast the ModelObject to a LayeredConstruction.

    :return: An Optional LayeredConstruction.
    """
    return toLayeredConstruction(self)
openstudioutilitiesidf.IdfObject.to_LayeredConstruction = _to_LayeredConstruction

def _getLayeredConstruction(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalLayeredConstruction:
    """Try to get an object of type LayeredConstruction referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional LayeredConstruction.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getLayeredConstruction(self, t_handle)
Model.getLayeredConstruction = _getLayeredConstruction

def _getLayeredConstructions(self) -> LayeredConstructionVector:
    """Get a vector of all objects of type LayeredConstruction in the model.

    :return: A vector of LayeredConstruction.
    """
    return getLayeredConstructions(self)
Model.getLayeredConstructions = _getLayeredConstructions

def _getLayeredConstructionByName(self, t_name: str) -> OptionalLayeredConstruction:
    """Try to get an object of type LayeredConstruction that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional LayeredConstruction.
    """
    return getLayeredConstructionByName(self, t_name)
Model.getLayeredConstructionByName = _getLayeredConstructionByName

def _getLayeredConstructionsByName(self, t_name: str, t_exactMatch: bool) -> LayeredConstructionVector:
    """Returns all objects of type LayeredConstruction named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getLayeredConstructionsByName(self, t_name, t_exactMatch)
Model.getLayeredConstructionsByName = _getLayeredConstructionsByName

class Construction(LayeredConstruction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_Construction

    def __init__(self, *args):
        _openstudiomodelresources.Construction_swiginit(self, _openstudiomodelresources.new_Construction(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.Construction_iddObjectType()

    def reverseConstruction(self):
        return _openstudiomodelresources.Construction_reverseConstruction(self)

# Register Construction in _openstudiomodelresources:
_openstudiomodelresources.Construction_swigregister(Construction)

def toConstruction(idfObject):
    return _openstudiomodelresources.toConstruction(idfObject)

def getConstruction(t_model, t_handle):
    return _openstudiomodelresources.getConstruction(t_model, t_handle)

def getConstructions(t_model):
    return _openstudiomodelresources.getConstructions(t_model)

def getConstructionByName(t_model, t_name):
    return _openstudiomodelresources.getConstructionByName(t_model, t_name)

def getConstructionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getConstructionsByName(t_model, t_name, t_exactMatch)

def _to_Construction(self) -> OptionalConstruction:
    """Try to cast the ModelObject to a Construction.

    :return: An Optional Construction.
    """
    return toConstruction(self)
openstudioutilitiesidf.IdfObject.to_Construction = _to_Construction

def _getConstruction(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalConstruction:
    """Try to get an object of type Construction referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Construction.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getConstruction(self, t_handle)
Model.getConstruction = _getConstruction

def _getConstructions(self) -> ConstructionVector:
    """Get a vector of all objects of type Construction in the model.

    :return: A vector of Construction.
    """
    return getConstructions(self)
Model.getConstructions = _getConstructions

def _getConstructionByName(self, t_name: str) -> OptionalConstruction:
    """Try to get an object of type Construction that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Construction.
    """
    return getConstructionByName(self, t_name)
Model.getConstructionByName = _getConstructionByName

def _getConstructionsByName(self, t_name: str, t_exactMatch: bool) -> ConstructionVector:
    """Returns all objects of type Construction named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getConstructionsByName(self, t_name, t_exactMatch)
Model.getConstructionsByName = _getConstructionsByName

class ConstructionAirBoundary(ConstructionBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionAirBoundary

    def __init__(self, *args):
        _openstudiomodelresources.ConstructionAirBoundary_swiginit(self, _openstudiomodelresources.new_ConstructionAirBoundary(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ConstructionAirBoundary_iddObjectType()

    @staticmethod
    def solarAndDaylightingMethodValues():
        return _openstudiomodelresources.ConstructionAirBoundary_solarAndDaylightingMethodValues()

    @staticmethod
    def radiantExchangeMethodValues():
        return _openstudiomodelresources.ConstructionAirBoundary_radiantExchangeMethodValues()

    @staticmethod
    def airExchangeMethodValues():
        return _openstudiomodelresources.ConstructionAirBoundary_airExchangeMethodValues()

    def solarAndDaylightingMethod(self):
        return _openstudiomodelresources.ConstructionAirBoundary_solarAndDaylightingMethod(self)

    def isSolarAndDaylightingMethodDefaulted(self):
        return _openstudiomodelresources.ConstructionAirBoundary_isSolarAndDaylightingMethodDefaulted(self)

    def radiantExchangeMethod(self):
        return _openstudiomodelresources.ConstructionAirBoundary_radiantExchangeMethod(self)

    def isRadiantExchangeMethodDefaulted(self):
        return _openstudiomodelresources.ConstructionAirBoundary_isRadiantExchangeMethodDefaulted(self)

    def airExchangeMethod(self):
        return _openstudiomodelresources.ConstructionAirBoundary_airExchangeMethod(self)

    def isAirExchangeMethodDefaulted(self):
        return _openstudiomodelresources.ConstructionAirBoundary_isAirExchangeMethodDefaulted(self)

    def simpleMixingAirChangesPerHour(self):
        return _openstudiomodelresources.ConstructionAirBoundary_simpleMixingAirChangesPerHour(self)

    def isSimpleMixingAirChangesPerHourDefaulted(self):
        return _openstudiomodelresources.ConstructionAirBoundary_isSimpleMixingAirChangesPerHourDefaulted(self)

    def simpleMixingSchedule(self):
        return _openstudiomodelresources.ConstructionAirBoundary_simpleMixingSchedule(self)

    def setSolarAndDaylightingMethod(self, solarAndDaylightingMethod):
        return _openstudiomodelresources.ConstructionAirBoundary_setSolarAndDaylightingMethod(self, solarAndDaylightingMethod)

    def resetSolarAndDaylightingMethod(self):
        return _openstudiomodelresources.ConstructionAirBoundary_resetSolarAndDaylightingMethod(self)

    def setRadiantExchangeMethod(self, radiantExchangeMethod):
        return _openstudiomodelresources.ConstructionAirBoundary_setRadiantExchangeMethod(self, radiantExchangeMethod)

    def resetRadiantExchangeMethod(self):
        return _openstudiomodelresources.ConstructionAirBoundary_resetRadiantExchangeMethod(self)

    def setAirExchangeMethod(self, airExchangeMethod):
        return _openstudiomodelresources.ConstructionAirBoundary_setAirExchangeMethod(self, airExchangeMethod)

    def resetAirExchangeMethod(self):
        return _openstudiomodelresources.ConstructionAirBoundary_resetAirExchangeMethod(self)

    def setSimpleMixingAirChangesPerHour(self, simpleMixingAirChangesPerHour):
        return _openstudiomodelresources.ConstructionAirBoundary_setSimpleMixingAirChangesPerHour(self, simpleMixingAirChangesPerHour)

    def resetSimpleMixingAirChangesPerHour(self):
        return _openstudiomodelresources.ConstructionAirBoundary_resetSimpleMixingAirChangesPerHour(self)

    def setSimpleMixingSchedule(self, schedule):
        return _openstudiomodelresources.ConstructionAirBoundary_setSimpleMixingSchedule(self, schedule)

    def resetSimpleMixingSchedule(self):
        return _openstudiomodelresources.ConstructionAirBoundary_resetSimpleMixingSchedule(self)

# Register ConstructionAirBoundary in _openstudiomodelresources:
_openstudiomodelresources.ConstructionAirBoundary_swigregister(ConstructionAirBoundary)

def toConstructionAirBoundary(idfObject):
    return _openstudiomodelresources.toConstructionAirBoundary(idfObject)

def getConstructionAirBoundary(t_model, t_handle):
    return _openstudiomodelresources.getConstructionAirBoundary(t_model, t_handle)

def getConstructionAirBoundarys(t_model):
    return _openstudiomodelresources.getConstructionAirBoundarys(t_model)

def getConstructionAirBoundaryByName(t_model, t_name):
    return _openstudiomodelresources.getConstructionAirBoundaryByName(t_model, t_name)

def getConstructionAirBoundarysByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getConstructionAirBoundarysByName(t_model, t_name, t_exactMatch)

def _to_ConstructionAirBoundary(self) -> OptionalConstructionAirBoundary:
    """Try to cast the ModelObject to a ConstructionAirBoundary.

    :return: An Optional ConstructionAirBoundary.
    """
    return toConstructionAirBoundary(self)
openstudioutilitiesidf.IdfObject.to_ConstructionAirBoundary = _to_ConstructionAirBoundary

def _getConstructionAirBoundary(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalConstructionAirBoundary:
    """Try to get an object of type ConstructionAirBoundary referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ConstructionAirBoundary.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getConstructionAirBoundary(self, t_handle)
Model.getConstructionAirBoundary = _getConstructionAirBoundary

def _getConstructionAirBoundarys(self) -> ConstructionAirBoundaryVector:
    """Get a vector of all objects of type ConstructionAirBoundary in the model.

    :return: A vector of ConstructionAirBoundary.
    """
    return getConstructionAirBoundarys(self)
Model.getConstructionAirBoundarys = _getConstructionAirBoundarys

def _getConstructionAirBoundaryByName(self, t_name: str) -> OptionalConstructionAirBoundary:
    """Try to get an object of type ConstructionAirBoundary that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ConstructionAirBoundary.
    """
    return getConstructionAirBoundaryByName(self, t_name)
Model.getConstructionAirBoundaryByName = _getConstructionAirBoundaryByName

def _getConstructionAirBoundarysByName(self, t_name: str, t_exactMatch: bool) -> ConstructionAirBoundaryVector:
    """Returns all objects of type ConstructionAirBoundary named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getConstructionAirBoundarysByName(self, t_name, t_exactMatch)
Model.getConstructionAirBoundarysByName = _getConstructionAirBoundarysByName

class ConstructionWithInternalSource(LayeredConstruction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ConstructionWithInternalSource

    def __init__(self, *args):
        _openstudiomodelresources.ConstructionWithInternalSource_swiginit(self, _openstudiomodelresources.new_ConstructionWithInternalSource(*args))

    def sourcePresentAfterLayerNumber(self):
        return _openstudiomodelresources.ConstructionWithInternalSource_sourcePresentAfterLayerNumber(self)

    def setSourcePresentAfterLayerNumber(self, sourcePresentAfterLayerNumber):
        return _openstudiomodelresources.ConstructionWithInternalSource_setSourcePresentAfterLayerNumber(self, sourcePresentAfterLayerNumber)

    def temperatureCalculationRequestedAfterLayerNumber(self):
        return _openstudiomodelresources.ConstructionWithInternalSource_temperatureCalculationRequestedAfterLayerNumber(self)

    def setTemperatureCalculationRequestedAfterLayerNumber(self, temperatureCalculationRequestedAfterLayerNumber):
        return _openstudiomodelresources.ConstructionWithInternalSource_setTemperatureCalculationRequestedAfterLayerNumber(self, temperatureCalculationRequestedAfterLayerNumber)

    def dimensionsForTheCTFCalculation(self):
        return _openstudiomodelresources.ConstructionWithInternalSource_dimensionsForTheCTFCalculation(self)

    def setDimensionsForTheCTFCalculation(self, dimensionsForTheCTFCalculation):
        return _openstudiomodelresources.ConstructionWithInternalSource_setDimensionsForTheCTFCalculation(self, dimensionsForTheCTFCalculation)

    def tubeSpacing(self):
        return _openstudiomodelresources.ConstructionWithInternalSource_tubeSpacing(self)

    def setTubeSpacing(self, tubeSpacing):
        return _openstudiomodelresources.ConstructionWithInternalSource_setTubeSpacing(self, tubeSpacing)

    def twoDimensionalTemperatureCalculationPosition(self):
        return _openstudiomodelresources.ConstructionWithInternalSource_twoDimensionalTemperatureCalculationPosition(self)

    def setTwoDimensionalTemperatureCalculationPosition(self, twoDimensionalTemperatureCalculationPosition):
        return _openstudiomodelresources.ConstructionWithInternalSource_setTwoDimensionalTemperatureCalculationPosition(self, twoDimensionalTemperatureCalculationPosition)

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ConstructionWithInternalSource_iddObjectType()

    def reverseConstructionWithInternalSource(self):
        return _openstudiomodelresources.ConstructionWithInternalSource_reverseConstructionWithInternalSource(self)

# Register ConstructionWithInternalSource in _openstudiomodelresources:
_openstudiomodelresources.ConstructionWithInternalSource_swigregister(ConstructionWithInternalSource)

def toConstructionWithInternalSource(idfObject):
    return _openstudiomodelresources.toConstructionWithInternalSource(idfObject)

def getConstructionWithInternalSource(t_model, t_handle):
    return _openstudiomodelresources.getConstructionWithInternalSource(t_model, t_handle)

def getConstructionWithInternalSources(t_model):
    return _openstudiomodelresources.getConstructionWithInternalSources(t_model)

def getConstructionWithInternalSourceByName(t_model, t_name):
    return _openstudiomodelresources.getConstructionWithInternalSourceByName(t_model, t_name)

def getConstructionWithInternalSourcesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getConstructionWithInternalSourcesByName(t_model, t_name, t_exactMatch)

def _to_ConstructionWithInternalSource(self) -> OptionalConstructionWithInternalSource:
    """Try to cast the ModelObject to a ConstructionWithInternalSource.

    :return: An Optional ConstructionWithInternalSource.
    """
    return toConstructionWithInternalSource(self)
openstudioutilitiesidf.IdfObject.to_ConstructionWithInternalSource = _to_ConstructionWithInternalSource

def _getConstructionWithInternalSource(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalConstructionWithInternalSource:
    """Try to get an object of type ConstructionWithInternalSource referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ConstructionWithInternalSource.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getConstructionWithInternalSource(self, t_handle)
Model.getConstructionWithInternalSource = _getConstructionWithInternalSource

def _getConstructionWithInternalSources(self) -> ConstructionWithInternalSourceVector:
    """Get a vector of all objects of type ConstructionWithInternalSource in the model.

    :return: A vector of ConstructionWithInternalSource.
    """
    return getConstructionWithInternalSources(self)
Model.getConstructionWithInternalSources = _getConstructionWithInternalSources

def _getConstructionWithInternalSourceByName(self, t_name: str) -> OptionalConstructionWithInternalSource:
    """Try to get an object of type ConstructionWithInternalSource that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ConstructionWithInternalSource.
    """
    return getConstructionWithInternalSourceByName(self, t_name)
Model.getConstructionWithInternalSourceByName = _getConstructionWithInternalSourceByName

def _getConstructionWithInternalSourcesByName(self, t_name: str, t_exactMatch: bool) -> ConstructionWithInternalSourceVector:
    """Returns all objects of type ConstructionWithInternalSource named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getConstructionWithInternalSourcesByName(self, t_name, t_exactMatch)
Model.getConstructionWithInternalSourcesByName = _getConstructionWithInternalSourcesByName

class CFactorUndergroundWallConstruction(ConstructionBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CFactorUndergroundWallConstruction

    def __init__(self, *args):
        _openstudiomodelresources.CFactorUndergroundWallConstruction_swiginit(self, _openstudiomodelresources.new_CFactorUndergroundWallConstruction(*args))

    def cFactor(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_cFactor(self)

    def setCFactor(self, cFactor):
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_setCFactor(self, cFactor)

    def height(self):
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_height(self)

    def setHeight(self, height):
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_setHeight(self, height)

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CFactorUndergroundWallConstruction_iddObjectType()

# Register CFactorUndergroundWallConstruction in _openstudiomodelresources:
_openstudiomodelresources.CFactorUndergroundWallConstruction_swigregister(CFactorUndergroundWallConstruction)

def toCFactorUndergroundWallConstruction(idfObject):
    return _openstudiomodelresources.toCFactorUndergroundWallConstruction(idfObject)

def getCFactorUndergroundWallConstruction(t_model, t_handle):
    return _openstudiomodelresources.getCFactorUndergroundWallConstruction(t_model, t_handle)

def getCFactorUndergroundWallConstructions(t_model):
    return _openstudiomodelresources.getCFactorUndergroundWallConstructions(t_model)

def getCFactorUndergroundWallConstructionByName(t_model, t_name):
    return _openstudiomodelresources.getCFactorUndergroundWallConstructionByName(t_model, t_name)

def getCFactorUndergroundWallConstructionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCFactorUndergroundWallConstructionsByName(t_model, t_name, t_exactMatch)

def _to_CFactorUndergroundWallConstruction(self) -> OptionalCFactorUndergroundWallConstruction:
    """Try to cast the ModelObject to a CFactorUndergroundWallConstruction.

    :return: An Optional CFactorUndergroundWallConstruction.
    """
    return toCFactorUndergroundWallConstruction(self)
openstudioutilitiesidf.IdfObject.to_CFactorUndergroundWallConstruction = _to_CFactorUndergroundWallConstruction

def _getCFactorUndergroundWallConstruction(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCFactorUndergroundWallConstruction:
    """Try to get an object of type CFactorUndergroundWallConstruction referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CFactorUndergroundWallConstruction.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCFactorUndergroundWallConstruction(self, t_handle)
Model.getCFactorUndergroundWallConstruction = _getCFactorUndergroundWallConstruction

def _getCFactorUndergroundWallConstructions(self) -> CFactorUndergroundWallConstructionVector:
    """Get a vector of all objects of type CFactorUndergroundWallConstruction in the model.

    :return: A vector of CFactorUndergroundWallConstruction.
    """
    return getCFactorUndergroundWallConstructions(self)
Model.getCFactorUndergroundWallConstructions = _getCFactorUndergroundWallConstructions

def _getCFactorUndergroundWallConstructionByName(self, t_name: str) -> OptionalCFactorUndergroundWallConstruction:
    """Try to get an object of type CFactorUndergroundWallConstruction that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CFactorUndergroundWallConstruction.
    """
    return getCFactorUndergroundWallConstructionByName(self, t_name)
Model.getCFactorUndergroundWallConstructionByName = _getCFactorUndergroundWallConstructionByName

def _getCFactorUndergroundWallConstructionsByName(self, t_name: str, t_exactMatch: bool) -> CFactorUndergroundWallConstructionVector:
    """Returns all objects of type CFactorUndergroundWallConstruction named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCFactorUndergroundWallConstructionsByName(self, t_name, t_exactMatch)
Model.getCFactorUndergroundWallConstructionsByName = _getCFactorUndergroundWallConstructionsByName

class FFactorGroundFloorConstruction(ConstructionBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_FFactorGroundFloorConstruction

    def __init__(self, *args):
        _openstudiomodelresources.FFactorGroundFloorConstruction_swiginit(self, _openstudiomodelresources.new_FFactorGroundFloorConstruction(*args))

    def fFactor(self):
        return _openstudiomodelresources.FFactorGroundFloorConstruction_fFactor(self)

    def setFFactor(self, fFactor):
        return _openstudiomodelresources.FFactorGroundFloorConstruction_setFFactor(self, fFactor)

    def area(self):
        return _openstudiomodelresources.FFactorGroundFloorConstruction_area(self)

    def setArea(self, area):
        return _openstudiomodelresources.FFactorGroundFloorConstruction_setArea(self, area)

    def perimeterExposed(self):
        return _openstudiomodelresources.FFactorGroundFloorConstruction_perimeterExposed(self)

    def setPerimeterExposed(self, perimeterExposed):
        return _openstudiomodelresources.FFactorGroundFloorConstruction_setPerimeterExposed(self, perimeterExposed)

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.FFactorGroundFloorConstruction_iddObjectType()

# Register FFactorGroundFloorConstruction in _openstudiomodelresources:
_openstudiomodelresources.FFactorGroundFloorConstruction_swigregister(FFactorGroundFloorConstruction)

def toFFactorGroundFloorConstruction(idfObject):
    return _openstudiomodelresources.toFFactorGroundFloorConstruction(idfObject)

def getFFactorGroundFloorConstruction(t_model, t_handle):
    return _openstudiomodelresources.getFFactorGroundFloorConstruction(t_model, t_handle)

def getFFactorGroundFloorConstructions(t_model):
    return _openstudiomodelresources.getFFactorGroundFloorConstructions(t_model)

def getFFactorGroundFloorConstructionByName(t_model, t_name):
    return _openstudiomodelresources.getFFactorGroundFloorConstructionByName(t_model, t_name)

def getFFactorGroundFloorConstructionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getFFactorGroundFloorConstructionsByName(t_model, t_name, t_exactMatch)

def _to_FFactorGroundFloorConstruction(self) -> OptionalFFactorGroundFloorConstruction:
    """Try to cast the ModelObject to a FFactorGroundFloorConstruction.

    :return: An Optional FFactorGroundFloorConstruction.
    """
    return toFFactorGroundFloorConstruction(self)
openstudioutilitiesidf.IdfObject.to_FFactorGroundFloorConstruction = _to_FFactorGroundFloorConstruction

def _getFFactorGroundFloorConstruction(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalFFactorGroundFloorConstruction:
    """Try to get an object of type FFactorGroundFloorConstruction referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional FFactorGroundFloorConstruction.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getFFactorGroundFloorConstruction(self, t_handle)
Model.getFFactorGroundFloorConstruction = _getFFactorGroundFloorConstruction

def _getFFactorGroundFloorConstructions(self) -> FFactorGroundFloorConstructionVector:
    """Get a vector of all objects of type FFactorGroundFloorConstruction in the model.

    :return: A vector of FFactorGroundFloorConstruction.
    """
    return getFFactorGroundFloorConstructions(self)
Model.getFFactorGroundFloorConstructions = _getFFactorGroundFloorConstructions

def _getFFactorGroundFloorConstructionByName(self, t_name: str) -> OptionalFFactorGroundFloorConstruction:
    """Try to get an object of type FFactorGroundFloorConstruction that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional FFactorGroundFloorConstruction.
    """
    return getFFactorGroundFloorConstructionByName(self, t_name)
Model.getFFactorGroundFloorConstructionByName = _getFFactorGroundFloorConstructionByName

def _getFFactorGroundFloorConstructionsByName(self, t_name: str, t_exactMatch: bool) -> FFactorGroundFloorConstructionVector:
    """Returns all objects of type FFactorGroundFloorConstruction named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getFFactorGroundFloorConstructionsByName(self, t_name, t_exactMatch)
Model.getFFactorGroundFloorConstructionsByName = _getFFactorGroundFloorConstructionsByName

class StandardsInformationConstruction(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_StandardsInformationConstruction

    def __init__(self, *args):
        _openstudiomodelresources.StandardsInformationConstruction_swiginit(self, _openstudiomodelresources.new_StandardsInformationConstruction(*args))

    @staticmethod
    def standardPerturbableLayerTypeValues():
        return _openstudiomodelresources.StandardsInformationConstruction_standardPerturbableLayerTypeValues()

    @staticmethod
    def fenestrationTypeValues():
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationTypeValues()

    @staticmethod
    def fenestrationAssemblyContextValues():
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationAssemblyContextValues()

    @staticmethod
    def fenestrationNumberOfPanesValues():
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationNumberOfPanesValues()

    @staticmethod
    def fenestrationFrameTypeValues():
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationFrameTypeValues()

    @staticmethod
    def fenestrationDividerTypeValues():
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationDividerTypeValues()

    @staticmethod
    def fenestrationTintValues():
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationTintValues()

    @staticmethod
    def fenestrationGasFillValues():
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationGasFillValues()

    @staticmethod
    def intendedSurfaceTypeValues():
        return _openstudiomodelresources.StandardsInformationConstruction_intendedSurfaceTypeValues()

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.StandardsInformationConstruction_iddObjectType()

    def construction(self):
        return _openstudiomodelresources.StandardsInformationConstruction_construction(self)

    def intendedSurfaceType(self):
        return _openstudiomodelresources.StandardsInformationConstruction_intendedSurfaceType(self)

    def standardsConstructionType(self):
        return _openstudiomodelresources.StandardsInformationConstruction_standardsConstructionType(self)

    def suggestedStandardsConstructionTypes(self):
        return _openstudiomodelresources.StandardsInformationConstruction_suggestedStandardsConstructionTypes(self)

    def perturbableLayer(self):
        return _openstudiomodelresources.StandardsInformationConstruction_perturbableLayer(self)

    def perturbableLayerType(self):
        return _openstudiomodelresources.StandardsInformationConstruction_perturbableLayerType(self)

    def isPerturbableLayerTypeDefaulted(self):
        return _openstudiomodelresources.StandardsInformationConstruction_isPerturbableLayerTypeDefaulted(self)

    def otherPerturbableLayerType(self):
        return _openstudiomodelresources.StandardsInformationConstruction_otherPerturbableLayerType(self)

    def suggestedConstructionStandards(self):
        return _openstudiomodelresources.StandardsInformationConstruction_suggestedConstructionStandards(self)

    def constructionStandard(self):
        return _openstudiomodelresources.StandardsInformationConstruction_constructionStandard(self)

    def suggestedConstructionStandardSources(self):
        return _openstudiomodelresources.StandardsInformationConstruction_suggestedConstructionStandardSources(self)

    def constructionStandardSource(self):
        return _openstudiomodelresources.StandardsInformationConstruction_constructionStandardSource(self)

    def fenestrationType(self):
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationType(self)

    def fenestrationAssemblyContext(self):
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationAssemblyContext(self)

    def fenestrationNumberOfPanes(self):
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationNumberOfPanes(self)

    def fenestrationFrameType(self):
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationFrameType(self)

    def fenestrationDividerType(self):
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationDividerType(self)

    def fenestrationTint(self):
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationTint(self)

    def fenestrationGasFill(self):
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationGasFill(self)

    def fenestrationLowEmissivityCoating(self):
        return _openstudiomodelresources.StandardsInformationConstruction_fenestrationLowEmissivityCoating(self)

    def setIntendedSurfaceType(self, type):
        return _openstudiomodelresources.StandardsInformationConstruction_setIntendedSurfaceType(self, type)

    def resetIntendedSurfaceType(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetIntendedSurfaceType(self)

    def setStandardsConstructionType(self, type):
        return _openstudiomodelresources.StandardsInformationConstruction_setStandardsConstructionType(self, type)

    def resetStandardsConstructionType(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetStandardsConstructionType(self)

    def setPerturbableLayer(self, *args):
        return _openstudiomodelresources.StandardsInformationConstruction_setPerturbableLayer(self, *args)

    def resetPerturbableLayer(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetPerturbableLayer(self)

    def setPerturbableLayerType(self, type):
        return _openstudiomodelresources.StandardsInformationConstruction_setPerturbableLayerType(self, type)

    def resetPerturbableLayerType(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetPerturbableLayerType(self)

    def setOtherPerturbableLayerType(self, otherPerturbableLayerType):
        return _openstudiomodelresources.StandardsInformationConstruction_setOtherPerturbableLayerType(self, otherPerturbableLayerType)

    def resetOtherPerturbableLayerType(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetOtherPerturbableLayerType(self)

    def setConstructionStandard(self, constructionStandard):
        return _openstudiomodelresources.StandardsInformationConstruction_setConstructionStandard(self, constructionStandard)

    def resetConstructionStandard(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetConstructionStandard(self)

    def setConstructionStandardSource(self, constructionStandardSource):
        return _openstudiomodelresources.StandardsInformationConstruction_setConstructionStandardSource(self, constructionStandardSource)

    def resetConstructionStandardSource(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetConstructionStandardSource(self)

    def setFenestrationType(self, fenestrationType):
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationType(self, fenestrationType)

    def resetFenestrationType(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationType(self)

    def setFenestrationAssemblyContext(self, fenestrationAssemblyContext):
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationAssemblyContext(self, fenestrationAssemblyContext)

    def resetFenestrationAssemblyContext(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationAssemblyContext(self)

    def setFenestrationNumberOfPanes(self, fenestrationNumberofPanes):
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationNumberOfPanes(self, fenestrationNumberofPanes)

    def resetFenestrationNumberOfPanes(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationNumberOfPanes(self)

    def setFenestrationFrameType(self, fenestrationFrameType):
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationFrameType(self, fenestrationFrameType)

    def resetFenestrationFrameType(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationFrameType(self)

    def setFenestrationDividerType(self, fenestrationDividerType):
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationDividerType(self, fenestrationDividerType)

    def resetFenestrationDividerType(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationDividerType(self)

    def setFenestrationTint(self, fenestrationTint):
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationTint(self, fenestrationTint)

    def resetFenestrationTint(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationTint(self)

    def setFenestrationGasFill(self, fenestrationGasFill):
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationGasFill(self, fenestrationGasFill)

    def resetFenestrationGasFill(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationGasFill(self)

    def setFenestrationLowEmissivityCoating(self, fenestrationLowEmissivityCoating):
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationLowEmissivityCoating(self, fenestrationLowEmissivityCoating)

    def setFenestrationLowEmissivityCoatingNoFail(self, fenestrationLowEmissivityCoating):
        return _openstudiomodelresources.StandardsInformationConstruction_setFenestrationLowEmissivityCoatingNoFail(self, fenestrationLowEmissivityCoating)

    def resetFenestrationLowEmissivityCoating(self):
        return _openstudiomodelresources.StandardsInformationConstruction_resetFenestrationLowEmissivityCoating(self)

# Register StandardsInformationConstruction in _openstudiomodelresources:
_openstudiomodelresources.StandardsInformationConstruction_swigregister(StandardsInformationConstruction)

def toStandardsInformationConstruction(idfObject):
    return _openstudiomodelresources.toStandardsInformationConstruction(idfObject)

def getStandardsInformationConstruction(t_model, t_handle):
    return _openstudiomodelresources.getStandardsInformationConstruction(t_model, t_handle)

def getStandardsInformationConstructions(t_model):
    return _openstudiomodelresources.getStandardsInformationConstructions(t_model)

def getStandardsInformationConstructionByName(t_model, t_name):
    return _openstudiomodelresources.getStandardsInformationConstructionByName(t_model, t_name)

def getStandardsInformationConstructionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getStandardsInformationConstructionsByName(t_model, t_name, t_exactMatch)

def _to_StandardsInformationConstruction(self) -> OptionalStandardsInformationConstruction:
    """Try to cast the ModelObject to a StandardsInformationConstruction.

    :return: An Optional StandardsInformationConstruction.
    """
    return toStandardsInformationConstruction(self)
openstudioutilitiesidf.IdfObject.to_StandardsInformationConstruction = _to_StandardsInformationConstruction

def _getStandardsInformationConstruction(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalStandardsInformationConstruction:
    """Try to get an object of type StandardsInformationConstruction referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional StandardsInformationConstruction.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getStandardsInformationConstruction(self, t_handle)
Model.getStandardsInformationConstruction = _getStandardsInformationConstruction

def _getStandardsInformationConstructions(self) -> StandardsInformationConstructionVector:
    """Get a vector of all objects of type StandardsInformationConstruction in the model.

    :return: A vector of StandardsInformationConstruction.
    """
    return getStandardsInformationConstructions(self)
Model.getStandardsInformationConstructions = _getStandardsInformationConstructions

def _getStandardsInformationConstructionByName(self, t_name: str) -> OptionalStandardsInformationConstruction:
    """Try to get an object of type StandardsInformationConstruction that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional StandardsInformationConstruction.
    """
    return getStandardsInformationConstructionByName(self, t_name)
Model.getStandardsInformationConstructionByName = _getStandardsInformationConstructionByName

def _getStandardsInformationConstructionsByName(self, t_name: str, t_exactMatch: bool) -> StandardsInformationConstructionVector:
    """Returns all objects of type StandardsInformationConstruction named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getStandardsInformationConstructionsByName(self, t_name, t_exactMatch)
Model.getStandardsInformationConstructionsByName = _getStandardsInformationConstructionsByName

class WindowDataFile(ConstructionBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_WindowDataFile

    def __init__(self, *args):
        _openstudiomodelresources.WindowDataFile_swiginit(self, _openstudiomodelresources.new_WindowDataFile(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.WindowDataFile_iddObjectType()

# Register WindowDataFile in _openstudiomodelresources:
_openstudiomodelresources.WindowDataFile_swigregister(WindowDataFile)

def toWindowDataFile(idfObject):
    return _openstudiomodelresources.toWindowDataFile(idfObject)

def getWindowDataFile(t_model, t_handle):
    return _openstudiomodelresources.getWindowDataFile(t_model, t_handle)

def getWindowDataFiles(t_model):
    return _openstudiomodelresources.getWindowDataFiles(t_model)

def getWindowDataFileByName(t_model, t_name):
    return _openstudiomodelresources.getWindowDataFileByName(t_model, t_name)

def getWindowDataFilesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getWindowDataFilesByName(t_model, t_name, t_exactMatch)

def _to_WindowDataFile(self) -> OptionalWindowDataFile:
    """Try to cast the ModelObject to a WindowDataFile.

    :return: An Optional WindowDataFile.
    """
    return toWindowDataFile(self)
openstudioutilitiesidf.IdfObject.to_WindowDataFile = _to_WindowDataFile

def _getWindowDataFile(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalWindowDataFile:
    """Try to get an object of type WindowDataFile referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional WindowDataFile.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getWindowDataFile(self, t_handle)
Model.getWindowDataFile = _getWindowDataFile

def _getWindowDataFiles(self) -> WindowDataFileVector:
    """Get a vector of all objects of type WindowDataFile in the model.

    :return: A vector of WindowDataFile.
    """
    return getWindowDataFiles(self)
Model.getWindowDataFiles = _getWindowDataFiles

def _getWindowDataFileByName(self, t_name: str) -> OptionalWindowDataFile:
    """Try to get an object of type WindowDataFile that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional WindowDataFile.
    """
    return getWindowDataFileByName(self, t_name)
Model.getWindowDataFileByName = _getWindowDataFileByName

def _getWindowDataFilesByName(self, t_name: str, t_exactMatch: bool) -> WindowDataFileVector:
    """Returns all objects of type WindowDataFile named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getWindowDataFilesByName(self, t_name, t_exactMatch)
Model.getWindowDataFilesByName = _getWindowDataFilesByName

class WindowPropertyFrameAndDivider(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_WindowPropertyFrameAndDivider

    def __init__(self, *args):
        _openstudiomodelresources.WindowPropertyFrameAndDivider_swiginit(self, _openstudiomodelresources.new_WindowPropertyFrameAndDivider(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_iddObjectType()

    @staticmethod
    def dividerTypeValues():
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerTypeValues()

    def frameWidth(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameWidth(self)

    def isFrameWidthDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameWidthDefaulted(self)

    def frameOutsideProjection(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameOutsideProjection(self)

    def isFrameOutsideProjectionDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameOutsideProjectionDefaulted(self)

    def frameInsideProjection(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameInsideProjection(self)

    def isFrameInsideProjectionDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameInsideProjectionDefaulted(self)

    def frameConductance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameConductance(self)

    def isFrameConductanceDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameConductanceDefaulted(self)

    def ratioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_ratioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self)

    def isRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductanceDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductanceDefaulted(self)

    def frameSolarAbsorptance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameSolarAbsorptance(self)

    def isFrameSolarAbsorptanceDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameSolarAbsorptanceDefaulted(self)

    def frameVisibleAbsorptance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameVisibleAbsorptance(self)

    def isFrameVisibleAbsorptanceDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameVisibleAbsorptanceDefaulted(self)

    def frameThermalHemisphericalEmissivity(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_frameThermalHemisphericalEmissivity(self)

    def isFrameThermalHemisphericalEmissivityDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isFrameThermalHemisphericalEmissivityDefaulted(self)

    def dividerType(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerType(self)

    def isDividerTypeDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerTypeDefaulted(self)

    def dividerWidth(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerWidth(self)

    def isDividerWidthDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerWidthDefaulted(self)

    def numberOfHorizontalDividers(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_numberOfHorizontalDividers(self)

    def isNumberOfHorizontalDividersDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isNumberOfHorizontalDividersDefaulted(self)

    def numberOfVerticalDividers(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_numberOfVerticalDividers(self)

    def isNumberOfVerticalDividersDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isNumberOfVerticalDividersDefaulted(self)

    def dividerOutsideProjection(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerOutsideProjection(self)

    def isDividerOutsideProjectionDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerOutsideProjectionDefaulted(self)

    def dividerInsideProjection(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerInsideProjection(self)

    def isDividerInsideProjectionDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerInsideProjectionDefaulted(self)

    def dividerConductance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerConductance(self)

    def isDividerConductanceDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerConductanceDefaulted(self)

    def ratioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_ratioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self)

    def isRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductanceDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductanceDefaulted(self)

    def dividerSolarAbsorptance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerSolarAbsorptance(self)

    def isDividerSolarAbsorptanceDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerSolarAbsorptanceDefaulted(self)

    def dividerVisibleAbsorptance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerVisibleAbsorptance(self)

    def isDividerVisibleAbsorptanceDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerVisibleAbsorptanceDefaulted(self)

    def dividerThermalHemisphericalEmissivity(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_dividerThermalHemisphericalEmissivity(self)

    def isDividerThermalHemisphericalEmissivityDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isDividerThermalHemisphericalEmissivityDefaulted(self)

    def outsideRevealDepth(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_outsideRevealDepth(self)

    def isOutsideRevealDepthDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isOutsideRevealDepthDefaulted(self)

    def outsideRevealSolarAbsorptance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_outsideRevealSolarAbsorptance(self)

    def isOutsideRevealSolarAbsorptanceDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isOutsideRevealSolarAbsorptanceDefaulted(self)

    def insideSillDepth(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_insideSillDepth(self)

    def isInsideSillDepthDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isInsideSillDepthDefaulted(self)

    def insideSillSolarAbsorptance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_insideSillSolarAbsorptance(self)

    def isInsideSillSolarAbsorptanceDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isInsideSillSolarAbsorptanceDefaulted(self)

    def insideRevealDepth(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_insideRevealDepth(self)

    def isInsideRevealDepthDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isInsideRevealDepthDefaulted(self)

    def insideRevealSolarAbsorptance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_insideRevealSolarAbsorptance(self)

    def isInsideRevealSolarAbsorptanceDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isInsideRevealSolarAbsorptanceDefaulted(self)

    def nfrcProductTypeforAssemblyCalculations(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_nfrcProductTypeforAssemblyCalculations(self)

    def isNFRCProductTypeforAssemblyCalculationsDefaulted(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_isNFRCProductTypeforAssemblyCalculationsDefaulted(self)

    def setFrameWidth(self, frameWidth):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameWidth(self, frameWidth)

    def resetFrameWidth(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameWidth(self)

    def setFrameOutsideProjection(self, frameOutsideProjection):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameOutsideProjection(self, frameOutsideProjection)

    def resetFrameOutsideProjection(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameOutsideProjection(self)

    def setFrameInsideProjection(self, frameInsideProjection):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameInsideProjection(self, frameInsideProjection)

    def resetFrameInsideProjection(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameInsideProjection(self)

    def setFrameConductance(self, frameConductance):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameConductance(self, frameConductance)

    def resetFrameConductance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameConductance(self)

    def setRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self, ratioOfFrameEdgeGlassConductanceToCenterOfGlassConductance):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self, ratioOfFrameEdgeGlassConductanceToCenterOfGlassConductance)

    def resetRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetRatioOfFrameEdgeGlassConductanceToCenterOfGlassConductance(self)

    def setFrameSolarAbsorptance(self, frameSolarAbsorptance):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameSolarAbsorptance(self, frameSolarAbsorptance)

    def resetFrameSolarAbsorptance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameSolarAbsorptance(self)

    def setFrameVisibleAbsorptance(self, frameVisibleAbsorptance):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameVisibleAbsorptance(self, frameVisibleAbsorptance)

    def resetFrameVisibleAbsorptance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameVisibleAbsorptance(self)

    def setFrameThermalHemisphericalEmissivity(self, frameThermalHemisphericalEmissivity):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setFrameThermalHemisphericalEmissivity(self, frameThermalHemisphericalEmissivity)

    def resetFrameThermalHemisphericalEmissivity(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetFrameThermalHemisphericalEmissivity(self)

    def setDividerType(self, dividerType):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerType(self, dividerType)

    def resetDividerType(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerType(self)

    def setDividerWidth(self, dividerWidth):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerWidth(self, dividerWidth)

    def resetDividerWidth(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerWidth(self)

    def setNumberOfHorizontalDividers(self, numberOfHorizontalDividers):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setNumberOfHorizontalDividers(self, numberOfHorizontalDividers)

    def resetNumberOfHorizontalDividers(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetNumberOfHorizontalDividers(self)

    def setNumberOfVerticalDividers(self, numberOfVerticalDividers):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setNumberOfVerticalDividers(self, numberOfVerticalDividers)

    def resetNumberOfVerticalDividers(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetNumberOfVerticalDividers(self)

    def setDividerOutsideProjection(self, dividerOutsideProjection):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerOutsideProjection(self, dividerOutsideProjection)

    def resetDividerOutsideProjection(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerOutsideProjection(self)

    def setDividerInsideProjection(self, dividerInsideProjection):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerInsideProjection(self, dividerInsideProjection)

    def resetDividerInsideProjection(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerInsideProjection(self)

    def setDividerConductance(self, dividerConductance):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerConductance(self, dividerConductance)

    def resetDividerConductance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerConductance(self)

    def setRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self, ratioOfDividerEdgeGlassConductanceToCenterOfGlassConductance):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self, ratioOfDividerEdgeGlassConductanceToCenterOfGlassConductance)

    def resetRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetRatioOfDividerEdgeGlassConductanceToCenterOfGlassConductance(self)

    def setDividerSolarAbsorptance(self, dividerSolarAbsorptance):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerSolarAbsorptance(self, dividerSolarAbsorptance)

    def resetDividerSolarAbsorptance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerSolarAbsorptance(self)

    def setDividerVisibleAbsorptance(self, dividerVisibleAbsorptance):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerVisibleAbsorptance(self, dividerVisibleAbsorptance)

    def resetDividerVisibleAbsorptance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerVisibleAbsorptance(self)

    def setDividerThermalHemisphericalEmissivity(self, dividerThermalHemisphericalEmissivity):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setDividerThermalHemisphericalEmissivity(self, dividerThermalHemisphericalEmissivity)

    def resetDividerThermalHemisphericalEmissivity(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetDividerThermalHemisphericalEmissivity(self)

    def setOutsideRevealDepth(self, outsideRevealDepth):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setOutsideRevealDepth(self, outsideRevealDepth)

    def resetOutsideRevealDepth(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetOutsideRevealDepth(self)

    def setOutsideRevealSolarAbsorptance(self, outsideRevealSolarAbsorptance):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setOutsideRevealSolarAbsorptance(self, outsideRevealSolarAbsorptance)

    def resetOutsideRevealSolarAbsorptance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetOutsideRevealSolarAbsorptance(self)

    def setInsideSillDepth(self, insideSillDepth):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setInsideSillDepth(self, insideSillDepth)

    def resetInsideSillDepth(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetInsideSillDepth(self)

    def setInsideSillSolarAbsorptance(self, insideSillSolarAbsorptance):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setInsideSillSolarAbsorptance(self, insideSillSolarAbsorptance)

    def resetInsideSillSolarAbsorptance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetInsideSillSolarAbsorptance(self)

    def setInsideRevealDepth(self, insideRevealDepth):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setInsideRevealDepth(self, insideRevealDepth)

    def resetInsideRevealDepth(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetInsideRevealDepth(self)

    def setInsideRevealSolarAbsorptance(self, insideRevealSolarAbsorptance):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setInsideRevealSolarAbsorptance(self, insideRevealSolarAbsorptance)

    def resetInsideRevealSolarAbsorptance(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetInsideRevealSolarAbsorptance(self)

    def setNFRCProductTypeforAssemblyCalculations(self, nfrcProductTypeforAssemblyCalculations):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_setNFRCProductTypeforAssemblyCalculations(self, nfrcProductTypeforAssemblyCalculations)

    def resetNFRCProductTypeforAssemblyCalculations(self):
        return _openstudiomodelresources.WindowPropertyFrameAndDivider_resetNFRCProductTypeforAssemblyCalculations(self)

# Register WindowPropertyFrameAndDivider in _openstudiomodelresources:
_openstudiomodelresources.WindowPropertyFrameAndDivider_swigregister(WindowPropertyFrameAndDivider)

def toWindowPropertyFrameAndDivider(idfObject):
    return _openstudiomodelresources.toWindowPropertyFrameAndDivider(idfObject)

def getWindowPropertyFrameAndDivider(t_model, t_handle):
    return _openstudiomodelresources.getWindowPropertyFrameAndDivider(t_model, t_handle)

def getWindowPropertyFrameAndDividers(t_model):
    return _openstudiomodelresources.getWindowPropertyFrameAndDividers(t_model)

def getWindowPropertyFrameAndDividerByName(t_model, t_name):
    return _openstudiomodelresources.getWindowPropertyFrameAndDividerByName(t_model, t_name)

def getWindowPropertyFrameAndDividersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getWindowPropertyFrameAndDividersByName(t_model, t_name, t_exactMatch)

def _to_WindowPropertyFrameAndDivider(self) -> OptionalWindowPropertyFrameAndDivider:
    """Try to cast the ModelObject to a WindowPropertyFrameAndDivider.

    :return: An Optional WindowPropertyFrameAndDivider.
    """
    return toWindowPropertyFrameAndDivider(self)
openstudioutilitiesidf.IdfObject.to_WindowPropertyFrameAndDivider = _to_WindowPropertyFrameAndDivider

def _getWindowPropertyFrameAndDivider(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalWindowPropertyFrameAndDivider:
    """Try to get an object of type WindowPropertyFrameAndDivider referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional WindowPropertyFrameAndDivider.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getWindowPropertyFrameAndDivider(self, t_handle)
Model.getWindowPropertyFrameAndDivider = _getWindowPropertyFrameAndDivider

def _getWindowPropertyFrameAndDividers(self) -> WindowPropertyFrameAndDividerVector:
    """Get a vector of all objects of type WindowPropertyFrameAndDivider in the model.

    :return: A vector of WindowPropertyFrameAndDivider.
    """
    return getWindowPropertyFrameAndDividers(self)
Model.getWindowPropertyFrameAndDividers = _getWindowPropertyFrameAndDividers

def _getWindowPropertyFrameAndDividerByName(self, t_name: str) -> OptionalWindowPropertyFrameAndDivider:
    """Try to get an object of type WindowPropertyFrameAndDivider that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional WindowPropertyFrameAndDivider.
    """
    return getWindowPropertyFrameAndDividerByName(self, t_name)
Model.getWindowPropertyFrameAndDividerByName = _getWindowPropertyFrameAndDividerByName

def _getWindowPropertyFrameAndDividersByName(self, t_name: str, t_exactMatch: bool) -> WindowPropertyFrameAndDividerVector:
    """Returns all objects of type WindowPropertyFrameAndDivider named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getWindowPropertyFrameAndDividersByName(self, t_name, t_exactMatch)
Model.getWindowPropertyFrameAndDividersByName = _getWindowPropertyFrameAndDividersByName

class DefaultSubSurfaceConstructions(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultSubSurfaceConstructions

    def __init__(self, *args):
        _openstudiomodelresources.DefaultSubSurfaceConstructions_swiginit(self, _openstudiomodelresources.new_DefaultSubSurfaceConstructions(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_iddObjectType()

    def fixedWindowConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_fixedWindowConstruction(self)

    def operableWindowConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_operableWindowConstruction(self)

    def doorConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_doorConstruction(self)

    def glassDoorConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_glassDoorConstruction(self)

    def overheadDoorConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_overheadDoorConstruction(self)

    def skylightConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_skylightConstruction(self)

    def tubularDaylightDomeConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_tubularDaylightDomeConstruction(self)

    def tubularDaylightDiffuserConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_tubularDaylightDiffuserConstruction(self)

    def setFixedWindowConstruction(self, construction):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setFixedWindowConstruction(self, construction)

    def resetFixedWindowConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetFixedWindowConstruction(self)

    def setOperableWindowConstruction(self, construction):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setOperableWindowConstruction(self, construction)

    def resetOperableWindowConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetOperableWindowConstruction(self)

    def setDoorConstruction(self, construction):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setDoorConstruction(self, construction)

    def resetDoorConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetDoorConstruction(self)

    def setGlassDoorConstruction(self, construction):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setGlassDoorConstruction(self, construction)

    def resetGlassDoorConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetGlassDoorConstruction(self)

    def setOverheadDoorConstruction(self, construction):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setOverheadDoorConstruction(self, construction)

    def resetOverheadDoorConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetOverheadDoorConstruction(self)

    def setSkylightConstruction(self, construction):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setSkylightConstruction(self, construction)

    def resetSkylightConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetSkylightConstruction(self)

    def setTubularDaylightDomeConstruction(self, construction):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setTubularDaylightDomeConstruction(self, construction)

    def resetTubularDaylightDomeConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetTubularDaylightDomeConstruction(self)

    def setTubularDaylightDiffuserConstruction(self, construction):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_setTubularDaylightDiffuserConstruction(self, construction)

    def resetTubularDaylightDiffuserConstruction(self):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_resetTubularDaylightDiffuserConstruction(self)

    def merge(self, other):
        return _openstudiomodelresources.DefaultSubSurfaceConstructions_merge(self, other)

# Register DefaultSubSurfaceConstructions in _openstudiomodelresources:
_openstudiomodelresources.DefaultSubSurfaceConstructions_swigregister(DefaultSubSurfaceConstructions)

def toDefaultSubSurfaceConstructions(idfObject):
    return _openstudiomodelresources.toDefaultSubSurfaceConstructions(idfObject)

def getDefaultSubSurfaceConstructions(t_model, t_handle):
    return _openstudiomodelresources.getDefaultSubSurfaceConstructions(t_model, t_handle)

def getDefaultSubSurfaceConstructionss(t_model):
    return _openstudiomodelresources.getDefaultSubSurfaceConstructionss(t_model)

def getDefaultSubSurfaceConstructionsByName(t_model, t_name):
    return _openstudiomodelresources.getDefaultSubSurfaceConstructionsByName(t_model, t_name)

def getDefaultSubSurfaceConstructionssByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getDefaultSubSurfaceConstructionssByName(t_model, t_name, t_exactMatch)

def _to_DefaultSubSurfaceConstructions(self) -> OptionalDefaultSubSurfaceConstructions:
    """Try to cast the ModelObject to a DefaultSubSurfaceConstructions.

    :return: An Optional DefaultSubSurfaceConstructions.
    """
    return toDefaultSubSurfaceConstructions(self)
openstudioutilitiesidf.IdfObject.to_DefaultSubSurfaceConstructions = _to_DefaultSubSurfaceConstructions

def _getDefaultSubSurfaceConstructions(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalDefaultSubSurfaceConstructions:
    """Try to get an object of type DefaultSubSurfaceConstructions referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional DefaultSubSurfaceConstructions.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getDefaultSubSurfaceConstructions(self, t_handle)
Model.getDefaultSubSurfaceConstructions = _getDefaultSubSurfaceConstructions

def _getDefaultSubSurfaceConstructionss(self) -> DefaultSubSurfaceConstructionsVector:
    """Get a vector of all objects of type DefaultSubSurfaceConstructions in the model.

    :return: A vector of DefaultSubSurfaceConstructions.
    """
    return getDefaultSubSurfaceConstructionss(self)
Model.getDefaultSubSurfaceConstructionss = _getDefaultSubSurfaceConstructionss

def _getDefaultSubSurfaceConstructionsByName(self, t_name: str) -> OptionalDefaultSubSurfaceConstructions:
    """Try to get an object of type DefaultSubSurfaceConstructions that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional DefaultSubSurfaceConstructions.
    """
    return getDefaultSubSurfaceConstructionsByName(self, t_name)
Model.getDefaultSubSurfaceConstructionsByName = _getDefaultSubSurfaceConstructionsByName

def _getDefaultSubSurfaceConstructionssByName(self, t_name: str, t_exactMatch: bool) -> DefaultSubSurfaceConstructionsVector:
    """Returns all objects of type DefaultSubSurfaceConstructions named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getDefaultSubSurfaceConstructionssByName(self, t_name, t_exactMatch)
Model.getDefaultSubSurfaceConstructionssByName = _getDefaultSubSurfaceConstructionssByName

class DefaultSurfaceConstructions(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_DefaultSurfaceConstructions

    def __init__(self, *args):
        _openstudiomodelresources.DefaultSurfaceConstructions_swiginit(self, _openstudiomodelresources.new_DefaultSurfaceConstructions(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.DefaultSurfaceConstructions_iddObjectType()

    def floorConstruction(self):
        return _openstudiomodelresources.DefaultSurfaceConstructions_floorConstruction(self)

    def wallConstruction(self):
        return _openstudiomodelresources.DefaultSurfaceConstructions_wallConstruction(self)

    def roofCeilingConstruction(self):
        return _openstudiomodelresources.DefaultSurfaceConstructions_roofCeilingConstruction(self)

    def setFloorConstruction(self, construction):
        return _openstudiomodelresources.DefaultSurfaceConstructions_setFloorConstruction(self, construction)

    def resetFloorConstruction(self):
        return _openstudiomodelresources.DefaultSurfaceConstructions_resetFloorConstruction(self)

    def setWallConstruction(self, construction):
        return _openstudiomodelresources.DefaultSurfaceConstructions_setWallConstruction(self, construction)

    def resetWallConstruction(self):
        return _openstudiomodelresources.DefaultSurfaceConstructions_resetWallConstruction(self)

    def setRoofCeilingConstruction(self, construction):
        return _openstudiomodelresources.DefaultSurfaceConstructions_setRoofCeilingConstruction(self, construction)

    def resetRoofCeilingConstruction(self):
        return _openstudiomodelresources.DefaultSurfaceConstructions_resetRoofCeilingConstruction(self)

    def merge(self, other):
        return _openstudiomodelresources.DefaultSurfaceConstructions_merge(self, other)

# Register DefaultSurfaceConstructions in _openstudiomodelresources:
_openstudiomodelresources.DefaultSurfaceConstructions_swigregister(DefaultSurfaceConstructions)

def toDefaultSurfaceConstructions(idfObject):
    return _openstudiomodelresources.toDefaultSurfaceConstructions(idfObject)

def getDefaultSurfaceConstructions(t_model, t_handle):
    return _openstudiomodelresources.getDefaultSurfaceConstructions(t_model, t_handle)

def getDefaultSurfaceConstructionss(t_model):
    return _openstudiomodelresources.getDefaultSurfaceConstructionss(t_model)

def getDefaultSurfaceConstructionsByName(t_model, t_name):
    return _openstudiomodelresources.getDefaultSurfaceConstructionsByName(t_model, t_name)

def getDefaultSurfaceConstructionssByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getDefaultSurfaceConstructionssByName(t_model, t_name, t_exactMatch)

def _to_DefaultSurfaceConstructions(self) -> OptionalDefaultSurfaceConstructions:
    """Try to cast the ModelObject to a DefaultSurfaceConstructions.

    :return: An Optional DefaultSurfaceConstructions.
    """
    return toDefaultSurfaceConstructions(self)
openstudioutilitiesidf.IdfObject.to_DefaultSurfaceConstructions = _to_DefaultSurfaceConstructions

def _getDefaultSurfaceConstructions(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalDefaultSurfaceConstructions:
    """Try to get an object of type DefaultSurfaceConstructions referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional DefaultSurfaceConstructions.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getDefaultSurfaceConstructions(self, t_handle)
Model.getDefaultSurfaceConstructions = _getDefaultSurfaceConstructions

def _getDefaultSurfaceConstructionss(self) -> DefaultSurfaceConstructionsVector:
    """Get a vector of all objects of type DefaultSurfaceConstructions in the model.

    :return: A vector of DefaultSurfaceConstructions.
    """
    return getDefaultSurfaceConstructionss(self)
Model.getDefaultSurfaceConstructionss = _getDefaultSurfaceConstructionss

def _getDefaultSurfaceConstructionsByName(self, t_name: str) -> OptionalDefaultSurfaceConstructions:
    """Try to get an object of type DefaultSurfaceConstructions that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional DefaultSurfaceConstructions.
    """
    return getDefaultSurfaceConstructionsByName(self, t_name)
Model.getDefaultSurfaceConstructionsByName = _getDefaultSurfaceConstructionsByName

def _getDefaultSurfaceConstructionssByName(self, t_name: str, t_exactMatch: bool) -> DefaultSurfaceConstructionsVector:
    """Returns all objects of type DefaultSurfaceConstructions named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getDefaultSurfaceConstructionssByName(self, t_name, t_exactMatch)
Model.getDefaultSurfaceConstructionssByName = _getDefaultSurfaceConstructionssByName

class ShadingControl(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ShadingControl

    def __init__(self, *args):
        _openstudiomodelresources.ShadingControl_swiginit(self, _openstudiomodelresources.new_ShadingControl(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ShadingControl_iddObjectType()

    @staticmethod
    def shadingTypeValues():
        return _openstudiomodelresources.ShadingControl_shadingTypeValues()

    @staticmethod
    def shadingControlTypeValues():
        return _openstudiomodelresources.ShadingControl_shadingControlTypeValues()

    @staticmethod
    def typeofSlatAngleControlforBlindsValues():
        return _openstudiomodelresources.ShadingControl_typeofSlatAngleControlforBlindsValues()

    @staticmethod
    def multipleSurfaceControlTypeValues():
        return _openstudiomodelresources.ShadingControl_multipleSurfaceControlTypeValues()

    def shadingType(self):
        return _openstudiomodelresources.ShadingControl_shadingType(self)

    def construction(self):
        return _openstudiomodelresources.ShadingControl_construction(self)

    def shadingMaterial(self):
        return _openstudiomodelresources.ShadingControl_shadingMaterial(self)

    def shadingControlType(self):
        return _openstudiomodelresources.ShadingControl_shadingControlType(self)

    def isShadingControlTypeDefaulted(self):
        return _openstudiomodelresources.ShadingControl_isShadingControlTypeDefaulted(self)

    def schedule(self):
        return _openstudiomodelresources.ShadingControl_schedule(self)

    def setpoint(self):
        return _openstudiomodelresources.ShadingControl_setpoint(self)

    def isSetpointDefaulted(self):
        return _openstudiomodelresources.ShadingControl_isSetpointDefaulted(self)

    def glareControlIsActive(self):
        return _openstudiomodelresources.ShadingControl_glareControlIsActive(self)

    def typeofSlatAngleControlforBlinds(self):
        return _openstudiomodelresources.ShadingControl_typeofSlatAngleControlforBlinds(self)

    def isTypeofSlatAngleControlforBlindsDefaulted(self):
        return _openstudiomodelresources.ShadingControl_isTypeofSlatAngleControlforBlindsDefaulted(self)

    def slatAngleSchedule(self):
        return _openstudiomodelresources.ShadingControl_slatAngleSchedule(self)

    def setpoint2(self):
        return _openstudiomodelresources.ShadingControl_setpoint2(self)

    def multipleSurfaceControlType(self):
        return _openstudiomodelresources.ShadingControl_multipleSurfaceControlType(self)

    def setShadingType(self, shadingType):
        return _openstudiomodelresources.ShadingControl_setShadingType(self, shadingType)

    def setShadingControlType(self, shadingControlType):
        return _openstudiomodelresources.ShadingControl_setShadingControlType(self, shadingControlType)

    def resetShadingControlType(self):
        return _openstudiomodelresources.ShadingControl_resetShadingControlType(self)

    def setSchedule(self, schedule):
        return _openstudiomodelresources.ShadingControl_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelresources.ShadingControl_resetSchedule(self)

    def setSetpoint(self, setpoint):
        return _openstudiomodelresources.ShadingControl_setSetpoint(self, setpoint)

    def resetSetpoint(self):
        return _openstudiomodelresources.ShadingControl_resetSetpoint(self)

    def setGlareControlIsActive(self, glareControlIsActive):
        return _openstudiomodelresources.ShadingControl_setGlareControlIsActive(self, glareControlIsActive)

    def resetGlareControlIsActive(self):
        return _openstudiomodelresources.ShadingControl_resetGlareControlIsActive(self)

    def setTypeofSlatAngleControlforBlinds(self, typeofSlatAngleControlforBlinds):
        return _openstudiomodelresources.ShadingControl_setTypeofSlatAngleControlforBlinds(self, typeofSlatAngleControlforBlinds)

    def resetTypeofSlatAngleControlforBlinds(self):
        return _openstudiomodelresources.ShadingControl_resetTypeofSlatAngleControlforBlinds(self)

    def setSlatAngleSchedule(self, slatAngleSchedule):
        return _openstudiomodelresources.ShadingControl_setSlatAngleSchedule(self, slatAngleSchedule)

    def resetSlatAngleSchedule(self):
        return _openstudiomodelresources.ShadingControl_resetSlatAngleSchedule(self)

    def setSetpoint2(self, setpoint2):
        return _openstudiomodelresources.ShadingControl_setSetpoint2(self, setpoint2)

    def setMultipleSurfaceControlType(self, multipleSurfaceControlType):
        return _openstudiomodelresources.ShadingControl_setMultipleSurfaceControlType(self, multipleSurfaceControlType)

    def isControlTypeValueNeedingSetpoint1(self):
        return _openstudiomodelresources.ShadingControl_isControlTypeValueNeedingSetpoint1(self)

    def isControlTypeValueNeedingSetpoint2(self):
        return _openstudiomodelresources.ShadingControl_isControlTypeValueNeedingSetpoint2(self)

    def isControlTypeValueAllowingSchedule(self):
        return _openstudiomodelresources.ShadingControl_isControlTypeValueAllowingSchedule(self)

    def isControlTypeValueRequiringSchedule(self):
        return _openstudiomodelresources.ShadingControl_isControlTypeValueRequiringSchedule(self)

    def isTypeValueAllowingSlatAngleControl(self):
        return _openstudiomodelresources.ShadingControl_isTypeValueAllowingSlatAngleControl(self)

    def subSurfaces(self):
        return _openstudiomodelresources.ShadingControl_subSurfaces(self)

    def numberofSubSurfaces(self):
        return _openstudiomodelresources.ShadingControl_numberofSubSurfaces(self)

    def subSurfaceIndex(self, subSurface):
        return _openstudiomodelresources.ShadingControl_subSurfaceIndex(self, subSurface)

    def addSubSurface(self, *args):
        return _openstudiomodelresources.ShadingControl_addSubSurface(self, *args)

    def setSubSurfaceIndex(self, subSurface, index):
        return _openstudiomodelresources.ShadingControl_setSubSurfaceIndex(self, subSurface, index)

    def removeSubSurface(self, *args):
        return _openstudiomodelresources.ShadingControl_removeSubSurface(self, *args)

    def addSubSurfaces(self, subSurfaces):
        return _openstudiomodelresources.ShadingControl_addSubSurfaces(self, subSurfaces)

    def setSubSurfaces(self, subSurfaces):
        return _openstudiomodelresources.ShadingControl_setSubSurfaces(self, subSurfaces)

    def removeAllSubSurfaces(self):
        return _openstudiomodelresources.ShadingControl_removeAllSubSurfaces(self)

# Register ShadingControl in _openstudiomodelresources:
_openstudiomodelresources.ShadingControl_swigregister(ShadingControl)

def toShadingControl(idfObject):
    return _openstudiomodelresources.toShadingControl(idfObject)

def getShadingControl(t_model, t_handle):
    return _openstudiomodelresources.getShadingControl(t_model, t_handle)

def getShadingControls(t_model):
    return _openstudiomodelresources.getShadingControls(t_model)

def getShadingControlByName(t_model, t_name):
    return _openstudiomodelresources.getShadingControlByName(t_model, t_name)

def getShadingControlsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getShadingControlsByName(t_model, t_name, t_exactMatch)

def _to_ShadingControl(self) -> OptionalShadingControl:
    """Try to cast the ModelObject to a ShadingControl.

    :return: An Optional ShadingControl.
    """
    return toShadingControl(self)
openstudioutilitiesidf.IdfObject.to_ShadingControl = _to_ShadingControl

def _getShadingControl(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalShadingControl:
    """Try to get an object of type ShadingControl referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ShadingControl.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getShadingControl(self, t_handle)
Model.getShadingControl = _getShadingControl

def _getShadingControls(self) -> ShadingControlVector:
    """Get a vector of all objects of type ShadingControl in the model.

    :return: A vector of ShadingControl.
    """
    return getShadingControls(self)
Model.getShadingControls = _getShadingControls

def _getShadingControlByName(self, t_name: str) -> OptionalShadingControl:
    """Try to get an object of type ShadingControl that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ShadingControl.
    """
    return getShadingControlByName(self, t_name)
Model.getShadingControlByName = _getShadingControlByName

def _getShadingControlsByName(self, t_name: str, t_exactMatch: bool) -> ShadingControlVector:
    """Returns all objects of type ShadingControl named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getShadingControlsByName(self, t_name, t_exactMatch)
Model.getShadingControlsByName = _getShadingControlsByName

class Curve(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_Curve

    def __init__(self, *args):
        _openstudiomodelresources.Curve_swiginit(self, _openstudiomodelresources.new_Curve(*args))

    def numVariables(self):
        return _openstudiomodelresources.Curve_numVariables(self)

    def evaluate(self, *args):
        return _openstudiomodelresources.Curve_evaluate(self, *args)

# Register Curve in _openstudiomodelresources:
_openstudiomodelresources.Curve_swigregister(Curve)

def toCurve(idfObject):
    return _openstudiomodelresources.toCurve(idfObject)

def getCurve(t_model, t_handle):
    return _openstudiomodelresources.getCurve(t_model, t_handle)

def getCurves(t_model):
    return _openstudiomodelresources.getCurves(t_model)

def getCurveByName(t_model, t_name):
    return _openstudiomodelresources.getCurveByName(t_model, t_name)

def getCurvesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurvesByName(t_model, t_name, t_exactMatch)

def _to_Curve(self) -> OptionalCurve:
    """Try to cast the ModelObject to a Curve.

    :return: An Optional Curve.
    """
    return toCurve(self)
openstudioutilitiesidf.IdfObject.to_Curve = _to_Curve

def _getCurve(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurve:
    """Try to get an object of type Curve referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Curve.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurve(self, t_handle)
Model.getCurve = _getCurve

def _getCurves(self) -> CurveVector:
    """Get a vector of all objects of type Curve in the model.

    :return: A vector of Curve.
    """
    return getCurves(self)
Model.getCurves = _getCurves

def _getCurveByName(self, t_name: str) -> OptionalCurve:
    """Try to get an object of type Curve that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Curve.
    """
    return getCurveByName(self, t_name)
Model.getCurveByName = _getCurveByName

def _getCurvesByName(self, t_name: str, t_exactMatch: bool) -> CurveVector:
    """Returns all objects of type Curve named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurvesByName(self, t_name, t_exactMatch)
Model.getCurvesByName = _getCurvesByName

class CurveBicubic(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveBicubic

    def __init__(self, *args):
        _openstudiomodelresources.CurveBicubic_swiginit(self, _openstudiomodelresources.new_CurveBicubic(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveBicubic_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues():
        return _openstudiomodelresources.CurveBicubic_validInputUnitTypeforXValues()

    @staticmethod
    def validInputUnitTypeforYValues():
        return _openstudiomodelresources.CurveBicubic_validInputUnitTypeforYValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveBicubic_validOutputUnitTypeValues()

    def coefficient1Constant(self):
        return _openstudiomodelresources.CurveBicubic_coefficient1Constant(self)

    def coefficient2x(self):
        return _openstudiomodelresources.CurveBicubic_coefficient2x(self)

    def coefficient3xPOW2(self):
        return _openstudiomodelresources.CurveBicubic_coefficient3xPOW2(self)

    def coefficient4y(self):
        return _openstudiomodelresources.CurveBicubic_coefficient4y(self)

    def coefficient5yPOW2(self):
        return _openstudiomodelresources.CurveBicubic_coefficient5yPOW2(self)

    def coefficient6xTIMESY(self):
        return _openstudiomodelresources.CurveBicubic_coefficient6xTIMESY(self)

    def coefficient7xPOW3(self):
        return _openstudiomodelresources.CurveBicubic_coefficient7xPOW3(self)

    def coefficient8yPOW3(self):
        return _openstudiomodelresources.CurveBicubic_coefficient8yPOW3(self)

    def coefficient9xPOW2TIMESY(self):
        return _openstudiomodelresources.CurveBicubic_coefficient9xPOW2TIMESY(self)

    def coefficient10xTIMESYPOW2(self):
        return _openstudiomodelresources.CurveBicubic_coefficient10xTIMESYPOW2(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveBicubic_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveBicubic_maximumValueofx(self)

    def minimumValueofy(self):
        return _openstudiomodelresources.CurveBicubic_minimumValueofy(self)

    def maximumValueofy(self):
        return _openstudiomodelresources.CurveBicubic_maximumValueofy(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveBicubic_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveBicubic_maximumCurveOutput(self)

    def inputUnitTypeforX(self):
        return _openstudiomodelresources.CurveBicubic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self):
        return _openstudiomodelresources.CurveBicubic_isInputUnitTypeforXDefaulted(self)

    def inputUnitTypeforY(self):
        return _openstudiomodelresources.CurveBicubic_inputUnitTypeforY(self)

    def isInputUnitTypeforYDefaulted(self):
        return _openstudiomodelresources.CurveBicubic_isInputUnitTypeforYDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveBicubic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveBicubic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant):
        return _openstudiomodelresources.CurveBicubic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x):
        return _openstudiomodelresources.CurveBicubic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2):
        return _openstudiomodelresources.CurveBicubic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4y(self, coefficient4y):
        return _openstudiomodelresources.CurveBicubic_setCoefficient4y(self, coefficient4y)

    def setCoefficient5yPOW2(self, coefficient5yPOW2):
        return _openstudiomodelresources.CurveBicubic_setCoefficient5yPOW2(self, coefficient5yPOW2)

    def setCoefficient6xTIMESY(self, coefficient6xTIMESY):
        return _openstudiomodelresources.CurveBicubic_setCoefficient6xTIMESY(self, coefficient6xTIMESY)

    def setCoefficient7xPOW3(self, coefficient7xPOW3):
        return _openstudiomodelresources.CurveBicubic_setCoefficient7xPOW3(self, coefficient7xPOW3)

    def setCoefficient8yPOW3(self, coefficient8yPOW3):
        return _openstudiomodelresources.CurveBicubic_setCoefficient8yPOW3(self, coefficient8yPOW3)

    def setCoefficient9xPOW2TIMESY(self, coefficient9xPOW2TIMESY):
        return _openstudiomodelresources.CurveBicubic_setCoefficient9xPOW2TIMESY(self, coefficient9xPOW2TIMESY)

    def setCoefficient10xTIMESYPOW2(self, coefficient10xTIMESYPOW2):
        return _openstudiomodelresources.CurveBicubic_setCoefficient10xTIMESYPOW2(self, coefficient10xTIMESYPOW2)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveBicubic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveBicubic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumValueofy(self, minimumValueofy):
        return _openstudiomodelresources.CurveBicubic_setMinimumValueofy(self, minimumValueofy)

    def setMaximumValueofy(self, maximumValueofy):
        return _openstudiomodelresources.CurveBicubic_setMaximumValueofy(self, maximumValueofy)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveBicubic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveBicubic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveBicubic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveBicubic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX):
        return _openstudiomodelresources.CurveBicubic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self):
        return _openstudiomodelresources.CurveBicubic_resetInputUnitTypeforX(self)

    def setInputUnitTypeforY(self, inputUnitTypeforY):
        return _openstudiomodelresources.CurveBicubic_setInputUnitTypeforY(self, inputUnitTypeforY)

    def resetInputUnitTypeforY(self):
        return _openstudiomodelresources.CurveBicubic_resetInputUnitTypeforY(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveBicubic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveBicubic_resetOutputUnitType(self)

# Register CurveBicubic in _openstudiomodelresources:
_openstudiomodelresources.CurveBicubic_swigregister(CurveBicubic)

def toCurveBicubic(idfObject):
    return _openstudiomodelresources.toCurveBicubic(idfObject)

def getCurveBicubic(t_model, t_handle):
    return _openstudiomodelresources.getCurveBicubic(t_model, t_handle)

def getCurveBicubics(t_model):
    return _openstudiomodelresources.getCurveBicubics(t_model)

def getCurveBicubicByName(t_model, t_name):
    return _openstudiomodelresources.getCurveBicubicByName(t_model, t_name)

def getCurveBicubicsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveBicubicsByName(t_model, t_name, t_exactMatch)

def _to_CurveBicubic(self) -> OptionalCurveBicubic:
    """Try to cast the ModelObject to a CurveBicubic.

    :return: An Optional CurveBicubic.
    """
    return toCurveBicubic(self)
openstudioutilitiesidf.IdfObject.to_CurveBicubic = _to_CurveBicubic

def _getCurveBicubic(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveBicubic:
    """Try to get an object of type CurveBicubic referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveBicubic.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveBicubic(self, t_handle)
Model.getCurveBicubic = _getCurveBicubic

def _getCurveBicubics(self) -> CurveBicubicVector:
    """Get a vector of all objects of type CurveBicubic in the model.

    :return: A vector of CurveBicubic.
    """
    return getCurveBicubics(self)
Model.getCurveBicubics = _getCurveBicubics

def _getCurveBicubicByName(self, t_name: str) -> OptionalCurveBicubic:
    """Try to get an object of type CurveBicubic that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveBicubic.
    """
    return getCurveBicubicByName(self, t_name)
Model.getCurveBicubicByName = _getCurveBicubicByName

def _getCurveBicubicsByName(self, t_name: str, t_exactMatch: bool) -> CurveBicubicVector:
    """Returns all objects of type CurveBicubic named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveBicubicsByName(self, t_name, t_exactMatch)
Model.getCurveBicubicsByName = _getCurveBicubicsByName

class CurveBiquadratic(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveBiquadratic

    def __init__(self, *args):
        _openstudiomodelresources.CurveBiquadratic_swiginit(self, _openstudiomodelresources.new_CurveBiquadratic(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveBiquadratic_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues():
        return _openstudiomodelresources.CurveBiquadratic_validInputUnitTypeforXValues()

    @staticmethod
    def validInputUnitTypeforYValues():
        return _openstudiomodelresources.CurveBiquadratic_validInputUnitTypeforYValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveBiquadratic_validOutputUnitTypeValues()

    def coefficient1Constant(self):
        return _openstudiomodelresources.CurveBiquadratic_coefficient1Constant(self)

    def coefficient2x(self):
        return _openstudiomodelresources.CurveBiquadratic_coefficient2x(self)

    def coefficient3xPOW2(self):
        return _openstudiomodelresources.CurveBiquadratic_coefficient3xPOW2(self)

    def coefficient4y(self):
        return _openstudiomodelresources.CurveBiquadratic_coefficient4y(self)

    def coefficient5yPOW2(self):
        return _openstudiomodelresources.CurveBiquadratic_coefficient5yPOW2(self)

    def coefficient6xTIMESY(self):
        return _openstudiomodelresources.CurveBiquadratic_coefficient6xTIMESY(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveBiquadratic_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveBiquadratic_maximumValueofx(self)

    def minimumValueofy(self):
        return _openstudiomodelresources.CurveBiquadratic_minimumValueofy(self)

    def maximumValueofy(self):
        return _openstudiomodelresources.CurveBiquadratic_maximumValueofy(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveBiquadratic_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveBiquadratic_maximumCurveOutput(self)

    def inputUnitTypeforX(self):
        return _openstudiomodelresources.CurveBiquadratic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self):
        return _openstudiomodelresources.CurveBiquadratic_isInputUnitTypeforXDefaulted(self)

    def inputUnitTypeforY(self):
        return _openstudiomodelresources.CurveBiquadratic_inputUnitTypeforY(self)

    def isInputUnitTypeforYDefaulted(self):
        return _openstudiomodelresources.CurveBiquadratic_isInputUnitTypeforYDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveBiquadratic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveBiquadratic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant):
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x):
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2):
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4y(self, coefficient4y):
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient4y(self, coefficient4y)

    def setCoefficient5yPOW2(self, coefficient5yPOW2):
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient5yPOW2(self, coefficient5yPOW2)

    def setCoefficient6xTIMESY(self, coefficient6xTIMESY):
        return _openstudiomodelresources.CurveBiquadratic_setCoefficient6xTIMESY(self, coefficient6xTIMESY)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveBiquadratic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveBiquadratic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumValueofy(self, minimumValueofy):
        return _openstudiomodelresources.CurveBiquadratic_setMinimumValueofy(self, minimumValueofy)

    def setMaximumValueofy(self, maximumValueofy):
        return _openstudiomodelresources.CurveBiquadratic_setMaximumValueofy(self, maximumValueofy)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveBiquadratic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveBiquadratic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveBiquadratic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveBiquadratic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX):
        return _openstudiomodelresources.CurveBiquadratic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self):
        return _openstudiomodelresources.CurveBiquadratic_resetInputUnitTypeforX(self)

    def setInputUnitTypeforY(self, inputUnitTypeforY):
        return _openstudiomodelresources.CurveBiquadratic_setInputUnitTypeforY(self, inputUnitTypeforY)

    def resetInputUnitTypeforY(self):
        return _openstudiomodelresources.CurveBiquadratic_resetInputUnitTypeforY(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveBiquadratic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveBiquadratic_resetOutputUnitType(self)

# Register CurveBiquadratic in _openstudiomodelresources:
_openstudiomodelresources.CurveBiquadratic_swigregister(CurveBiquadratic)

def toCurveBiquadratic(idfObject):
    return _openstudiomodelresources.toCurveBiquadratic(idfObject)

def getCurveBiquadratic(t_model, t_handle):
    return _openstudiomodelresources.getCurveBiquadratic(t_model, t_handle)

def getCurveBiquadratics(t_model):
    return _openstudiomodelresources.getCurveBiquadratics(t_model)

def getCurveBiquadraticByName(t_model, t_name):
    return _openstudiomodelresources.getCurveBiquadraticByName(t_model, t_name)

def getCurveBiquadraticsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveBiquadraticsByName(t_model, t_name, t_exactMatch)

def _to_CurveBiquadratic(self) -> OptionalCurveBiquadratic:
    """Try to cast the ModelObject to a CurveBiquadratic.

    :return: An Optional CurveBiquadratic.
    """
    return toCurveBiquadratic(self)
openstudioutilitiesidf.IdfObject.to_CurveBiquadratic = _to_CurveBiquadratic

def _getCurveBiquadratic(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveBiquadratic:
    """Try to get an object of type CurveBiquadratic referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveBiquadratic.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveBiquadratic(self, t_handle)
Model.getCurveBiquadratic = _getCurveBiquadratic

def _getCurveBiquadratics(self) -> CurveBiquadraticVector:
    """Get a vector of all objects of type CurveBiquadratic in the model.

    :return: A vector of CurveBiquadratic.
    """
    return getCurveBiquadratics(self)
Model.getCurveBiquadratics = _getCurveBiquadratics

def _getCurveBiquadraticByName(self, t_name: str) -> OptionalCurveBiquadratic:
    """Try to get an object of type CurveBiquadratic that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveBiquadratic.
    """
    return getCurveBiquadraticByName(self, t_name)
Model.getCurveBiquadraticByName = _getCurveBiquadraticByName

def _getCurveBiquadraticsByName(self, t_name: str, t_exactMatch: bool) -> CurveBiquadraticVector:
    """Returns all objects of type CurveBiquadratic named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveBiquadraticsByName(self, t_name, t_exactMatch)
Model.getCurveBiquadraticsByName = _getCurveBiquadraticsByName

class CurveCubic(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveCubic

    def __init__(self, *args):
        _openstudiomodelresources.CurveCubic_swiginit(self, _openstudiomodelresources.new_CurveCubic(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveCubic_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues():
        return _openstudiomodelresources.CurveCubic_validInputUnitTypeforXValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveCubic_validOutputUnitTypeValues()

    def coefficient1Constant(self):
        return _openstudiomodelresources.CurveCubic_coefficient1Constant(self)

    def coefficient2x(self):
        return _openstudiomodelresources.CurveCubic_coefficient2x(self)

    def coefficient3xPOW2(self):
        return _openstudiomodelresources.CurveCubic_coefficient3xPOW2(self)

    def coefficient4xPOW3(self):
        return _openstudiomodelresources.CurveCubic_coefficient4xPOW3(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveCubic_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveCubic_maximumValueofx(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveCubic_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveCubic_maximumCurveOutput(self)

    def inputUnitTypeforX(self):
        return _openstudiomodelresources.CurveCubic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self):
        return _openstudiomodelresources.CurveCubic_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveCubic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveCubic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant):
        return _openstudiomodelresources.CurveCubic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x):
        return _openstudiomodelresources.CurveCubic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2):
        return _openstudiomodelresources.CurveCubic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4xPOW3(self, coefficient4xPOW3):
        return _openstudiomodelresources.CurveCubic_setCoefficient4xPOW3(self, coefficient4xPOW3)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveCubic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveCubic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveCubic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveCubic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveCubic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveCubic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX):
        return _openstudiomodelresources.CurveCubic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self):
        return _openstudiomodelresources.CurveCubic_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveCubic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveCubic_resetOutputUnitType(self)

# Register CurveCubic in _openstudiomodelresources:
_openstudiomodelresources.CurveCubic_swigregister(CurveCubic)

def toCurveCubic(idfObject):
    return _openstudiomodelresources.toCurveCubic(idfObject)

def getCurveCubic(t_model, t_handle):
    return _openstudiomodelresources.getCurveCubic(t_model, t_handle)

def getCurveCubics(t_model):
    return _openstudiomodelresources.getCurveCubics(t_model)

def getCurveCubicByName(t_model, t_name):
    return _openstudiomodelresources.getCurveCubicByName(t_model, t_name)

def getCurveCubicsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveCubicsByName(t_model, t_name, t_exactMatch)

def _to_CurveCubic(self) -> OptionalCurveCubic:
    """Try to cast the ModelObject to a CurveCubic.

    :return: An Optional CurveCubic.
    """
    return toCurveCubic(self)
openstudioutilitiesidf.IdfObject.to_CurveCubic = _to_CurveCubic

def _getCurveCubic(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveCubic:
    """Try to get an object of type CurveCubic referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveCubic.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveCubic(self, t_handle)
Model.getCurveCubic = _getCurveCubic

def _getCurveCubics(self) -> CurveCubicVector:
    """Get a vector of all objects of type CurveCubic in the model.

    :return: A vector of CurveCubic.
    """
    return getCurveCubics(self)
Model.getCurveCubics = _getCurveCubics

def _getCurveCubicByName(self, t_name: str) -> OptionalCurveCubic:
    """Try to get an object of type CurveCubic that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveCubic.
    """
    return getCurveCubicByName(self, t_name)
Model.getCurveCubicByName = _getCurveCubicByName

def _getCurveCubicsByName(self, t_name: str, t_exactMatch: bool) -> CurveCubicVector:
    """Returns all objects of type CurveCubic named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveCubicsByName(self, t_name, t_exactMatch)
Model.getCurveCubicsByName = _getCurveCubicsByName

class CurveDoubleExponentialDecay(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveDoubleExponentialDecay

    def __init__(self, *args):
        _openstudiomodelresources.CurveDoubleExponentialDecay_swiginit(self, _openstudiomodelresources.new_CurveDoubleExponentialDecay(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveDoubleExponentialDecay_iddObjectType()

    @staticmethod
    def validInputUnitTypeforxValues():
        return _openstudiomodelresources.CurveDoubleExponentialDecay_validInputUnitTypeforxValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveDoubleExponentialDecay_validOutputUnitTypeValues()

    def coefficient1C1(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient1C1(self)

    def coefficient2C2(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient2C2(self)

    def coefficient3C3(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient3C3(self)

    def coefficient4C4(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient4C4(self)

    def coefficient3C4(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient3C4(self)

    def coefficient5C5(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient5C5(self)

    def coefficient3C5(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_coefficient3C5(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_maximumValueofx(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_maximumCurveOutput(self)

    def inputUnitTypeforx(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient3C3(self, coefficient3C3)

    def setCoefficient4C4(self, coefficient4C4):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient4C4(self, coefficient4C4)

    def setCoefficient3C4(self, coefficient4C4):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient3C4(self, coefficient4C4)

    def setCoefficient5C5(self, coefficient5C5):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient5C5(self, coefficient5C5)

    def setCoefficient3C5(self, coefficient5C5):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setCoefficient3C5(self, coefficient5C5)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveDoubleExponentialDecay_resetOutputUnitType(self)

# Register CurveDoubleExponentialDecay in _openstudiomodelresources:
_openstudiomodelresources.CurveDoubleExponentialDecay_swigregister(CurveDoubleExponentialDecay)

def toCurveDoubleExponentialDecay(idfObject):
    return _openstudiomodelresources.toCurveDoubleExponentialDecay(idfObject)

def getCurveDoubleExponentialDecay(t_model, t_handle):
    return _openstudiomodelresources.getCurveDoubleExponentialDecay(t_model, t_handle)

def getCurveDoubleExponentialDecays(t_model):
    return _openstudiomodelresources.getCurveDoubleExponentialDecays(t_model)

def getCurveDoubleExponentialDecayByName(t_model, t_name):
    return _openstudiomodelresources.getCurveDoubleExponentialDecayByName(t_model, t_name)

def getCurveDoubleExponentialDecaysByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveDoubleExponentialDecaysByName(t_model, t_name, t_exactMatch)

def _to_CurveDoubleExponentialDecay(self) -> OptionalCurveDoubleExponentialDecay:
    """Try to cast the ModelObject to a CurveDoubleExponentialDecay.

    :return: An Optional CurveDoubleExponentialDecay.
    """
    return toCurveDoubleExponentialDecay(self)
openstudioutilitiesidf.IdfObject.to_CurveDoubleExponentialDecay = _to_CurveDoubleExponentialDecay

def _getCurveDoubleExponentialDecay(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveDoubleExponentialDecay:
    """Try to get an object of type CurveDoubleExponentialDecay referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveDoubleExponentialDecay.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveDoubleExponentialDecay(self, t_handle)
Model.getCurveDoubleExponentialDecay = _getCurveDoubleExponentialDecay

def _getCurveDoubleExponentialDecays(self) -> CurveDoubleExponentialDecayVector:
    """Get a vector of all objects of type CurveDoubleExponentialDecay in the model.

    :return: A vector of CurveDoubleExponentialDecay.
    """
    return getCurveDoubleExponentialDecays(self)
Model.getCurveDoubleExponentialDecays = _getCurveDoubleExponentialDecays

def _getCurveDoubleExponentialDecayByName(self, t_name: str) -> OptionalCurveDoubleExponentialDecay:
    """Try to get an object of type CurveDoubleExponentialDecay that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveDoubleExponentialDecay.
    """
    return getCurveDoubleExponentialDecayByName(self, t_name)
Model.getCurveDoubleExponentialDecayByName = _getCurveDoubleExponentialDecayByName

def _getCurveDoubleExponentialDecaysByName(self, t_name: str, t_exactMatch: bool) -> CurveDoubleExponentialDecayVector:
    """Returns all objects of type CurveDoubleExponentialDecay named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveDoubleExponentialDecaysByName(self, t_name, t_exactMatch)
Model.getCurveDoubleExponentialDecaysByName = _getCurveDoubleExponentialDecaysByName

class CurveExponent(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponent

    def __init__(self, *args):
        _openstudiomodelresources.CurveExponent_swiginit(self, _openstudiomodelresources.new_CurveExponent(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveExponent_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues():
        return _openstudiomodelresources.CurveExponent_validInputUnitTypeforXValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveExponent_validOutputUnitTypeValues()

    def coefficient1Constant(self):
        return _openstudiomodelresources.CurveExponent_coefficient1Constant(self)

    def coefficient2Constant(self):
        return _openstudiomodelresources.CurveExponent_coefficient2Constant(self)

    def coefficient3Constant(self):
        return _openstudiomodelresources.CurveExponent_coefficient3Constant(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveExponent_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveExponent_maximumValueofx(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveExponent_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveExponent_maximumCurveOutput(self)

    def inputUnitTypeforX(self):
        return _openstudiomodelresources.CurveExponent_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self):
        return _openstudiomodelresources.CurveExponent_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveExponent_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveExponent_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant):
        return _openstudiomodelresources.CurveExponent_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2Constant(self, coefficient2Constant):
        return _openstudiomodelresources.CurveExponent_setCoefficient2Constant(self, coefficient2Constant)

    def setCoefficient3Constant(self, coefficient3Constant):
        return _openstudiomodelresources.CurveExponent_setCoefficient3Constant(self, coefficient3Constant)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveExponent_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveExponent_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveExponent_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveExponent_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveExponent_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveExponent_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX):
        return _openstudiomodelresources.CurveExponent_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self):
        return _openstudiomodelresources.CurveExponent_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveExponent_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveExponent_resetOutputUnitType(self)

# Register CurveExponent in _openstudiomodelresources:
_openstudiomodelresources.CurveExponent_swigregister(CurveExponent)

def toCurveExponent(idfObject):
    return _openstudiomodelresources.toCurveExponent(idfObject)

def getCurveExponent(t_model, t_handle):
    return _openstudiomodelresources.getCurveExponent(t_model, t_handle)

def getCurveExponents(t_model):
    return _openstudiomodelresources.getCurveExponents(t_model)

def getCurveExponentByName(t_model, t_name):
    return _openstudiomodelresources.getCurveExponentByName(t_model, t_name)

def getCurveExponentsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveExponentsByName(t_model, t_name, t_exactMatch)

def _to_CurveExponent(self) -> OptionalCurveExponent:
    """Try to cast the ModelObject to a CurveExponent.

    :return: An Optional CurveExponent.
    """
    return toCurveExponent(self)
openstudioutilitiesidf.IdfObject.to_CurveExponent = _to_CurveExponent

def _getCurveExponent(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveExponent:
    """Try to get an object of type CurveExponent referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveExponent.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveExponent(self, t_handle)
Model.getCurveExponent = _getCurveExponent

def _getCurveExponents(self) -> CurveExponentVector:
    """Get a vector of all objects of type CurveExponent in the model.

    :return: A vector of CurveExponent.
    """
    return getCurveExponents(self)
Model.getCurveExponents = _getCurveExponents

def _getCurveExponentByName(self, t_name: str) -> OptionalCurveExponent:
    """Try to get an object of type CurveExponent that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveExponent.
    """
    return getCurveExponentByName(self, t_name)
Model.getCurveExponentByName = _getCurveExponentByName

def _getCurveExponentsByName(self, t_name: str, t_exactMatch: bool) -> CurveExponentVector:
    """Returns all objects of type CurveExponent named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveExponentsByName(self, t_name, t_exactMatch)
Model.getCurveExponentsByName = _getCurveExponentsByName

class CurveExponentialDecay(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentialDecay

    def __init__(self, *args):
        _openstudiomodelresources.CurveExponentialDecay_swiginit(self, _openstudiomodelresources.new_CurveExponentialDecay(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveExponentialDecay_iddObjectType()

    @staticmethod
    def validInputUnitTypeforxValues():
        return _openstudiomodelresources.CurveExponentialDecay_validInputUnitTypeforxValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveExponentialDecay_validOutputUnitTypeValues()

    def coefficient1C1(self):
        return _openstudiomodelresources.CurveExponentialDecay_coefficient1C1(self)

    def coefficient2C2(self):
        return _openstudiomodelresources.CurveExponentialDecay_coefficient2C2(self)

    def coefficient3C3(self):
        return _openstudiomodelresources.CurveExponentialDecay_coefficient3C3(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveExponentialDecay_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveExponentialDecay_maximumValueofx(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveExponentialDecay_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveExponentialDecay_maximumCurveOutput(self)

    def inputUnitTypeforx(self):
        return _openstudiomodelresources.CurveExponentialDecay_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self):
        return _openstudiomodelresources.CurveExponentialDecay_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveExponentialDecay_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveExponentialDecay_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1):
        return _openstudiomodelresources.CurveExponentialDecay_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2):
        return _openstudiomodelresources.CurveExponentialDecay_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3):
        return _openstudiomodelresources.CurveExponentialDecay_setCoefficient3C3(self, coefficient3C3)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveExponentialDecay_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveExponentialDecay_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveExponentialDecay_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveExponentialDecay_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveExponentialDecay_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveExponentialDecay_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx):
        return _openstudiomodelresources.CurveExponentialDecay_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self):
        return _openstudiomodelresources.CurveExponentialDecay_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveExponentialDecay_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveExponentialDecay_resetOutputUnitType(self)

# Register CurveExponentialDecay in _openstudiomodelresources:
_openstudiomodelresources.CurveExponentialDecay_swigregister(CurveExponentialDecay)

def toCurveExponentialDecay(idfObject):
    return _openstudiomodelresources.toCurveExponentialDecay(idfObject)

def getCurveExponentialDecay(t_model, t_handle):
    return _openstudiomodelresources.getCurveExponentialDecay(t_model, t_handle)

def getCurveExponentialDecays(t_model):
    return _openstudiomodelresources.getCurveExponentialDecays(t_model)

def getCurveExponentialDecayByName(t_model, t_name):
    return _openstudiomodelresources.getCurveExponentialDecayByName(t_model, t_name)

def getCurveExponentialDecaysByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveExponentialDecaysByName(t_model, t_name, t_exactMatch)

def _to_CurveExponentialDecay(self) -> OptionalCurveExponentialDecay:
    """Try to cast the ModelObject to a CurveExponentialDecay.

    :return: An Optional CurveExponentialDecay.
    """
    return toCurveExponentialDecay(self)
openstudioutilitiesidf.IdfObject.to_CurveExponentialDecay = _to_CurveExponentialDecay

def _getCurveExponentialDecay(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveExponentialDecay:
    """Try to get an object of type CurveExponentialDecay referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveExponentialDecay.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveExponentialDecay(self, t_handle)
Model.getCurveExponentialDecay = _getCurveExponentialDecay

def _getCurveExponentialDecays(self) -> CurveExponentialDecayVector:
    """Get a vector of all objects of type CurveExponentialDecay in the model.

    :return: A vector of CurveExponentialDecay.
    """
    return getCurveExponentialDecays(self)
Model.getCurveExponentialDecays = _getCurveExponentialDecays

def _getCurveExponentialDecayByName(self, t_name: str) -> OptionalCurveExponentialDecay:
    """Try to get an object of type CurveExponentialDecay that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveExponentialDecay.
    """
    return getCurveExponentialDecayByName(self, t_name)
Model.getCurveExponentialDecayByName = _getCurveExponentialDecayByName

def _getCurveExponentialDecaysByName(self, t_name: str, t_exactMatch: bool) -> CurveExponentialDecayVector:
    """Returns all objects of type CurveExponentialDecay named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveExponentialDecaysByName(self, t_name, t_exactMatch)
Model.getCurveExponentialDecaysByName = _getCurveExponentialDecaysByName

class CurveExponentialSkewNormal(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveExponentialSkewNormal

    def __init__(self, *args):
        _openstudiomodelresources.CurveExponentialSkewNormal_swiginit(self, _openstudiomodelresources.new_CurveExponentialSkewNormal(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveExponentialSkewNormal_iddObjectType()

    @staticmethod
    def validInputUnitTypeforxValues():
        return _openstudiomodelresources.CurveExponentialSkewNormal_validInputUnitTypeforxValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveExponentialSkewNormal_validOutputUnitTypeValues()

    def coefficient1C1(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_coefficient1C1(self)

    def coefficient2C2(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_coefficient2C2(self)

    def coefficient3C3(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_coefficient3C3(self)

    def coefficient4C4(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_coefficient4C4(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_maximumValueofx(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_maximumCurveOutput(self)

    def inputUnitTypeforx(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1):
        return _openstudiomodelresources.CurveExponentialSkewNormal_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2):
        return _openstudiomodelresources.CurveExponentialSkewNormal_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3):
        return _openstudiomodelresources.CurveExponentialSkewNormal_setCoefficient3C3(self, coefficient3C3)

    def setCoefficient4C4(self, coefficient4C4):
        return _openstudiomodelresources.CurveExponentialSkewNormal_setCoefficient4C4(self, coefficient4C4)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveExponentialSkewNormal_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveExponentialSkewNormal_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveExponentialSkewNormal_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveExponentialSkewNormal_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx):
        return _openstudiomodelresources.CurveExponentialSkewNormal_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveExponentialSkewNormal_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveExponentialSkewNormal_resetOutputUnitType(self)

# Register CurveExponentialSkewNormal in _openstudiomodelresources:
_openstudiomodelresources.CurveExponentialSkewNormal_swigregister(CurveExponentialSkewNormal)

def toCurveExponentialSkewNormal(idfObject):
    return _openstudiomodelresources.toCurveExponentialSkewNormal(idfObject)

def getCurveExponentialSkewNormal(t_model, t_handle):
    return _openstudiomodelresources.getCurveExponentialSkewNormal(t_model, t_handle)

def getCurveExponentialSkewNormals(t_model):
    return _openstudiomodelresources.getCurveExponentialSkewNormals(t_model)

def getCurveExponentialSkewNormalByName(t_model, t_name):
    return _openstudiomodelresources.getCurveExponentialSkewNormalByName(t_model, t_name)

def getCurveExponentialSkewNormalsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveExponentialSkewNormalsByName(t_model, t_name, t_exactMatch)

def _to_CurveExponentialSkewNormal(self) -> OptionalCurveExponentialSkewNormal:
    """Try to cast the ModelObject to a CurveExponentialSkewNormal.

    :return: An Optional CurveExponentialSkewNormal.
    """
    return toCurveExponentialSkewNormal(self)
openstudioutilitiesidf.IdfObject.to_CurveExponentialSkewNormal = _to_CurveExponentialSkewNormal

def _getCurveExponentialSkewNormal(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveExponentialSkewNormal:
    """Try to get an object of type CurveExponentialSkewNormal referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveExponentialSkewNormal.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveExponentialSkewNormal(self, t_handle)
Model.getCurveExponentialSkewNormal = _getCurveExponentialSkewNormal

def _getCurveExponentialSkewNormals(self) -> CurveExponentialSkewNormalVector:
    """Get a vector of all objects of type CurveExponentialSkewNormal in the model.

    :return: A vector of CurveExponentialSkewNormal.
    """
    return getCurveExponentialSkewNormals(self)
Model.getCurveExponentialSkewNormals = _getCurveExponentialSkewNormals

def _getCurveExponentialSkewNormalByName(self, t_name: str) -> OptionalCurveExponentialSkewNormal:
    """Try to get an object of type CurveExponentialSkewNormal that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveExponentialSkewNormal.
    """
    return getCurveExponentialSkewNormalByName(self, t_name)
Model.getCurveExponentialSkewNormalByName = _getCurveExponentialSkewNormalByName

def _getCurveExponentialSkewNormalsByName(self, t_name: str, t_exactMatch: bool) -> CurveExponentialSkewNormalVector:
    """Returns all objects of type CurveExponentialSkewNormal named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveExponentialSkewNormalsByName(self, t_name, t_exactMatch)
Model.getCurveExponentialSkewNormalsByName = _getCurveExponentialSkewNormalsByName

class CurveFanPressureRise(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveFanPressureRise

    def __init__(self, *args):
        _openstudiomodelresources.CurveFanPressureRise_swiginit(self, _openstudiomodelresources.new_CurveFanPressureRise(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveFanPressureRise_iddObjectType()

    def coefficient1C1(self):
        return _openstudiomodelresources.CurveFanPressureRise_coefficient1C1(self)

    def coefficient2C2(self):
        return _openstudiomodelresources.CurveFanPressureRise_coefficient2C2(self)

    def coefficient3C3(self):
        return _openstudiomodelresources.CurveFanPressureRise_coefficient3C3(self)

    def coefficient4C4(self):
        return _openstudiomodelresources.CurveFanPressureRise_coefficient4C4(self)

    def minimumValueofQfan(self):
        return _openstudiomodelresources.CurveFanPressureRise_minimumValueofQfan(self)

    def maximumValueofQfan(self):
        return _openstudiomodelresources.CurveFanPressureRise_maximumValueofQfan(self)

    def minimumValueofPsm(self):
        return _openstudiomodelresources.CurveFanPressureRise_minimumValueofPsm(self)

    def maximumValueofPsm(self):
        return _openstudiomodelresources.CurveFanPressureRise_maximumValueofPsm(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveFanPressureRise_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveFanPressureRise_maximumCurveOutput(self)

    def setCoefficient1C1(self, coefficient1C1):
        return _openstudiomodelresources.CurveFanPressureRise_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2):
        return _openstudiomodelresources.CurveFanPressureRise_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3):
        return _openstudiomodelresources.CurveFanPressureRise_setCoefficient3C3(self, coefficient3C3)

    def setCoefficient4C4(self, coefficient4C4):
        return _openstudiomodelresources.CurveFanPressureRise_setCoefficient4C4(self, coefficient4C4)

    def setMinimumValueofQfan(self, minimumValueofQfan):
        return _openstudiomodelresources.CurveFanPressureRise_setMinimumValueofQfan(self, minimumValueofQfan)

    def setMaximumValueofQfan(self, maximumValueofQfan):
        return _openstudiomodelresources.CurveFanPressureRise_setMaximumValueofQfan(self, maximumValueofQfan)

    def setMinimumValueofPsm(self, minimumValueofPsm):
        return _openstudiomodelresources.CurveFanPressureRise_setMinimumValueofPsm(self, minimumValueofPsm)

    def setMaximumValueofPsm(self, maximumValueofPsm):
        return _openstudiomodelresources.CurveFanPressureRise_setMaximumValueofPsm(self, maximumValueofPsm)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveFanPressureRise_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveFanPressureRise_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveFanPressureRise_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveFanPressureRise_resetMaximumCurveOutput(self)

# Register CurveFanPressureRise in _openstudiomodelresources:
_openstudiomodelresources.CurveFanPressureRise_swigregister(CurveFanPressureRise)

def toCurveFanPressureRise(idfObject):
    return _openstudiomodelresources.toCurveFanPressureRise(idfObject)

def getCurveFanPressureRise(t_model, t_handle):
    return _openstudiomodelresources.getCurveFanPressureRise(t_model, t_handle)

def getCurveFanPressureRises(t_model):
    return _openstudiomodelresources.getCurveFanPressureRises(t_model)

def getCurveFanPressureRiseByName(t_model, t_name):
    return _openstudiomodelresources.getCurveFanPressureRiseByName(t_model, t_name)

def getCurveFanPressureRisesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveFanPressureRisesByName(t_model, t_name, t_exactMatch)

def _to_CurveFanPressureRise(self) -> OptionalCurveFanPressureRise:
    """Try to cast the ModelObject to a CurveFanPressureRise.

    :return: An Optional CurveFanPressureRise.
    """
    return toCurveFanPressureRise(self)
openstudioutilitiesidf.IdfObject.to_CurveFanPressureRise = _to_CurveFanPressureRise

def _getCurveFanPressureRise(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveFanPressureRise:
    """Try to get an object of type CurveFanPressureRise referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveFanPressureRise.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveFanPressureRise(self, t_handle)
Model.getCurveFanPressureRise = _getCurveFanPressureRise

def _getCurveFanPressureRises(self) -> CurveFanPressureRiseVector:
    """Get a vector of all objects of type CurveFanPressureRise in the model.

    :return: A vector of CurveFanPressureRise.
    """
    return getCurveFanPressureRises(self)
Model.getCurveFanPressureRises = _getCurveFanPressureRises

def _getCurveFanPressureRiseByName(self, t_name: str) -> OptionalCurveFanPressureRise:
    """Try to get an object of type CurveFanPressureRise that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveFanPressureRise.
    """
    return getCurveFanPressureRiseByName(self, t_name)
Model.getCurveFanPressureRiseByName = _getCurveFanPressureRiseByName

def _getCurveFanPressureRisesByName(self, t_name: str, t_exactMatch: bool) -> CurveFanPressureRiseVector:
    """Returns all objects of type CurveFanPressureRise named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveFanPressureRisesByName(self, t_name, t_exactMatch)
Model.getCurveFanPressureRisesByName = _getCurveFanPressureRisesByName

class CurveFunctionalPressureDrop(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveFunctionalPressureDrop

    def __init__(self, *args):
        _openstudiomodelresources.CurveFunctionalPressureDrop_swiginit(self, _openstudiomodelresources.new_CurveFunctionalPressureDrop(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveFunctionalPressureDrop_iddObjectType()

    def diameter(self):
        return _openstudiomodelresources.CurveFunctionalPressureDrop_diameter(self)

    def minorLossCoefficient(self):
        return _openstudiomodelresources.CurveFunctionalPressureDrop_minorLossCoefficient(self)

    def length(self):
        return _openstudiomodelresources.CurveFunctionalPressureDrop_length(self)

    def roughness(self):
        return _openstudiomodelresources.CurveFunctionalPressureDrop_roughness(self)

    def fixedFrictionFactor(self):
        return _openstudiomodelresources.CurveFunctionalPressureDrop_fixedFrictionFactor(self)

    def setDiameter(self, diameter):
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setDiameter(self, diameter)

    def setMinorLossCoefficient(self, minorLossCoefficient):
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setMinorLossCoefficient(self, minorLossCoefficient)

    def resetMinorLossCoefficient(self):
        return _openstudiomodelresources.CurveFunctionalPressureDrop_resetMinorLossCoefficient(self)

    def setLength(self, length):
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setLength(self, length)

    def resetLength(self):
        return _openstudiomodelresources.CurveFunctionalPressureDrop_resetLength(self)

    def setRoughness(self, roughness):
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setRoughness(self, roughness)

    def resetRoughness(self):
        return _openstudiomodelresources.CurveFunctionalPressureDrop_resetRoughness(self)

    def setFixedFrictionFactor(self, fixedFrictionFactor):
        return _openstudiomodelresources.CurveFunctionalPressureDrop_setFixedFrictionFactor(self, fixedFrictionFactor)

    def resetFixedFrictionFactor(self):
        return _openstudiomodelresources.CurveFunctionalPressureDrop_resetFixedFrictionFactor(self)

# Register CurveFunctionalPressureDrop in _openstudiomodelresources:
_openstudiomodelresources.CurveFunctionalPressureDrop_swigregister(CurveFunctionalPressureDrop)

def toCurveFunctionalPressureDrop(idfObject):
    return _openstudiomodelresources.toCurveFunctionalPressureDrop(idfObject)

def getCurveFunctionalPressureDrop(t_model, t_handle):
    return _openstudiomodelresources.getCurveFunctionalPressureDrop(t_model, t_handle)

def getCurveFunctionalPressureDrops(t_model):
    return _openstudiomodelresources.getCurveFunctionalPressureDrops(t_model)

def getCurveFunctionalPressureDropByName(t_model, t_name):
    return _openstudiomodelresources.getCurveFunctionalPressureDropByName(t_model, t_name)

def getCurveFunctionalPressureDropsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveFunctionalPressureDropsByName(t_model, t_name, t_exactMatch)

def _to_CurveFunctionalPressureDrop(self) -> OptionalCurveFunctionalPressureDrop:
    """Try to cast the ModelObject to a CurveFunctionalPressureDrop.

    :return: An Optional CurveFunctionalPressureDrop.
    """
    return toCurveFunctionalPressureDrop(self)
openstudioutilitiesidf.IdfObject.to_CurveFunctionalPressureDrop = _to_CurveFunctionalPressureDrop

def _getCurveFunctionalPressureDrop(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveFunctionalPressureDrop:
    """Try to get an object of type CurveFunctionalPressureDrop referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveFunctionalPressureDrop.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveFunctionalPressureDrop(self, t_handle)
Model.getCurveFunctionalPressureDrop = _getCurveFunctionalPressureDrop

def _getCurveFunctionalPressureDrops(self) -> CurveFunctionalPressureDropVector:
    """Get a vector of all objects of type CurveFunctionalPressureDrop in the model.

    :return: A vector of CurveFunctionalPressureDrop.
    """
    return getCurveFunctionalPressureDrops(self)
Model.getCurveFunctionalPressureDrops = _getCurveFunctionalPressureDrops

def _getCurveFunctionalPressureDropByName(self, t_name: str) -> OptionalCurveFunctionalPressureDrop:
    """Try to get an object of type CurveFunctionalPressureDrop that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveFunctionalPressureDrop.
    """
    return getCurveFunctionalPressureDropByName(self, t_name)
Model.getCurveFunctionalPressureDropByName = _getCurveFunctionalPressureDropByName

def _getCurveFunctionalPressureDropsByName(self, t_name: str, t_exactMatch: bool) -> CurveFunctionalPressureDropVector:
    """Returns all objects of type CurveFunctionalPressureDrop named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveFunctionalPressureDropsByName(self, t_name, t_exactMatch)
Model.getCurveFunctionalPressureDropsByName = _getCurveFunctionalPressureDropsByName

class CurveLinear(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveLinear

    def __init__(self, *args):
        _openstudiomodelresources.CurveLinear_swiginit(self, _openstudiomodelresources.new_CurveLinear(*args))

    @staticmethod
    def defaultHeatPumpCoilPLFCorrelationCurve(model, maximumCyclingRatePerHour=2.5, heatPumpTimeConstantSeconds=60.0):
        return _openstudiomodelresources.CurveLinear_defaultHeatPumpCoilPLFCorrelationCurve(model, maximumCyclingRatePerHour, heatPumpTimeConstantSeconds)

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveLinear_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues():
        return _openstudiomodelresources.CurveLinear_validInputUnitTypeforXValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveLinear_validOutputUnitTypeValues()

    def coefficient1Constant(self):
        return _openstudiomodelresources.CurveLinear_coefficient1Constant(self)

    def coefficient2x(self):
        return _openstudiomodelresources.CurveLinear_coefficient2x(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveLinear_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveLinear_maximumValueofx(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveLinear_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveLinear_maximumCurveOutput(self)

    def inputUnitTypeforX(self):
        return _openstudiomodelresources.CurveLinear_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self):
        return _openstudiomodelresources.CurveLinear_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveLinear_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveLinear_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant):
        return _openstudiomodelresources.CurveLinear_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x):
        return _openstudiomodelresources.CurveLinear_setCoefficient2x(self, coefficient2x)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveLinear_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveLinear_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveLinear_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveLinear_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveLinear_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveLinear_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX):
        return _openstudiomodelresources.CurveLinear_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self):
        return _openstudiomodelresources.CurveLinear_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveLinear_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveLinear_resetOutputUnitType(self)

# Register CurveLinear in _openstudiomodelresources:
_openstudiomodelresources.CurveLinear_swigregister(CurveLinear)

def toCurveLinear(idfObject):
    return _openstudiomodelresources.toCurveLinear(idfObject)

def getCurveLinear(t_model, t_handle):
    return _openstudiomodelresources.getCurveLinear(t_model, t_handle)

def getCurveLinears(t_model):
    return _openstudiomodelresources.getCurveLinears(t_model)

def getCurveLinearByName(t_model, t_name):
    return _openstudiomodelresources.getCurveLinearByName(t_model, t_name)

def getCurveLinearsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveLinearsByName(t_model, t_name, t_exactMatch)

def _to_CurveLinear(self) -> OptionalCurveLinear:
    """Try to cast the ModelObject to a CurveLinear.

    :return: An Optional CurveLinear.
    """
    return toCurveLinear(self)
openstudioutilitiesidf.IdfObject.to_CurveLinear = _to_CurveLinear

def _getCurveLinear(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveLinear:
    """Try to get an object of type CurveLinear referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveLinear.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveLinear(self, t_handle)
Model.getCurveLinear = _getCurveLinear

def _getCurveLinears(self) -> CurveLinearVector:
    """Get a vector of all objects of type CurveLinear in the model.

    :return: A vector of CurveLinear.
    """
    return getCurveLinears(self)
Model.getCurveLinears = _getCurveLinears

def _getCurveLinearByName(self, t_name: str) -> OptionalCurveLinear:
    """Try to get an object of type CurveLinear that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveLinear.
    """
    return getCurveLinearByName(self, t_name)
Model.getCurveLinearByName = _getCurveLinearByName

def _getCurveLinearsByName(self, t_name: str, t_exactMatch: bool) -> CurveLinearVector:
    """Returns all objects of type CurveLinear named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveLinearsByName(self, t_name, t_exactMatch)
Model.getCurveLinearsByName = _getCurveLinearsByName

class CurveQuadLinear(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuadLinear

    def __init__(self, *args):
        _openstudiomodelresources.CurveQuadLinear_swiginit(self, _openstudiomodelresources.new_CurveQuadLinear(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveQuadLinear_iddObjectType()

    @staticmethod
    def inputUnitTypeforwValues():
        return _openstudiomodelresources.CurveQuadLinear_inputUnitTypeforwValues()

    @staticmethod
    def inputUnitTypeforxValues():
        return _openstudiomodelresources.CurveQuadLinear_inputUnitTypeforxValues()

    @staticmethod
    def inputUnitTypeforyValues():
        return _openstudiomodelresources.CurveQuadLinear_inputUnitTypeforyValues()

    @staticmethod
    def inputUnitTypeforzValues():
        return _openstudiomodelresources.CurveQuadLinear_inputUnitTypeforzValues()

    def coefficient1Constant(self):
        return _openstudiomodelresources.CurveQuadLinear_coefficient1Constant(self)

    def coefficient2w(self):
        return _openstudiomodelresources.CurveQuadLinear_coefficient2w(self)

    def coefficient3x(self):
        return _openstudiomodelresources.CurveQuadLinear_coefficient3x(self)

    def coefficient4y(self):
        return _openstudiomodelresources.CurveQuadLinear_coefficient4y(self)

    def coefficient5z(self):
        return _openstudiomodelresources.CurveQuadLinear_coefficient5z(self)

    def minimumValueofw(self):
        return _openstudiomodelresources.CurveQuadLinear_minimumValueofw(self)

    def maximumValueofw(self):
        return _openstudiomodelresources.CurveQuadLinear_maximumValueofw(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveQuadLinear_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveQuadLinear_maximumValueofx(self)

    def minimumValueofy(self):
        return _openstudiomodelresources.CurveQuadLinear_minimumValueofy(self)

    def maximumValueofy(self):
        return _openstudiomodelresources.CurveQuadLinear_maximumValueofy(self)

    def minimumValueofz(self):
        return _openstudiomodelresources.CurveQuadLinear_minimumValueofz(self)

    def maximumValueofz(self):
        return _openstudiomodelresources.CurveQuadLinear_maximumValueofz(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveQuadLinear_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveQuadLinear_maximumCurveOutput(self)

    def inputUnitTypeforw(self):
        return _openstudiomodelresources.CurveQuadLinear_inputUnitTypeforw(self)

    def isInputUnitTypeforwDefaulted(self):
        return _openstudiomodelresources.CurveQuadLinear_isInputUnitTypeforwDefaulted(self)

    def inputUnitTypeforx(self):
        return _openstudiomodelresources.CurveQuadLinear_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self):
        return _openstudiomodelresources.CurveQuadLinear_isInputUnitTypeforxDefaulted(self)

    def inputUnitTypefory(self):
        return _openstudiomodelresources.CurveQuadLinear_inputUnitTypefory(self)

    def isInputUnitTypeforyDefaulted(self):
        return _openstudiomodelresources.CurveQuadLinear_isInputUnitTypeforyDefaulted(self)

    def inputUnitTypeforz(self):
        return _openstudiomodelresources.CurveQuadLinear_inputUnitTypeforz(self)

    def isInputUnitTypeforzDefaulted(self):
        return _openstudiomodelresources.CurveQuadLinear_isInputUnitTypeforzDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant):
        return _openstudiomodelresources.CurveQuadLinear_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2w(self, coefficient2w):
        return _openstudiomodelresources.CurveQuadLinear_setCoefficient2w(self, coefficient2w)

    def setCoefficient3x(self, coefficient3x):
        return _openstudiomodelresources.CurveQuadLinear_setCoefficient3x(self, coefficient3x)

    def setCoefficient4y(self, coefficient4y):
        return _openstudiomodelresources.CurveQuadLinear_setCoefficient4y(self, coefficient4y)

    def setCoefficient5z(self, coefficient5z):
        return _openstudiomodelresources.CurveQuadLinear_setCoefficient5z(self, coefficient5z)

    def setMinimumValueofw(self, minimumValueofw):
        return _openstudiomodelresources.CurveQuadLinear_setMinimumValueofw(self, minimumValueofw)

    def setMaximumValueofw(self, maximumValueofw):
        return _openstudiomodelresources.CurveQuadLinear_setMaximumValueofw(self, maximumValueofw)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveQuadLinear_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveQuadLinear_setMaximumValueofx(self, maximumValueofx)

    def setMinimumValueofy(self, minimumValueofy):
        return _openstudiomodelresources.CurveQuadLinear_setMinimumValueofy(self, minimumValueofy)

    def setMaximumValueofy(self, maximumValueofy):
        return _openstudiomodelresources.CurveQuadLinear_setMaximumValueofy(self, maximumValueofy)

    def setMinimumValueofz(self, minimumValueofz):
        return _openstudiomodelresources.CurveQuadLinear_setMinimumValueofz(self, minimumValueofz)

    def setMaximumValueofz(self, maximumValueofz):
        return _openstudiomodelresources.CurveQuadLinear_setMaximumValueofz(self, maximumValueofz)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveQuadLinear_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveQuadLinear_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveQuadLinear_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveQuadLinear_resetMaximumCurveOutput(self)

    def setInputUnitTypeforw(self, inputUnitTypeforw):
        return _openstudiomodelresources.CurveQuadLinear_setInputUnitTypeforw(self, inputUnitTypeforw)

    def resetInputUnitTypeforw(self):
        return _openstudiomodelresources.CurveQuadLinear_resetInputUnitTypeforw(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx):
        return _openstudiomodelresources.CurveQuadLinear_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self):
        return _openstudiomodelresources.CurveQuadLinear_resetInputUnitTypeforx(self)

    def setInputUnitTypefory(self, inputUnitTypefory):
        return _openstudiomodelresources.CurveQuadLinear_setInputUnitTypefory(self, inputUnitTypefory)

    def resetInputUnitTypefory(self):
        return _openstudiomodelresources.CurveQuadLinear_resetInputUnitTypefory(self)

    def setInputUnitTypeforz(self, inputUnitTypeforz):
        return _openstudiomodelresources.CurveQuadLinear_setInputUnitTypeforz(self, inputUnitTypeforz)

    def resetInputUnitTypeforz(self):
        return _openstudiomodelresources.CurveQuadLinear_resetInputUnitTypeforz(self)

# Register CurveQuadLinear in _openstudiomodelresources:
_openstudiomodelresources.CurveQuadLinear_swigregister(CurveQuadLinear)

def toCurveQuadLinear(idfObject):
    return _openstudiomodelresources.toCurveQuadLinear(idfObject)

def getCurveQuadLinear(t_model, t_handle):
    return _openstudiomodelresources.getCurveQuadLinear(t_model, t_handle)

def getCurveQuadLinears(t_model):
    return _openstudiomodelresources.getCurveQuadLinears(t_model)

def getCurveQuadLinearByName(t_model, t_name):
    return _openstudiomodelresources.getCurveQuadLinearByName(t_model, t_name)

def getCurveQuadLinearsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveQuadLinearsByName(t_model, t_name, t_exactMatch)

def _to_CurveQuadLinear(self) -> OptionalCurveQuadLinear:
    """Try to cast the ModelObject to a CurveQuadLinear.

    :return: An Optional CurveQuadLinear.
    """
    return toCurveQuadLinear(self)
openstudioutilitiesidf.IdfObject.to_CurveQuadLinear = _to_CurveQuadLinear

def _getCurveQuadLinear(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveQuadLinear:
    """Try to get an object of type CurveQuadLinear referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveQuadLinear.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveQuadLinear(self, t_handle)
Model.getCurveQuadLinear = _getCurveQuadLinear

def _getCurveQuadLinears(self) -> CurveQuadLinearVector:
    """Get a vector of all objects of type CurveQuadLinear in the model.

    :return: A vector of CurveQuadLinear.
    """
    return getCurveQuadLinears(self)
Model.getCurveQuadLinears = _getCurveQuadLinears

def _getCurveQuadLinearByName(self, t_name: str) -> OptionalCurveQuadLinear:
    """Try to get an object of type CurveQuadLinear that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveQuadLinear.
    """
    return getCurveQuadLinearByName(self, t_name)
Model.getCurveQuadLinearByName = _getCurveQuadLinearByName

def _getCurveQuadLinearsByName(self, t_name: str, t_exactMatch: bool) -> CurveQuadLinearVector:
    """Returns all objects of type CurveQuadLinear named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveQuadLinearsByName(self, t_name, t_exactMatch)
Model.getCurveQuadLinearsByName = _getCurveQuadLinearsByName

class CurveQuintLinear(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuintLinear

    def __init__(self, *args):
        _openstudiomodelresources.CurveQuintLinear_swiginit(self, _openstudiomodelresources.new_CurveQuintLinear(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveQuintLinear_iddObjectType()

    @staticmethod
    def inputUnitTypeforvValues():
        return _openstudiomodelresources.CurveQuintLinear_inputUnitTypeforvValues()

    @staticmethod
    def inputUnitTypeforwValues():
        return _openstudiomodelresources.CurveQuintLinear_inputUnitTypeforwValues()

    @staticmethod
    def inputUnitTypeforxValues():
        return _openstudiomodelresources.CurveQuintLinear_inputUnitTypeforxValues()

    @staticmethod
    def inputUnitTypeforyValues():
        return _openstudiomodelresources.CurveQuintLinear_inputUnitTypeforyValues()

    @staticmethod
    def inputUnitTypeforzValues():
        return _openstudiomodelresources.CurveQuintLinear_inputUnitTypeforzValues()

    def coefficient1Constant(self):
        return _openstudiomodelresources.CurveQuintLinear_coefficient1Constant(self)

    def coefficient2v(self):
        return _openstudiomodelresources.CurveQuintLinear_coefficient2v(self)

    def coefficient3w(self):
        return _openstudiomodelresources.CurveQuintLinear_coefficient3w(self)

    def coefficient4x(self):
        return _openstudiomodelresources.CurveQuintLinear_coefficient4x(self)

    def coefficient5y(self):
        return _openstudiomodelresources.CurveQuintLinear_coefficient5y(self)

    def coefficient6z(self):
        return _openstudiomodelresources.CurveQuintLinear_coefficient6z(self)

    def minimumValueofv(self):
        return _openstudiomodelresources.CurveQuintLinear_minimumValueofv(self)

    def maximumValueofv(self):
        return _openstudiomodelresources.CurveQuintLinear_maximumValueofv(self)

    def minimumValueofw(self):
        return _openstudiomodelresources.CurveQuintLinear_minimumValueofw(self)

    def maximumValueofw(self):
        return _openstudiomodelresources.CurveQuintLinear_maximumValueofw(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveQuintLinear_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveQuintLinear_maximumValueofx(self)

    def minimumValueofy(self):
        return _openstudiomodelresources.CurveQuintLinear_minimumValueofy(self)

    def maximumValueofy(self):
        return _openstudiomodelresources.CurveQuintLinear_maximumValueofy(self)

    def minimumValueofz(self):
        return _openstudiomodelresources.CurveQuintLinear_minimumValueofz(self)

    def maximumValueofz(self):
        return _openstudiomodelresources.CurveQuintLinear_maximumValueofz(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveQuintLinear_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveQuintLinear_maximumCurveOutput(self)

    def inputUnitTypeforv(self):
        return _openstudiomodelresources.CurveQuintLinear_inputUnitTypeforv(self)

    def isInputUnitTypeforvDefaulted(self):
        return _openstudiomodelresources.CurveQuintLinear_isInputUnitTypeforvDefaulted(self)

    def inputUnitTypeforw(self):
        return _openstudiomodelresources.CurveQuintLinear_inputUnitTypeforw(self)

    def isInputUnitTypeforwDefaulted(self):
        return _openstudiomodelresources.CurveQuintLinear_isInputUnitTypeforwDefaulted(self)

    def inputUnitTypeforx(self):
        return _openstudiomodelresources.CurveQuintLinear_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self):
        return _openstudiomodelresources.CurveQuintLinear_isInputUnitTypeforxDefaulted(self)

    def inputUnitTypefory(self):
        return _openstudiomodelresources.CurveQuintLinear_inputUnitTypefory(self)

    def isInputUnitTypeforyDefaulted(self):
        return _openstudiomodelresources.CurveQuintLinear_isInputUnitTypeforyDefaulted(self)

    def inputUnitTypeforz(self):
        return _openstudiomodelresources.CurveQuintLinear_inputUnitTypeforz(self)

    def isInputUnitTypeforzDefaulted(self):
        return _openstudiomodelresources.CurveQuintLinear_isInputUnitTypeforzDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant):
        return _openstudiomodelresources.CurveQuintLinear_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2v(self, coefficient2v):
        return _openstudiomodelresources.CurveQuintLinear_setCoefficient2v(self, coefficient2v)

    def setCoefficient3w(self, coefficient3w):
        return _openstudiomodelresources.CurveQuintLinear_setCoefficient3w(self, coefficient3w)

    def setCoefficient4x(self, coefficient4x):
        return _openstudiomodelresources.CurveQuintLinear_setCoefficient4x(self, coefficient4x)

    def setCoefficient5y(self, coefficient5y):
        return _openstudiomodelresources.CurveQuintLinear_setCoefficient5y(self, coefficient5y)

    def setCoefficient6z(self, coefficient6z):
        return _openstudiomodelresources.CurveQuintLinear_setCoefficient6z(self, coefficient6z)

    def setMinimumValueofv(self, minimumValueofv):
        return _openstudiomodelresources.CurveQuintLinear_setMinimumValueofv(self, minimumValueofv)

    def setMaximumValueofv(self, maximumValueofv):
        return _openstudiomodelresources.CurveQuintLinear_setMaximumValueofv(self, maximumValueofv)

    def setMinimumValueofw(self, minimumValueofw):
        return _openstudiomodelresources.CurveQuintLinear_setMinimumValueofw(self, minimumValueofw)

    def setMaximumValueofw(self, maximumValueofw):
        return _openstudiomodelresources.CurveQuintLinear_setMaximumValueofw(self, maximumValueofw)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveQuintLinear_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveQuintLinear_setMaximumValueofx(self, maximumValueofx)

    def setMinimumValueofy(self, minimumValueofy):
        return _openstudiomodelresources.CurveQuintLinear_setMinimumValueofy(self, minimumValueofy)

    def setMaximumValueofy(self, maximumValueofy):
        return _openstudiomodelresources.CurveQuintLinear_setMaximumValueofy(self, maximumValueofy)

    def setMinimumValueofz(self, minimumValueofz):
        return _openstudiomodelresources.CurveQuintLinear_setMinimumValueofz(self, minimumValueofz)

    def setMaximumValueofz(self, maximumValueofz):
        return _openstudiomodelresources.CurveQuintLinear_setMaximumValueofz(self, maximumValueofz)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveQuintLinear_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveQuintLinear_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveQuintLinear_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveQuintLinear_resetMaximumCurveOutput(self)

    def setInputUnitTypeforv(self, inputUnitTypeforv):
        return _openstudiomodelresources.CurveQuintLinear_setInputUnitTypeforv(self, inputUnitTypeforv)

    def resetInputUnitTypeforv(self):
        return _openstudiomodelresources.CurveQuintLinear_resetInputUnitTypeforv(self)

    def setInputUnitTypeforw(self, inputUnitTypeforw):
        return _openstudiomodelresources.CurveQuintLinear_setInputUnitTypeforw(self, inputUnitTypeforw)

    def resetInputUnitTypeforw(self):
        return _openstudiomodelresources.CurveQuintLinear_resetInputUnitTypeforw(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx):
        return _openstudiomodelresources.CurveQuintLinear_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self):
        return _openstudiomodelresources.CurveQuintLinear_resetInputUnitTypeforx(self)

    def setInputUnitTypefory(self, inputUnitTypefory):
        return _openstudiomodelresources.CurveQuintLinear_setInputUnitTypefory(self, inputUnitTypefory)

    def resetInputUnitTypefory(self):
        return _openstudiomodelresources.CurveQuintLinear_resetInputUnitTypefory(self)

    def setInputUnitTypeforz(self, inputUnitTypeforz):
        return _openstudiomodelresources.CurveQuintLinear_setInputUnitTypeforz(self, inputUnitTypeforz)

    def resetInputUnitTypeforz(self):
        return _openstudiomodelresources.CurveQuintLinear_resetInputUnitTypeforz(self)

# Register CurveQuintLinear in _openstudiomodelresources:
_openstudiomodelresources.CurveQuintLinear_swigregister(CurveQuintLinear)

def toCurveQuintLinear(idfObject):
    return _openstudiomodelresources.toCurveQuintLinear(idfObject)

def getCurveQuintLinear(t_model, t_handle):
    return _openstudiomodelresources.getCurveQuintLinear(t_model, t_handle)

def getCurveQuintLinears(t_model):
    return _openstudiomodelresources.getCurveQuintLinears(t_model)

def getCurveQuintLinearByName(t_model, t_name):
    return _openstudiomodelresources.getCurveQuintLinearByName(t_model, t_name)

def getCurveQuintLinearsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveQuintLinearsByName(t_model, t_name, t_exactMatch)

def _to_CurveQuintLinear(self) -> OptionalCurveQuintLinear:
    """Try to cast the ModelObject to a CurveQuintLinear.

    :return: An Optional CurveQuintLinear.
    """
    return toCurveQuintLinear(self)
openstudioutilitiesidf.IdfObject.to_CurveQuintLinear = _to_CurveQuintLinear

def _getCurveQuintLinear(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveQuintLinear:
    """Try to get an object of type CurveQuintLinear referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveQuintLinear.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveQuintLinear(self, t_handle)
Model.getCurveQuintLinear = _getCurveQuintLinear

def _getCurveQuintLinears(self) -> CurveQuintLinearVector:
    """Get a vector of all objects of type CurveQuintLinear in the model.

    :return: A vector of CurveQuintLinear.
    """
    return getCurveQuintLinears(self)
Model.getCurveQuintLinears = _getCurveQuintLinears

def _getCurveQuintLinearByName(self, t_name: str) -> OptionalCurveQuintLinear:
    """Try to get an object of type CurveQuintLinear that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveQuintLinear.
    """
    return getCurveQuintLinearByName(self, t_name)
Model.getCurveQuintLinearByName = _getCurveQuintLinearByName

def _getCurveQuintLinearsByName(self, t_name: str, t_exactMatch: bool) -> CurveQuintLinearVector:
    """Returns all objects of type CurveQuintLinear named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveQuintLinearsByName(self, t_name, t_exactMatch)
Model.getCurveQuintLinearsByName = _getCurveQuintLinearsByName

class CurveQuadratic(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuadratic

    def __init__(self, *args):
        _openstudiomodelresources.CurveQuadratic_swiginit(self, _openstudiomodelresources.new_CurveQuadratic(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveQuadratic_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues():
        return _openstudiomodelresources.CurveQuadratic_validInputUnitTypeforXValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveQuadratic_validOutputUnitTypeValues()

    def coefficient1Constant(self):
        return _openstudiomodelresources.CurveQuadratic_coefficient1Constant(self)

    def coefficient2x(self):
        return _openstudiomodelresources.CurveQuadratic_coefficient2x(self)

    def coefficient3xPOW2(self):
        return _openstudiomodelresources.CurveQuadratic_coefficient3xPOW2(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveQuadratic_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveQuadratic_maximumValueofx(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveQuadratic_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveQuadratic_maximumCurveOutput(self)

    def inputUnitTypeforX(self):
        return _openstudiomodelresources.CurveQuadratic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self):
        return _openstudiomodelresources.CurveQuadratic_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveQuadratic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveQuadratic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant):
        return _openstudiomodelresources.CurveQuadratic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x):
        return _openstudiomodelresources.CurveQuadratic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2):
        return _openstudiomodelresources.CurveQuadratic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveQuadratic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveQuadratic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveQuadratic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveQuadratic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveQuadratic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveQuadratic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX):
        return _openstudiomodelresources.CurveQuadratic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self):
        return _openstudiomodelresources.CurveQuadratic_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveQuadratic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveQuadratic_resetOutputUnitType(self)

# Register CurveQuadratic in _openstudiomodelresources:
_openstudiomodelresources.CurveQuadratic_swigregister(CurveQuadratic)

def toCurveQuadratic(idfObject):
    return _openstudiomodelresources.toCurveQuadratic(idfObject)

def getCurveQuadratic(t_model, t_handle):
    return _openstudiomodelresources.getCurveQuadratic(t_model, t_handle)

def getCurveQuadratics(t_model):
    return _openstudiomodelresources.getCurveQuadratics(t_model)

def getCurveQuadraticByName(t_model, t_name):
    return _openstudiomodelresources.getCurveQuadraticByName(t_model, t_name)

def getCurveQuadraticsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveQuadraticsByName(t_model, t_name, t_exactMatch)

def _to_CurveQuadratic(self) -> OptionalCurveQuadratic:
    """Try to cast the ModelObject to a CurveQuadratic.

    :return: An Optional CurveQuadratic.
    """
    return toCurveQuadratic(self)
openstudioutilitiesidf.IdfObject.to_CurveQuadratic = _to_CurveQuadratic

def _getCurveQuadratic(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveQuadratic:
    """Try to get an object of type CurveQuadratic referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveQuadratic.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveQuadratic(self, t_handle)
Model.getCurveQuadratic = _getCurveQuadratic

def _getCurveQuadratics(self) -> CurveQuadraticVector:
    """Get a vector of all objects of type CurveQuadratic in the model.

    :return: A vector of CurveQuadratic.
    """
    return getCurveQuadratics(self)
Model.getCurveQuadratics = _getCurveQuadratics

def _getCurveQuadraticByName(self, t_name: str) -> OptionalCurveQuadratic:
    """Try to get an object of type CurveQuadratic that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveQuadratic.
    """
    return getCurveQuadraticByName(self, t_name)
Model.getCurveQuadraticByName = _getCurveQuadraticByName

def _getCurveQuadraticsByName(self, t_name: str, t_exactMatch: bool) -> CurveQuadraticVector:
    """Returns all objects of type CurveQuadratic named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveQuadraticsByName(self, t_name, t_exactMatch)
Model.getCurveQuadraticsByName = _getCurveQuadraticsByName

class CurveQuadraticLinear(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuadraticLinear

    def __init__(self, *args):
        _openstudiomodelresources.CurveQuadraticLinear_swiginit(self, _openstudiomodelresources.new_CurveQuadraticLinear(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveQuadraticLinear_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues():
        return _openstudiomodelresources.CurveQuadraticLinear_validInputUnitTypeforXValues()

    @staticmethod
    def validInputUnitTypeforYValues():
        return _openstudiomodelresources.CurveQuadraticLinear_validInputUnitTypeforYValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveQuadraticLinear_validOutputUnitTypeValues()

    def coefficient1Constant(self):
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient1Constant(self)

    def coefficient2x(self):
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient2x(self)

    def coefficient3xPOW2(self):
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient3xPOW2(self)

    def coefficient4y(self):
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient4y(self)

    def coefficient5xTIMESY(self):
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient5xTIMESY(self)

    def coefficient6xPOW2TIMESY(self):
        return _openstudiomodelresources.CurveQuadraticLinear_coefficient6xPOW2TIMESY(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveQuadraticLinear_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveQuadraticLinear_maximumValueofx(self)

    def minimumValueofy(self):
        return _openstudiomodelresources.CurveQuadraticLinear_minimumValueofy(self)

    def maximumValueofy(self):
        return _openstudiomodelresources.CurveQuadraticLinear_maximumValueofy(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveQuadraticLinear_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveQuadraticLinear_maximumCurveOutput(self)

    def inputUnitTypeforX(self):
        return _openstudiomodelresources.CurveQuadraticLinear_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self):
        return _openstudiomodelresources.CurveQuadraticLinear_isInputUnitTypeforXDefaulted(self)

    def inputUnitTypeforY(self):
        return _openstudiomodelresources.CurveQuadraticLinear_inputUnitTypeforY(self)

    def isInputUnitTypeforYDefaulted(self):
        return _openstudiomodelresources.CurveQuadraticLinear_isInputUnitTypeforYDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveQuadraticLinear_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveQuadraticLinear_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant):
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x):
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2):
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4y(self, coefficient4y):
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient4y(self, coefficient4y)

    def setCoefficient5xTIMESY(self, coefficient5xTIMESY):
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient5xTIMESY(self, coefficient5xTIMESY)

    def setCoefficient6xPOW2TIMESY(self, coefficient6xPOW2TIMESY):
        return _openstudiomodelresources.CurveQuadraticLinear_setCoefficient6xPOW2TIMESY(self, coefficient6xPOW2TIMESY)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveQuadraticLinear_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveQuadraticLinear_setMaximumValueofx(self, maximumValueofx)

    def setMinimumValueofy(self, minimumValueofy):
        return _openstudiomodelresources.CurveQuadraticLinear_setMinimumValueofy(self, minimumValueofy)

    def setMaximumValueofy(self, maximumValueofy):
        return _openstudiomodelresources.CurveQuadraticLinear_setMaximumValueofy(self, maximumValueofy)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveQuadraticLinear_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveQuadraticLinear_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveQuadraticLinear_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveQuadraticLinear_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX):
        return _openstudiomodelresources.CurveQuadraticLinear_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self):
        return _openstudiomodelresources.CurveQuadraticLinear_resetInputUnitTypeforX(self)

    def setInputUnitTypeforY(self, inputUnitTypeforY):
        return _openstudiomodelresources.CurveQuadraticLinear_setInputUnitTypeforY(self, inputUnitTypeforY)

    def resetInputUnitTypeforY(self):
        return _openstudiomodelresources.CurveQuadraticLinear_resetInputUnitTypeforY(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveQuadraticLinear_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveQuadraticLinear_resetOutputUnitType(self)

# Register CurveQuadraticLinear in _openstudiomodelresources:
_openstudiomodelresources.CurveQuadraticLinear_swigregister(CurveQuadraticLinear)

def toCurveQuadraticLinear(idfObject):
    return _openstudiomodelresources.toCurveQuadraticLinear(idfObject)

def getCurveQuadraticLinear(t_model, t_handle):
    return _openstudiomodelresources.getCurveQuadraticLinear(t_model, t_handle)

def getCurveQuadraticLinears(t_model):
    return _openstudiomodelresources.getCurveQuadraticLinears(t_model)

def getCurveQuadraticLinearByName(t_model, t_name):
    return _openstudiomodelresources.getCurveQuadraticLinearByName(t_model, t_name)

def getCurveQuadraticLinearsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveQuadraticLinearsByName(t_model, t_name, t_exactMatch)

def _to_CurveQuadraticLinear(self) -> OptionalCurveQuadraticLinear:
    """Try to cast the ModelObject to a CurveQuadraticLinear.

    :return: An Optional CurveQuadraticLinear.
    """
    return toCurveQuadraticLinear(self)
openstudioutilitiesidf.IdfObject.to_CurveQuadraticLinear = _to_CurveQuadraticLinear

def _getCurveQuadraticLinear(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveQuadraticLinear:
    """Try to get an object of type CurveQuadraticLinear referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveQuadraticLinear.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveQuadraticLinear(self, t_handle)
Model.getCurveQuadraticLinear = _getCurveQuadraticLinear

def _getCurveQuadraticLinears(self) -> CurveQuadraticLinearVector:
    """Get a vector of all objects of type CurveQuadraticLinear in the model.

    :return: A vector of CurveQuadraticLinear.
    """
    return getCurveQuadraticLinears(self)
Model.getCurveQuadraticLinears = _getCurveQuadraticLinears

def _getCurveQuadraticLinearByName(self, t_name: str) -> OptionalCurveQuadraticLinear:
    """Try to get an object of type CurveQuadraticLinear that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveQuadraticLinear.
    """
    return getCurveQuadraticLinearByName(self, t_name)
Model.getCurveQuadraticLinearByName = _getCurveQuadraticLinearByName

def _getCurveQuadraticLinearsByName(self, t_name: str, t_exactMatch: bool) -> CurveQuadraticLinearVector:
    """Returns all objects of type CurveQuadraticLinear named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveQuadraticLinearsByName(self, t_name, t_exactMatch)
Model.getCurveQuadraticLinearsByName = _getCurveQuadraticLinearsByName

class CurveQuartic(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveQuartic

    def __init__(self, *args):
        _openstudiomodelresources.CurveQuartic_swiginit(self, _openstudiomodelresources.new_CurveQuartic(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveQuartic_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues():
        return _openstudiomodelresources.CurveQuartic_validInputUnitTypeforXValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveQuartic_validOutputUnitTypeValues()

    def coefficient1Constant(self):
        return _openstudiomodelresources.CurveQuartic_coefficient1Constant(self)

    def coefficient2x(self):
        return _openstudiomodelresources.CurveQuartic_coefficient2x(self)

    def coefficient3xPOW2(self):
        return _openstudiomodelresources.CurveQuartic_coefficient3xPOW2(self)

    def coefficient4xPOW3(self):
        return _openstudiomodelresources.CurveQuartic_coefficient4xPOW3(self)

    def coefficient5xPOW4(self):
        return _openstudiomodelresources.CurveQuartic_coefficient5xPOW4(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveQuartic_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveQuartic_maximumValueofx(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveQuartic_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveQuartic_maximumCurveOutput(self)

    def inputUnitTypeforX(self):
        return _openstudiomodelresources.CurveQuartic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self):
        return _openstudiomodelresources.CurveQuartic_isInputUnitTypeforXDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveQuartic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveQuartic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant):
        return _openstudiomodelresources.CurveQuartic_setCoefficient1Constant(self, coefficient1Constant)

    def setCoefficient2x(self, coefficient2x):
        return _openstudiomodelresources.CurveQuartic_setCoefficient2x(self, coefficient2x)

    def setCoefficient3xPOW2(self, coefficient3xPOW2):
        return _openstudiomodelresources.CurveQuartic_setCoefficient3xPOW2(self, coefficient3xPOW2)

    def setCoefficient4xPOW3(self, coefficient4xPOW3):
        return _openstudiomodelresources.CurveQuartic_setCoefficient4xPOW3(self, coefficient4xPOW3)

    def setCoefficient5xPOW4(self, coefficient5xPOW4):
        return _openstudiomodelresources.CurveQuartic_setCoefficient5xPOW4(self, coefficient5xPOW4)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveQuartic_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveQuartic_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveQuartic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveQuartic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveQuartic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveQuartic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX):
        return _openstudiomodelresources.CurveQuartic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self):
        return _openstudiomodelresources.CurveQuartic_resetInputUnitTypeforX(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveQuartic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveQuartic_resetOutputUnitType(self)

# Register CurveQuartic in _openstudiomodelresources:
_openstudiomodelresources.CurveQuartic_swigregister(CurveQuartic)

def toCurveQuartic(idfObject):
    return _openstudiomodelresources.toCurveQuartic(idfObject)

def getCurveQuartic(t_model, t_handle):
    return _openstudiomodelresources.getCurveQuartic(t_model, t_handle)

def getCurveQuartics(t_model):
    return _openstudiomodelresources.getCurveQuartics(t_model)

def getCurveQuarticByName(t_model, t_name):
    return _openstudiomodelresources.getCurveQuarticByName(t_model, t_name)

def getCurveQuarticsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveQuarticsByName(t_model, t_name, t_exactMatch)

def _to_CurveQuartic(self) -> OptionalCurveQuartic:
    """Try to cast the ModelObject to a CurveQuartic.

    :return: An Optional CurveQuartic.
    """
    return toCurveQuartic(self)
openstudioutilitiesidf.IdfObject.to_CurveQuartic = _to_CurveQuartic

def _getCurveQuartic(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveQuartic:
    """Try to get an object of type CurveQuartic referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveQuartic.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveQuartic(self, t_handle)
Model.getCurveQuartic = _getCurveQuartic

def _getCurveQuartics(self) -> CurveQuarticVector:
    """Get a vector of all objects of type CurveQuartic in the model.

    :return: A vector of CurveQuartic.
    """
    return getCurveQuartics(self)
Model.getCurveQuartics = _getCurveQuartics

def _getCurveQuarticByName(self, t_name: str) -> OptionalCurveQuartic:
    """Try to get an object of type CurveQuartic that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveQuartic.
    """
    return getCurveQuarticByName(self, t_name)
Model.getCurveQuarticByName = _getCurveQuarticByName

def _getCurveQuarticsByName(self, t_name: str, t_exactMatch: bool) -> CurveQuarticVector:
    """Returns all objects of type CurveQuartic named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveQuarticsByName(self, t_name, t_exactMatch)
Model.getCurveQuarticsByName = _getCurveQuarticsByName

class CurveRectangularHyperbola1(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveRectangularHyperbola1

    def __init__(self, *args):
        _openstudiomodelresources.CurveRectangularHyperbola1_swiginit(self, _openstudiomodelresources.new_CurveRectangularHyperbola1(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveRectangularHyperbola1_iddObjectType()

    @staticmethod
    def validInputUnitTypeforxValues():
        return _openstudiomodelresources.CurveRectangularHyperbola1_validInputUnitTypeforxValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveRectangularHyperbola1_validOutputUnitTypeValues()

    def coefficient1C1(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_coefficient1C1(self)

    def coefficient2C2(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_coefficient2C2(self)

    def coefficient3C3(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_coefficient3C3(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_maximumValueofx(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_maximumCurveOutput(self)

    def inputUnitTypeforx(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1):
        return _openstudiomodelresources.CurveRectangularHyperbola1_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2):
        return _openstudiomodelresources.CurveRectangularHyperbola1_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3):
        return _openstudiomodelresources.CurveRectangularHyperbola1_setCoefficient3C3(self, coefficient3C3)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveRectangularHyperbola1_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveRectangularHyperbola1_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveRectangularHyperbola1_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveRectangularHyperbola1_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx):
        return _openstudiomodelresources.CurveRectangularHyperbola1_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveRectangularHyperbola1_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveRectangularHyperbola1_resetOutputUnitType(self)

# Register CurveRectangularHyperbola1 in _openstudiomodelresources:
_openstudiomodelresources.CurveRectangularHyperbola1_swigregister(CurveRectangularHyperbola1)

def toCurveRectangularHyperbola1(idfObject):
    return _openstudiomodelresources.toCurveRectangularHyperbola1(idfObject)

def getCurveRectangularHyperbola1(t_model, t_handle):
    return _openstudiomodelresources.getCurveRectangularHyperbola1(t_model, t_handle)

def getCurveRectangularHyperbola1s(t_model):
    return _openstudiomodelresources.getCurveRectangularHyperbola1s(t_model)

def getCurveRectangularHyperbola1ByName(t_model, t_name):
    return _openstudiomodelresources.getCurveRectangularHyperbola1ByName(t_model, t_name)

def getCurveRectangularHyperbola1sByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveRectangularHyperbola1sByName(t_model, t_name, t_exactMatch)

def _to_CurveRectangularHyperbola1(self) -> OptionalCurveRectangularHyperbola1:
    """Try to cast the ModelObject to a CurveRectangularHyperbola1.

    :return: An Optional CurveRectangularHyperbola1.
    """
    return toCurveRectangularHyperbola1(self)
openstudioutilitiesidf.IdfObject.to_CurveRectangularHyperbola1 = _to_CurveRectangularHyperbola1

def _getCurveRectangularHyperbola1(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveRectangularHyperbola1:
    """Try to get an object of type CurveRectangularHyperbola1 referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveRectangularHyperbola1.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveRectangularHyperbola1(self, t_handle)
Model.getCurveRectangularHyperbola1 = _getCurveRectangularHyperbola1

def _getCurveRectangularHyperbola1s(self) -> CurveRectangularHyperbola1Vector:
    """Get a vector of all objects of type CurveRectangularHyperbola1 in the model.

    :return: A vector of CurveRectangularHyperbola1.
    """
    return getCurveRectangularHyperbola1s(self)
Model.getCurveRectangularHyperbola1s = _getCurveRectangularHyperbola1s

def _getCurveRectangularHyperbola1ByName(self, t_name: str) -> OptionalCurveRectangularHyperbola1:
    """Try to get an object of type CurveRectangularHyperbola1 that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveRectangularHyperbola1.
    """
    return getCurveRectangularHyperbola1ByName(self, t_name)
Model.getCurveRectangularHyperbola1ByName = _getCurveRectangularHyperbola1ByName

def _getCurveRectangularHyperbola1sByName(self, t_name: str, t_exactMatch: bool) -> CurveRectangularHyperbola1Vector:
    """Returns all objects of type CurveRectangularHyperbola1 named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveRectangularHyperbola1sByName(self, t_name, t_exactMatch)
Model.getCurveRectangularHyperbola1sByName = _getCurveRectangularHyperbola1sByName

class CurveRectangularHyperbola2(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveRectangularHyperbola2

    def __init__(self, *args):
        _openstudiomodelresources.CurveRectangularHyperbola2_swiginit(self, _openstudiomodelresources.new_CurveRectangularHyperbola2(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveRectangularHyperbola2_iddObjectType()

    @staticmethod
    def validInputUnitTypeforxValues():
        return _openstudiomodelresources.CurveRectangularHyperbola2_validInputUnitTypeforxValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveRectangularHyperbola2_validOutputUnitTypeValues()

    def coefficient1C1(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_coefficient1C1(self)

    def coefficient2C2(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_coefficient2C2(self)

    def coefficient3C3(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_coefficient3C3(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_maximumValueofx(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_maximumCurveOutput(self)

    def inputUnitTypeforx(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1):
        return _openstudiomodelresources.CurveRectangularHyperbola2_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2):
        return _openstudiomodelresources.CurveRectangularHyperbola2_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3):
        return _openstudiomodelresources.CurveRectangularHyperbola2_setCoefficient3C3(self, coefficient3C3)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveRectangularHyperbola2_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveRectangularHyperbola2_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveRectangularHyperbola2_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveRectangularHyperbola2_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx):
        return _openstudiomodelresources.CurveRectangularHyperbola2_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveRectangularHyperbola2_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveRectangularHyperbola2_resetOutputUnitType(self)

# Register CurveRectangularHyperbola2 in _openstudiomodelresources:
_openstudiomodelresources.CurveRectangularHyperbola2_swigregister(CurveRectangularHyperbola2)

def toCurveRectangularHyperbola2(idfObject):
    return _openstudiomodelresources.toCurveRectangularHyperbola2(idfObject)

def getCurveRectangularHyperbola2(t_model, t_handle):
    return _openstudiomodelresources.getCurveRectangularHyperbola2(t_model, t_handle)

def getCurveRectangularHyperbola2s(t_model):
    return _openstudiomodelresources.getCurveRectangularHyperbola2s(t_model)

def getCurveRectangularHyperbola2ByName(t_model, t_name):
    return _openstudiomodelresources.getCurveRectangularHyperbola2ByName(t_model, t_name)

def getCurveRectangularHyperbola2sByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveRectangularHyperbola2sByName(t_model, t_name, t_exactMatch)

def _to_CurveRectangularHyperbola2(self) -> OptionalCurveRectangularHyperbola2:
    """Try to cast the ModelObject to a CurveRectangularHyperbola2.

    :return: An Optional CurveRectangularHyperbola2.
    """
    return toCurveRectangularHyperbola2(self)
openstudioutilitiesidf.IdfObject.to_CurveRectangularHyperbola2 = _to_CurveRectangularHyperbola2

def _getCurveRectangularHyperbola2(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveRectangularHyperbola2:
    """Try to get an object of type CurveRectangularHyperbola2 referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveRectangularHyperbola2.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveRectangularHyperbola2(self, t_handle)
Model.getCurveRectangularHyperbola2 = _getCurveRectangularHyperbola2

def _getCurveRectangularHyperbola2s(self) -> CurveRectangularHyperbola2Vector:
    """Get a vector of all objects of type CurveRectangularHyperbola2 in the model.

    :return: A vector of CurveRectangularHyperbola2.
    """
    return getCurveRectangularHyperbola2s(self)
Model.getCurveRectangularHyperbola2s = _getCurveRectangularHyperbola2s

def _getCurveRectangularHyperbola2ByName(self, t_name: str) -> OptionalCurveRectangularHyperbola2:
    """Try to get an object of type CurveRectangularHyperbola2 that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveRectangularHyperbola2.
    """
    return getCurveRectangularHyperbola2ByName(self, t_name)
Model.getCurveRectangularHyperbola2ByName = _getCurveRectangularHyperbola2ByName

def _getCurveRectangularHyperbola2sByName(self, t_name: str, t_exactMatch: bool) -> CurveRectangularHyperbola2Vector:
    """Returns all objects of type CurveRectangularHyperbola2 named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveRectangularHyperbola2sByName(self, t_name, t_exactMatch)
Model.getCurveRectangularHyperbola2sByName = _getCurveRectangularHyperbola2sByName

class CurveSigmoid(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveSigmoid

    def __init__(self, *args):
        _openstudiomodelresources.CurveSigmoid_swiginit(self, _openstudiomodelresources.new_CurveSigmoid(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveSigmoid_iddObjectType()

    @staticmethod
    def validInputUnitTypeforxValues():
        return _openstudiomodelresources.CurveSigmoid_validInputUnitTypeforxValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveSigmoid_validOutputUnitTypeValues()

    def coefficient1C1(self):
        return _openstudiomodelresources.CurveSigmoid_coefficient1C1(self)

    def coefficient2C2(self):
        return _openstudiomodelresources.CurveSigmoid_coefficient2C2(self)

    def coefficient3C3(self):
        return _openstudiomodelresources.CurveSigmoid_coefficient3C3(self)

    def coefficient4C4(self):
        return _openstudiomodelresources.CurveSigmoid_coefficient4C4(self)

    def coefficient5C5(self):
        return _openstudiomodelresources.CurveSigmoid_coefficient5C5(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveSigmoid_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveSigmoid_maximumValueofx(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveSigmoid_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveSigmoid_maximumCurveOutput(self)

    def inputUnitTypeforx(self):
        return _openstudiomodelresources.CurveSigmoid_inputUnitTypeforx(self)

    def isInputUnitTypeforxDefaulted(self):
        return _openstudiomodelresources.CurveSigmoid_isInputUnitTypeforxDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveSigmoid_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveSigmoid_isOutputUnitTypeDefaulted(self)

    def setCoefficient1C1(self, coefficient1C1):
        return _openstudiomodelresources.CurveSigmoid_setCoefficient1C1(self, coefficient1C1)

    def setCoefficient2C2(self, coefficient2C2):
        return _openstudiomodelresources.CurveSigmoid_setCoefficient2C2(self, coefficient2C2)

    def setCoefficient3C3(self, coefficient3C3):
        return _openstudiomodelresources.CurveSigmoid_setCoefficient3C3(self, coefficient3C3)

    def setCoefficient4C4(self, coefficient4C4):
        return _openstudiomodelresources.CurveSigmoid_setCoefficient4C4(self, coefficient4C4)

    def setCoefficient5C5(self, coefficient5C5):
        return _openstudiomodelresources.CurveSigmoid_setCoefficient5C5(self, coefficient5C5)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveSigmoid_setMinimumValueofx(self, minimumValueofx)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveSigmoid_setMaximumValueofx(self, maximumValueofx)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveSigmoid_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveSigmoid_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveSigmoid_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveSigmoid_resetMaximumCurveOutput(self)

    def setInputUnitTypeforx(self, inputUnitTypeforx):
        return _openstudiomodelresources.CurveSigmoid_setInputUnitTypeforx(self, inputUnitTypeforx)

    def resetInputUnitTypeforx(self):
        return _openstudiomodelresources.CurveSigmoid_resetInputUnitTypeforx(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveSigmoid_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveSigmoid_resetOutputUnitType(self)

# Register CurveSigmoid in _openstudiomodelresources:
_openstudiomodelresources.CurveSigmoid_swigregister(CurveSigmoid)

def toCurveSigmoid(idfObject):
    return _openstudiomodelresources.toCurveSigmoid(idfObject)

def getCurveSigmoid(t_model, t_handle):
    return _openstudiomodelresources.getCurveSigmoid(t_model, t_handle)

def getCurveSigmoids(t_model):
    return _openstudiomodelresources.getCurveSigmoids(t_model)

def getCurveSigmoidByName(t_model, t_name):
    return _openstudiomodelresources.getCurveSigmoidByName(t_model, t_name)

def getCurveSigmoidsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveSigmoidsByName(t_model, t_name, t_exactMatch)

def _to_CurveSigmoid(self) -> OptionalCurveSigmoid:
    """Try to cast the ModelObject to a CurveSigmoid.

    :return: An Optional CurveSigmoid.
    """
    return toCurveSigmoid(self)
openstudioutilitiesidf.IdfObject.to_CurveSigmoid = _to_CurveSigmoid

def _getCurveSigmoid(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveSigmoid:
    """Try to get an object of type CurveSigmoid referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveSigmoid.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveSigmoid(self, t_handle)
Model.getCurveSigmoid = _getCurveSigmoid

def _getCurveSigmoids(self) -> CurveSigmoidVector:
    """Get a vector of all objects of type CurveSigmoid in the model.

    :return: A vector of CurveSigmoid.
    """
    return getCurveSigmoids(self)
Model.getCurveSigmoids = _getCurveSigmoids

def _getCurveSigmoidByName(self, t_name: str) -> OptionalCurveSigmoid:
    """Try to get an object of type CurveSigmoid that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveSigmoid.
    """
    return getCurveSigmoidByName(self, t_name)
Model.getCurveSigmoidByName = _getCurveSigmoidByName

def _getCurveSigmoidsByName(self, t_name: str, t_exactMatch: bool) -> CurveSigmoidVector:
    """Returns all objects of type CurveSigmoid named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveSigmoidsByName(self, t_name, t_exactMatch)
Model.getCurveSigmoidsByName = _getCurveSigmoidsByName

class CurveTriquadratic(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CurveTriquadratic

    def __init__(self, *args):
        _openstudiomodelresources.CurveTriquadratic_swiginit(self, _openstudiomodelresources.new_CurveTriquadratic(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CurveTriquadratic_iddObjectType()

    @staticmethod
    def validInputUnitTypeforXValues():
        return _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforXValues()

    @staticmethod
    def validInputUnitTypeforYValues():
        return _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforYValues()

    @staticmethod
    def validInputUnitTypeforZValues():
        return _openstudiomodelresources.CurveTriquadratic_validInputUnitTypeforZValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.CurveTriquadratic_validOutputUnitTypeValues()

    def coefficient1Constant(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient1Constant(self)

    def coefficient2xPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient2xPOW2(self)

    def coefficient3x(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient3x(self)

    def coefficient4yPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient4yPOW2(self)

    def coefficient5y(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient5y(self)

    def coefficient6zPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient6zPOW2(self)

    def coefficient7z(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient7z(self)

    def coefficient8xPOW2TIMESYPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient8xPOW2TIMESYPOW2(self)

    def coefficient9xTIMESY(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient9xTIMESY(self)

    def coefficient10xTIMESYPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient10xTIMESYPOW2(self)

    def coefficient11xPOW2TIMESY(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient11xPOW2TIMESY(self)

    def coefficient12xPOW2TIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient12xPOW2TIMESZPOW2(self)

    def coefficient13xTIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient13xTIMESZ(self)

    def coefficient14xTIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient14xTIMESZPOW2(self)

    def coefficient15xPOW2TIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient15xPOW2TIMESZ(self)

    def coefficient16yPOW2TIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient16yPOW2TIMESZPOW2(self)

    def coefficient17yTIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient17yTIMESZ(self)

    def coefficient18yTIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient18yTIMESZPOW2(self)

    def coefficient19yPOW2TIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient19yPOW2TIMESZ(self)

    def coefficient20xPOW2TIMESYPOW2TIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient20xPOW2TIMESYPOW2TIMESZPOW2(self)

    def coefficient21xPOW2TIMESYPOW2TIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient21xPOW2TIMESYPOW2TIMESZ(self)

    def coefficient22xPOW2TIMESYTIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient22xPOW2TIMESYTIMESZPOW2(self)

    def coefficient23xTIMESYPOW2TIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient23xTIMESYPOW2TIMESZPOW2(self)

    def coefficient24xPOW2TIMESYTIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient24xPOW2TIMESYTIMESZ(self)

    def coefficient25xTIMESYPOW2TIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient25xTIMESYPOW2TIMESZ(self)

    def coefficient26xTIMESYTIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient26xTIMESYTIMESZPOW2(self)

    def coefficient27xTIMESYTIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_coefficient27xTIMESYTIMESZ(self)

    def minimumValueofx(self):
        return _openstudiomodelresources.CurveTriquadratic_minimumValueofx(self)

    def maximumValueofx(self):
        return _openstudiomodelresources.CurveTriquadratic_maximumValueofx(self)

    def minimumValueofy(self):
        return _openstudiomodelresources.CurveTriquadratic_minimumValueofy(self)

    def maximumValueofy(self):
        return _openstudiomodelresources.CurveTriquadratic_maximumValueofy(self)

    def minimumValueofz(self):
        return _openstudiomodelresources.CurveTriquadratic_minimumValueofz(self)

    def maximumValueofz(self):
        return _openstudiomodelresources.CurveTriquadratic_maximumValueofz(self)

    def minimumCurveOutput(self):
        return _openstudiomodelresources.CurveTriquadratic_minimumCurveOutput(self)

    def maximumCurveOutput(self):
        return _openstudiomodelresources.CurveTriquadratic_maximumCurveOutput(self)

    def inputUnitTypeforX(self):
        return _openstudiomodelresources.CurveTriquadratic_inputUnitTypeforX(self)

    def isInputUnitTypeforXDefaulted(self):
        return _openstudiomodelresources.CurveTriquadratic_isInputUnitTypeforXDefaulted(self)

    def inputUnitTypeforY(self):
        return _openstudiomodelresources.CurveTriquadratic_inputUnitTypeforY(self)

    def isInputUnitTypeforYDefaulted(self):
        return _openstudiomodelresources.CurveTriquadratic_isInputUnitTypeforYDefaulted(self)

    def inputUnitTypeforZ(self):
        return _openstudiomodelresources.CurveTriquadratic_inputUnitTypeforZ(self)

    def isInputUnitTypeforZDefaulted(self):
        return _openstudiomodelresources.CurveTriquadratic_isInputUnitTypeforZDefaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.CurveTriquadratic_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.CurveTriquadratic_isOutputUnitTypeDefaulted(self)

    def setCoefficient1Constant(self, coefficient1Constant):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient1Constant(self, coefficient1Constant)

    def resetCoefficient1Constant(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient1Constant(self)

    def setCoefficient2xPOW2(self, coefficient2xPOW2):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient2xPOW2(self, coefficient2xPOW2)

    def resetCoefficient2xPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient2xPOW2(self)

    def setCoefficient3x(self, coefficient3x):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient3x(self, coefficient3x)

    def resetCoefficient3x(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient3x(self)

    def setCoefficient4yPOW2(self, coefficient4yPOW2):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient4yPOW2(self, coefficient4yPOW2)

    def resetCoefficient4yPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient4yPOW2(self)

    def setCoefficient5y(self, coefficient5y):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient5y(self, coefficient5y)

    def resetCoefficient5y(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient5y(self)

    def setCoefficient6zPOW2(self, coefficient6zPOW2):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient6zPOW2(self, coefficient6zPOW2)

    def resetCoefficient6zPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient6zPOW2(self)

    def setCoefficient7z(self, coefficient7z):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient7z(self, coefficient7z)

    def resetCoefficient7z(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient7z(self)

    def setCoefficient8xPOW2TIMESYPOW2(self, coefficient8xPOW2TIMESYPOW2):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient8xPOW2TIMESYPOW2(self, coefficient8xPOW2TIMESYPOW2)

    def resetCoefficient8xPOW2TIMESYPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient8xPOW2TIMESYPOW2(self)

    def setCoefficient9xTIMESY(self, coefficient9xTIMESY):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient9xTIMESY(self, coefficient9xTIMESY)

    def resetCoefficient9xTIMESY(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient9xTIMESY(self)

    def setCoefficient10xTIMESYPOW2(self, coefficient10xTIMESYPOW2):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient10xTIMESYPOW2(self, coefficient10xTIMESYPOW2)

    def resetCoefficient10xTIMESYPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient10xTIMESYPOW2(self)

    def setCoefficient11xPOW2TIMESY(self, coefficient11xPOW2TIMESY):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient11xPOW2TIMESY(self, coefficient11xPOW2TIMESY)

    def resetCoefficient11xPOW2TIMESY(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient11xPOW2TIMESY(self)

    def setCoefficient12xPOW2TIMESZPOW2(self, coefficient12xPOW2TIMESZPOW2):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient12xPOW2TIMESZPOW2(self, coefficient12xPOW2TIMESZPOW2)

    def resetCoefficient12xPOW2TIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient12xPOW2TIMESZPOW2(self)

    def setCoefficient13xTIMESZ(self, coefficient13xTIMESZ):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient13xTIMESZ(self, coefficient13xTIMESZ)

    def resetCoefficient13xTIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient13xTIMESZ(self)

    def setCoefficient14xTIMESZPOW2(self, coefficient14xTIMESZPOW2):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient14xTIMESZPOW2(self, coefficient14xTIMESZPOW2)

    def resetCoefficient14xTIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient14xTIMESZPOW2(self)

    def setCoefficient15xPOW2TIMESZ(self, coefficient15xPOW2TIMESZ):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient15xPOW2TIMESZ(self, coefficient15xPOW2TIMESZ)

    def resetCoefficient15xPOW2TIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient15xPOW2TIMESZ(self)

    def setCoefficient16yPOW2TIMESZPOW2(self, coefficient16yPOW2TIMESZPOW2):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient16yPOW2TIMESZPOW2(self, coefficient16yPOW2TIMESZPOW2)

    def resetCoefficient16yPOW2TIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient16yPOW2TIMESZPOW2(self)

    def setCoefficient17yTIMESZ(self, coefficient17yTIMESZ):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient17yTIMESZ(self, coefficient17yTIMESZ)

    def resetCoefficient17yTIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient17yTIMESZ(self)

    def setCoefficient18yTIMESZPOW2(self, coefficient18yTIMESZPOW2):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient18yTIMESZPOW2(self, coefficient18yTIMESZPOW2)

    def resetCoefficient18yTIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient18yTIMESZPOW2(self)

    def setCoefficient19yPOW2TIMESZ(self, coefficient19yPOW2TIMESZ):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient19yPOW2TIMESZ(self, coefficient19yPOW2TIMESZ)

    def resetCoefficient19yPOW2TIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient19yPOW2TIMESZ(self)

    def setCoefficient20xPOW2TIMESYPOW2TIMESZPOW2(self, coefficient20xPOW2TIMESYPOW2TIMESZPOW2):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient20xPOW2TIMESYPOW2TIMESZPOW2(self, coefficient20xPOW2TIMESYPOW2TIMESZPOW2)

    def resetCoefficient20xPOW2TIMESYPOW2TIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient20xPOW2TIMESYPOW2TIMESZPOW2(self)

    def setCoefficient21xPOW2TIMESYPOW2TIMESZ(self, coefficient21xPOW2TIMESYPOW2TIMESZ):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient21xPOW2TIMESYPOW2TIMESZ(self, coefficient21xPOW2TIMESYPOW2TIMESZ)

    def resetCoefficient21xPOW2TIMESYPOW2TIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient21xPOW2TIMESYPOW2TIMESZ(self)

    def setCoefficient22xPOW2TIMESYTIMESZPOW2(self, coefficient22xPOW2TIMESYTIMESZPOW2):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient22xPOW2TIMESYTIMESZPOW2(self, coefficient22xPOW2TIMESYTIMESZPOW2)

    def resetCoefficient22xPOW2TIMESYTIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient22xPOW2TIMESYTIMESZPOW2(self)

    def setCoefficient23xTIMESYPOW2TIMESZPOW2(self, coefficient23xTIMESYPOW2TIMESZPOW2):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient23xTIMESYPOW2TIMESZPOW2(self, coefficient23xTIMESYPOW2TIMESZPOW2)

    def resetCoefficient23xTIMESYPOW2TIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient23xTIMESYPOW2TIMESZPOW2(self)

    def setCoefficient24xPOW2TIMESYTIMESZ(self, coefficient24xPOW2TIMESYTIMESZ):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient24xPOW2TIMESYTIMESZ(self, coefficient24xPOW2TIMESYTIMESZ)

    def resetCoefficient24xPOW2TIMESYTIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient24xPOW2TIMESYTIMESZ(self)

    def setCoefficient25xTIMESYPOW2TIMESZ(self, coefficient25xTIMESYPOW2TIMESZ):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient25xTIMESYPOW2TIMESZ(self, coefficient25xTIMESYPOW2TIMESZ)

    def resetCoefficient25xTIMESYPOW2TIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient25xTIMESYPOW2TIMESZ(self)

    def setCoefficient26xTIMESYTIMESZPOW2(self, coefficient26xTIMESYTIMESZPOW2):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient26xTIMESYTIMESZPOW2(self, coefficient26xTIMESYTIMESZPOW2)

    def resetCoefficient26xTIMESYTIMESZPOW2(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient26xTIMESYTIMESZPOW2(self)

    def setCoefficient27xTIMESYTIMESZ(self, coefficient27xTIMESYTIMESZ):
        return _openstudiomodelresources.CurveTriquadratic_setCoefficient27xTIMESYTIMESZ(self, coefficient27xTIMESYTIMESZ)

    def resetCoefficient27xTIMESYTIMESZ(self):
        return _openstudiomodelresources.CurveTriquadratic_resetCoefficient27xTIMESYTIMESZ(self)

    def setMinimumValueofx(self, minimumValueofx):
        return _openstudiomodelresources.CurveTriquadratic_setMinimumValueofx(self, minimumValueofx)

    def resetMinimumValueofx(self):
        return _openstudiomodelresources.CurveTriquadratic_resetMinimumValueofx(self)

    def setMaximumValueofx(self, maximumValueofx):
        return _openstudiomodelresources.CurveTriquadratic_setMaximumValueofx(self, maximumValueofx)

    def resetMaximumValueofx(self):
        return _openstudiomodelresources.CurveTriquadratic_resetMaximumValueofx(self)

    def setMinimumValueofy(self, minimumValueofy):
        return _openstudiomodelresources.CurveTriquadratic_setMinimumValueofy(self, minimumValueofy)

    def resetMinimumValueofy(self):
        return _openstudiomodelresources.CurveTriquadratic_resetMinimumValueofy(self)

    def setMaximumValueofy(self, maximumValueofy):
        return _openstudiomodelresources.CurveTriquadratic_setMaximumValueofy(self, maximumValueofy)

    def resetMaximumValueofy(self):
        return _openstudiomodelresources.CurveTriquadratic_resetMaximumValueofy(self)

    def setMinimumValueofz(self, minimumValueofz):
        return _openstudiomodelresources.CurveTriquadratic_setMinimumValueofz(self, minimumValueofz)

    def resetMinimumValueofz(self):
        return _openstudiomodelresources.CurveTriquadratic_resetMinimumValueofz(self)

    def setMaximumValueofz(self, maximumValueofz):
        return _openstudiomodelresources.CurveTriquadratic_setMaximumValueofz(self, maximumValueofz)

    def resetMaximumValueofz(self):
        return _openstudiomodelresources.CurveTriquadratic_resetMaximumValueofz(self)

    def setMinimumCurveOutput(self, minimumCurveOutput):
        return _openstudiomodelresources.CurveTriquadratic_setMinimumCurveOutput(self, minimumCurveOutput)

    def resetMinimumCurveOutput(self):
        return _openstudiomodelresources.CurveTriquadratic_resetMinimumCurveOutput(self)

    def setMaximumCurveOutput(self, maximumCurveOutput):
        return _openstudiomodelresources.CurveTriquadratic_setMaximumCurveOutput(self, maximumCurveOutput)

    def resetMaximumCurveOutput(self):
        return _openstudiomodelresources.CurveTriquadratic_resetMaximumCurveOutput(self)

    def setInputUnitTypeforX(self, inputUnitTypeforX):
        return _openstudiomodelresources.CurveTriquadratic_setInputUnitTypeforX(self, inputUnitTypeforX)

    def resetInputUnitTypeforX(self):
        return _openstudiomodelresources.CurveTriquadratic_resetInputUnitTypeforX(self)

    def setInputUnitTypeforY(self, inputUnitTypeforY):
        return _openstudiomodelresources.CurveTriquadratic_setInputUnitTypeforY(self, inputUnitTypeforY)

    def resetInputUnitTypeforY(self):
        return _openstudiomodelresources.CurveTriquadratic_resetInputUnitTypeforY(self)

    def setInputUnitTypeforZ(self, inputUnitTypeforZ):
        return _openstudiomodelresources.CurveTriquadratic_setInputUnitTypeforZ(self, inputUnitTypeforZ)

    def resetInputUnitTypeforZ(self):
        return _openstudiomodelresources.CurveTriquadratic_resetInputUnitTypeforZ(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.CurveTriquadratic_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.CurveTriquadratic_resetOutputUnitType(self)

# Register CurveTriquadratic in _openstudiomodelresources:
_openstudiomodelresources.CurveTriquadratic_swigregister(CurveTriquadratic)

def toCurveTriquadratic(idfObject):
    return _openstudiomodelresources.toCurveTriquadratic(idfObject)

def getCurveTriquadratic(t_model, t_handle):
    return _openstudiomodelresources.getCurveTriquadratic(t_model, t_handle)

def getCurveTriquadratics(t_model):
    return _openstudiomodelresources.getCurveTriquadratics(t_model)

def getCurveTriquadraticByName(t_model, t_name):
    return _openstudiomodelresources.getCurveTriquadraticByName(t_model, t_name)

def getCurveTriquadraticsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCurveTriquadraticsByName(t_model, t_name, t_exactMatch)

def _to_CurveTriquadratic(self) -> OptionalCurveTriquadratic:
    """Try to cast the ModelObject to a CurveTriquadratic.

    :return: An Optional CurveTriquadratic.
    """
    return toCurveTriquadratic(self)
openstudioutilitiesidf.IdfObject.to_CurveTriquadratic = _to_CurveTriquadratic

def _getCurveTriquadratic(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCurveTriquadratic:
    """Try to get an object of type CurveTriquadratic referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CurveTriquadratic.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCurveTriquadratic(self, t_handle)
Model.getCurveTriquadratic = _getCurveTriquadratic

def _getCurveTriquadratics(self) -> CurveTriquadraticVector:
    """Get a vector of all objects of type CurveTriquadratic in the model.

    :return: A vector of CurveTriquadratic.
    """
    return getCurveTriquadratics(self)
Model.getCurveTriquadratics = _getCurveTriquadratics

def _getCurveTriquadraticByName(self, t_name: str) -> OptionalCurveTriquadratic:
    """Try to get an object of type CurveTriquadratic that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CurveTriquadratic.
    """
    return getCurveTriquadraticByName(self, t_name)
Model.getCurveTriquadraticByName = _getCurveTriquadraticByName

def _getCurveTriquadraticsByName(self, t_name: str, t_exactMatch: bool) -> CurveTriquadraticVector:
    """Returns all objects of type CurveTriquadratic named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCurveTriquadraticsByName(self, t_name, t_exactMatch)
Model.getCurveTriquadraticsByName = _getCurveTriquadraticsByName

class TableMultiVariableLookupPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelresources.TableMultiVariableLookupPoint_swiginit(self, _openstudiomodelresources.new_TableMultiVariableLookupPoint(*args))

    def x(self):
        return _openstudiomodelresources.TableMultiVariableLookupPoint_x(self)

    def y(self):
        return _openstudiomodelresources.TableMultiVariableLookupPoint_y(self)

    def __lt__(self, other):
        return _openstudiomodelresources.TableMultiVariableLookupPoint___lt__(self, other)

    def __str__(self):
        return _openstudiomodelresources.TableMultiVariableLookupPoint___str__(self)
    __swig_destroy__ = _openstudiomodelresources.delete_TableMultiVariableLookupPoint

# Register TableMultiVariableLookupPoint in _openstudiomodelresources:
_openstudiomodelresources.TableMultiVariableLookupPoint_swigregister(TableMultiVariableLookupPoint)

def __lshift__(*args):
    return _openstudiomodelresources.__lshift__(*args)
class TableMultiVariableLookup(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_TableMultiVariableLookup

    def __init__(self, *args):
        _openstudiomodelresources.TableMultiVariableLookup_swiginit(self, _openstudiomodelresources.new_TableMultiVariableLookup(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.TableMultiVariableLookup_iddObjectType()

    @staticmethod
    def interpolationMethodValues():
        return _openstudiomodelresources.TableMultiVariableLookup_interpolationMethodValues()

    @staticmethod
    def curveTypeValues():
        return _openstudiomodelresources.TableMultiVariableLookup_curveTypeValues()

    @staticmethod
    def tableDataFormatValues():
        return _openstudiomodelresources.TableMultiVariableLookup_tableDataFormatValues()

    @staticmethod
    def x1SortOrderValues():
        return _openstudiomodelresources.TableMultiVariableLookup_x1SortOrderValues()

    @staticmethod
    def x2SortOrderValues():
        return _openstudiomodelresources.TableMultiVariableLookup_x2SortOrderValues()

    @staticmethod
    def inputUnitTypeforX1Values():
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX1Values()

    @staticmethod
    def inputUnitTypeforX2Values():
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX2Values()

    @staticmethod
    def inputUnitTypeforX3Values():
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX3Values()

    @staticmethod
    def inputUnitTypeforX4Values():
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX4Values()

    @staticmethod
    def inputUnitTypeforX5Values():
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX5Values()

    @staticmethod
    def outputUnitTypeValues():
        return _openstudiomodelresources.TableMultiVariableLookup_outputUnitTypeValues()

    def interpolationMethod(self):
        return _openstudiomodelresources.TableMultiVariableLookup_interpolationMethod(self)

    def isInterpolationMethodDefaulted(self):
        return _openstudiomodelresources.TableMultiVariableLookup_isInterpolationMethodDefaulted(self)

    def numberofInterpolationPoints(self):
        return _openstudiomodelresources.TableMultiVariableLookup_numberofInterpolationPoints(self)

    def isNumberofInterpolationPointsDefaulted(self):
        return _openstudiomodelresources.TableMultiVariableLookup_isNumberofInterpolationPointsDefaulted(self)

    def curveType(self):
        return _openstudiomodelresources.TableMultiVariableLookup_curveType(self)

    def tableDataFormat(self):
        return _openstudiomodelresources.TableMultiVariableLookup_tableDataFormat(self)

    def isTableDataFormatDefaulted(self):
        return _openstudiomodelresources.TableMultiVariableLookup_isTableDataFormatDefaulted(self)

    def normalizationReference(self):
        return _openstudiomodelresources.TableMultiVariableLookup_normalizationReference(self)

    def minimumValueofX1(self):
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX1(self)

    def maximumValueofX1(self):
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX1(self)

    def minimumValueofX2(self):
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX2(self)

    def maximumValueofX2(self):
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX2(self)

    def minimumValueofX3(self):
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX3(self)

    def maximumValueofX3(self):
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX3(self)

    def minimumValueofX4(self):
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX4(self)

    def maximumValueofX4(self):
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX4(self)

    def minimumValueofX5(self):
        return _openstudiomodelresources.TableMultiVariableLookup_minimumValueofX5(self)

    def maximumValueofX5(self):
        return _openstudiomodelresources.TableMultiVariableLookup_maximumValueofX5(self)

    def minimumTableOutput(self):
        return _openstudiomodelresources.TableMultiVariableLookup_minimumTableOutput(self)

    def maximumTableOutput(self):
        return _openstudiomodelresources.TableMultiVariableLookup_maximumTableOutput(self)

    def inputUnitTypeforX1(self):
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX1(self)

    def isInputUnitTypeforX1Defaulted(self):
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX1Defaulted(self)

    def inputUnitTypeforX2(self):
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX2(self)

    def isInputUnitTypeforX2Defaulted(self):
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX2Defaulted(self)

    def inputUnitTypeforX3(self):
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX3(self)

    def isInputUnitTypeforX3Defaulted(self):
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX3Defaulted(self)

    def inputUnitTypeforX4(self):
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX4(self)

    def isInputUnitTypeforX4Defaulted(self):
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX4Defaulted(self)

    def inputUnitTypeforX5(self):
        return _openstudiomodelresources.TableMultiVariableLookup_inputUnitTypeforX5(self)

    def isInputUnitTypeforX5Defaulted(self):
        return _openstudiomodelresources.TableMultiVariableLookup_isInputUnitTypeforX5Defaulted(self)

    def outputUnitType(self):
        return _openstudiomodelresources.TableMultiVariableLookup_outputUnitType(self)

    def isOutputUnitTypeDefaulted(self):
        return _openstudiomodelresources.TableMultiVariableLookup_isOutputUnitTypeDefaulted(self)

    def numberofIndependentVariables(self):
        return _openstudiomodelresources.TableMultiVariableLookup_numberofIndependentVariables(self)

    def printTable(self, precision=3):
        return _openstudiomodelresources.TableMultiVariableLookup_printTable(self, precision)

    def setInterpolationMethod(self, interpolationMethod):
        return _openstudiomodelresources.TableMultiVariableLookup_setInterpolationMethod(self, interpolationMethod)

    def resetInterpolationMethod(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetInterpolationMethod(self)

    def setNumberofInterpolationPoints(self, numberofInterpolationPoints):
        return _openstudiomodelresources.TableMultiVariableLookup_setNumberofInterpolationPoints(self, numberofInterpolationPoints)

    def resetNumberofInterpolationPoints(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetNumberofInterpolationPoints(self)

    def setCurveType(self, curveType):
        return _openstudiomodelresources.TableMultiVariableLookup_setCurveType(self, curveType)

    def resetCurveType(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetCurveType(self)

    def setTableDataFormat(self, tableDataFormat):
        return _openstudiomodelresources.TableMultiVariableLookup_setTableDataFormat(self, tableDataFormat)

    def resetTableDataFormat(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetTableDataFormat(self)

    def setNormalizationReference(self, normalizationReference):
        return _openstudiomodelresources.TableMultiVariableLookup_setNormalizationReference(self, normalizationReference)

    def resetNormalizationReference(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetNormalizationReference(self)

    def setMinimumValueofX1(self, minimumValueofX1):
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX1(self, minimumValueofX1)

    def resetMinimumValueofX1(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX1(self)

    def setMaximumValueofX1(self, maximumValueofX1):
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX1(self, maximumValueofX1)

    def resetMaximumValueofX1(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX1(self)

    def setMinimumValueofX2(self, minimumValueofX2):
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX2(self, minimumValueofX2)

    def resetMinimumValueofX2(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX2(self)

    def setMaximumValueofX2(self, maximumValueofX2):
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX2(self, maximumValueofX2)

    def resetMaximumValueofX2(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX2(self)

    def setMinimumValueofX3(self, minimumValueofX3):
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX3(self, minimumValueofX3)

    def resetMinimumValueofX3(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX3(self)

    def setMaximumValueofX3(self, maximumValueofX3):
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX3(self, maximumValueofX3)

    def resetMaximumValueofX3(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX3(self)

    def setMinimumValueofX4(self, minimumValueofX4):
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX4(self, minimumValueofX4)

    def resetMinimumValueofX4(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX4(self)

    def setMaximumValueofX4(self, maximumValueofX4):
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX4(self, maximumValueofX4)

    def resetMaximumValueofX4(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX4(self)

    def setMinimumValueofX5(self, minimumValueofX5):
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumValueofX5(self, minimumValueofX5)

    def resetMinimumValueofX5(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumValueofX5(self)

    def setMaximumValueofX5(self, maximumValueofX5):
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumValueofX5(self, maximumValueofX5)

    def resetMaximumValueofX5(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumValueofX5(self)

    def setMinimumTableOutput(self, minimumTableOutput):
        return _openstudiomodelresources.TableMultiVariableLookup_setMinimumTableOutput(self, minimumTableOutput)

    def resetMinimumTableOutput(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetMinimumTableOutput(self)

    def setMaximumTableOutput(self, maximumTableOutput):
        return _openstudiomodelresources.TableMultiVariableLookup_setMaximumTableOutput(self, maximumTableOutput)

    def resetMaximumTableOutput(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetMaximumTableOutput(self)

    def setInputUnitTypeforX1(self, inputUnitTypeforX1):
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX1(self, inputUnitTypeforX1)

    def resetInputUnitTypeforX1(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX1(self)

    def setInputUnitTypeforX2(self, inputUnitTypeforX2):
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX2(self, inputUnitTypeforX2)

    def resetInputUnitTypeforX2(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX2(self)

    def setInputUnitTypeforX3(self, inputUnitTypeforX3):
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX3(self, inputUnitTypeforX3)

    def resetInputUnitTypeforX3(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX3(self)

    def setInputUnitTypeforX4(self, inputUnitTypeforX4):
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX4(self, inputUnitTypeforX4)

    def resetInputUnitTypeforX4(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX4(self)

    def setInputUnitTypeforX5(self, inputUnitTypeforX5):
        return _openstudiomodelresources.TableMultiVariableLookup_setInputUnitTypeforX5(self, inputUnitTypeforX5)

    def resetInputUnitTypeforX5(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetInputUnitTypeforX5(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.TableMultiVariableLookup_setOutputUnitType(self, outputUnitType)

    def resetOutputUnitType(self):
        return _openstudiomodelresources.TableMultiVariableLookup_resetOutputUnitType(self)

    def addPoint(self, *args):
        return _openstudiomodelresources.TableMultiVariableLookup_addPoint(self, *args)

    def points(self):
        return _openstudiomodelresources.TableMultiVariableLookup_points(self)

    def setPoints(self, points):
        return _openstudiomodelresources.TableMultiVariableLookup_setPoints(self, points)

    def yValue(self, xValues):
        return _openstudiomodelresources.TableMultiVariableLookup_yValue(self, xValues)

    def xValues(self, i):
        return _openstudiomodelresources.TableMultiVariableLookup_xValues(self, i)

    def numVariables(self):
        return _openstudiomodelresources.TableMultiVariableLookup_numVariables(self)

    def evaluate(self, x):
        return _openstudiomodelresources.TableMultiVariableLookup_evaluate(self, x)

# Register TableMultiVariableLookup in _openstudiomodelresources:
_openstudiomodelresources.TableMultiVariableLookup_swigregister(TableMultiVariableLookup)

def toTableMultiVariableLookup(idfObject):
    return _openstudiomodelresources.toTableMultiVariableLookup(idfObject)

def getTableMultiVariableLookup(t_model, t_handle):
    return _openstudiomodelresources.getTableMultiVariableLookup(t_model, t_handle)

def getTableMultiVariableLookups(t_model):
    return _openstudiomodelresources.getTableMultiVariableLookups(t_model)

def getTableMultiVariableLookupByName(t_model, t_name):
    return _openstudiomodelresources.getTableMultiVariableLookupByName(t_model, t_name)

def getTableMultiVariableLookupsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getTableMultiVariableLookupsByName(t_model, t_name, t_exactMatch)

def _to_TableMultiVariableLookup(self) -> OptionalTableMultiVariableLookup:
    """Try to cast the ModelObject to a TableMultiVariableLookup.

    :return: An Optional TableMultiVariableLookup.
    """
    return toTableMultiVariableLookup(self)
openstudioutilitiesidf.IdfObject.to_TableMultiVariableLookup = _to_TableMultiVariableLookup

def _getTableMultiVariableLookup(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalTableMultiVariableLookup:
    """Try to get an object of type TableMultiVariableLookup referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional TableMultiVariableLookup.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getTableMultiVariableLookup(self, t_handle)
Model.getTableMultiVariableLookup = _getTableMultiVariableLookup

def _getTableMultiVariableLookups(self) -> TableMultiVariableLookupVector:
    """Get a vector of all objects of type TableMultiVariableLookup in the model.

    :return: A vector of TableMultiVariableLookup.
    """
    return getTableMultiVariableLookups(self)
Model.getTableMultiVariableLookups = _getTableMultiVariableLookups

def _getTableMultiVariableLookupByName(self, t_name: str) -> OptionalTableMultiVariableLookup:
    """Try to get an object of type TableMultiVariableLookup that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional TableMultiVariableLookup.
    """
    return getTableMultiVariableLookupByName(self, t_name)
Model.getTableMultiVariableLookupByName = _getTableMultiVariableLookupByName

def _getTableMultiVariableLookupsByName(self, t_name: str, t_exactMatch: bool) -> TableMultiVariableLookupVector:
    """Returns all objects of type TableMultiVariableLookup named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getTableMultiVariableLookupsByName(self, t_name, t_exactMatch)
Model.getTableMultiVariableLookupsByName = _getTableMultiVariableLookupsByName

class TableLookup(Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_TableLookup

    def __init__(self, *args):
        _openstudiomodelresources.TableLookup_swiginit(self, _openstudiomodelresources.new_TableLookup(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.TableLookup_iddObjectType()

    @staticmethod
    def normalizationMethodValues():
        return _openstudiomodelresources.TableLookup_normalizationMethodValues()

    @staticmethod
    def validNormalizationMethodValues():
        return _openstudiomodelresources.TableLookup_validNormalizationMethodValues()

    @staticmethod
    def outputUnitTypeValues():
        return _openstudiomodelresources.TableLookup_outputUnitTypeValues()

    @staticmethod
    def validOutputUnitTypeValues():
        return _openstudiomodelresources.TableLookup_validOutputUnitTypeValues()

    def normalizationMethod(self):
        return _openstudiomodelresources.TableLookup_normalizationMethod(self)

    def normalizationDivisor(self):
        return _openstudiomodelresources.TableLookup_normalizationDivisor(self)

    def minimumOutput(self):
        return _openstudiomodelresources.TableLookup_minimumOutput(self)

    def maximumOutput(self):
        return _openstudiomodelresources.TableLookup_maximumOutput(self)

    def outputUnitType(self):
        return _openstudiomodelresources.TableLookup_outputUnitType(self)

    def setNormalizationMethod(self, normalizationMethod):
        return _openstudiomodelresources.TableLookup_setNormalizationMethod(self, normalizationMethod)

    def setNormalizationDivisor(self, normalizationDivisor):
        return _openstudiomodelresources.TableLookup_setNormalizationDivisor(self, normalizationDivisor)

    def setMinimumOutput(self, minimumOutput):
        return _openstudiomodelresources.TableLookup_setMinimumOutput(self, minimumOutput)

    def resetMinimumOutput(self):
        return _openstudiomodelresources.TableLookup_resetMinimumOutput(self)

    def setMaximumOutput(self, maximumOutput):
        return _openstudiomodelresources.TableLookup_setMaximumOutput(self, maximumOutput)

    def resetMaximumOutput(self):
        return _openstudiomodelresources.TableLookup_resetMaximumOutput(self)

    def setOutputUnitType(self, outputUnitType):
        return _openstudiomodelresources.TableLookup_setOutputUnitType(self, outputUnitType)

    def addOutputValue(self, outputValue):
        return _openstudiomodelresources.TableLookup_addOutputValue(self, outputValue)

    def removeOutputValue(self, groupIndex):
        return _openstudiomodelresources.TableLookup_removeOutputValue(self, groupIndex)

    def removeAllOutputValues(self):
        return _openstudiomodelresources.TableLookup_removeAllOutputValues(self)

    def outputValues(self):
        return _openstudiomodelresources.TableLookup_outputValues(self)

    def numberofOutputValues(self):
        return _openstudiomodelresources.TableLookup_numberofOutputValues(self)

    def setOutputValues(self, outputValues):
        return _openstudiomodelresources.TableLookup_setOutputValues(self, outputValues)

    def addIndependentVariable(self, tableIndependentVariable):
        return _openstudiomodelresources.TableLookup_addIndependentVariable(self, tableIndependentVariable)

    def removeIndependentVariable(self, tableIndependentVariable):
        return _openstudiomodelresources.TableLookup_removeIndependentVariable(self, tableIndependentVariable)

    def removeAllIndependentVariables(self):
        return _openstudiomodelresources.TableLookup_removeAllIndependentVariables(self)

    def independentVariables(self):
        return _openstudiomodelresources.TableLookup_independentVariables(self)

# Register TableLookup in _openstudiomodelresources:
_openstudiomodelresources.TableLookup_swigregister(TableLookup)

def toTableLookup(idfObject):
    return _openstudiomodelresources.toTableLookup(idfObject)

def getTableLookup(t_model, t_handle):
    return _openstudiomodelresources.getTableLookup(t_model, t_handle)

def getTableLookups(t_model):
    return _openstudiomodelresources.getTableLookups(t_model)

def getTableLookupByName(t_model, t_name):
    return _openstudiomodelresources.getTableLookupByName(t_model, t_name)

def getTableLookupsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getTableLookupsByName(t_model, t_name, t_exactMatch)

def _to_TableLookup(self) -> OptionalTableLookup:
    """Try to cast the ModelObject to a TableLookup.

    :return: An Optional TableLookup.
    """
    return toTableLookup(self)
openstudioutilitiesidf.IdfObject.to_TableLookup = _to_TableLookup

def _getTableLookup(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalTableLookup:
    """Try to get an object of type TableLookup referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional TableLookup.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getTableLookup(self, t_handle)
Model.getTableLookup = _getTableLookup

def _getTableLookups(self) -> TableLookupVector:
    """Get a vector of all objects of type TableLookup in the model.

    :return: A vector of TableLookup.
    """
    return getTableLookups(self)
Model.getTableLookups = _getTableLookups

def _getTableLookupByName(self, t_name: str) -> OptionalTableLookup:
    """Try to get an object of type TableLookup that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional TableLookup.
    """
    return getTableLookupByName(self, t_name)
Model.getTableLookupByName = _getTableLookupByName

def _getTableLookupsByName(self, t_name: str, t_exactMatch: bool) -> TableLookupVector:
    """Returns all objects of type TableLookup named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getTableLookupsByName(self, t_name, t_exactMatch)
Model.getTableLookupsByName = _getTableLookupsByName

class TableIndependentVariable(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_TableIndependentVariable

    def __init__(self, *args):
        _openstudiomodelresources.TableIndependentVariable_swiginit(self, _openstudiomodelresources.new_TableIndependentVariable(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.TableIndependentVariable_iddObjectType()

    @staticmethod
    def interpolationMethodValues():
        return _openstudiomodelresources.TableIndependentVariable_interpolationMethodValues()

    @staticmethod
    def validInterpolationMethodValues():
        return _openstudiomodelresources.TableIndependentVariable_validInterpolationMethodValues()

    @staticmethod
    def extrapolationMethodValues():
        return _openstudiomodelresources.TableIndependentVariable_extrapolationMethodValues()

    @staticmethod
    def validExtrapolationMethodValues():
        return _openstudiomodelresources.TableIndependentVariable_validExtrapolationMethodValues()

    @staticmethod
    def unitTypeValues():
        return _openstudiomodelresources.TableIndependentVariable_unitTypeValues()

    @staticmethod
    def validUnitTypeValues():
        return _openstudiomodelresources.TableIndependentVariable_validUnitTypeValues()

    def interpolationMethod(self):
        return _openstudiomodelresources.TableIndependentVariable_interpolationMethod(self)

    def extrapolationMethod(self):
        return _openstudiomodelresources.TableIndependentVariable_extrapolationMethod(self)

    def minimumValue(self):
        return _openstudiomodelresources.TableIndependentVariable_minimumValue(self)

    def maximumValue(self):
        return _openstudiomodelresources.TableIndependentVariable_maximumValue(self)

    def normalizationReferenceValue(self):
        return _openstudiomodelresources.TableIndependentVariable_normalizationReferenceValue(self)

    def unitType(self):
        return _openstudiomodelresources.TableIndependentVariable_unitType(self)

    def setInterpolationMethod(self, interpolationMethod):
        return _openstudiomodelresources.TableIndependentVariable_setInterpolationMethod(self, interpolationMethod)

    def setExtrapolationMethod(self, extrapolationMethod):
        return _openstudiomodelresources.TableIndependentVariable_setExtrapolationMethod(self, extrapolationMethod)

    def setMinimumValue(self, minimumValue):
        return _openstudiomodelresources.TableIndependentVariable_setMinimumValue(self, minimumValue)

    def resetMinimumValue(self):
        return _openstudiomodelresources.TableIndependentVariable_resetMinimumValue(self)

    def setMaximumValue(self, maximumValue):
        return _openstudiomodelresources.TableIndependentVariable_setMaximumValue(self, maximumValue)

    def resetMaximumValue(self):
        return _openstudiomodelresources.TableIndependentVariable_resetMaximumValue(self)

    def setNormalizationReferenceValue(self, normalizationReferenceValue):
        return _openstudiomodelresources.TableIndependentVariable_setNormalizationReferenceValue(self, normalizationReferenceValue)

    def resetNormalizationReferenceValue(self):
        return _openstudiomodelresources.TableIndependentVariable_resetNormalizationReferenceValue(self)

    def setUnitType(self, unitType):
        return _openstudiomodelresources.TableIndependentVariable_setUnitType(self, unitType)

    def tableLookups(self):
        return _openstudiomodelresources.TableIndependentVariable_tableLookups(self)

    def addValue(self, value):
        return _openstudiomodelresources.TableIndependentVariable_addValue(self, value)

    def removeValue(self, groupIndex):
        return _openstudiomodelresources.TableIndependentVariable_removeValue(self, groupIndex)

    def removeAllValues(self):
        return _openstudiomodelresources.TableIndependentVariable_removeAllValues(self)

    def values(self):
        return _openstudiomodelresources.TableIndependentVariable_values(self)

    def setValues(self, values):
        return _openstudiomodelresources.TableIndependentVariable_setValues(self, values)

    def numberofValues(self):
        return _openstudiomodelresources.TableIndependentVariable_numberofValues(self)

# Register TableIndependentVariable in _openstudiomodelresources:
_openstudiomodelresources.TableIndependentVariable_swigregister(TableIndependentVariable)

def toTableIndependentVariable(idfObject):
    return _openstudiomodelresources.toTableIndependentVariable(idfObject)

def getTableIndependentVariable(t_model, t_handle):
    return _openstudiomodelresources.getTableIndependentVariable(t_model, t_handle)

def getTableIndependentVariables(t_model):
    return _openstudiomodelresources.getTableIndependentVariables(t_model)

def getTableIndependentVariableByName(t_model, t_name):
    return _openstudiomodelresources.getTableIndependentVariableByName(t_model, t_name)

def getTableIndependentVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getTableIndependentVariablesByName(t_model, t_name, t_exactMatch)

def _to_TableIndependentVariable(self) -> OptionalTableIndependentVariable:
    """Try to cast the ModelObject to a TableIndependentVariable.

    :return: An Optional TableIndependentVariable.
    """
    return toTableIndependentVariable(self)
openstudioutilitiesidf.IdfObject.to_TableIndependentVariable = _to_TableIndependentVariable

def _getTableIndependentVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalTableIndependentVariable:
    """Try to get an object of type TableIndependentVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional TableIndependentVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getTableIndependentVariable(self, t_handle)
Model.getTableIndependentVariable = _getTableIndependentVariable

def _getTableIndependentVariables(self) -> TableIndependentVariableVector:
    """Get a vector of all objects of type TableIndependentVariable in the model.

    :return: A vector of TableIndependentVariable.
    """
    return getTableIndependentVariables(self)
Model.getTableIndependentVariables = _getTableIndependentVariables

def _getTableIndependentVariableByName(self, t_name: str) -> OptionalTableIndependentVariable:
    """Try to get an object of type TableIndependentVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional TableIndependentVariable.
    """
    return getTableIndependentVariableByName(self, t_name)
Model.getTableIndependentVariableByName = _getTableIndependentVariableByName

def _getTableIndependentVariablesByName(self, t_name: str, t_exactMatch: bool) -> TableIndependentVariableVector:
    """Returns all objects of type TableIndependentVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getTableIndependentVariablesByName(self, t_name, t_exactMatch)
Model.getTableIndependentVariablesByName = _getTableIndependentVariablesByName

class SpaceLoadDefinition(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_SpaceLoadDefinition

    def __init__(self, *args):
        _openstudiomodelresources.SpaceLoadDefinition_swiginit(self, _openstudiomodelresources.new_SpaceLoadDefinition(*args))

    def instances(self):
        return _openstudiomodelresources.SpaceLoadDefinition_instances(self)

    def floorArea(self):
        return _openstudiomodelresources.SpaceLoadDefinition_floorArea(self)

    def quantity(self):
        return _openstudiomodelresources.SpaceLoadDefinition_quantity(self)

# Register SpaceLoadDefinition in _openstudiomodelresources:
_openstudiomodelresources.SpaceLoadDefinition_swigregister(SpaceLoadDefinition)

def toSpaceLoadDefinition(idfObject):
    return _openstudiomodelresources.toSpaceLoadDefinition(idfObject)

def getSpaceLoadDefinition(t_model, t_handle):
    return _openstudiomodelresources.getSpaceLoadDefinition(t_model, t_handle)

def getSpaceLoadDefinitions(t_model):
    return _openstudiomodelresources.getSpaceLoadDefinitions(t_model)

def getSpaceLoadDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getSpaceLoadDefinitionByName(t_model, t_name)

def getSpaceLoadDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getSpaceLoadDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_SpaceLoadDefinition(self) -> OptionalSpaceLoadDefinition:
    """Try to cast the ModelObject to a SpaceLoadDefinition.

    :return: An Optional SpaceLoadDefinition.
    """
    return toSpaceLoadDefinition(self)
openstudioutilitiesidf.IdfObject.to_SpaceLoadDefinition = _to_SpaceLoadDefinition

def _getSpaceLoadDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSpaceLoadDefinition:
    """Try to get an object of type SpaceLoadDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SpaceLoadDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSpaceLoadDefinition(self, t_handle)
Model.getSpaceLoadDefinition = _getSpaceLoadDefinition

def _getSpaceLoadDefinitions(self) -> SpaceLoadDefinitionVector:
    """Get a vector of all objects of type SpaceLoadDefinition in the model.

    :return: A vector of SpaceLoadDefinition.
    """
    return getSpaceLoadDefinitions(self)
Model.getSpaceLoadDefinitions = _getSpaceLoadDefinitions

def _getSpaceLoadDefinitionByName(self, t_name: str) -> OptionalSpaceLoadDefinition:
    """Try to get an object of type SpaceLoadDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SpaceLoadDefinition.
    """
    return getSpaceLoadDefinitionByName(self, t_name)
Model.getSpaceLoadDefinitionByName = _getSpaceLoadDefinitionByName

def _getSpaceLoadDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> SpaceLoadDefinitionVector:
    """Returns all objects of type SpaceLoadDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSpaceLoadDefinitionsByName(self, t_name, t_exactMatch)
Model.getSpaceLoadDefinitionsByName = _getSpaceLoadDefinitionsByName

class PeopleDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_PeopleDefinition

    def __init__(self, *args):
        _openstudiomodelresources.PeopleDefinition_swiginit(self, _openstudiomodelresources.new_PeopleDefinition(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.PeopleDefinition_iddObjectType()

    @staticmethod
    def numberofPeopleCalculationMethodValues():
        return _openstudiomodelresources.PeopleDefinition_numberofPeopleCalculationMethodValues()

    @staticmethod
    def meanRadiantTemperatureCalculationTypeValues():
        return _openstudiomodelresources.PeopleDefinition_meanRadiantTemperatureCalculationTypeValues()

    @staticmethod
    def thermalComfortModelTypeValues():
        return _openstudiomodelresources.PeopleDefinition_thermalComfortModelTypeValues()

    def numberofPeopleCalculationMethod(self):
        return _openstudiomodelresources.PeopleDefinition_numberofPeopleCalculationMethod(self)

    def numberofPeople(self):
        return _openstudiomodelresources.PeopleDefinition_numberofPeople(self)

    def peopleperSpaceFloorArea(self):
        return _openstudiomodelresources.PeopleDefinition_peopleperSpaceFloorArea(self)

    def spaceFloorAreaperPerson(self):
        return _openstudiomodelresources.PeopleDefinition_spaceFloorAreaperPerson(self)

    def fractionRadiant(self):
        return _openstudiomodelresources.PeopleDefinition_fractionRadiant(self)

    def sensibleHeatFraction(self):
        return _openstudiomodelresources.PeopleDefinition_sensibleHeatFraction(self)

    def isSensibleHeatFractionDefaulted(self):
        return _openstudiomodelresources.PeopleDefinition_isSensibleHeatFractionDefaulted(self)

    def isSensibleHeatFractionAutocalculated(self):
        return _openstudiomodelresources.PeopleDefinition_isSensibleHeatFractionAutocalculated(self)

    def carbonDioxideGenerationRate(self):
        return _openstudiomodelresources.PeopleDefinition_carbonDioxideGenerationRate(self)

    def isCarbonDioxideGenerationRateDefaulted(self):
        return _openstudiomodelresources.PeopleDefinition_isCarbonDioxideGenerationRateDefaulted(self)

    def enableASHRAE55ComfortWarnings(self):
        return _openstudiomodelresources.PeopleDefinition_enableASHRAE55ComfortWarnings(self)

    def isEnableASHRAE55ComfortWarningsDefaulted(self):
        return _openstudiomodelresources.PeopleDefinition_isEnableASHRAE55ComfortWarningsDefaulted(self)

    def meanRadiantTemperatureCalculationType(self):
        return _openstudiomodelresources.PeopleDefinition_meanRadiantTemperatureCalculationType(self)

    def isMeanRadiantTemperatureCalculationTypeDefaulted(self):
        return _openstudiomodelresources.PeopleDefinition_isMeanRadiantTemperatureCalculationTypeDefaulted(self)

    def getThermalComfortModelType(self, i):
        return _openstudiomodelresources.PeopleDefinition_getThermalComfortModelType(self, i)

    def numThermalComfortModelTypes(self):
        return _openstudiomodelresources.PeopleDefinition_numThermalComfortModelTypes(self)

    def setNumberofPeople(self, numberofPeople):
        return _openstudiomodelresources.PeopleDefinition_setNumberofPeople(self, numberofPeople)

    def setPeopleperSpaceFloorArea(self, peopleperSpaceFloorArea):
        return _openstudiomodelresources.PeopleDefinition_setPeopleperSpaceFloorArea(self, peopleperSpaceFloorArea)

    def setSpaceFloorAreaperPerson(self, spaceFloorAreaperPerson):
        return _openstudiomodelresources.PeopleDefinition_setSpaceFloorAreaperPerson(self, spaceFloorAreaperPerson)

    def setFractionRadiant(self, fractionRadiant):
        return _openstudiomodelresources.PeopleDefinition_setFractionRadiant(self, fractionRadiant)

    def setSensibleHeatFraction(self, sensibleHeatFraction):
        return _openstudiomodelresources.PeopleDefinition_setSensibleHeatFraction(self, sensibleHeatFraction)

    def resetSensibleHeatFraction(self):
        return _openstudiomodelresources.PeopleDefinition_resetSensibleHeatFraction(self)

    def autocalculateSensibleHeatFraction(self):
        return _openstudiomodelresources.PeopleDefinition_autocalculateSensibleHeatFraction(self)

    def setCarbonDioxideGenerationRate(self, carbonDioxideGenerationRate):
        return _openstudiomodelresources.PeopleDefinition_setCarbonDioxideGenerationRate(self, carbonDioxideGenerationRate)

    def resetCarbonDioxideGenerationRate(self):
        return _openstudiomodelresources.PeopleDefinition_resetCarbonDioxideGenerationRate(self)

    def setEnableASHRAE55ComfortWarnings(self, enableASHRAE55ComfortWarnings):
        return _openstudiomodelresources.PeopleDefinition_setEnableASHRAE55ComfortWarnings(self, enableASHRAE55ComfortWarnings)

    def resetEnableASHRAE55ComfortWarnings(self):
        return _openstudiomodelresources.PeopleDefinition_resetEnableASHRAE55ComfortWarnings(self)

    def setMeanRadiantTemperatureCalculationType(self, meanRadiantTemperatureCalculationType):
        return _openstudiomodelresources.PeopleDefinition_setMeanRadiantTemperatureCalculationType(self, meanRadiantTemperatureCalculationType)

    def resetMeanRadiantTemperatureCalculationType(self):
        return _openstudiomodelresources.PeopleDefinition_resetMeanRadiantTemperatureCalculationType(self)

    def pushThermalComfortModelType(self, thermalComfortModelType):
        return _openstudiomodelresources.PeopleDefinition_pushThermalComfortModelType(self, thermalComfortModelType)

    def setThermalComfortModelType(self, i, thermalComfortModelType):
        return _openstudiomodelresources.PeopleDefinition_setThermalComfortModelType(self, i, thermalComfortModelType)

    def eraseThermalComfortModelType(self, i):
        return _openstudiomodelresources.PeopleDefinition_eraseThermalComfortModelType(self, i)

    def getNumberOfPeople(self, floorArea):
        return _openstudiomodelresources.PeopleDefinition_getNumberOfPeople(self, floorArea)

    def getPeoplePerFloorArea(self, floorArea):
        return _openstudiomodelresources.PeopleDefinition_getPeoplePerFloorArea(self, floorArea)

    def getFloorAreaPerPerson(self, floorArea):
        return _openstudiomodelresources.PeopleDefinition_getFloorAreaPerPerson(self, floorArea)

    def setNumberOfPeopleCalculationMethod(self, method, floorArea):
        return _openstudiomodelresources.PeopleDefinition_setNumberOfPeopleCalculationMethod(self, method, floorArea)

# Register PeopleDefinition in _openstudiomodelresources:
_openstudiomodelresources.PeopleDefinition_swigregister(PeopleDefinition)

def toPeopleDefinition(idfObject):
    return _openstudiomodelresources.toPeopleDefinition(idfObject)

def getPeopleDefinition(t_model, t_handle):
    return _openstudiomodelresources.getPeopleDefinition(t_model, t_handle)

def getPeopleDefinitions(t_model):
    return _openstudiomodelresources.getPeopleDefinitions(t_model)

def getPeopleDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getPeopleDefinitionByName(t_model, t_name)

def getPeopleDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getPeopleDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_PeopleDefinition(self) -> OptionalPeopleDefinition:
    """Try to cast the ModelObject to a PeopleDefinition.

    :return: An Optional PeopleDefinition.
    """
    return toPeopleDefinition(self)
openstudioutilitiesidf.IdfObject.to_PeopleDefinition = _to_PeopleDefinition

def _getPeopleDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPeopleDefinition:
    """Try to get an object of type PeopleDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PeopleDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPeopleDefinition(self, t_handle)
Model.getPeopleDefinition = _getPeopleDefinition

def _getPeopleDefinitions(self) -> PeopleDefinitionVector:
    """Get a vector of all objects of type PeopleDefinition in the model.

    :return: A vector of PeopleDefinition.
    """
    return getPeopleDefinitions(self)
Model.getPeopleDefinitions = _getPeopleDefinitions

def _getPeopleDefinitionByName(self, t_name: str) -> OptionalPeopleDefinition:
    """Try to get an object of type PeopleDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PeopleDefinition.
    """
    return getPeopleDefinitionByName(self, t_name)
Model.getPeopleDefinitionByName = _getPeopleDefinitionByName

def _getPeopleDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> PeopleDefinitionVector:
    """Returns all objects of type PeopleDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPeopleDefinitionsByName(self, t_name, t_exactMatch)
Model.getPeopleDefinitionsByName = _getPeopleDefinitionsByName

class LightsDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_LightsDefinition

    def __init__(self, *args):
        _openstudiomodelresources.LightsDefinition_swiginit(self, _openstudiomodelresources.new_LightsDefinition(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.LightsDefinition_iddObjectType()

    @staticmethod
    def validDesignLevelCalculationMethodValues():
        return _openstudiomodelresources.LightsDefinition_validDesignLevelCalculationMethodValues()

    def designLevelCalculationMethod(self):
        return _openstudiomodelresources.LightsDefinition_designLevelCalculationMethod(self)

    def lightingLevel(self):
        return _openstudiomodelresources.LightsDefinition_lightingLevel(self)

    def wattsperSpaceFloorArea(self):
        return _openstudiomodelresources.LightsDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self):
        return _openstudiomodelresources.LightsDefinition_wattsperPerson(self)

    def fractionRadiant(self):
        return _openstudiomodelresources.LightsDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self):
        return _openstudiomodelresources.LightsDefinition_isFractionRadiantDefaulted(self)

    def fractionVisible(self):
        return _openstudiomodelresources.LightsDefinition_fractionVisible(self)

    def isFractionVisibleDefaulted(self):
        return _openstudiomodelresources.LightsDefinition_isFractionVisibleDefaulted(self)

    def returnAirFraction(self):
        return _openstudiomodelresources.LightsDefinition_returnAirFraction(self)

    def isReturnAirFractionDefaulted(self):
        return _openstudiomodelresources.LightsDefinition_isReturnAirFractionDefaulted(self)

    def returnAirFractionCalculatedfromPlenumTemperature(self):
        return _openstudiomodelresources.LightsDefinition_returnAirFractionCalculatedfromPlenumTemperature(self)

    def isReturnAirFractionCalculatedfromPlenumTemperatureDefaulted(self):
        return _openstudiomodelresources.LightsDefinition_isReturnAirFractionCalculatedfromPlenumTemperatureDefaulted(self)

    def returnAirFractionFunctionofPlenumTemperatureCoefficient1(self):
        return _openstudiomodelresources.LightsDefinition_returnAirFractionFunctionofPlenumTemperatureCoefficient1(self)

    def isReturnAirFractionFunctionofPlenumTemperatureCoefficient1Defaulted(self):
        return _openstudiomodelresources.LightsDefinition_isReturnAirFractionFunctionofPlenumTemperatureCoefficient1Defaulted(self)

    def returnAirFractionFunctionofPlenumTemperatureCoefficient2(self):
        return _openstudiomodelresources.LightsDefinition_returnAirFractionFunctionofPlenumTemperatureCoefficient2(self)

    def isReturnAirFractionFunctionofPlenumTemperatureCoefficient2Defaulted(self):
        return _openstudiomodelresources.LightsDefinition_isReturnAirFractionFunctionofPlenumTemperatureCoefficient2Defaulted(self)

    def setLightingLevel(self, lightingLevel):
        return _openstudiomodelresources.LightsDefinition_setLightingLevel(self, lightingLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea):
        return _openstudiomodelresources.LightsDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson):
        return _openstudiomodelresources.LightsDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionRadiant(self, fractionRadiant):
        return _openstudiomodelresources.LightsDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self):
        return _openstudiomodelresources.LightsDefinition_resetFractionRadiant(self)

    def setFractionVisible(self, fractionVisible):
        return _openstudiomodelresources.LightsDefinition_setFractionVisible(self, fractionVisible)

    def resetFractionVisible(self):
        return _openstudiomodelresources.LightsDefinition_resetFractionVisible(self)

    def setReturnAirFraction(self, returnAirFraction):
        return _openstudiomodelresources.LightsDefinition_setReturnAirFraction(self, returnAirFraction)

    def resetReturnAirFraction(self):
        return _openstudiomodelresources.LightsDefinition_resetReturnAirFraction(self)

    def setReturnAirFractionCalculatedfromPlenumTemperature(self, returnAirFractionCalculatedfromPlenumTemperature):
        return _openstudiomodelresources.LightsDefinition_setReturnAirFractionCalculatedfromPlenumTemperature(self, returnAirFractionCalculatedfromPlenumTemperature)

    def resetReturnAirFractionCalculatedfromPlenumTemperature(self):
        return _openstudiomodelresources.LightsDefinition_resetReturnAirFractionCalculatedfromPlenumTemperature(self)

    def setReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self, returnAirFractionFunctionofPlenumTemperatureCoefficient1):
        return _openstudiomodelresources.LightsDefinition_setReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self, returnAirFractionFunctionofPlenumTemperatureCoefficient1)

    def resetReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self):
        return _openstudiomodelresources.LightsDefinition_resetReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self)

    def setReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self, returnAirFractionFunctionofPlenumTemperatureCoefficient2):
        return _openstudiomodelresources.LightsDefinition_setReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self, returnAirFractionFunctionofPlenumTemperatureCoefficient2)

    def resetReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self):
        return _openstudiomodelresources.LightsDefinition_resetReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self)

    def getLightingPower(self, floorArea, numPeople):
        return _openstudiomodelresources.LightsDefinition_getLightingPower(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelresources.LightsDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelresources.LightsDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method, floorArea, numPeople):
        return _openstudiomodelresources.LightsDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)

# Register LightsDefinition in _openstudiomodelresources:
_openstudiomodelresources.LightsDefinition_swigregister(LightsDefinition)

def toLightsDefinition(idfObject):
    return _openstudiomodelresources.toLightsDefinition(idfObject)

def getLightsDefinition(t_model, t_handle):
    return _openstudiomodelresources.getLightsDefinition(t_model, t_handle)

def getLightsDefinitions(t_model):
    return _openstudiomodelresources.getLightsDefinitions(t_model)

def getLightsDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getLightsDefinitionByName(t_model, t_name)

def getLightsDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getLightsDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_LightsDefinition(self) -> OptionalLightsDefinition:
    """Try to cast the ModelObject to a LightsDefinition.

    :return: An Optional LightsDefinition.
    """
    return toLightsDefinition(self)
openstudioutilitiesidf.IdfObject.to_LightsDefinition = _to_LightsDefinition

def _getLightsDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalLightsDefinition:
    """Try to get an object of type LightsDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional LightsDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getLightsDefinition(self, t_handle)
Model.getLightsDefinition = _getLightsDefinition

def _getLightsDefinitions(self) -> LightsDefinitionVector:
    """Get a vector of all objects of type LightsDefinition in the model.

    :return: A vector of LightsDefinition.
    """
    return getLightsDefinitions(self)
Model.getLightsDefinitions = _getLightsDefinitions

def _getLightsDefinitionByName(self, t_name: str) -> OptionalLightsDefinition:
    """Try to get an object of type LightsDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional LightsDefinition.
    """
    return getLightsDefinitionByName(self, t_name)
Model.getLightsDefinitionByName = _getLightsDefinitionByName

def _getLightsDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> LightsDefinitionVector:
    """Returns all objects of type LightsDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getLightsDefinitionsByName(self, t_name, t_exactMatch)
Model.getLightsDefinitionsByName = _getLightsDefinitionsByName

class LuminaireDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_LuminaireDefinition

    def __init__(self, *args):
        _openstudiomodelresources.LuminaireDefinition_swiginit(self, _openstudiomodelresources.new_LuminaireDefinition(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.LuminaireDefinition_iddObjectType()

    def lightingPower(self):
        return _openstudiomodelresources.LuminaireDefinition_lightingPower(self)

    def isLightingPowerDefaulted(self):
        return _openstudiomodelresources.LuminaireDefinition_isLightingPowerDefaulted(self)

    def fractionRadiant(self):
        return _openstudiomodelresources.LuminaireDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self):
        return _openstudiomodelresources.LuminaireDefinition_isFractionRadiantDefaulted(self)

    def fractionVisible(self):
        return _openstudiomodelresources.LuminaireDefinition_fractionVisible(self)

    def isFractionVisibleDefaulted(self):
        return _openstudiomodelresources.LuminaireDefinition_isFractionVisibleDefaulted(self)

    def returnAirFraction(self):
        return _openstudiomodelresources.LuminaireDefinition_returnAirFraction(self)

    def isReturnAirFractionDefaulted(self):
        return _openstudiomodelresources.LuminaireDefinition_isReturnAirFractionDefaulted(self)

    def returnAirFractionCalculatedfromPlenumTemperature(self):
        return _openstudiomodelresources.LuminaireDefinition_returnAirFractionCalculatedfromPlenumTemperature(self)

    def isReturnAirFractionCalculatedfromPlenumTemperatureDefaulted(self):
        return _openstudiomodelresources.LuminaireDefinition_isReturnAirFractionCalculatedfromPlenumTemperatureDefaulted(self)

    def returnAirFractionFunctionofPlenumTemperatureCoefficient1(self):
        return _openstudiomodelresources.LuminaireDefinition_returnAirFractionFunctionofPlenumTemperatureCoefficient1(self)

    def isReturnAirFractionFunctionofPlenumTemperatureCoefficient1Defaulted(self):
        return _openstudiomodelresources.LuminaireDefinition_isReturnAirFractionFunctionofPlenumTemperatureCoefficient1Defaulted(self)

    def returnAirFractionFunctionofPlenumTemperatureCoefficient2(self):
        return _openstudiomodelresources.LuminaireDefinition_returnAirFractionFunctionofPlenumTemperatureCoefficient2(self)

    def isReturnAirFractionFunctionofPlenumTemperatureCoefficient2Defaulted(self):
        return _openstudiomodelresources.LuminaireDefinition_isReturnAirFractionFunctionofPlenumTemperatureCoefficient2Defaulted(self)

    def setLightingPower(self, lightingPower):
        return _openstudiomodelresources.LuminaireDefinition_setLightingPower(self, lightingPower)

    def resetLightingPower(self):
        return _openstudiomodelresources.LuminaireDefinition_resetLightingPower(self)

    def setFractionRadiant(self, fractionRadiant):
        return _openstudiomodelresources.LuminaireDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self):
        return _openstudiomodelresources.LuminaireDefinition_resetFractionRadiant(self)

    def setFractionVisible(self, fractionVisible):
        return _openstudiomodelresources.LuminaireDefinition_setFractionVisible(self, fractionVisible)

    def resetFractionVisible(self):
        return _openstudiomodelresources.LuminaireDefinition_resetFractionVisible(self)

    def setReturnAirFraction(self, returnAirFraction):
        return _openstudiomodelresources.LuminaireDefinition_setReturnAirFraction(self, returnAirFraction)

    def resetReturnAirFraction(self):
        return _openstudiomodelresources.LuminaireDefinition_resetReturnAirFraction(self)

    def setReturnAirFractionCalculatedfromPlenumTemperature(self, returnAirFractionCalculatedfromPlenumTemperature):
        return _openstudiomodelresources.LuminaireDefinition_setReturnAirFractionCalculatedfromPlenumTemperature(self, returnAirFractionCalculatedfromPlenumTemperature)

    def resetReturnAirFractionCalculatedfromPlenumTemperature(self):
        return _openstudiomodelresources.LuminaireDefinition_resetReturnAirFractionCalculatedfromPlenumTemperature(self)

    def setReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self, returnAirFractionFunctionofPlenumTemperatureCoefficient1):
        return _openstudiomodelresources.LuminaireDefinition_setReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self, returnAirFractionFunctionofPlenumTemperatureCoefficient1)

    def resetReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self):
        return _openstudiomodelresources.LuminaireDefinition_resetReturnAirFractionFunctionofPlenumTemperatureCoefficient1(self)

    def setReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self, returnAirFractionFunctionofPlenumTemperatureCoefficient2):
        return _openstudiomodelresources.LuminaireDefinition_setReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self, returnAirFractionFunctionofPlenumTemperatureCoefficient2)

    def resetReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self):
        return _openstudiomodelresources.LuminaireDefinition_resetReturnAirFractionFunctionofPlenumTemperatureCoefficient2(self)

# Register LuminaireDefinition in _openstudiomodelresources:
_openstudiomodelresources.LuminaireDefinition_swigregister(LuminaireDefinition)

def toLuminaireDefinition(idfObject):
    return _openstudiomodelresources.toLuminaireDefinition(idfObject)

def getLuminaireDefinition(t_model, t_handle):
    return _openstudiomodelresources.getLuminaireDefinition(t_model, t_handle)

def getLuminaireDefinitions(t_model):
    return _openstudiomodelresources.getLuminaireDefinitions(t_model)

def getLuminaireDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getLuminaireDefinitionByName(t_model, t_name)

def getLuminaireDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getLuminaireDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_LuminaireDefinition(self) -> OptionalLuminaireDefinition:
    """Try to cast the ModelObject to a LuminaireDefinition.

    :return: An Optional LuminaireDefinition.
    """
    return toLuminaireDefinition(self)
openstudioutilitiesidf.IdfObject.to_LuminaireDefinition = _to_LuminaireDefinition

def _getLuminaireDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalLuminaireDefinition:
    """Try to get an object of type LuminaireDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional LuminaireDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getLuminaireDefinition(self, t_handle)
Model.getLuminaireDefinition = _getLuminaireDefinition

def _getLuminaireDefinitions(self) -> LuminaireDefinitionVector:
    """Get a vector of all objects of type LuminaireDefinition in the model.

    :return: A vector of LuminaireDefinition.
    """
    return getLuminaireDefinitions(self)
Model.getLuminaireDefinitions = _getLuminaireDefinitions

def _getLuminaireDefinitionByName(self, t_name: str) -> OptionalLuminaireDefinition:
    """Try to get an object of type LuminaireDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional LuminaireDefinition.
    """
    return getLuminaireDefinitionByName(self, t_name)
Model.getLuminaireDefinitionByName = _getLuminaireDefinitionByName

def _getLuminaireDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> LuminaireDefinitionVector:
    """Returns all objects of type LuminaireDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getLuminaireDefinitionsByName(self, t_name, t_exactMatch)
Model.getLuminaireDefinitionsByName = _getLuminaireDefinitionsByName

class ElectricEquipmentDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ElectricEquipmentDefinition

    def __init__(self, *args):
        _openstudiomodelresources.ElectricEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_ElectricEquipmentDefinition(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ElectricEquipmentDefinition_iddObjectType()

    @staticmethod
    def validDesignLevelCalculationMethodValues():
        return _openstudiomodelresources.ElectricEquipmentDefinition_validDesignLevelCalculationMethodValues()

    def designLevelCalculationMethod(self):
        return _openstudiomodelresources.ElectricEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self):
        return _openstudiomodelresources.ElectricEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self):
        return _openstudiomodelresources.ElectricEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self):
        return _openstudiomodelresources.ElectricEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self):
        return _openstudiomodelresources.ElectricEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self):
        return _openstudiomodelresources.ElectricEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self):
        return _openstudiomodelresources.ElectricEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self):
        return _openstudiomodelresources.ElectricEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self):
        return _openstudiomodelresources.ElectricEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self):
        return _openstudiomodelresources.ElectricEquipmentDefinition_isFractionLostDefaulted(self)

    def setDesignLevel(self, designLevel):
        return _openstudiomodelresources.ElectricEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea):
        return _openstudiomodelresources.ElectricEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson):
        return _openstudiomodelresources.ElectricEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent):
        return _openstudiomodelresources.ElectricEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self):
        return _openstudiomodelresources.ElectricEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant):
        return _openstudiomodelresources.ElectricEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self):
        return _openstudiomodelresources.ElectricEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost):
        return _openstudiomodelresources.ElectricEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self):
        return _openstudiomodelresources.ElectricEquipmentDefinition_resetFractionLost(self)

    def getDesignLevel(self, floorArea, numPeople):
        return _openstudiomodelresources.ElectricEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelresources.ElectricEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelresources.ElectricEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method, floorArea, numPeople):
        return _openstudiomodelresources.ElectricEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)

# Register ElectricEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.ElectricEquipmentDefinition_swigregister(ElectricEquipmentDefinition)

def toElectricEquipmentDefinition(idfObject):
    return _openstudiomodelresources.toElectricEquipmentDefinition(idfObject)

def getElectricEquipmentDefinition(t_model, t_handle):
    return _openstudiomodelresources.getElectricEquipmentDefinition(t_model, t_handle)

def getElectricEquipmentDefinitions(t_model):
    return _openstudiomodelresources.getElectricEquipmentDefinitions(t_model)

def getElectricEquipmentDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getElectricEquipmentDefinitionByName(t_model, t_name)

def getElectricEquipmentDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getElectricEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_ElectricEquipmentDefinition(self) -> OptionalElectricEquipmentDefinition:
    """Try to cast the ModelObject to a ElectricEquipmentDefinition.

    :return: An Optional ElectricEquipmentDefinition.
    """
    return toElectricEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_ElectricEquipmentDefinition = _to_ElectricEquipmentDefinition

def _getElectricEquipmentDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalElectricEquipmentDefinition:
    """Try to get an object of type ElectricEquipmentDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ElectricEquipmentDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getElectricEquipmentDefinition(self, t_handle)
Model.getElectricEquipmentDefinition = _getElectricEquipmentDefinition

def _getElectricEquipmentDefinitions(self) -> ElectricEquipmentDefinitionVector:
    """Get a vector of all objects of type ElectricEquipmentDefinition in the model.

    :return: A vector of ElectricEquipmentDefinition.
    """
    return getElectricEquipmentDefinitions(self)
Model.getElectricEquipmentDefinitions = _getElectricEquipmentDefinitions

def _getElectricEquipmentDefinitionByName(self, t_name: str) -> OptionalElectricEquipmentDefinition:
    """Try to get an object of type ElectricEquipmentDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ElectricEquipmentDefinition.
    """
    return getElectricEquipmentDefinitionByName(self, t_name)
Model.getElectricEquipmentDefinitionByName = _getElectricEquipmentDefinitionByName

def _getElectricEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> ElectricEquipmentDefinitionVector:
    """Returns all objects of type ElectricEquipmentDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getElectricEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getElectricEquipmentDefinitionsByName = _getElectricEquipmentDefinitionsByName

class ElectricEquipmentITEAirCooledDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ElectricEquipmentITEAirCooledDefinition

    def __init__(self, *args):
        _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_swiginit(self, _openstudiomodelresources.new_ElectricEquipmentITEAirCooledDefinition(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_iddObjectType()

    @staticmethod
    def validAirFlowCalculationMethodValues():
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_validAirFlowCalculationMethodValues()

    @staticmethod
    def validDesignPowerInputCalculationMethodValues():
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_validDesignPowerInputCalculationMethodValues()

    @staticmethod
    def validEnvironmentalClassValues():
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_validEnvironmentalClassValues()

    @staticmethod
    def validAirInletConnectionTypeValues():
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_validAirInletConnectionTypeValues()

    def airFlowCalculationMethod(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_airFlowCalculationMethod(self)

    def designPowerInputCalculationMethod(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_designPowerInputCalculationMethod(self)

    def designLevel(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_designLevel(self)

    def wattsperUnit(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_wattsperUnit(self)

    def wattsperSpaceFloorArea(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_wattsperSpaceFloorArea(self)

    def wattsperZoneFloorArea(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_wattsperZoneFloorArea(self)

    def cPUPowerInputFunctionofLoadingandAirTemperatureCurve(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_cPUPowerInputFunctionofLoadingandAirTemperatureCurve(self)

    def designFanPowerInputFraction(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_designFanPowerInputFraction(self)

    def isDesignFanPowerInputFractionDefaulted(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_isDesignFanPowerInputFractionDefaulted(self)

    def designFanAirFlowRateperPowerInput(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_designFanAirFlowRateperPowerInput(self)

    def airFlowFunctionofLoadingandAirTemperatureCurve(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_airFlowFunctionofLoadingandAirTemperatureCurve(self)

    def fanPowerInputFunctionofFlowCurve(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_fanPowerInputFunctionofFlowCurve(self)

    def designEnteringAirTemperature(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_designEnteringAirTemperature(self)

    def isDesignEnteringAirTemperatureDefaulted(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_isDesignEnteringAirTemperatureDefaulted(self)

    def environmentalClass(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_environmentalClass(self)

    def airInletConnectionType(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_airInletConnectionType(self)

    def designRecirculationFraction(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_designRecirculationFraction(self)

    def isDesignRecirculationFractionDefaulted(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_isDesignRecirculationFractionDefaulted(self)

    def recirculationFunctionofLoadingandSupplyTemperatureCurve(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_recirculationFunctionofLoadingandSupplyTemperatureCurve(self)

    def designElectricPowerSupplyEfficiency(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_designElectricPowerSupplyEfficiency(self)

    def isDesignElectricPowerSupplyEfficiencyDefaulted(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_isDesignElectricPowerSupplyEfficiencyDefaulted(self)

    def electricPowerSupplyEfficiencyFunctionofPartLoadRatioCurve(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_electricPowerSupplyEfficiencyFunctionofPartLoadRatioCurve(self)

    def fractionofElectricPowerSupplyLossestoZone(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_fractionofElectricPowerSupplyLossestoZone(self)

    def isFractionofElectricPowerSupplyLossestoZoneDefaulted(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_isFractionofElectricPowerSupplyLossestoZoneDefaulted(self)

    def supplyTemperatureDifference(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_supplyTemperatureDifference(self)

    def isSupplyTemperatureDifferenceDefaulted(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_isSupplyTemperatureDifferenceDefaulted(self)

    def supplyTemperatureDifferenceSchedule(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_supplyTemperatureDifferenceSchedule(self)

    def returnTemperatureDifference(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_returnTemperatureDifference(self)

    def isReturnTemperatureDifferenceDefaulted(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_isReturnTemperatureDifferenceDefaulted(self)

    def returnTemperatureDifferenceSchedule(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_returnTemperatureDifferenceSchedule(self)

    def setAirFlowCalculationMethod(self, airFlowCalculationMethod):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setAirFlowCalculationMethod(self, airFlowCalculationMethod)

    def setDesignLevel(self, designLevel):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setDesignLevel(self, designLevel)

    def setWattsperUnit(self, designLevel):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setWattsperUnit(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperZoneFloorArea(self, wattsperSpaceFloorArea):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setWattsperZoneFloorArea(self, wattsperSpaceFloorArea)

    def setCPUPowerInputFunctionofLoadingandAirTemperatureCurve(self, curve):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setCPUPowerInputFunctionofLoadingandAirTemperatureCurve(self, curve)

    def setDesignFanPowerInputFraction(self, designFanPowerInputFraction):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setDesignFanPowerInputFraction(self, designFanPowerInputFraction)

    def resetDesignFanPowerInputFraction(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetDesignFanPowerInputFraction(self)

    def setDesignFanAirFlowRateperPowerInput(self, designFanAirFlowRateperPowerInput):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setDesignFanAirFlowRateperPowerInput(self, designFanAirFlowRateperPowerInput)

    def setAirFlowFunctionofLoadingandAirTemperatureCurve(self, curve):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setAirFlowFunctionofLoadingandAirTemperatureCurve(self, curve)

    def setFanPowerInputFunctionofFlowCurve(self, curve):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setFanPowerInputFunctionofFlowCurve(self, curve)

    def setDesignEnteringAirTemperature(self, designEnteringAirTemperature):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setDesignEnteringAirTemperature(self, designEnteringAirTemperature)

    def resetDesignEnteringAirTemperature(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetDesignEnteringAirTemperature(self)

    def setEnvironmentalClass(self, environmentalClass):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setEnvironmentalClass(self, environmentalClass)

    def setAirInletConnectionType(self, airInletConnectionType):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setAirInletConnectionType(self, airInletConnectionType)

    def setDesignRecirculationFraction(self, designRecirculationFraction):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setDesignRecirculationFraction(self, designRecirculationFraction)

    def resetDesignRecirculationFraction(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetDesignRecirculationFraction(self)

    def setRecirculationFunctionofLoadingandSupplyTemperatureCurve(self, curve):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setRecirculationFunctionofLoadingandSupplyTemperatureCurve(self, curve)

    def resetRecirculationFunctionofLoadingandSupplyTemperatureCurve(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetRecirculationFunctionofLoadingandSupplyTemperatureCurve(self)

    def setDesignElectricPowerSupplyEfficiency(self, designElectricPowerSupplyEfficiency):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setDesignElectricPowerSupplyEfficiency(self, designElectricPowerSupplyEfficiency)

    def resetDesignElectricPowerSupplyEfficiency(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetDesignElectricPowerSupplyEfficiency(self)

    def setElectricPowerSupplyEfficiencyFunctionofPartLoadRatioCurve(self, curve):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setElectricPowerSupplyEfficiencyFunctionofPartLoadRatioCurve(self, curve)

    def resetElectricPowerSupplyEfficiencyFunctionofPartLoadRatioCurve(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetElectricPowerSupplyEfficiencyFunctionofPartLoadRatioCurve(self)

    def setFractionofElectricPowerSupplyLossestoZone(self, fractionofElectricPowerSupplyLossestoZone):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setFractionofElectricPowerSupplyLossestoZone(self, fractionofElectricPowerSupplyLossestoZone)

    def resetFractionofElectricPowerSupplyLossestoZone(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetFractionofElectricPowerSupplyLossestoZone(self)

    def setSupplyTemperatureDifference(self, supplyTemperatureDifference):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setSupplyTemperatureDifference(self, supplyTemperatureDifference)

    def resetSupplyTemperatureDifference(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetSupplyTemperatureDifference(self)

    def setSupplyTemperatureDifferenceSchedule(self, schedule):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setSupplyTemperatureDifferenceSchedule(self, schedule)

    def resetSupplyTemperatureDifferenceSchedule(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetSupplyTemperatureDifferenceSchedule(self)

    def setReturnTemperatureDifference(self, returnTemperatureDifference):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setReturnTemperatureDifference(self, returnTemperatureDifference)

    def resetReturnTemperatureDifference(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetReturnTemperatureDifference(self)

    def setReturnTemperatureDifferenceSchedule(self, schedule):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setReturnTemperatureDifferenceSchedule(self, schedule)

    def resetReturnTemperatureDifferenceSchedule(self):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_resetReturnTemperatureDifferenceSchedule(self)

    def getDesignLevel(self, floorArea):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_getDesignLevel(self, floorArea)

    def getWattsperUnit(self, floorArea):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_getWattsperUnit(self, floorArea)

    def getPowerPerFloorArea(self, floorArea):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_getPowerPerFloorArea(self, floorArea)

    def getWattsperZoneFloorArea(self, floorArea):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_getWattsperZoneFloorArea(self, floorArea)

    def setDesignPowerInputCalculationMethod(self, designPowerInputCalculationMethod, floorArea):
        return _openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_setDesignPowerInputCalculationMethod(self, designPowerInputCalculationMethod, floorArea)

# Register ElectricEquipmentITEAirCooledDefinition in _openstudiomodelresources:
_openstudiomodelresources.ElectricEquipmentITEAirCooledDefinition_swigregister(ElectricEquipmentITEAirCooledDefinition)

def toElectricEquipmentITEAirCooledDefinition(idfObject):
    return _openstudiomodelresources.toElectricEquipmentITEAirCooledDefinition(idfObject)

def getElectricEquipmentITEAirCooledDefinition(t_model, t_handle):
    return _openstudiomodelresources.getElectricEquipmentITEAirCooledDefinition(t_model, t_handle)

def getElectricEquipmentITEAirCooledDefinitions(t_model):
    return _openstudiomodelresources.getElectricEquipmentITEAirCooledDefinitions(t_model)

def getElectricEquipmentITEAirCooledDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getElectricEquipmentITEAirCooledDefinitionByName(t_model, t_name)

def getElectricEquipmentITEAirCooledDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getElectricEquipmentITEAirCooledDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_ElectricEquipmentITEAirCooledDefinition(self) -> OptionalElectricEquipmentITEAirCooledDefinition:
    """Try to cast the ModelObject to a ElectricEquipmentITEAirCooledDefinition.

    :return: An Optional ElectricEquipmentITEAirCooledDefinition.
    """
    return toElectricEquipmentITEAirCooledDefinition(self)
openstudioutilitiesidf.IdfObject.to_ElectricEquipmentITEAirCooledDefinition = _to_ElectricEquipmentITEAirCooledDefinition

def _getElectricEquipmentITEAirCooledDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalElectricEquipmentITEAirCooledDefinition:
    """Try to get an object of type ElectricEquipmentITEAirCooledDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ElectricEquipmentITEAirCooledDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getElectricEquipmentITEAirCooledDefinition(self, t_handle)
Model.getElectricEquipmentITEAirCooledDefinition = _getElectricEquipmentITEAirCooledDefinition

def _getElectricEquipmentITEAirCooledDefinitions(self) -> ElectricEquipmentITEAirCooledDefinitionVector:
    """Get a vector of all objects of type ElectricEquipmentITEAirCooledDefinition in the model.

    :return: A vector of ElectricEquipmentITEAirCooledDefinition.
    """
    return getElectricEquipmentITEAirCooledDefinitions(self)
Model.getElectricEquipmentITEAirCooledDefinitions = _getElectricEquipmentITEAirCooledDefinitions

def _getElectricEquipmentITEAirCooledDefinitionByName(self, t_name: str) -> OptionalElectricEquipmentITEAirCooledDefinition:
    """Try to get an object of type ElectricEquipmentITEAirCooledDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ElectricEquipmentITEAirCooledDefinition.
    """
    return getElectricEquipmentITEAirCooledDefinitionByName(self, t_name)
Model.getElectricEquipmentITEAirCooledDefinitionByName = _getElectricEquipmentITEAirCooledDefinitionByName

def _getElectricEquipmentITEAirCooledDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> ElectricEquipmentITEAirCooledDefinitionVector:
    """Returns all objects of type ElectricEquipmentITEAirCooledDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getElectricEquipmentITEAirCooledDefinitionsByName(self, t_name, t_exactMatch)
Model.getElectricEquipmentITEAirCooledDefinitionsByName = _getElectricEquipmentITEAirCooledDefinitionsByName

class GasEquipmentDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_GasEquipmentDefinition

    def __init__(self, *args):
        _openstudiomodelresources.GasEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_GasEquipmentDefinition(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.GasEquipmentDefinition_iddObjectType()

    @staticmethod
    def validDesignLevelCalculationMethodValues():
        return _openstudiomodelresources.GasEquipmentDefinition_validDesignLevelCalculationMethodValues()

    def designLevelCalculationMethod(self):
        return _openstudiomodelresources.GasEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self):
        return _openstudiomodelresources.GasEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self):
        return _openstudiomodelresources.GasEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self):
        return _openstudiomodelresources.GasEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self):
        return _openstudiomodelresources.GasEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self):
        return _openstudiomodelresources.GasEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self):
        return _openstudiomodelresources.GasEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self):
        return _openstudiomodelresources.GasEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self):
        return _openstudiomodelresources.GasEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self):
        return _openstudiomodelresources.GasEquipmentDefinition_isFractionLostDefaulted(self)

    def carbonDioxideGenerationRate(self):
        return _openstudiomodelresources.GasEquipmentDefinition_carbonDioxideGenerationRate(self)

    def isCarbonDioxideGenerationRateDefaulted(self):
        return _openstudiomodelresources.GasEquipmentDefinition_isCarbonDioxideGenerationRateDefaulted(self)

    def setDesignLevel(self, designLevel):
        return _openstudiomodelresources.GasEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea):
        return _openstudiomodelresources.GasEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson):
        return _openstudiomodelresources.GasEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent):
        return _openstudiomodelresources.GasEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self):
        return _openstudiomodelresources.GasEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant):
        return _openstudiomodelresources.GasEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self):
        return _openstudiomodelresources.GasEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost):
        return _openstudiomodelresources.GasEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self):
        return _openstudiomodelresources.GasEquipmentDefinition_resetFractionLost(self)

    def setCarbonDioxideGenerationRate(self, carbonDioxideGenerationRate):
        return _openstudiomodelresources.GasEquipmentDefinition_setCarbonDioxideGenerationRate(self, carbonDioxideGenerationRate)

    def resetCarbonDioxideGenerationRate(self):
        return _openstudiomodelresources.GasEquipmentDefinition_resetCarbonDioxideGenerationRate(self)

    def getDesignLevel(self, floorArea, numPeople):
        return _openstudiomodelresources.GasEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelresources.GasEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelresources.GasEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method, floorArea, numPeople):
        return _openstudiomodelresources.GasEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)

# Register GasEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.GasEquipmentDefinition_swigregister(GasEquipmentDefinition)

def toGasEquipmentDefinition(idfObject):
    return _openstudiomodelresources.toGasEquipmentDefinition(idfObject)

def getGasEquipmentDefinition(t_model, t_handle):
    return _openstudiomodelresources.getGasEquipmentDefinition(t_model, t_handle)

def getGasEquipmentDefinitions(t_model):
    return _openstudiomodelresources.getGasEquipmentDefinitions(t_model)

def getGasEquipmentDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getGasEquipmentDefinitionByName(t_model, t_name)

def getGasEquipmentDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getGasEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_GasEquipmentDefinition(self) -> OptionalGasEquipmentDefinition:
    """Try to cast the ModelObject to a GasEquipmentDefinition.

    :return: An Optional GasEquipmentDefinition.
    """
    return toGasEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_GasEquipmentDefinition = _to_GasEquipmentDefinition

def _getGasEquipmentDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGasEquipmentDefinition:
    """Try to get an object of type GasEquipmentDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GasEquipmentDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGasEquipmentDefinition(self, t_handle)
Model.getGasEquipmentDefinition = _getGasEquipmentDefinition

def _getGasEquipmentDefinitions(self) -> GasEquipmentDefinitionVector:
    """Get a vector of all objects of type GasEquipmentDefinition in the model.

    :return: A vector of GasEquipmentDefinition.
    """
    return getGasEquipmentDefinitions(self)
Model.getGasEquipmentDefinitions = _getGasEquipmentDefinitions

def _getGasEquipmentDefinitionByName(self, t_name: str) -> OptionalGasEquipmentDefinition:
    """Try to get an object of type GasEquipmentDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GasEquipmentDefinition.
    """
    return getGasEquipmentDefinitionByName(self, t_name)
Model.getGasEquipmentDefinitionByName = _getGasEquipmentDefinitionByName

def _getGasEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> GasEquipmentDefinitionVector:
    """Returns all objects of type GasEquipmentDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGasEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getGasEquipmentDefinitionsByName = _getGasEquipmentDefinitionsByName

class HotWaterEquipmentDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_HotWaterEquipmentDefinition

    def __init__(self, *args):
        _openstudiomodelresources.HotWaterEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_HotWaterEquipmentDefinition(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.HotWaterEquipmentDefinition_iddObjectType()

    @staticmethod
    def validDesignLevelCalculationMethodValues():
        return _openstudiomodelresources.HotWaterEquipmentDefinition_validDesignLevelCalculationMethodValues()

    def designLevelCalculationMethod(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_isFractionLostDefaulted(self)

    def setDesignLevel(self, designLevel):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_resetFractionLost(self)

    def getDesignLevel(self, floorArea, numPeople):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method, floorArea, numPeople):
        return _openstudiomodelresources.HotWaterEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)

# Register HotWaterEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.HotWaterEquipmentDefinition_swigregister(HotWaterEquipmentDefinition)

def toHotWaterEquipmentDefinition(idfObject):
    return _openstudiomodelresources.toHotWaterEquipmentDefinition(idfObject)

def getHotWaterEquipmentDefinition(t_model, t_handle):
    return _openstudiomodelresources.getHotWaterEquipmentDefinition(t_model, t_handle)

def getHotWaterEquipmentDefinitions(t_model):
    return _openstudiomodelresources.getHotWaterEquipmentDefinitions(t_model)

def getHotWaterEquipmentDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getHotWaterEquipmentDefinitionByName(t_model, t_name)

def getHotWaterEquipmentDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getHotWaterEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_HotWaterEquipmentDefinition(self) -> OptionalHotWaterEquipmentDefinition:
    """Try to cast the ModelObject to a HotWaterEquipmentDefinition.

    :return: An Optional HotWaterEquipmentDefinition.
    """
    return toHotWaterEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_HotWaterEquipmentDefinition = _to_HotWaterEquipmentDefinition

def _getHotWaterEquipmentDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalHotWaterEquipmentDefinition:
    """Try to get an object of type HotWaterEquipmentDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional HotWaterEquipmentDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getHotWaterEquipmentDefinition(self, t_handle)
Model.getHotWaterEquipmentDefinition = _getHotWaterEquipmentDefinition

def _getHotWaterEquipmentDefinitions(self) -> HotWaterEquipmentDefinitionVector:
    """Get a vector of all objects of type HotWaterEquipmentDefinition in the model.

    :return: A vector of HotWaterEquipmentDefinition.
    """
    return getHotWaterEquipmentDefinitions(self)
Model.getHotWaterEquipmentDefinitions = _getHotWaterEquipmentDefinitions

def _getHotWaterEquipmentDefinitionByName(self, t_name: str) -> OptionalHotWaterEquipmentDefinition:
    """Try to get an object of type HotWaterEquipmentDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional HotWaterEquipmentDefinition.
    """
    return getHotWaterEquipmentDefinitionByName(self, t_name)
Model.getHotWaterEquipmentDefinitionByName = _getHotWaterEquipmentDefinitionByName

def _getHotWaterEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> HotWaterEquipmentDefinitionVector:
    """Returns all objects of type HotWaterEquipmentDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getHotWaterEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getHotWaterEquipmentDefinitionsByName = _getHotWaterEquipmentDefinitionsByName

class SteamEquipmentDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_SteamEquipmentDefinition

    def __init__(self, *args):
        _openstudiomodelresources.SteamEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_SteamEquipmentDefinition(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.SteamEquipmentDefinition_iddObjectType()

    @staticmethod
    def validDesignLevelCalculationMethodValues():
        return _openstudiomodelresources.SteamEquipmentDefinition_validDesignLevelCalculationMethodValues()

    def designLevelCalculationMethod(self):
        return _openstudiomodelresources.SteamEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self):
        return _openstudiomodelresources.SteamEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self):
        return _openstudiomodelresources.SteamEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self):
        return _openstudiomodelresources.SteamEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self):
        return _openstudiomodelresources.SteamEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self):
        return _openstudiomodelresources.SteamEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self):
        return _openstudiomodelresources.SteamEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self):
        return _openstudiomodelresources.SteamEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self):
        return _openstudiomodelresources.SteamEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self):
        return _openstudiomodelresources.SteamEquipmentDefinition_isFractionLostDefaulted(self)

    def setDesignLevel(self, designLevel):
        return _openstudiomodelresources.SteamEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea):
        return _openstudiomodelresources.SteamEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson):
        return _openstudiomodelresources.SteamEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent):
        return _openstudiomodelresources.SteamEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self):
        return _openstudiomodelresources.SteamEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant):
        return _openstudiomodelresources.SteamEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self):
        return _openstudiomodelresources.SteamEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost):
        return _openstudiomodelresources.SteamEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self):
        return _openstudiomodelresources.SteamEquipmentDefinition_resetFractionLost(self)

    def getDesignLevel(self, floorArea, numPeople):
        return _openstudiomodelresources.SteamEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelresources.SteamEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelresources.SteamEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method, floorArea, numPeople):
        return _openstudiomodelresources.SteamEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)

# Register SteamEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.SteamEquipmentDefinition_swigregister(SteamEquipmentDefinition)

def toSteamEquipmentDefinition(idfObject):
    return _openstudiomodelresources.toSteamEquipmentDefinition(idfObject)

def getSteamEquipmentDefinition(t_model, t_handle):
    return _openstudiomodelresources.getSteamEquipmentDefinition(t_model, t_handle)

def getSteamEquipmentDefinitions(t_model):
    return _openstudiomodelresources.getSteamEquipmentDefinitions(t_model)

def getSteamEquipmentDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getSteamEquipmentDefinitionByName(t_model, t_name)

def getSteamEquipmentDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getSteamEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_SteamEquipmentDefinition(self) -> OptionalSteamEquipmentDefinition:
    """Try to cast the ModelObject to a SteamEquipmentDefinition.

    :return: An Optional SteamEquipmentDefinition.
    """
    return toSteamEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_SteamEquipmentDefinition = _to_SteamEquipmentDefinition

def _getSteamEquipmentDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSteamEquipmentDefinition:
    """Try to get an object of type SteamEquipmentDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SteamEquipmentDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSteamEquipmentDefinition(self, t_handle)
Model.getSteamEquipmentDefinition = _getSteamEquipmentDefinition

def _getSteamEquipmentDefinitions(self) -> SteamEquipmentDefinitionVector:
    """Get a vector of all objects of type SteamEquipmentDefinition in the model.

    :return: A vector of SteamEquipmentDefinition.
    """
    return getSteamEquipmentDefinitions(self)
Model.getSteamEquipmentDefinitions = _getSteamEquipmentDefinitions

def _getSteamEquipmentDefinitionByName(self, t_name: str) -> OptionalSteamEquipmentDefinition:
    """Try to get an object of type SteamEquipmentDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SteamEquipmentDefinition.
    """
    return getSteamEquipmentDefinitionByName(self, t_name)
Model.getSteamEquipmentDefinitionByName = _getSteamEquipmentDefinitionByName

def _getSteamEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> SteamEquipmentDefinitionVector:
    """Returns all objects of type SteamEquipmentDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSteamEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getSteamEquipmentDefinitionsByName = _getSteamEquipmentDefinitionsByName

class OtherEquipmentDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_OtherEquipmentDefinition

    def __init__(self, *args):
        _openstudiomodelresources.OtherEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_OtherEquipmentDefinition(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.OtherEquipmentDefinition_iddObjectType()

    @staticmethod
    def validDesignLevelCalculationMethodValues():
        return _openstudiomodelresources.OtherEquipmentDefinition_validDesignLevelCalculationMethodValues()

    def designLevelCalculationMethod(self):
        return _openstudiomodelresources.OtherEquipmentDefinition_designLevelCalculationMethod(self)

    def designLevel(self):
        return _openstudiomodelresources.OtherEquipmentDefinition_designLevel(self)

    def wattsperSpaceFloorArea(self):
        return _openstudiomodelresources.OtherEquipmentDefinition_wattsperSpaceFloorArea(self)

    def wattsperPerson(self):
        return _openstudiomodelresources.OtherEquipmentDefinition_wattsperPerson(self)

    def fractionLatent(self):
        return _openstudiomodelresources.OtherEquipmentDefinition_fractionLatent(self)

    def isFractionLatentDefaulted(self):
        return _openstudiomodelresources.OtherEquipmentDefinition_isFractionLatentDefaulted(self)

    def fractionRadiant(self):
        return _openstudiomodelresources.OtherEquipmentDefinition_fractionRadiant(self)

    def isFractionRadiantDefaulted(self):
        return _openstudiomodelresources.OtherEquipmentDefinition_isFractionRadiantDefaulted(self)

    def fractionLost(self):
        return _openstudiomodelresources.OtherEquipmentDefinition_fractionLost(self)

    def isFractionLostDefaulted(self):
        return _openstudiomodelresources.OtherEquipmentDefinition_isFractionLostDefaulted(self)

    def setDesignLevel(self, designLevel):
        return _openstudiomodelresources.OtherEquipmentDefinition_setDesignLevel(self, designLevel)

    def setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea):
        return _openstudiomodelresources.OtherEquipmentDefinition_setWattsperSpaceFloorArea(self, wattsperSpaceFloorArea)

    def setWattsperPerson(self, wattsperPerson):
        return _openstudiomodelresources.OtherEquipmentDefinition_setWattsperPerson(self, wattsperPerson)

    def setFractionLatent(self, fractionLatent):
        return _openstudiomodelresources.OtherEquipmentDefinition_setFractionLatent(self, fractionLatent)

    def resetFractionLatent(self):
        return _openstudiomodelresources.OtherEquipmentDefinition_resetFractionLatent(self)

    def setFractionRadiant(self, fractionRadiant):
        return _openstudiomodelresources.OtherEquipmentDefinition_setFractionRadiant(self, fractionRadiant)

    def resetFractionRadiant(self):
        return _openstudiomodelresources.OtherEquipmentDefinition_resetFractionRadiant(self)

    def setFractionLost(self, fractionLost):
        return _openstudiomodelresources.OtherEquipmentDefinition_setFractionLost(self, fractionLost)

    def resetFractionLost(self):
        return _openstudiomodelresources.OtherEquipmentDefinition_resetFractionLost(self)

    def getDesignLevel(self, floorArea, numPeople):
        return _openstudiomodelresources.OtherEquipmentDefinition_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelresources.OtherEquipmentDefinition_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelresources.OtherEquipmentDefinition_getPowerPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method, floorArea, numPeople):
        return _openstudiomodelresources.OtherEquipmentDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)

# Register OtherEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.OtherEquipmentDefinition_swigregister(OtherEquipmentDefinition)

def toOtherEquipmentDefinition(idfObject):
    return _openstudiomodelresources.toOtherEquipmentDefinition(idfObject)

def getOtherEquipmentDefinition(t_model, t_handle):
    return _openstudiomodelresources.getOtherEquipmentDefinition(t_model, t_handle)

def getOtherEquipmentDefinitions(t_model):
    return _openstudiomodelresources.getOtherEquipmentDefinitions(t_model)

def getOtherEquipmentDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getOtherEquipmentDefinitionByName(t_model, t_name)

def getOtherEquipmentDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getOtherEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_OtherEquipmentDefinition(self) -> OptionalOtherEquipmentDefinition:
    """Try to cast the ModelObject to a OtherEquipmentDefinition.

    :return: An Optional OtherEquipmentDefinition.
    """
    return toOtherEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_OtherEquipmentDefinition = _to_OtherEquipmentDefinition

def _getOtherEquipmentDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalOtherEquipmentDefinition:
    """Try to get an object of type OtherEquipmentDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional OtherEquipmentDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getOtherEquipmentDefinition(self, t_handle)
Model.getOtherEquipmentDefinition = _getOtherEquipmentDefinition

def _getOtherEquipmentDefinitions(self) -> OtherEquipmentDefinitionVector:
    """Get a vector of all objects of type OtherEquipmentDefinition in the model.

    :return: A vector of OtherEquipmentDefinition.
    """
    return getOtherEquipmentDefinitions(self)
Model.getOtherEquipmentDefinitions = _getOtherEquipmentDefinitions

def _getOtherEquipmentDefinitionByName(self, t_name: str) -> OptionalOtherEquipmentDefinition:
    """Try to get an object of type OtherEquipmentDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional OtherEquipmentDefinition.
    """
    return getOtherEquipmentDefinitionByName(self, t_name)
Model.getOtherEquipmentDefinitionByName = _getOtherEquipmentDefinitionByName

def _getOtherEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> OtherEquipmentDefinitionVector:
    """Returns all objects of type OtherEquipmentDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getOtherEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getOtherEquipmentDefinitionsByName = _getOtherEquipmentDefinitionsByName

class InternalMassDefinition(SpaceLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_InternalMassDefinition

    def __init__(self, *args):
        _openstudiomodelresources.InternalMassDefinition_swiginit(self, _openstudiomodelresources.new_InternalMassDefinition(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.InternalMassDefinition_iddObjectType()

    @staticmethod
    def validDesignLevelCalculationMethodValues():
        return _openstudiomodelresources.InternalMassDefinition_validDesignLevelCalculationMethodValues()

    def construction(self):
        return _openstudiomodelresources.InternalMassDefinition_construction(self)

    def isConstructionDefaulted(self):
        return _openstudiomodelresources.InternalMassDefinition_isConstructionDefaulted(self)

    def designLevelCalculationMethod(self):
        return _openstudiomodelresources.InternalMassDefinition_designLevelCalculationMethod(self)

    def surfaceArea(self):
        return _openstudiomodelresources.InternalMassDefinition_surfaceArea(self)

    def surfaceAreaperSpaceFloorArea(self):
        return _openstudiomodelresources.InternalMassDefinition_surfaceAreaperSpaceFloorArea(self)

    def surfaceAreaperPerson(self):
        return _openstudiomodelresources.InternalMassDefinition_surfaceAreaperPerson(self)

    def setConstruction(self, construction):
        return _openstudiomodelresources.InternalMassDefinition_setConstruction(self, construction)

    def resetConstruction(self):
        return _openstudiomodelresources.InternalMassDefinition_resetConstruction(self)

    def setSurfaceArea(self, surfaceArea):
        return _openstudiomodelresources.InternalMassDefinition_setSurfaceArea(self, surfaceArea)

    def setSurfaceAreaperSpaceFloorArea(self, surfaceAreaperSpaceFloorArea):
        return _openstudiomodelresources.InternalMassDefinition_setSurfaceAreaperSpaceFloorArea(self, surfaceAreaperSpaceFloorArea)

    def setSurfaceAreaperPerson(self, surfaceAreaperPerson):
        return _openstudiomodelresources.InternalMassDefinition_setSurfaceAreaperPerson(self, surfaceAreaperPerson)

    def getSurfaceArea(self, floorArea, numPeople):
        return _openstudiomodelresources.InternalMassDefinition_getSurfaceArea(self, floorArea, numPeople)

    def getSurfaceAreaPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelresources.InternalMassDefinition_getSurfaceAreaPerFloorArea(self, floorArea, numPeople)

    def getSurfaceAreaPerPerson(self, floorArea, numPeople):
        return _openstudiomodelresources.InternalMassDefinition_getSurfaceAreaPerPerson(self, floorArea, numPeople)

    def setDesignLevelCalculationMethod(self, method, floorArea, numPeople):
        return _openstudiomodelresources.InternalMassDefinition_setDesignLevelCalculationMethod(self, method, floorArea, numPeople)

# Register InternalMassDefinition in _openstudiomodelresources:
_openstudiomodelresources.InternalMassDefinition_swigregister(InternalMassDefinition)

def toInternalMassDefinition(idfObject):
    return _openstudiomodelresources.toInternalMassDefinition(idfObject)

def getInternalMassDefinition(t_model, t_handle):
    return _openstudiomodelresources.getInternalMassDefinition(t_model, t_handle)

def getInternalMassDefinitions(t_model):
    return _openstudiomodelresources.getInternalMassDefinitions(t_model)

def getInternalMassDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getInternalMassDefinitionByName(t_model, t_name)

def getInternalMassDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getInternalMassDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_InternalMassDefinition(self) -> OptionalInternalMassDefinition:
    """Try to cast the ModelObject to a InternalMassDefinition.

    :return: An Optional InternalMassDefinition.
    """
    return toInternalMassDefinition(self)
openstudioutilitiesidf.IdfObject.to_InternalMassDefinition = _to_InternalMassDefinition

def _getInternalMassDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalInternalMassDefinition:
    """Try to get an object of type InternalMassDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional InternalMassDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getInternalMassDefinition(self, t_handle)
Model.getInternalMassDefinition = _getInternalMassDefinition

def _getInternalMassDefinitions(self) -> InternalMassDefinitionVector:
    """Get a vector of all objects of type InternalMassDefinition in the model.

    :return: A vector of InternalMassDefinition.
    """
    return getInternalMassDefinitions(self)
Model.getInternalMassDefinitions = _getInternalMassDefinitions

def _getInternalMassDefinitionByName(self, t_name: str) -> OptionalInternalMassDefinition:
    """Try to get an object of type InternalMassDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional InternalMassDefinition.
    """
    return getInternalMassDefinitionByName(self, t_name)
Model.getInternalMassDefinitionByName = _getInternalMassDefinitionByName

def _getInternalMassDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> InternalMassDefinitionVector:
    """Returns all objects of type InternalMassDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getInternalMassDefinitionsByName(self, t_name, t_exactMatch)
Model.getInternalMassDefinitionsByName = _getInternalMassDefinitionsByName

class ExteriorLoadDefinition(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorLoadDefinition

    def __init__(self, *args):
        _openstudiomodelresources.ExteriorLoadDefinition_swiginit(self, _openstudiomodelresources.new_ExteriorLoadDefinition(*args))

    def instances(self):
        return _openstudiomodelresources.ExteriorLoadDefinition_instances(self)

    def quantity(self):
        return _openstudiomodelresources.ExteriorLoadDefinition_quantity(self)

# Register ExteriorLoadDefinition in _openstudiomodelresources:
_openstudiomodelresources.ExteriorLoadDefinition_swigregister(ExteriorLoadDefinition)

def toExteriorLoadDefinition(idfObject):
    return _openstudiomodelresources.toExteriorLoadDefinition(idfObject)

def getExteriorLoadDefinition(t_model, t_handle):
    return _openstudiomodelresources.getExteriorLoadDefinition(t_model, t_handle)

def getExteriorLoadDefinitions(t_model):
    return _openstudiomodelresources.getExteriorLoadDefinitions(t_model)

def getExteriorLoadDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getExteriorLoadDefinitionByName(t_model, t_name)

def getExteriorLoadDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getExteriorLoadDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_ExteriorLoadDefinition(self) -> OptionalExteriorLoadDefinition:
    """Try to cast the ModelObject to a ExteriorLoadDefinition.

    :return: An Optional ExteriorLoadDefinition.
    """
    return toExteriorLoadDefinition(self)
openstudioutilitiesidf.IdfObject.to_ExteriorLoadDefinition = _to_ExteriorLoadDefinition

def _getExteriorLoadDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExteriorLoadDefinition:
    """Try to get an object of type ExteriorLoadDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExteriorLoadDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExteriorLoadDefinition(self, t_handle)
Model.getExteriorLoadDefinition = _getExteriorLoadDefinition

def _getExteriorLoadDefinitions(self) -> ExteriorLoadDefinitionVector:
    """Get a vector of all objects of type ExteriorLoadDefinition in the model.

    :return: A vector of ExteriorLoadDefinition.
    """
    return getExteriorLoadDefinitions(self)
Model.getExteriorLoadDefinitions = _getExteriorLoadDefinitions

def _getExteriorLoadDefinitionByName(self, t_name: str) -> OptionalExteriorLoadDefinition:
    """Try to get an object of type ExteriorLoadDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExteriorLoadDefinition.
    """
    return getExteriorLoadDefinitionByName(self, t_name)
Model.getExteriorLoadDefinitionByName = _getExteriorLoadDefinitionByName

def _getExteriorLoadDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> ExteriorLoadDefinitionVector:
    """Returns all objects of type ExteriorLoadDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExteriorLoadDefinitionsByName(self, t_name, t_exactMatch)
Model.getExteriorLoadDefinitionsByName = _getExteriorLoadDefinitionsByName

class ExteriorLightsDefinition(ExteriorLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorLightsDefinition

    def __init__(self, *args):
        _openstudiomodelresources.ExteriorLightsDefinition_swiginit(self, _openstudiomodelresources.new_ExteriorLightsDefinition(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ExteriorLightsDefinition_iddObjectType()

    def designLevel(self):
        return _openstudiomodelresources.ExteriorLightsDefinition_designLevel(self)

    def setDesignLevel(self, designLevel):
        return _openstudiomodelresources.ExteriorLightsDefinition_setDesignLevel(self, designLevel)

# Register ExteriorLightsDefinition in _openstudiomodelresources:
_openstudiomodelresources.ExteriorLightsDefinition_swigregister(ExteriorLightsDefinition)

def toExteriorLightsDefinition(idfObject):
    return _openstudiomodelresources.toExteriorLightsDefinition(idfObject)

def getExteriorLightsDefinition(t_model, t_handle):
    return _openstudiomodelresources.getExteriorLightsDefinition(t_model, t_handle)

def getExteriorLightsDefinitions(t_model):
    return _openstudiomodelresources.getExteriorLightsDefinitions(t_model)

def getExteriorLightsDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getExteriorLightsDefinitionByName(t_model, t_name)

def getExteriorLightsDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getExteriorLightsDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_ExteriorLightsDefinition(self) -> OptionalExteriorLightsDefinition:
    """Try to cast the ModelObject to a ExteriorLightsDefinition.

    :return: An Optional ExteriorLightsDefinition.
    """
    return toExteriorLightsDefinition(self)
openstudioutilitiesidf.IdfObject.to_ExteriorLightsDefinition = _to_ExteriorLightsDefinition

def _getExteriorLightsDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExteriorLightsDefinition:
    """Try to get an object of type ExteriorLightsDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExteriorLightsDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExteriorLightsDefinition(self, t_handle)
Model.getExteriorLightsDefinition = _getExteriorLightsDefinition

def _getExteriorLightsDefinitions(self) -> ExteriorLightsDefinitionVector:
    """Get a vector of all objects of type ExteriorLightsDefinition in the model.

    :return: A vector of ExteriorLightsDefinition.
    """
    return getExteriorLightsDefinitions(self)
Model.getExteriorLightsDefinitions = _getExteriorLightsDefinitions

def _getExteriorLightsDefinitionByName(self, t_name: str) -> OptionalExteriorLightsDefinition:
    """Try to get an object of type ExteriorLightsDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExteriorLightsDefinition.
    """
    return getExteriorLightsDefinitionByName(self, t_name)
Model.getExteriorLightsDefinitionByName = _getExteriorLightsDefinitionByName

def _getExteriorLightsDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> ExteriorLightsDefinitionVector:
    """Returns all objects of type ExteriorLightsDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExteriorLightsDefinitionsByName(self, t_name, t_exactMatch)
Model.getExteriorLightsDefinitionsByName = _getExteriorLightsDefinitionsByName

class ExteriorFuelEquipmentDefinition(ExteriorLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorFuelEquipmentDefinition

    def __init__(self, *args):
        _openstudiomodelresources.ExteriorFuelEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_ExteriorFuelEquipmentDefinition(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinition_iddObjectType()

    def designLevel(self):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinition_designLevel(self)

    def setDesignLevel(self, designLevel):
        return _openstudiomodelresources.ExteriorFuelEquipmentDefinition_setDesignLevel(self, designLevel)

# Register ExteriorFuelEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.ExteriorFuelEquipmentDefinition_swigregister(ExteriorFuelEquipmentDefinition)

def toExteriorFuelEquipmentDefinition(idfObject):
    return _openstudiomodelresources.toExteriorFuelEquipmentDefinition(idfObject)

def getExteriorFuelEquipmentDefinition(t_model, t_handle):
    return _openstudiomodelresources.getExteriorFuelEquipmentDefinition(t_model, t_handle)

def getExteriorFuelEquipmentDefinitions(t_model):
    return _openstudiomodelresources.getExteriorFuelEquipmentDefinitions(t_model)

def getExteriorFuelEquipmentDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getExteriorFuelEquipmentDefinitionByName(t_model, t_name)

def getExteriorFuelEquipmentDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getExteriorFuelEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_ExteriorFuelEquipmentDefinition(self) -> OptionalExteriorFuelEquipmentDefinition:
    """Try to cast the ModelObject to a ExteriorFuelEquipmentDefinition.

    :return: An Optional ExteriorFuelEquipmentDefinition.
    """
    return toExteriorFuelEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_ExteriorFuelEquipmentDefinition = _to_ExteriorFuelEquipmentDefinition

def _getExteriorFuelEquipmentDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExteriorFuelEquipmentDefinition:
    """Try to get an object of type ExteriorFuelEquipmentDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExteriorFuelEquipmentDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExteriorFuelEquipmentDefinition(self, t_handle)
Model.getExteriorFuelEquipmentDefinition = _getExteriorFuelEquipmentDefinition

def _getExteriorFuelEquipmentDefinitions(self) -> ExteriorFuelEquipmentDefinitionVector:
    """Get a vector of all objects of type ExteriorFuelEquipmentDefinition in the model.

    :return: A vector of ExteriorFuelEquipmentDefinition.
    """
    return getExteriorFuelEquipmentDefinitions(self)
Model.getExteriorFuelEquipmentDefinitions = _getExteriorFuelEquipmentDefinitions

def _getExteriorFuelEquipmentDefinitionByName(self, t_name: str) -> OptionalExteriorFuelEquipmentDefinition:
    """Try to get an object of type ExteriorFuelEquipmentDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExteriorFuelEquipmentDefinition.
    """
    return getExteriorFuelEquipmentDefinitionByName(self, t_name)
Model.getExteriorFuelEquipmentDefinitionByName = _getExteriorFuelEquipmentDefinitionByName

def _getExteriorFuelEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> ExteriorFuelEquipmentDefinitionVector:
    """Returns all objects of type ExteriorFuelEquipmentDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExteriorFuelEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getExteriorFuelEquipmentDefinitionsByName = _getExteriorFuelEquipmentDefinitionsByName

class ExteriorWaterEquipmentDefinition(ExteriorLoadDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_ExteriorWaterEquipmentDefinition

    def __init__(self, *args):
        _openstudiomodelresources.ExteriorWaterEquipmentDefinition_swiginit(self, _openstudiomodelresources.new_ExteriorWaterEquipmentDefinition(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinition_iddObjectType()

    def designLevel(self):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinition_designLevel(self)

    def setDesignLevel(self, designLevel):
        return _openstudiomodelresources.ExteriorWaterEquipmentDefinition_setDesignLevel(self, designLevel)

# Register ExteriorWaterEquipmentDefinition in _openstudiomodelresources:
_openstudiomodelresources.ExteriorWaterEquipmentDefinition_swigregister(ExteriorWaterEquipmentDefinition)

def toExteriorWaterEquipmentDefinition(idfObject):
    return _openstudiomodelresources.toExteriorWaterEquipmentDefinition(idfObject)

def getExteriorWaterEquipmentDefinition(t_model, t_handle):
    return _openstudiomodelresources.getExteriorWaterEquipmentDefinition(t_model, t_handle)

def getExteriorWaterEquipmentDefinitions(t_model):
    return _openstudiomodelresources.getExteriorWaterEquipmentDefinitions(t_model)

def getExteriorWaterEquipmentDefinitionByName(t_model, t_name):
    return _openstudiomodelresources.getExteriorWaterEquipmentDefinitionByName(t_model, t_name)

def getExteriorWaterEquipmentDefinitionsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getExteriorWaterEquipmentDefinitionsByName(t_model, t_name, t_exactMatch)

def _to_ExteriorWaterEquipmentDefinition(self) -> OptionalExteriorWaterEquipmentDefinition:
    """Try to cast the ModelObject to a ExteriorWaterEquipmentDefinition.

    :return: An Optional ExteriorWaterEquipmentDefinition.
    """
    return toExteriorWaterEquipmentDefinition(self)
openstudioutilitiesidf.IdfObject.to_ExteriorWaterEquipmentDefinition = _to_ExteriorWaterEquipmentDefinition

def _getExteriorWaterEquipmentDefinition(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExteriorWaterEquipmentDefinition:
    """Try to get an object of type ExteriorWaterEquipmentDefinition referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExteriorWaterEquipmentDefinition.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExteriorWaterEquipmentDefinition(self, t_handle)
Model.getExteriorWaterEquipmentDefinition = _getExteriorWaterEquipmentDefinition

def _getExteriorWaterEquipmentDefinitions(self) -> ExteriorWaterEquipmentDefinitionVector:
    """Get a vector of all objects of type ExteriorWaterEquipmentDefinition in the model.

    :return: A vector of ExteriorWaterEquipmentDefinition.
    """
    return getExteriorWaterEquipmentDefinitions(self)
Model.getExteriorWaterEquipmentDefinitions = _getExteriorWaterEquipmentDefinitions

def _getExteriorWaterEquipmentDefinitionByName(self, t_name: str) -> OptionalExteriorWaterEquipmentDefinition:
    """Try to get an object of type ExteriorWaterEquipmentDefinition that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExteriorWaterEquipmentDefinition.
    """
    return getExteriorWaterEquipmentDefinitionByName(self, t_name)
Model.getExteriorWaterEquipmentDefinitionByName = _getExteriorWaterEquipmentDefinitionByName

def _getExteriorWaterEquipmentDefinitionsByName(self, t_name: str, t_exactMatch: bool) -> ExteriorWaterEquipmentDefinitionVector:
    """Returns all objects of type ExteriorWaterEquipmentDefinition named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExteriorWaterEquipmentDefinitionsByName(self, t_name, t_exactMatch)
Model.getExteriorWaterEquipmentDefinitionsByName = _getExteriorWaterEquipmentDefinitionsByName

class ColorRGB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r, g, b):
        _openstudiomodelresources.ColorRGB_swiginit(self, _openstudiomodelresources.new_ColorRGB(r, g, b))

    def red(self):
        return _openstudiomodelresources.ColorRGB_red(self)

    def green(self):
        return _openstudiomodelresources.ColorRGB_green(self)

    def blue(self):
        return _openstudiomodelresources.ColorRGB_blue(self)
    __swig_destroy__ = _openstudiomodelresources.delete_ColorRGB

# Register ColorRGB in _openstudiomodelresources:
_openstudiomodelresources.ColorRGB_swigregister(ColorRGB)
class RenderingColor(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_RenderingColor

    def __init__(self, *args):
        _openstudiomodelresources.RenderingColor_swiginit(self, _openstudiomodelresources.new_RenderingColor(*args))

    @staticmethod
    def fromColorString(s, model):
        return _openstudiomodelresources.RenderingColor_fromColorString(s, model)

    @staticmethod
    def randomColor():
        return _openstudiomodelresources.RenderingColor_randomColor()

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.RenderingColor_iddObjectType()

    def renderingRedValue(self):
        return _openstudiomodelresources.RenderingColor_renderingRedValue(self)

    def renderingGreenValue(self):
        return _openstudiomodelresources.RenderingColor_renderingGreenValue(self)

    def renderingBlueValue(self):
        return _openstudiomodelresources.RenderingColor_renderingBlueValue(self)

    def renderingAlphaValue(self):
        return _openstudiomodelresources.RenderingColor_renderingAlphaValue(self)

    def isRenderingAlphaValueDefaulted(self):
        return _openstudiomodelresources.RenderingColor_isRenderingAlphaValueDefaulted(self)

    def setRenderingRedValue(self, renderingRedValue):
        return _openstudiomodelresources.RenderingColor_setRenderingRedValue(self, renderingRedValue)

    def setRenderingGreenValue(self, renderingGreenValue):
        return _openstudiomodelresources.RenderingColor_setRenderingGreenValue(self, renderingGreenValue)

    def setRenderingBlueValue(self, renderingBlueValue):
        return _openstudiomodelresources.RenderingColor_setRenderingBlueValue(self, renderingBlueValue)

    def setRenderingAlphaValue(self, renderingAlphaValue):
        return _openstudiomodelresources.RenderingColor_setRenderingAlphaValue(self, renderingAlphaValue)

    def resetRenderingAlphaValue(self):
        return _openstudiomodelresources.RenderingColor_resetRenderingAlphaValue(self)

    def colorString(self):
        return _openstudiomodelresources.RenderingColor_colorString(self)

# Register RenderingColor in _openstudiomodelresources:
_openstudiomodelresources.RenderingColor_swigregister(RenderingColor)

def toRenderingColor(idfObject):
    return _openstudiomodelresources.toRenderingColor(idfObject)

def getRenderingColor(t_model, t_handle):
    return _openstudiomodelresources.getRenderingColor(t_model, t_handle)

def getRenderingColors(t_model):
    return _openstudiomodelresources.getRenderingColors(t_model)

def getRenderingColorByName(t_model, t_name):
    return _openstudiomodelresources.getRenderingColorByName(t_model, t_name)

def getRenderingColorsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getRenderingColorsByName(t_model, t_name, t_exactMatch)

def _to_RenderingColor(self) -> OptionalRenderingColor:
    """Try to cast the ModelObject to a RenderingColor.

    :return: An Optional RenderingColor.
    """
    return toRenderingColor(self)
openstudioutilitiesidf.IdfObject.to_RenderingColor = _to_RenderingColor

def _getRenderingColor(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalRenderingColor:
    """Try to get an object of type RenderingColor referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional RenderingColor.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getRenderingColor(self, t_handle)
Model.getRenderingColor = _getRenderingColor

def _getRenderingColors(self) -> RenderingColorVector:
    """Get a vector of all objects of type RenderingColor in the model.

    :return: A vector of RenderingColor.
    """
    return getRenderingColors(self)
Model.getRenderingColors = _getRenderingColors

def _getRenderingColorByName(self, t_name: str) -> OptionalRenderingColor:
    """Try to get an object of type RenderingColor that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional RenderingColor.
    """
    return getRenderingColorByName(self, t_name)
Model.getRenderingColorByName = _getRenderingColorByName

def _getRenderingColorsByName(self, t_name: str, t_exactMatch: bool) -> RenderingColorVector:
    """Returns all objects of type RenderingColor named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getRenderingColorsByName(self, t_name, t_exactMatch)
Model.getRenderingColorsByName = _getRenderingColorsByName

class DesignSpecificationOutdoorAir(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_DesignSpecificationOutdoorAir

    def __init__(self, *args):
        _openstudiomodelresources.DesignSpecificationOutdoorAir_swiginit(self, _openstudiomodelresources.new_DesignSpecificationOutdoorAir(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_iddObjectType()

    @staticmethod
    def outdoorAirMethodValues():
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirMethodValues()

    @staticmethod
    def validOutdoorAirMethodValues():
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_validOutdoorAirMethodValues()

    def outdoorAirMethod(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirMethod(self)

    def isOutdoorAirMethodDefaulted(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirMethodDefaulted(self)

    def outdoorAirFlowperPerson(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowperPerson(self)

    def isOutdoorAirFlowperPersonDefaulted(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirFlowperPersonDefaulted(self)

    def outdoorAirFlowperFloorArea(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowperFloorArea(self)

    def isOutdoorAirFlowperFloorAreaDefaulted(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirFlowperFloorAreaDefaulted(self)

    def outdoorAirFlowRate(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowRate(self)

    def isOutdoorAirFlowRateDefaulted(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirFlowRateDefaulted(self)

    def outdoorAirFlowAirChangesperHour(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowAirChangesperHour(self)

    def isOutdoorAirFlowAirChangesperHourDefaulted(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_isOutdoorAirFlowAirChangesperHourDefaulted(self)

    def outdoorAirFlowRateFractionSchedule(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_outdoorAirFlowRateFractionSchedule(self)

    def setOutdoorAirMethod(self, outdoorAirMethod):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirMethod(self, outdoorAirMethod)

    def resetOutdoorAirMethod(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirMethod(self)

    def setOutdoorAirFlowperPerson(self, outdoorAirFlowperPerson):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowperPerson(self, outdoorAirFlowperPerson)

    def resetOutdoorAirFlowperPerson(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowperPerson(self)

    def setOutdoorAirFlowperFloorArea(self, outdoorAirFlowperFloorArea):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowperFloorArea(self, outdoorAirFlowperFloorArea)

    def resetOutdoorAirFlowperFloorArea(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowperFloorArea(self)

    def setOutdoorAirFlowRate(self, outdoorAirFlowRate):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowRate(self, outdoorAirFlowRate)

    def resetOutdoorAirFlowRate(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowRate(self)

    def setOutdoorAirFlowAirChangesperHour(self, outdoorAirFlowAirChangesperHour):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowAirChangesperHour(self, outdoorAirFlowAirChangesperHour)

    def resetOutdoorAirFlowAirChangesperHour(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowAirChangesperHour(self)

    def setOutdoorAirFlowRateFractionSchedule(self, schedule):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_setOutdoorAirFlowRateFractionSchedule(self, schedule)

    def resetOutdoorAirFlowRateFractionSchedule(self):
        return _openstudiomodelresources.DesignSpecificationOutdoorAir_resetOutdoorAirFlowRateFractionSchedule(self)

# Register DesignSpecificationOutdoorAir in _openstudiomodelresources:
_openstudiomodelresources.DesignSpecificationOutdoorAir_swigregister(DesignSpecificationOutdoorAir)

def toDesignSpecificationOutdoorAir(idfObject):
    return _openstudiomodelresources.toDesignSpecificationOutdoorAir(idfObject)

def getDesignSpecificationOutdoorAir(t_model, t_handle):
    return _openstudiomodelresources.getDesignSpecificationOutdoorAir(t_model, t_handle)

def getDesignSpecificationOutdoorAirs(t_model):
    return _openstudiomodelresources.getDesignSpecificationOutdoorAirs(t_model)

def getDesignSpecificationOutdoorAirByName(t_model, t_name):
    return _openstudiomodelresources.getDesignSpecificationOutdoorAirByName(t_model, t_name)

def getDesignSpecificationOutdoorAirsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getDesignSpecificationOutdoorAirsByName(t_model, t_name, t_exactMatch)

def _to_DesignSpecificationOutdoorAir(self) -> OptionalDesignSpecificationOutdoorAir:
    """Try to cast the ModelObject to a DesignSpecificationOutdoorAir.

    :return: An Optional DesignSpecificationOutdoorAir.
    """
    return toDesignSpecificationOutdoorAir(self)
openstudioutilitiesidf.IdfObject.to_DesignSpecificationOutdoorAir = _to_DesignSpecificationOutdoorAir

def _getDesignSpecificationOutdoorAir(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalDesignSpecificationOutdoorAir:
    """Try to get an object of type DesignSpecificationOutdoorAir referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional DesignSpecificationOutdoorAir.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getDesignSpecificationOutdoorAir(self, t_handle)
Model.getDesignSpecificationOutdoorAir = _getDesignSpecificationOutdoorAir

def _getDesignSpecificationOutdoorAirs(self) -> DesignSpecificationOutdoorAirVector:
    """Get a vector of all objects of type DesignSpecificationOutdoorAir in the model.

    :return: A vector of DesignSpecificationOutdoorAir.
    """
    return getDesignSpecificationOutdoorAirs(self)
Model.getDesignSpecificationOutdoorAirs = _getDesignSpecificationOutdoorAirs

def _getDesignSpecificationOutdoorAirByName(self, t_name: str) -> OptionalDesignSpecificationOutdoorAir:
    """Try to get an object of type DesignSpecificationOutdoorAir that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional DesignSpecificationOutdoorAir.
    """
    return getDesignSpecificationOutdoorAirByName(self, t_name)
Model.getDesignSpecificationOutdoorAirByName = _getDesignSpecificationOutdoorAirByName

def _getDesignSpecificationOutdoorAirsByName(self, t_name: str, t_exactMatch: bool) -> DesignSpecificationOutdoorAirVector:
    """Returns all objects of type DesignSpecificationOutdoorAir named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getDesignSpecificationOutdoorAirsByName(self, t_name, t_exactMatch)
Model.getDesignSpecificationOutdoorAirsByName = _getDesignSpecificationOutdoorAirsByName

class CoilCoolingDXCurveFitPerformance(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CoilCoolingDXCurveFitPerformance

    def __init__(self, *args):
        _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_swiginit(self, _openstudiomodelresources.new_CoilCoolingDXCurveFitPerformance(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_iddObjectType()

    @staticmethod
    def capacityControlMethodValues():
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_capacityControlMethodValues()

    @staticmethod
    def compressorFuelTypeValues():
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_compressorFuelTypeValues()

    @staticmethod
    def validCapacityControlMethodValues():
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_validCapacityControlMethodValues()

    @staticmethod
    def validCompressorFuelTypeValues():
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_validCompressorFuelTypeValues()

    def crankcaseHeaterCapacity(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_crankcaseHeaterCapacity(self)

    def crankcaseHeaterCapacityFunctionofTemperatureCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_crankcaseHeaterCapacityFunctionofTemperatureCurve(self)

    def minimumOutdoorDryBulbTemperatureforCompressorOperation(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_minimumOutdoorDryBulbTemperatureforCompressorOperation(self)

    def maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self)

    def unitInternalStaticAirPressure(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_unitInternalStaticAirPressure(self)

    def capacityControlMethod(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_capacityControlMethod(self)

    def evaporativeCondenserBasinHeaterCapacity(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_evaporativeCondenserBasinHeaterCapacity(self)

    def evaporativeCondenserBasinHeaterSetpointTemperature(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_evaporativeCondenserBasinHeaterSetpointTemperature(self)

    def evaporativeCondenserBasinHeaterOperatingSchedule(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_evaporativeCondenserBasinHeaterOperatingSchedule(self)

    def compressorFuelType(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_compressorFuelType(self)

    def baseOperatingMode(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_baseOperatingMode(self)

    def alternativeOperatingMode1(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_alternativeOperatingMode1(self)

    def alternativeOperatingMode2(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_alternativeOperatingMode2(self)

    def coilCoolingDXs(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_coilCoolingDXs(self)

    def setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setCrankcaseHeaterCapacity(self, crankcaseHeaterCapacity)

    def setCrankcaseHeaterCapacityFunctionofTemperatureCurve(self, curve):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setCrankcaseHeaterCapacityFunctionofTemperatureCurve(self, curve)

    def resetCrankcaseHeaterCapacityFunctionofTemperatureCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_resetCrankcaseHeaterCapacityFunctionofTemperatureCurve(self)

    def setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setMinimumOutdoorDryBulbTemperatureforCompressorOperation(self, minimumOutdoorDryBulbTemperatureforCompressorOperation)

    def setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setMaximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation(self, maximumOutdoorDryBulbTemperatureforCrankcaseHeaterOperation)

    def setUnitInternalStaticAirPressure(self, unitInternalStaticAirPressure):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setUnitInternalStaticAirPressure(self, unitInternalStaticAirPressure)

    def setCapacityControlMethod(self, capacityControlMethod):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setCapacityControlMethod(self, capacityControlMethod)

    def setEvaporativeCondenserBasinHeaterCapacity(self, evaporativeCondenserBasinHeaterCapacity):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setEvaporativeCondenserBasinHeaterCapacity(self, evaporativeCondenserBasinHeaterCapacity)

    def setEvaporativeCondenserBasinHeaterSetpointTemperature(self, evaporativeCondenserBasinHeaterSetpointTemperature):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setEvaporativeCondenserBasinHeaterSetpointTemperature(self, evaporativeCondenserBasinHeaterSetpointTemperature)

    def setEvaporativeCondenserBasinHeaterOperatingSchedule(self, schedule):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setEvaporativeCondenserBasinHeaterOperatingSchedule(self, schedule)

    def setCompressorFuelType(self, compressorFuelType):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setCompressorFuelType(self, compressorFuelType)

    def setBaseOperatingMode(self, baseOperatingMode):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setBaseOperatingMode(self, baseOperatingMode)

    def setAlternativeOperatingMode1(self, alternativeOperatingMode1):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setAlternativeOperatingMode1(self, alternativeOperatingMode1)

    def resetAlternativeOperatingMode1(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_resetAlternativeOperatingMode1(self)

    def setAlternativeOperatingMode2(self, alternativeOperatingMode2):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_setAlternativeOperatingMode2(self, alternativeOperatingMode2)

    def resetAlternativeOperatingMode2(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitPerformance_resetAlternativeOperatingMode2(self)

# Register CoilCoolingDXCurveFitPerformance in _openstudiomodelresources:
_openstudiomodelresources.CoilCoolingDXCurveFitPerformance_swigregister(CoilCoolingDXCurveFitPerformance)

def toCoilCoolingDXCurveFitPerformance(idfObject):
    return _openstudiomodelresources.toCoilCoolingDXCurveFitPerformance(idfObject)

def getCoilCoolingDXCurveFitPerformance(t_model, t_handle):
    return _openstudiomodelresources.getCoilCoolingDXCurveFitPerformance(t_model, t_handle)

def getCoilCoolingDXCurveFitPerformances(t_model):
    return _openstudiomodelresources.getCoilCoolingDXCurveFitPerformances(t_model)

def getCoilCoolingDXCurveFitPerformanceByName(t_model, t_name):
    return _openstudiomodelresources.getCoilCoolingDXCurveFitPerformanceByName(t_model, t_name)

def getCoilCoolingDXCurveFitPerformancesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCoilCoolingDXCurveFitPerformancesByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDXCurveFitPerformance(self) -> OptionalCoilCoolingDXCurveFitPerformance:
    """Try to cast the ModelObject to a CoilCoolingDXCurveFitPerformance.

    :return: An Optional CoilCoolingDXCurveFitPerformance.
    """
    return toCoilCoolingDXCurveFitPerformance(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDXCurveFitPerformance = _to_CoilCoolingDXCurveFitPerformance

def _getCoilCoolingDXCurveFitPerformance(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCoilCoolingDXCurveFitPerformance:
    """Try to get an object of type CoilCoolingDXCurveFitPerformance referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CoilCoolingDXCurveFitPerformance.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCoilCoolingDXCurveFitPerformance(self, t_handle)
Model.getCoilCoolingDXCurveFitPerformance = _getCoilCoolingDXCurveFitPerformance

def _getCoilCoolingDXCurveFitPerformances(self) -> CoilCoolingDXCurveFitPerformanceVector:
    """Get a vector of all objects of type CoilCoolingDXCurveFitPerformance in the model.

    :return: A vector of CoilCoolingDXCurveFitPerformance.
    """
    return getCoilCoolingDXCurveFitPerformances(self)
Model.getCoilCoolingDXCurveFitPerformances = _getCoilCoolingDXCurveFitPerformances

def _getCoilCoolingDXCurveFitPerformanceByName(self, t_name: str) -> OptionalCoilCoolingDXCurveFitPerformance:
    """Try to get an object of type CoilCoolingDXCurveFitPerformance that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CoilCoolingDXCurveFitPerformance.
    """
    return getCoilCoolingDXCurveFitPerformanceByName(self, t_name)
Model.getCoilCoolingDXCurveFitPerformanceByName = _getCoilCoolingDXCurveFitPerformanceByName

def _getCoilCoolingDXCurveFitPerformancesByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXCurveFitPerformanceVector:
    """Returns all objects of type CoilCoolingDXCurveFitPerformance named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCoilCoolingDXCurveFitPerformancesByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXCurveFitPerformancesByName = _getCoilCoolingDXCurveFitPerformancesByName

class CoilCoolingDXCurveFitOperatingMode(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CoilCoolingDXCurveFitOperatingMode

    def __init__(self, *args):
        _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_swiginit(self, _openstudiomodelresources.new_CoilCoolingDXCurveFitOperatingMode(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_iddObjectType()

    @staticmethod
    def condenserTypeValues():
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_condenserTypeValues()

    def ratedGrossTotalCoolingCapacity(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_ratedGrossTotalCoolingCapacity(self)

    def isRatedGrossTotalCoolingCapacityAutosized(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_isRatedGrossTotalCoolingCapacityAutosized(self)

    def ratedEvaporatorAirFlowRate(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_ratedEvaporatorAirFlowRate(self)

    def isRatedEvaporatorAirFlowRateAutosized(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_isRatedEvaporatorAirFlowRateAutosized(self)

    def ratedCondenserAirFlowRate(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_ratedCondenserAirFlowRate(self)

    def isRatedCondenserAirFlowRateAutosized(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_isRatedCondenserAirFlowRateAutosized(self)

    def maximumCyclingRate(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_maximumCyclingRate(self)

    def ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self)

    def latentCapacityTimeConstant(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_latentCapacityTimeConstant(self)

    def nominalTimeforCondensateRemovaltoBegin(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_nominalTimeforCondensateRemovaltoBegin(self)

    def applyLatentDegradationtoSpeedsGreaterthan1(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_applyLatentDegradationtoSpeedsGreaterthan1(self)

    def condenserType(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_condenserType(self)

    def nominalEvaporativeCondenserPumpPower(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_nominalEvaporativeCondenserPumpPower(self)

    def isNominalEvaporativeCondenserPumpPowerAutosized(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_isNominalEvaporativeCondenserPumpPowerAutosized(self)

    def nominalSpeedNumber(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_nominalSpeedNumber(self)

    def isNominalSpeedNumberDefaulted(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_isNominalSpeedNumberDefaulted(self)

    def setRatedGrossTotalCoolingCapacity(self, ratedGrossTotalCoolingCapacity):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setRatedGrossTotalCoolingCapacity(self, ratedGrossTotalCoolingCapacity)

    def autosizeRatedGrossTotalCoolingCapacity(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizeRatedGrossTotalCoolingCapacity(self)

    def setRatedEvaporatorAirFlowRate(self, ratedEvaporatorAirFlowRate):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setRatedEvaporatorAirFlowRate(self, ratedEvaporatorAirFlowRate)

    def autosizeRatedEvaporatorAirFlowRate(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizeRatedEvaporatorAirFlowRate(self)

    def setRatedCondenserAirFlowRate(self, ratedCondenserAirFlowRate):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setRatedCondenserAirFlowRate(self, ratedCondenserAirFlowRate)

    def autosizeRatedCondenserAirFlowRate(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizeRatedCondenserAirFlowRate(self)

    def setMaximumCyclingRate(self, maximumCyclingRate):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setMaximumCyclingRate(self, maximumCyclingRate)

    def setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setRatioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity(self, ratioofInitialMoistureEvaporationRateandSteadyStateLatentCapacity)

    def setLatentCapacityTimeConstant(self, latentCapacityTimeConstant):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setLatentCapacityTimeConstant(self, latentCapacityTimeConstant)

    def setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setNominalTimeforCondensateRemovaltoBegin(self, nominalTimeforCondensateRemovaltoBegin)

    def setApplyLatentDegradationtoSpeedsGreaterthan1(self, applyLatentDegradationtoSpeedsGreaterthan1):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setApplyLatentDegradationtoSpeedsGreaterthan1(self, applyLatentDegradationtoSpeedsGreaterthan1)

    def setCondenserType(self, condenserType):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setCondenserType(self, condenserType)

    def setNominalEvaporativeCondenserPumpPower(self, nominalEvaporativeCondenserPumpPower):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setNominalEvaporativeCondenserPumpPower(self, nominalEvaporativeCondenserPumpPower)

    def autosizeNominalEvaporativeCondenserPumpPower(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizeNominalEvaporativeCondenserPumpPower(self)

    def setNominalSpeedNumber(self, nominalSpeedNumber):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setNominalSpeedNumber(self, nominalSpeedNumber)

    def resetNominalSpeedNumber(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_resetNominalSpeedNumber(self)

    def autosizedRatedGrossTotalCoolingCapacity(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizedRatedGrossTotalCoolingCapacity(self)

    def autosizedRatedEvaporatorAirFlowRate(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizedRatedEvaporatorAirFlowRate(self)

    def autosizedRatedCondenserAirFlowRate(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizedRatedCondenserAirFlowRate(self)

    def autosizedNominalEvaporativeCondenserPumpPower(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosizedNominalEvaporativeCondenserPumpPower(self)

    def autosize(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_autosize(self)

    def applySizingValues(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_applySizingValues(self)

    def coilCoolingDXCurveFitPerformances(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_coilCoolingDXCurveFitPerformances(self)

    def speeds(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_speeds(self)

    def numberOfSpeeds(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_numberOfSpeeds(self)

    def speedIndex(self, speed):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_speedIndex(self, speed)

    def addSpeed(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_addSpeed(self, *args)

    def setSpeedIndex(self, speed, index):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setSpeedIndex(self, speed, index)

    def setSpeeds(self, speeds):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_setSpeeds(self, speeds)

    def removeAllSpeeds(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_removeAllSpeeds(self)

    def removeSpeed(self, *args):
        return _openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_removeSpeed(self, *args)

# Register CoilCoolingDXCurveFitOperatingMode in _openstudiomodelresources:
_openstudiomodelresources.CoilCoolingDXCurveFitOperatingMode_swigregister(CoilCoolingDXCurveFitOperatingMode)

def toCoilCoolingDXCurveFitOperatingMode(idfObject):
    return _openstudiomodelresources.toCoilCoolingDXCurveFitOperatingMode(idfObject)

def getCoilCoolingDXCurveFitOperatingMode(t_model, t_handle):
    return _openstudiomodelresources.getCoilCoolingDXCurveFitOperatingMode(t_model, t_handle)

def getCoilCoolingDXCurveFitOperatingModes(t_model):
    return _openstudiomodelresources.getCoilCoolingDXCurveFitOperatingModes(t_model)

def getCoilCoolingDXCurveFitOperatingModeByName(t_model, t_name):
    return _openstudiomodelresources.getCoilCoolingDXCurveFitOperatingModeByName(t_model, t_name)

def getCoilCoolingDXCurveFitOperatingModesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCoilCoolingDXCurveFitOperatingModesByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDXCurveFitOperatingMode(self) -> OptionalCoilCoolingDXCurveFitOperatingMode:
    """Try to cast the ModelObject to a CoilCoolingDXCurveFitOperatingMode.

    :return: An Optional CoilCoolingDXCurveFitOperatingMode.
    """
    return toCoilCoolingDXCurveFitOperatingMode(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDXCurveFitOperatingMode = _to_CoilCoolingDXCurveFitOperatingMode

def _getCoilCoolingDXCurveFitOperatingMode(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCoilCoolingDXCurveFitOperatingMode:
    """Try to get an object of type CoilCoolingDXCurveFitOperatingMode referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CoilCoolingDXCurveFitOperatingMode.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCoilCoolingDXCurveFitOperatingMode(self, t_handle)
Model.getCoilCoolingDXCurveFitOperatingMode = _getCoilCoolingDXCurveFitOperatingMode

def _getCoilCoolingDXCurveFitOperatingModes(self) -> CoilCoolingDXCurveFitOperatingModeVector:
    """Get a vector of all objects of type CoilCoolingDXCurveFitOperatingMode in the model.

    :return: A vector of CoilCoolingDXCurveFitOperatingMode.
    """
    return getCoilCoolingDXCurveFitOperatingModes(self)
Model.getCoilCoolingDXCurveFitOperatingModes = _getCoilCoolingDXCurveFitOperatingModes

def _getCoilCoolingDXCurveFitOperatingModeByName(self, t_name: str) -> OptionalCoilCoolingDXCurveFitOperatingMode:
    """Try to get an object of type CoilCoolingDXCurveFitOperatingMode that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CoilCoolingDXCurveFitOperatingMode.
    """
    return getCoilCoolingDXCurveFitOperatingModeByName(self, t_name)
Model.getCoilCoolingDXCurveFitOperatingModeByName = _getCoilCoolingDXCurveFitOperatingModeByName

def _getCoilCoolingDXCurveFitOperatingModesByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXCurveFitOperatingModeVector:
    """Returns all objects of type CoilCoolingDXCurveFitOperatingMode named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCoilCoolingDXCurveFitOperatingModesByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXCurveFitOperatingModesByName = _getCoilCoolingDXCurveFitOperatingModesByName

class CoilCoolingDXCurveFitSpeed(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_CoilCoolingDXCurveFitSpeed

    def __init__(self, *args):
        _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_swiginit(self, _openstudiomodelresources.new_CoilCoolingDXCurveFitSpeed(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_iddObjectType()

    def grossTotalCoolingCapacityFraction(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_grossTotalCoolingCapacityFraction(self)

    def evaporatorAirFlowRateFraction(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_evaporatorAirFlowRateFraction(self)

    def condenserAirFlowRateFraction(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_condenserAirFlowRateFraction(self)

    def grossSensibleHeatRatio(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_grossSensibleHeatRatio(self)

    def isGrossSensibleHeatRatioAutosized(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_isGrossSensibleHeatRatioAutosized(self)

    def grossCoolingCOP(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_grossCoolingCOP(self)

    def activeFractionofCoilFaceArea(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_activeFractionofCoilFaceArea(self)

    def ratedEvaporatorFanPowerPerVolumeFlowRate(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_ratedEvaporatorFanPowerPerVolumeFlowRate(self)

    def ratedEvaporatorFanPowerPerVolumeFlowRate2017(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_ratedEvaporatorFanPowerPerVolumeFlowRate2017(self)

    def ratedEvaporatorFanPowerPerVolumeFlowRate2023(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_ratedEvaporatorFanPowerPerVolumeFlowRate2023(self)

    def evaporativeCondenserPumpPowerFraction(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_evaporativeCondenserPumpPowerFraction(self)

    def evaporativeCondenserEffectiveness(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_evaporativeCondenserEffectiveness(self)

    def totalCoolingCapacityModifierFunctionofTemperatureCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_totalCoolingCapacityModifierFunctionofTemperatureCurve(self)

    def totalCoolingCapacityModifierFunctionofAirFlowFractionCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_totalCoolingCapacityModifierFunctionofAirFlowFractionCurve(self)

    def energyInputRatioModifierFunctionofTemperatureCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_energyInputRatioModifierFunctionofTemperatureCurve(self)

    def energyInputRatioModifierFunctionofAirFlowFractionCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_energyInputRatioModifierFunctionofAirFlowFractionCurve(self)

    def partLoadFractionCorrelationCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_partLoadFractionCorrelationCurve(self)

    def wasteHeatModifierFunctionofTemperatureCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_wasteHeatModifierFunctionofTemperatureCurve(self)

    def ratedWasteHeatFractionofPowerInput(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_ratedWasteHeatFractionofPowerInput(self)

    def sensibleHeatRatioModifierFunctionofTemperatureCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_sensibleHeatRatioModifierFunctionofTemperatureCurve(self)

    def sensibleHeatRatioModifierFunctionofFlowFractionCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_sensibleHeatRatioModifierFunctionofFlowFractionCurve(self)

    def coilCoolingDXCurveFitOperatingModes(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_coilCoolingDXCurveFitOperatingModes(self)

    def setGrossTotalCoolingCapacityFraction(self, grossTotalCoolingCapacityFraction):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setGrossTotalCoolingCapacityFraction(self, grossTotalCoolingCapacityFraction)

    def setEvaporatorAirFlowRateFraction(self, evaporatorAirFlowRateFraction):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setEvaporatorAirFlowRateFraction(self, evaporatorAirFlowRateFraction)

    def setCondenserAirFlowRateFraction(self, condenserAirFlowRateFraction):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setCondenserAirFlowRateFraction(self, condenserAirFlowRateFraction)

    def setGrossSensibleHeatRatio(self, grossSensibleHeatRatio):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setGrossSensibleHeatRatio(self, grossSensibleHeatRatio)

    def autosizeGrossSensibleHeatRatio(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_autosizeGrossSensibleHeatRatio(self)

    def setGrossCoolingCOP(self, grossCoolingCOP):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setGrossCoolingCOP(self, grossCoolingCOP)

    def setActiveFractionofCoilFaceArea(self, activeFractionofCoilFaceArea):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setActiveFractionofCoilFaceArea(self, activeFractionofCoilFaceArea)

    def setRatedEvaporatorFanPowerPerVolumeFlowRate(self, ratedEvaporatorFanPowerPerVolumeFlowRate):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setRatedEvaporatorFanPowerPerVolumeFlowRate(self, ratedEvaporatorFanPowerPerVolumeFlowRate)

    def setRatedEvaporatorFanPowerPerVolumeFlowRate2017(self, ratedEvaporatorFanPowerPerVolumeFlowRate2017):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setRatedEvaporatorFanPowerPerVolumeFlowRate2017(self, ratedEvaporatorFanPowerPerVolumeFlowRate2017)

    def setRatedEvaporatorFanPowerPerVolumeFlowRate2023(self, ratedEvaporatorFanPowerPerVolumeFlowRate2023):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setRatedEvaporatorFanPowerPerVolumeFlowRate2023(self, ratedEvaporatorFanPowerPerVolumeFlowRate2023)

    def setEvaporativeCondenserPumpPowerFraction(self, evaporativeCondenserPumpPowerFraction):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setEvaporativeCondenserPumpPowerFraction(self, evaporativeCondenserPumpPowerFraction)

    def setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setEvaporativeCondenserEffectiveness(self, evaporativeCondenserEffectiveness)

    def setTotalCoolingCapacityModifierFunctionofTemperatureCurve(self, curve):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setTotalCoolingCapacityModifierFunctionofTemperatureCurve(self, curve)

    def resetTotalCoolingCapacityModifierFunctionofTemperatureCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetTotalCoolingCapacityModifierFunctionofTemperatureCurve(self)

    def setTotalCoolingCapacityModifierFunctionofAirFlowFractionCurve(self, curve):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setTotalCoolingCapacityModifierFunctionofAirFlowFractionCurve(self, curve)

    def resetTotalCoolingCapacityModifierFunctionofAirFlowFractionCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetTotalCoolingCapacityModifierFunctionofAirFlowFractionCurve(self)

    def setEnergyInputRatioModifierFunctionofTemperatureCurve(self, curve):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setEnergyInputRatioModifierFunctionofTemperatureCurve(self, curve)

    def resetEnergyInputRatioModifierFunctionofTemperatureCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetEnergyInputRatioModifierFunctionofTemperatureCurve(self)

    def setEnergyInputRatioModifierFunctionofAirFlowFractionCurve(self, curve):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setEnergyInputRatioModifierFunctionofAirFlowFractionCurve(self, curve)

    def resetEnergyInputRatioModifierFunctionofAirFlowFractionCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetEnergyInputRatioModifierFunctionofAirFlowFractionCurve(self)

    def setPartLoadFractionCorrelationCurve(self, curve):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setPartLoadFractionCorrelationCurve(self, curve)

    def resetPartLoadFractionCorrelationCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetPartLoadFractionCorrelationCurve(self)

    def setWasteHeatModifierFunctionofTemperatureCurve(self, curve):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setWasteHeatModifierFunctionofTemperatureCurve(self, curve)

    def resetWasteHeatModifierFunctionofTemperatureCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetWasteHeatModifierFunctionofTemperatureCurve(self)

    def setRatedWasteHeatFractionofPowerInput(self, ratedWasteHeatFractionofPowerInput):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setRatedWasteHeatFractionofPowerInput(self, ratedWasteHeatFractionofPowerInput)

    def setSensibleHeatRatioModifierFunctionofTemperatureCurve(self, curve):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setSensibleHeatRatioModifierFunctionofTemperatureCurve(self, curve)

    def resetSensibleHeatRatioModifierFunctionofTemperatureCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetSensibleHeatRatioModifierFunctionofTemperatureCurve(self)

    def setSensibleHeatRatioModifierFunctionofFlowFractionCurve(self, curve):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_setSensibleHeatRatioModifierFunctionofFlowFractionCurve(self, curve)

    def resetSensibleHeatRatioModifierFunctionofFlowFractionCurve(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_resetSensibleHeatRatioModifierFunctionofFlowFractionCurve(self)

    def autosizedGrossSensibleHeatRatio(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_autosizedGrossSensibleHeatRatio(self)

    def autosize(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_autosize(self)

    def applySizingValues(self):
        return _openstudiomodelresources.CoilCoolingDXCurveFitSpeed_applySizingValues(self)

# Register CoilCoolingDXCurveFitSpeed in _openstudiomodelresources:
_openstudiomodelresources.CoilCoolingDXCurveFitSpeed_swigregister(CoilCoolingDXCurveFitSpeed)

def toCoilCoolingDXCurveFitSpeed(idfObject):
    return _openstudiomodelresources.toCoilCoolingDXCurveFitSpeed(idfObject)

def getCoilCoolingDXCurveFitSpeed(t_model, t_handle):
    return _openstudiomodelresources.getCoilCoolingDXCurveFitSpeed(t_model, t_handle)

def getCoilCoolingDXCurveFitSpeeds(t_model):
    return _openstudiomodelresources.getCoilCoolingDXCurveFitSpeeds(t_model)

def getCoilCoolingDXCurveFitSpeedByName(t_model, t_name):
    return _openstudiomodelresources.getCoilCoolingDXCurveFitSpeedByName(t_model, t_name)

def getCoilCoolingDXCurveFitSpeedsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getCoilCoolingDXCurveFitSpeedsByName(t_model, t_name, t_exactMatch)

def _to_CoilCoolingDXCurveFitSpeed(self) -> OptionalCoilCoolingDXCurveFitSpeed:
    """Try to cast the ModelObject to a CoilCoolingDXCurveFitSpeed.

    :return: An Optional CoilCoolingDXCurveFitSpeed.
    """
    return toCoilCoolingDXCurveFitSpeed(self)
openstudioutilitiesidf.IdfObject.to_CoilCoolingDXCurveFitSpeed = _to_CoilCoolingDXCurveFitSpeed

def _getCoilCoolingDXCurveFitSpeed(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalCoilCoolingDXCurveFitSpeed:
    """Try to get an object of type CoilCoolingDXCurveFitSpeed referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional CoilCoolingDXCurveFitSpeed.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getCoilCoolingDXCurveFitSpeed(self, t_handle)
Model.getCoilCoolingDXCurveFitSpeed = _getCoilCoolingDXCurveFitSpeed

def _getCoilCoolingDXCurveFitSpeeds(self) -> CoilCoolingDXCurveFitSpeedVector:
    """Get a vector of all objects of type CoilCoolingDXCurveFitSpeed in the model.

    :return: A vector of CoilCoolingDXCurveFitSpeed.
    """
    return getCoilCoolingDXCurveFitSpeeds(self)
Model.getCoilCoolingDXCurveFitSpeeds = _getCoilCoolingDXCurveFitSpeeds

def _getCoilCoolingDXCurveFitSpeedByName(self, t_name: str) -> OptionalCoilCoolingDXCurveFitSpeed:
    """Try to get an object of type CoilCoolingDXCurveFitSpeed that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional CoilCoolingDXCurveFitSpeed.
    """
    return getCoilCoolingDXCurveFitSpeedByName(self, t_name)
Model.getCoilCoolingDXCurveFitSpeedByName = _getCoilCoolingDXCurveFitSpeedByName

def _getCoilCoolingDXCurveFitSpeedsByName(self, t_name: str, t_exactMatch: bool) -> CoilCoolingDXCurveFitSpeedVector:
    """Returns all objects of type CoilCoolingDXCurveFitSpeed named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getCoilCoolingDXCurveFitSpeedsByName(self, t_name, t_exactMatch)
Model.getCoilCoolingDXCurveFitSpeedsByName = _getCoilCoolingDXCurveFitSpeedsByName

class HeatExchangerDesiccantBalancedFlowPerformanceDataType1(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelresources.delete_HeatExchangerDesiccantBalancedFlowPerformanceDataType1

    def __init__(self, *args):
        _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_swiginit(self, _openstudiomodelresources.new_HeatExchangerDesiccantBalancedFlowPerformanceDataType1(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_iddObjectType()

    def heatExchangerDesiccantBalancedFlows(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_heatExchangerDesiccantBalancedFlows(self)

    def isNominalAirFlowRateAutosized(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_isNominalAirFlowRateAutosized(self)

    def nominalAirFlowRate(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_nominalAirFlowRate(self)

    def isNominalAirFaceVelocityAutosized(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_isNominalAirFaceVelocityAutosized(self)

    def nominalAirFaceVelocity(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_nominalAirFaceVelocity(self)

    def nominalElectricPower(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_nominalElectricPower(self)

    def temperatureEquationCoefficient1(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_temperatureEquationCoefficient1(self)

    def temperatureEquationCoefficient2(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_temperatureEquationCoefficient2(self)

    def temperatureEquationCoefficient3(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_temperatureEquationCoefficient3(self)

    def temperatureEquationCoefficient4(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_temperatureEquationCoefficient4(self)

    def temperatureEquationCoefficient5(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_temperatureEquationCoefficient5(self)

    def temperatureEquationCoefficient6(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_temperatureEquationCoefficient6(self)

    def temperatureEquationCoefficient7(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_temperatureEquationCoefficient7(self)

    def temperatureEquationCoefficient8(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_temperatureEquationCoefficient8(self)

    def minimumRegenerationInletAirHumidityRatioforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumRegenerationInletAirHumidityRatioforTemperatureEquation(self)

    def maximumRegenerationInletAirHumidityRatioforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumRegenerationInletAirHumidityRatioforTemperatureEquation(self)

    def minimumRegenerationInletAirTemperatureforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumRegenerationInletAirTemperatureforTemperatureEquation(self)

    def maximumRegenerationInletAirTemperatureforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumRegenerationInletAirTemperatureforTemperatureEquation(self)

    def minimumProcessInletAirHumidityRatioforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumProcessInletAirHumidityRatioforTemperatureEquation(self)

    def maximumProcessInletAirHumidityRatioforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumProcessInletAirHumidityRatioforTemperatureEquation(self)

    def minimumProcessInletAirTemperatureforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumProcessInletAirTemperatureforTemperatureEquation(self)

    def maximumProcessInletAirTemperatureforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumProcessInletAirTemperatureforTemperatureEquation(self)

    def minimumRegenerationAirVelocityforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumRegenerationAirVelocityforTemperatureEquation(self)

    def maximumRegenerationAirVelocityforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumRegenerationAirVelocityforTemperatureEquation(self)

    def minimumRegenerationOutletAirTemperatureforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumRegenerationOutletAirTemperatureforTemperatureEquation(self)

    def maximumRegenerationOutletAirTemperatureforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumRegenerationOutletAirTemperatureforTemperatureEquation(self)

    def minimumRegenerationInletAirRelativeHumidityforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumRegenerationInletAirRelativeHumidityforTemperatureEquation(self)

    def maximumRegenerationInletAirRelativeHumidityforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumRegenerationInletAirRelativeHumidityforTemperatureEquation(self)

    def minimumProcessInletAirRelativeHumidityforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumProcessInletAirRelativeHumidityforTemperatureEquation(self)

    def maximumProcessInletAirRelativeHumidityforTemperatureEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumProcessInletAirRelativeHumidityforTemperatureEquation(self)

    def humidityRatioEquationCoefficient1(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_humidityRatioEquationCoefficient1(self)

    def humidityRatioEquationCoefficient2(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_humidityRatioEquationCoefficient2(self)

    def humidityRatioEquationCoefficient3(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_humidityRatioEquationCoefficient3(self)

    def humidityRatioEquationCoefficient4(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_humidityRatioEquationCoefficient4(self)

    def humidityRatioEquationCoefficient5(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_humidityRatioEquationCoefficient5(self)

    def humidityRatioEquationCoefficient6(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_humidityRatioEquationCoefficient6(self)

    def humidityRatioEquationCoefficient7(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_humidityRatioEquationCoefficient7(self)

    def humidityRatioEquationCoefficient8(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_humidityRatioEquationCoefficient8(self)

    def minimumRegenerationInletAirHumidityRatioforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumRegenerationInletAirHumidityRatioforHumidityRatioEquation(self)

    def maximumRegenerationInletAirHumidityRatioforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumRegenerationInletAirHumidityRatioforHumidityRatioEquation(self)

    def minimumRegenerationInletAirTemperatureforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumRegenerationInletAirTemperatureforHumidityRatioEquation(self)

    def maximumRegenerationInletAirTemperatureforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumRegenerationInletAirTemperatureforHumidityRatioEquation(self)

    def minimumProcessInletAirHumidityRatioforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumProcessInletAirHumidityRatioforHumidityRatioEquation(self)

    def maximumProcessInletAirHumidityRatioforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumProcessInletAirHumidityRatioforHumidityRatioEquation(self)

    def minimumProcessInletAirTemperatureforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumProcessInletAirTemperatureforHumidityRatioEquation(self)

    def maximumProcessInletAirTemperatureforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumProcessInletAirTemperatureforHumidityRatioEquation(self)

    def minimumRegenerationAirVelocityforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumRegenerationAirVelocityforHumidityRatioEquation(self)

    def maximumRegenerationAirVelocityforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumRegenerationAirVelocityforHumidityRatioEquation(self)

    def minimumRegenerationOutletAirHumidityRatioforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumRegenerationOutletAirHumidityRatioforHumidityRatioEquation(self)

    def maximumRegenerationOutletAirHumidityRatioforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumRegenerationOutletAirHumidityRatioforHumidityRatioEquation(self)

    def minimumRegenerationInletAirRelativeHumidityforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumRegenerationInletAirRelativeHumidityforHumidityRatioEquation(self)

    def maximumRegenerationInletAirRelativeHumidityforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumRegenerationInletAirRelativeHumidityforHumidityRatioEquation(self)

    def minimumProcessInletAirRelativeHumidityforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_minimumProcessInletAirRelativeHumidityforHumidityRatioEquation(self)

    def maximumProcessInletAirRelativeHumidityforHumidityRatioEquation(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_maximumProcessInletAirRelativeHumidityforHumidityRatioEquation(self)

    def autosizeNominalAirFlowRate(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_autosizeNominalAirFlowRate(self)

    def setNominalAirFlowRate(self, nominalAirFlowRate):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setNominalAirFlowRate(self, nominalAirFlowRate)

    def autosizeNominalAirFaceVelocity(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_autosizeNominalAirFaceVelocity(self)

    def setNominalAirFaceVelocity(self, nominalAirFaceVelocity):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setNominalAirFaceVelocity(self, nominalAirFaceVelocity)

    def setNominalElectricPower(self, nominalElectricPower):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setNominalElectricPower(self, nominalElectricPower)

    def setTemperatureEquationCoefficient1(self, temperatureEquationCoefficient1):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setTemperatureEquationCoefficient1(self, temperatureEquationCoefficient1)

    def setTemperatureEquationCoefficient2(self, temperatureEquationCoefficient2):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setTemperatureEquationCoefficient2(self, temperatureEquationCoefficient2)

    def setTemperatureEquationCoefficient3(self, temperatureEquationCoefficient3):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setTemperatureEquationCoefficient3(self, temperatureEquationCoefficient3)

    def setTemperatureEquationCoefficient4(self, temperatureEquationCoefficient4):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setTemperatureEquationCoefficient4(self, temperatureEquationCoefficient4)

    def setTemperatureEquationCoefficient5(self, temperatureEquationCoefficient5):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setTemperatureEquationCoefficient5(self, temperatureEquationCoefficient5)

    def setTemperatureEquationCoefficient6(self, temperatureEquationCoefficient6):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setTemperatureEquationCoefficient6(self, temperatureEquationCoefficient6)

    def setTemperatureEquationCoefficient7(self, temperatureEquationCoefficient7):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setTemperatureEquationCoefficient7(self, temperatureEquationCoefficient7)

    def setTemperatureEquationCoefficient8(self, temperatureEquationCoefficient8):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setTemperatureEquationCoefficient8(self, temperatureEquationCoefficient8)

    def setMinimumRegenerationInletAirHumidityRatioforTemperatureEquation(self, minimumRegenerationInletAirHumidityRatioforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumRegenerationInletAirHumidityRatioforTemperatureEquation(self, minimumRegenerationInletAirHumidityRatioforTemperatureEquation)

    def setMaximumRegenerationInletAirHumidityRatioforTemperatureEquation(self, maximumRegenerationInletAirHumidityRatioforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumRegenerationInletAirHumidityRatioforTemperatureEquation(self, maximumRegenerationInletAirHumidityRatioforTemperatureEquation)

    def setMinimumRegenerationInletAirTemperatureforTemperatureEquation(self, minimumRegenerationInletAirTemperatureforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumRegenerationInletAirTemperatureforTemperatureEquation(self, minimumRegenerationInletAirTemperatureforTemperatureEquation)

    def setMaximumRegenerationInletAirTemperatureforTemperatureEquation(self, maximumRegenerationInletAirTemperatureforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumRegenerationInletAirTemperatureforTemperatureEquation(self, maximumRegenerationInletAirTemperatureforTemperatureEquation)

    def setMinimumProcessInletAirHumidityRatioforTemperatureEquation(self, minimumProcessInletAirHumidityRatioforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumProcessInletAirHumidityRatioforTemperatureEquation(self, minimumProcessInletAirHumidityRatioforTemperatureEquation)

    def setMaximumProcessInletAirHumidityRatioforTemperatureEquation(self, maximumProcessInletAirHumidityRatioforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumProcessInletAirHumidityRatioforTemperatureEquation(self, maximumProcessInletAirHumidityRatioforTemperatureEquation)

    def setMinimumProcessInletAirTemperatureforTemperatureEquation(self, minimumProcessInletAirTemperatureforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumProcessInletAirTemperatureforTemperatureEquation(self, minimumProcessInletAirTemperatureforTemperatureEquation)

    def setMaximumProcessInletAirTemperatureforTemperatureEquation(self, maximumProcessInletAirTemperatureforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumProcessInletAirTemperatureforTemperatureEquation(self, maximumProcessInletAirTemperatureforTemperatureEquation)

    def setMinimumRegenerationAirVelocityforTemperatureEquation(self, minimumRegenerationAirVelocityforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumRegenerationAirVelocityforTemperatureEquation(self, minimumRegenerationAirVelocityforTemperatureEquation)

    def setMaximumRegenerationAirVelocityforTemperatureEquation(self, maximumRegenerationAirVelocityforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumRegenerationAirVelocityforTemperatureEquation(self, maximumRegenerationAirVelocityforTemperatureEquation)

    def setMinimumRegenerationOutletAirTemperatureforTemperatureEquation(self, minimumRegenerationOutletAirTemperatureforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumRegenerationOutletAirTemperatureforTemperatureEquation(self, minimumRegenerationOutletAirTemperatureforTemperatureEquation)

    def setMaximumRegenerationOutletAirTemperatureforTemperatureEquation(self, maximumRegenerationOutletAirTemperatureforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumRegenerationOutletAirTemperatureforTemperatureEquation(self, maximumRegenerationOutletAirTemperatureforTemperatureEquation)

    def setMinimumRegenerationInletAirRelativeHumidityforTemperatureEquation(self, minimumRegenerationInletAirRelativeHumidityforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumRegenerationInletAirRelativeHumidityforTemperatureEquation(self, minimumRegenerationInletAirRelativeHumidityforTemperatureEquation)

    def setMaximumRegenerationInletAirRelativeHumidityforTemperatureEquation(self, maximumRegenerationInletAirRelativeHumidityforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumRegenerationInletAirRelativeHumidityforTemperatureEquation(self, maximumRegenerationInletAirRelativeHumidityforTemperatureEquation)

    def setMinimumProcessInletAirRelativeHumidityforTemperatureEquation(self, minimumProcessInletAirRelativeHumidityforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumProcessInletAirRelativeHumidityforTemperatureEquation(self, minimumProcessInletAirRelativeHumidityforTemperatureEquation)

    def setMaximumProcessInletAirRelativeHumidityforTemperatureEquation(self, maximumProcessInletAirRelativeHumidityforTemperatureEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumProcessInletAirRelativeHumidityforTemperatureEquation(self, maximumProcessInletAirRelativeHumidityforTemperatureEquation)

    def setHumidityRatioEquationCoefficient1(self, humidityRatioEquationCoefficient1):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setHumidityRatioEquationCoefficient1(self, humidityRatioEquationCoefficient1)

    def setHumidityRatioEquationCoefficient2(self, humidityRatioEquationCoefficient2):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setHumidityRatioEquationCoefficient2(self, humidityRatioEquationCoefficient2)

    def setHumidityRatioEquationCoefficient3(self, humidityRatioEquationCoefficient3):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setHumidityRatioEquationCoefficient3(self, humidityRatioEquationCoefficient3)

    def setHumidityRatioEquationCoefficient4(self, humidityRatioEquationCoefficient4):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setHumidityRatioEquationCoefficient4(self, humidityRatioEquationCoefficient4)

    def setHumidityRatioEquationCoefficient5(self, humidityRatioEquationCoefficient5):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setHumidityRatioEquationCoefficient5(self, humidityRatioEquationCoefficient5)

    def setHumidityRatioEquationCoefficient6(self, humidityRatioEquationCoefficient6):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setHumidityRatioEquationCoefficient6(self, humidityRatioEquationCoefficient6)

    def setHumidityRatioEquationCoefficient7(self, humidityRatioEquationCoefficient7):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setHumidityRatioEquationCoefficient7(self, humidityRatioEquationCoefficient7)

    def setHumidityRatioEquationCoefficient8(self, humidityRatioEquationCoefficient8):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setHumidityRatioEquationCoefficient8(self, humidityRatioEquationCoefficient8)

    def setMinimumRegenerationInletAirHumidityRatioforHumidityRatioEquation(self, minimumRegenerationInletAirHumidityRatioforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumRegenerationInletAirHumidityRatioforHumidityRatioEquation(self, minimumRegenerationInletAirHumidityRatioforHumidityRatioEquation)

    def setMaximumRegenerationInletAirHumidityRatioforHumidityRatioEquation(self, maximumRegenerationInletAirHumidityRatioforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumRegenerationInletAirHumidityRatioforHumidityRatioEquation(self, maximumRegenerationInletAirHumidityRatioforHumidityRatioEquation)

    def setMinimumRegenerationInletAirTemperatureforHumidityRatioEquation(self, minimumRegenerationInletAirTemperatureforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumRegenerationInletAirTemperatureforHumidityRatioEquation(self, minimumRegenerationInletAirTemperatureforHumidityRatioEquation)

    def setMaximumRegenerationInletAirTemperatureforHumidityRatioEquation(self, maximumRegenerationInletAirTemperatureforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumRegenerationInletAirTemperatureforHumidityRatioEquation(self, maximumRegenerationInletAirTemperatureforHumidityRatioEquation)

    def setMinimumProcessInletAirHumidityRatioforHumidityRatioEquation(self, minimumProcessInletAirHumidityRatioforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumProcessInletAirHumidityRatioforHumidityRatioEquation(self, minimumProcessInletAirHumidityRatioforHumidityRatioEquation)

    def setMaximumProcessInletAirHumidityRatioforHumidityRatioEquation(self, maximumProcessInletAirHumidityRatioforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumProcessInletAirHumidityRatioforHumidityRatioEquation(self, maximumProcessInletAirHumidityRatioforHumidityRatioEquation)

    def setMinimumProcessInletAirTemperatureforHumidityRatioEquation(self, minimumProcessInletAirTemperatureforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumProcessInletAirTemperatureforHumidityRatioEquation(self, minimumProcessInletAirTemperatureforHumidityRatioEquation)

    def setMaximumProcessInletAirTemperatureforHumidityRatioEquation(self, maximumProcessInletAirTemperatureforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumProcessInletAirTemperatureforHumidityRatioEquation(self, maximumProcessInletAirTemperatureforHumidityRatioEquation)

    def setMinimumRegenerationAirVelocityforHumidityRatioEquation(self, minimumRegenerationAirVelocityforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumRegenerationAirVelocityforHumidityRatioEquation(self, minimumRegenerationAirVelocityforHumidityRatioEquation)

    def setMaximumRegenerationAirVelocityforHumidityRatioEquation(self, maximumRegenerationAirVelocityforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumRegenerationAirVelocityforHumidityRatioEquation(self, maximumRegenerationAirVelocityforHumidityRatioEquation)

    def setMinimumRegenerationOutletAirHumidityRatioforHumidityRatioEquation(self, minimumRegenerationOutletAirHumidityRatioforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumRegenerationOutletAirHumidityRatioforHumidityRatioEquation(self, minimumRegenerationOutletAirHumidityRatioforHumidityRatioEquation)

    def setMaximumRegenerationOutletAirHumidityRatioforHumidityRatioEquation(self, maximumRegenerationOutletAirHumidityRatioforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumRegenerationOutletAirHumidityRatioforHumidityRatioEquation(self, maximumRegenerationOutletAirHumidityRatioforHumidityRatioEquation)

    def setMinimumRegenerationInletAirRelativeHumidityforHumidityRatioEquation(self, minimumRegenerationInletAirRelativeHumidityforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumRegenerationInletAirRelativeHumidityforHumidityRatioEquation(self, minimumRegenerationInletAirRelativeHumidityforHumidityRatioEquation)

    def setMaximumRegenerationInletAirRelativeHumidityforHumidityRatioEquation(self, maximumRegenerationInletAirRelativeHumidityforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumRegenerationInletAirRelativeHumidityforHumidityRatioEquation(self, maximumRegenerationInletAirRelativeHumidityforHumidityRatioEquation)

    def setMinimumProcessInletAirRelativeHumidityforHumidityRatioEquation(self, minimumProcessInletAirRelativeHumidityforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMinimumProcessInletAirRelativeHumidityforHumidityRatioEquation(self, minimumProcessInletAirRelativeHumidityforHumidityRatioEquation)

    def setMaximumProcessInletAirRelativeHumidityforHumidityRatioEquation(self, maximumProcessInletAirRelativeHumidityforHumidityRatioEquation):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_setMaximumProcessInletAirRelativeHumidityforHumidityRatioEquation(self, maximumProcessInletAirRelativeHumidityforHumidityRatioEquation)

    def autosizedNominalAirFlowRate(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_autosizedNominalAirFlowRate(self)

    def autosizedNominalAirFaceVelocity(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_autosizedNominalAirFaceVelocity(self)

    def autosize(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_autosize(self)

    def applySizingValues(self):
        return _openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_applySizingValues(self)

# Register HeatExchangerDesiccantBalancedFlowPerformanceDataType1 in _openstudiomodelresources:
_openstudiomodelresources.HeatExchangerDesiccantBalancedFlowPerformanceDataType1_swigregister(HeatExchangerDesiccantBalancedFlowPerformanceDataType1)

def toHeatExchangerDesiccantBalancedFlowPerformanceDataType1(idfObject):
    return _openstudiomodelresources.toHeatExchangerDesiccantBalancedFlowPerformanceDataType1(idfObject)

def getHeatExchangerDesiccantBalancedFlowPerformanceDataType1(t_model, t_handle):
    return _openstudiomodelresources.getHeatExchangerDesiccantBalancedFlowPerformanceDataType1(t_model, t_handle)

def getHeatExchangerDesiccantBalancedFlowPerformanceDataType1s(t_model):
    return _openstudiomodelresources.getHeatExchangerDesiccantBalancedFlowPerformanceDataType1s(t_model)

def getHeatExchangerDesiccantBalancedFlowPerformanceDataType1ByName(t_model, t_name):
    return _openstudiomodelresources.getHeatExchangerDesiccantBalancedFlowPerformanceDataType1ByName(t_model, t_name)

def getHeatExchangerDesiccantBalancedFlowPerformanceDataType1sByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelresources.getHeatExchangerDesiccantBalancedFlowPerformanceDataType1sByName(t_model, t_name, t_exactMatch)

def _to_HeatExchangerDesiccantBalancedFlowPerformanceDataType1(self) -> OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1:
    """Try to cast the ModelObject to a HeatExchangerDesiccantBalancedFlowPerformanceDataType1.

    :return: An Optional HeatExchangerDesiccantBalancedFlowPerformanceDataType1.
    """
    return toHeatExchangerDesiccantBalancedFlowPerformanceDataType1(self)
openstudioutilitiesidf.IdfObject.to_HeatExchangerDesiccantBalancedFlowPerformanceDataType1 = _to_HeatExchangerDesiccantBalancedFlowPerformanceDataType1

def _getHeatExchangerDesiccantBalancedFlowPerformanceDataType1(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1:
    """Try to get an object of type HeatExchangerDesiccantBalancedFlowPerformanceDataType1 referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional HeatExchangerDesiccantBalancedFlowPerformanceDataType1.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getHeatExchangerDesiccantBalancedFlowPerformanceDataType1(self, t_handle)
Model.getHeatExchangerDesiccantBalancedFlowPerformanceDataType1 = _getHeatExchangerDesiccantBalancedFlowPerformanceDataType1

def _getHeatExchangerDesiccantBalancedFlowPerformanceDataType1s(self) -> HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector:
    """Get a vector of all objects of type HeatExchangerDesiccantBalancedFlowPerformanceDataType1 in the model.

    :return: A vector of HeatExchangerDesiccantBalancedFlowPerformanceDataType1.
    """
    return getHeatExchangerDesiccantBalancedFlowPerformanceDataType1s(self)
Model.getHeatExchangerDesiccantBalancedFlowPerformanceDataType1s = _getHeatExchangerDesiccantBalancedFlowPerformanceDataType1s

def _getHeatExchangerDesiccantBalancedFlowPerformanceDataType1ByName(self, t_name: str) -> OptionalHeatExchangerDesiccantBalancedFlowPerformanceDataType1:
    """Try to get an object of type HeatExchangerDesiccantBalancedFlowPerformanceDataType1 that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional HeatExchangerDesiccantBalancedFlowPerformanceDataType1.
    """
    return getHeatExchangerDesiccantBalancedFlowPerformanceDataType1ByName(self, t_name)
Model.getHeatExchangerDesiccantBalancedFlowPerformanceDataType1ByName = _getHeatExchangerDesiccantBalancedFlowPerformanceDataType1ByName

def _getHeatExchangerDesiccantBalancedFlowPerformanceDataType1sByName(self, t_name: str, t_exactMatch: bool) -> HeatExchangerDesiccantBalancedFlowPerformanceDataType1Vector:
    """Returns all objects of type HeatExchangerDesiccantBalancedFlowPerformanceDataType1 named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getHeatExchangerDesiccantBalancedFlowPerformanceDataType1sByName(self, t_name, t_exactMatch)
Model.getHeatExchangerDesiccantBalancedFlowPerformanceDataType1sByName = _getHeatExchangerDesiccantBalancedFlowPerformanceDataType1sByName

class ScheduleType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    className = property(_openstudiomodelresources.ScheduleType_className_get, _openstudiomodelresources.ScheduleType_className_set)
    scheduleDisplayName = property(_openstudiomodelresources.ScheduleType_scheduleDisplayName_get, _openstudiomodelresources.ScheduleType_scheduleDisplayName_set)
    scheduleRelationshipName = property(_openstudiomodelresources.ScheduleType_scheduleRelationshipName_get, _openstudiomodelresources.ScheduleType_scheduleRelationshipName_set)
    isContinuous = property(_openstudiomodelresources.ScheduleType_isContinuous_get, _openstudiomodelresources.ScheduleType_isContinuous_set)
    unitType = property(_openstudiomodelresources.ScheduleType_unitType_get, _openstudiomodelresources.ScheduleType_unitType_set)
    lowerLimitValue = property(_openstudiomodelresources.ScheduleType_lowerLimitValue_get, _openstudiomodelresources.ScheduleType_lowerLimitValue_set)
    upperLimitValue = property(_openstudiomodelresources.ScheduleType_upperLimitValue_get, _openstudiomodelresources.ScheduleType_upperLimitValue_set)

    def __init__(self):
        _openstudiomodelresources.ScheduleType_swiginit(self, _openstudiomodelresources.new_ScheduleType())
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleType

# Register ScheduleType in _openstudiomodelresources:
_openstudiomodelresources.ScheduleType_swigregister(ScheduleType)
class ScheduleTypeRegistrySingleton(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def classNames(self):
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_classNames(self)

    def getScheduleTypesByClassName(self, className):
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_getScheduleTypesByClassName(self, className)

    def getScheduleType(self, className, scheduleDisplayName):
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_getScheduleType(self, className, scheduleDisplayName)

    def getOrCreateScheduleTypeLimits(self, scheduleType, model):
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_getOrCreateScheduleTypeLimits(self, scheduleType, model)

    def getDefaultName(self, scheduleType):
        return _openstudiomodelresources.ScheduleTypeRegistrySingleton_getDefaultName(self, scheduleType)
    __swig_destroy__ = _openstudiomodelresources.delete_ScheduleTypeRegistrySingleton

# Register ScheduleTypeRegistrySingleton in _openstudiomodelresources:
_openstudiomodelresources.ScheduleTypeRegistrySingleton_swigregister(ScheduleTypeRegistrySingleton)

def isCompatible(*args):
    return _openstudiomodelresources.isCompatible(*args)

def checkOrAssignScheduleTypeLimits(className, scheduleDisplayName, schedule):
    return _openstudiomodelresources.checkOrAssignScheduleTypeLimits(className, scheduleDisplayName, schedule)

def getCompatibleScheduleTypeLimits(model, className, scheduleDisplayName):
    return _openstudiomodelresources.getCompatibleScheduleTypeLimits(model, className, scheduleDisplayName)

def getCompatibleSchedules(model, className, scheduleDisplayName):
    return _openstudiomodelresources.getCompatibleSchedules(model, className, scheduleDisplayName)

