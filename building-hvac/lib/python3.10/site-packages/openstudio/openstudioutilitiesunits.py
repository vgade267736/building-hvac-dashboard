# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudioutilitiesunits
else:
    import _openstudioutilitiesunits

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesunits.delete_SwigPyIterator

    def value(self):
        return _openstudioutilitiesunits.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudioutilitiesunits.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudioutilitiesunits.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudioutilitiesunits.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudioutilitiesunits.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudioutilitiesunits.SwigPyIterator_copy(self)

    def next(self):
        return _openstudioutilitiesunits.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudioutilitiesunits.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudioutilitiesunits.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudioutilitiesunits.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudioutilitiesunits.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudioutilitiesunits.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudioutilitiesunits.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudioutilitiesunits.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudioutilitiesunits.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudioutilitiesunits.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudioutilitiesunits:
_openstudioutilitiesunits.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudioutilitiesunits.SHARED_PTR_DISOWN
from .import openstudioutilitiescore
class Scale(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    abbr = property(_openstudioutilitiesunits.Scale_abbr_get, _openstudioutilitiesunits.Scale_abbr_set)
    name = property(_openstudioutilitiesunits.Scale_name_get, _openstudioutilitiesunits.Scale_name_set)
    exponent = property(_openstudioutilitiesunits.Scale_exponent_get, _openstudioutilitiesunits.Scale_exponent_set)
    value = property(_openstudioutilitiesunits.Scale_value_get, _openstudioutilitiesunits.Scale_value_set)

    def __init__(self):
        _openstudioutilitiesunits.Scale_swiginit(self, _openstudioutilitiesunits.new_Scale())
    __swig_destroy__ = _openstudioutilitiesunits.delete_Scale

# Register Scale in _openstudioutilitiesunits:
_openstudioutilitiesunits.Scale_swigregister(Scale)

def __lt__(firstScale, secondScale):
    return _openstudioutilitiesunits.__lt__(firstScale, secondScale)

def __gt__(firstScale, secondScale):
    return _openstudioutilitiesunits.__gt__(firstScale, secondScale)

def __le__(firstScale, secondScale):
    return _openstudioutilitiesunits.__le__(firstScale, secondScale)

def __ge__(firstScale, secondScale):
    return _openstudioutilitiesunits.__ge__(firstScale, secondScale)

def notDefined():
    return _openstudioutilitiesunits.notDefined()

def yotta():
    return _openstudioutilitiesunits.yotta()

def zetta():
    return _openstudioutilitiesunits.zetta()

def exa():
    return _openstudioutilitiesunits.exa()

def peta():
    return _openstudioutilitiesunits.peta()

def tera():
    return _openstudioutilitiesunits.tera()

def giga():
    return _openstudioutilitiesunits.giga()

def mega():
    return _openstudioutilitiesunits.mega()

def hectokilo():
    return _openstudioutilitiesunits.hectokilo()

def myria():
    return _openstudioutilitiesunits.myria()

def kilo():
    return _openstudioutilitiesunits.kilo()

def hecto():
    return _openstudioutilitiesunits.hecto()

def deka():
    return _openstudioutilitiesunits.deka()

def one():
    return _openstudioutilitiesunits.one()

def deci():
    return _openstudioutilitiesunits.deci()

def centi():
    return _openstudioutilitiesunits.centi()

def milli():
    return _openstudioutilitiesunits.milli()

def decimilli():
    return _openstudioutilitiesunits.decimilli()

def centimilli():
    return _openstudioutilitiesunits.centimilli()

def micro():
    return _openstudioutilitiesunits.micro()

def nano():
    return _openstudioutilitiesunits.nano()

def pico():
    return _openstudioutilitiesunits.pico()

def femto():
    return _openstudioutilitiesunits.femto()

def atto():
    return _openstudioutilitiesunits.atto()

def zepto():
    return _openstudioutilitiesunits.zepto()

def yocto():
    return _openstudioutilitiesunits.yocto()

def printScales():
    return _openstudioutilitiesunits.printScales()
class UnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesunits.UnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesunits.UnitVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesunits.UnitVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesunits.UnitVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesunits.UnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesunits.UnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesunits.UnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesunits.UnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesunits.UnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesunits.UnitVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesunits.UnitVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesunits.UnitVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesunits.UnitVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.UnitVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesunits.UnitVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesunits.UnitVector_begin(self)

    def end(self):
        return _openstudioutilitiesunits.UnitVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesunits.UnitVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesunits.UnitVector_rend(self)

    def clear(self):
        return _openstudioutilitiesunits.UnitVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesunits.UnitVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesunits.UnitVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesunits.UnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.UnitVector_swiginit(self, _openstudioutilitiesunits.new_UnitVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesunits.UnitVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesunits.UnitVector_front(self)

    def back(self):
        return _openstudioutilitiesunits.UnitVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesunits.UnitVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesunits.UnitVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesunits.UnitVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesunits.UnitVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesunits.UnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_UnitVector

# Register UnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.UnitVector_swigregister(UnitVector)
class OptionalUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalUnit(*args))

    def reset(self):
        return _openstudioutilitiesunits.OptionalUnit_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesunits.OptionalUnit___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesunits.OptionalUnit___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesunits.OptionalUnit_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesunits.OptionalUnit_isNull(self)

    def empty(self):
        return _openstudioutilitiesunits.OptionalUnit_empty(self)

    def get(self):
        return _openstudioutilitiesunits.OptionalUnit_get(self)

    def set(self, t):
        return _openstudioutilitiesunits.OptionalUnit_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesunits.OptionalUnit_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalUnit

# Register OptionalUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalUnit_swigregister(OptionalUnit)
class TemperatureUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesunits.TemperatureUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesunits.TemperatureUnitVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesunits.TemperatureUnitVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesunits.TemperatureUnitVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesunits.TemperatureUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesunits.TemperatureUnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesunits.TemperatureUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesunits.TemperatureUnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesunits.TemperatureUnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesunits.TemperatureUnitVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesunits.TemperatureUnitVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesunits.TemperatureUnitVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesunits.TemperatureUnitVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.TemperatureUnitVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesunits.TemperatureUnitVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesunits.TemperatureUnitVector_begin(self)

    def end(self):
        return _openstudioutilitiesunits.TemperatureUnitVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesunits.TemperatureUnitVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesunits.TemperatureUnitVector_rend(self)

    def clear(self):
        return _openstudioutilitiesunits.TemperatureUnitVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesunits.TemperatureUnitVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesunits.TemperatureUnitVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesunits.TemperatureUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.TemperatureUnitVector_swiginit(self, _openstudioutilitiesunits.new_TemperatureUnitVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesunits.TemperatureUnitVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesunits.TemperatureUnitVector_front(self)

    def back(self):
        return _openstudioutilitiesunits.TemperatureUnitVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesunits.TemperatureUnitVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesunits.TemperatureUnitVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesunits.TemperatureUnitVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesunits.TemperatureUnitVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesunits.TemperatureUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_TemperatureUnitVector

# Register TemperatureUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.TemperatureUnitVector_swigregister(TemperatureUnitVector)
class OptionalTemperatureUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalTemperatureUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalTemperatureUnit(*args))

    def reset(self):
        return _openstudioutilitiesunits.OptionalTemperatureUnit_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesunits.OptionalTemperatureUnit___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesunits.OptionalTemperatureUnit___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesunits.OptionalTemperatureUnit_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesunits.OptionalTemperatureUnit_isNull(self)

    def empty(self):
        return _openstudioutilitiesunits.OptionalTemperatureUnit_empty(self)

    def get(self):
        return _openstudioutilitiesunits.OptionalTemperatureUnit_get(self)

    def set(self, t):
        return _openstudioutilitiesunits.OptionalTemperatureUnit_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesunits.OptionalTemperatureUnit_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalTemperatureUnit

# Register OptionalTemperatureUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalTemperatureUnit_swigregister(OptionalTemperatureUnit)
class CelsiusUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesunits.CelsiusUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesunits.CelsiusUnitVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesunits.CelsiusUnitVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesunits.CelsiusUnitVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesunits.CelsiusUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesunits.CelsiusUnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesunits.CelsiusUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesunits.CelsiusUnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesunits.CelsiusUnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesunits.CelsiusUnitVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesunits.CelsiusUnitVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesunits.CelsiusUnitVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesunits.CelsiusUnitVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.CelsiusUnitVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesunits.CelsiusUnitVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesunits.CelsiusUnitVector_begin(self)

    def end(self):
        return _openstudioutilitiesunits.CelsiusUnitVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesunits.CelsiusUnitVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesunits.CelsiusUnitVector_rend(self)

    def clear(self):
        return _openstudioutilitiesunits.CelsiusUnitVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesunits.CelsiusUnitVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesunits.CelsiusUnitVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesunits.CelsiusUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.CelsiusUnitVector_swiginit(self, _openstudioutilitiesunits.new_CelsiusUnitVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesunits.CelsiusUnitVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesunits.CelsiusUnitVector_front(self)

    def back(self):
        return _openstudioutilitiesunits.CelsiusUnitVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesunits.CelsiusUnitVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesunits.CelsiusUnitVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesunits.CelsiusUnitVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesunits.CelsiusUnitVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesunits.CelsiusUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_CelsiusUnitVector

# Register CelsiusUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.CelsiusUnitVector_swigregister(CelsiusUnitVector)
class OptionalCelsiusUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalCelsiusUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalCelsiusUnit(*args))

    def reset(self):
        return _openstudioutilitiesunits.OptionalCelsiusUnit_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesunits.OptionalCelsiusUnit___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesunits.OptionalCelsiusUnit___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesunits.OptionalCelsiusUnit_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesunits.OptionalCelsiusUnit_isNull(self)

    def empty(self):
        return _openstudioutilitiesunits.OptionalCelsiusUnit_empty(self)

    def get(self):
        return _openstudioutilitiesunits.OptionalCelsiusUnit_get(self)

    def set(self, t):
        return _openstudioutilitiesunits.OptionalCelsiusUnit_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesunits.OptionalCelsiusUnit_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalCelsiusUnit

# Register OptionalCelsiusUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalCelsiusUnit_swigregister(OptionalCelsiusUnit)
class FahrenheitUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesunits.FahrenheitUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesunits.FahrenheitUnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesunits.FahrenheitUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesunits.FahrenheitUnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesunits.FahrenheitUnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesunits.FahrenheitUnitVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesunits.FahrenheitUnitVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesunits.FahrenheitUnitVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector_begin(self)

    def end(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector_rend(self)

    def clear(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesunits.FahrenheitUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.FahrenheitUnitVector_swiginit(self, _openstudioutilitiesunits.new_FahrenheitUnitVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesunits.FahrenheitUnitVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector_front(self)

    def back(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesunits.FahrenheitUnitVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesunits.FahrenheitUnitVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesunits.FahrenheitUnitVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesunits.FahrenheitUnitVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesunits.FahrenheitUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_FahrenheitUnitVector

# Register FahrenheitUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.FahrenheitUnitVector_swigregister(FahrenheitUnitVector)
class OptionalFahrenheitUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalFahrenheitUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalFahrenheitUnit(*args))

    def reset(self):
        return _openstudioutilitiesunits.OptionalFahrenheitUnit_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesunits.OptionalFahrenheitUnit___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesunits.OptionalFahrenheitUnit___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesunits.OptionalFahrenheitUnit_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesunits.OptionalFahrenheitUnit_isNull(self)

    def empty(self):
        return _openstudioutilitiesunits.OptionalFahrenheitUnit_empty(self)

    def get(self):
        return _openstudioutilitiesunits.OptionalFahrenheitUnit_get(self)

    def set(self, t):
        return _openstudioutilitiesunits.OptionalFahrenheitUnit_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesunits.OptionalFahrenheitUnit_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalFahrenheitUnit

# Register OptionalFahrenheitUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalFahrenheitUnit_swigregister(OptionalFahrenheitUnit)
class SIUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesunits.SIUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesunits.SIUnitVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesunits.SIUnitVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesunits.SIUnitVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesunits.SIUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesunits.SIUnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesunits.SIUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesunits.SIUnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesunits.SIUnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesunits.SIUnitVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesunits.SIUnitVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesunits.SIUnitVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesunits.SIUnitVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.SIUnitVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesunits.SIUnitVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesunits.SIUnitVector_begin(self)

    def end(self):
        return _openstudioutilitiesunits.SIUnitVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesunits.SIUnitVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesunits.SIUnitVector_rend(self)

    def clear(self):
        return _openstudioutilitiesunits.SIUnitVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesunits.SIUnitVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesunits.SIUnitVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesunits.SIUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.SIUnitVector_swiginit(self, _openstudioutilitiesunits.new_SIUnitVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesunits.SIUnitVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesunits.SIUnitVector_front(self)

    def back(self):
        return _openstudioutilitiesunits.SIUnitVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesunits.SIUnitVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesunits.SIUnitVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesunits.SIUnitVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesunits.SIUnitVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesunits.SIUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_SIUnitVector

# Register SIUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.SIUnitVector_swigregister(SIUnitVector)
class OptionalSIUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalSIUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalSIUnit(*args))

    def reset(self):
        return _openstudioutilitiesunits.OptionalSIUnit_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesunits.OptionalSIUnit___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesunits.OptionalSIUnit___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesunits.OptionalSIUnit_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesunits.OptionalSIUnit_isNull(self)

    def empty(self):
        return _openstudioutilitiesunits.OptionalSIUnit_empty(self)

    def get(self):
        return _openstudioutilitiesunits.OptionalSIUnit_get(self)

    def set(self, t):
        return _openstudioutilitiesunits.OptionalSIUnit_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesunits.OptionalSIUnit_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalSIUnit

# Register OptionalSIUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalSIUnit_swigregister(OptionalSIUnit)
class IPUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesunits.IPUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesunits.IPUnitVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesunits.IPUnitVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesunits.IPUnitVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesunits.IPUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesunits.IPUnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesunits.IPUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesunits.IPUnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesunits.IPUnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesunits.IPUnitVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesunits.IPUnitVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesunits.IPUnitVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesunits.IPUnitVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.IPUnitVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesunits.IPUnitVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesunits.IPUnitVector_begin(self)

    def end(self):
        return _openstudioutilitiesunits.IPUnitVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesunits.IPUnitVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesunits.IPUnitVector_rend(self)

    def clear(self):
        return _openstudioutilitiesunits.IPUnitVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesunits.IPUnitVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesunits.IPUnitVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesunits.IPUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.IPUnitVector_swiginit(self, _openstudioutilitiesunits.new_IPUnitVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesunits.IPUnitVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesunits.IPUnitVector_front(self)

    def back(self):
        return _openstudioutilitiesunits.IPUnitVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesunits.IPUnitVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesunits.IPUnitVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesunits.IPUnitVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesunits.IPUnitVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesunits.IPUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_IPUnitVector

# Register IPUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.IPUnitVector_swigregister(IPUnitVector)
class OptionalIPUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalIPUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalIPUnit(*args))

    def reset(self):
        return _openstudioutilitiesunits.OptionalIPUnit_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesunits.OptionalIPUnit___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesunits.OptionalIPUnit___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesunits.OptionalIPUnit_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesunits.OptionalIPUnit_isNull(self)

    def empty(self):
        return _openstudioutilitiesunits.OptionalIPUnit_empty(self)

    def get(self):
        return _openstudioutilitiesunits.OptionalIPUnit_get(self)

    def set(self, t):
        return _openstudioutilitiesunits.OptionalIPUnit_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesunits.OptionalIPUnit_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalIPUnit

# Register OptionalIPUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalIPUnit_swigregister(OptionalIPUnit)
class BTUUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesunits.BTUUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesunits.BTUUnitVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesunits.BTUUnitVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesunits.BTUUnitVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesunits.BTUUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesunits.BTUUnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesunits.BTUUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesunits.BTUUnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesunits.BTUUnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesunits.BTUUnitVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesunits.BTUUnitVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesunits.BTUUnitVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesunits.BTUUnitVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.BTUUnitVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesunits.BTUUnitVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesunits.BTUUnitVector_begin(self)

    def end(self):
        return _openstudioutilitiesunits.BTUUnitVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesunits.BTUUnitVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesunits.BTUUnitVector_rend(self)

    def clear(self):
        return _openstudioutilitiesunits.BTUUnitVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesunits.BTUUnitVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesunits.BTUUnitVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesunits.BTUUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.BTUUnitVector_swiginit(self, _openstudioutilitiesunits.new_BTUUnitVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesunits.BTUUnitVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesunits.BTUUnitVector_front(self)

    def back(self):
        return _openstudioutilitiesunits.BTUUnitVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesunits.BTUUnitVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesunits.BTUUnitVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesunits.BTUUnitVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesunits.BTUUnitVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesunits.BTUUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_BTUUnitVector

# Register BTUUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.BTUUnitVector_swigregister(BTUUnitVector)
class OptionalBTUUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalBTUUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalBTUUnit(*args))

    def reset(self):
        return _openstudioutilitiesunits.OptionalBTUUnit_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesunits.OptionalBTUUnit___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesunits.OptionalBTUUnit___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesunits.OptionalBTUUnit_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesunits.OptionalBTUUnit_isNull(self)

    def empty(self):
        return _openstudioutilitiesunits.OptionalBTUUnit_empty(self)

    def get(self):
        return _openstudioutilitiesunits.OptionalBTUUnit_get(self)

    def set(self, t):
        return _openstudioutilitiesunits.OptionalBTUUnit_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesunits.OptionalBTUUnit_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalBTUUnit

# Register OptionalBTUUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalBTUUnit_swigregister(OptionalBTUUnit)
class CFMUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesunits.CFMUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesunits.CFMUnitVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesunits.CFMUnitVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesunits.CFMUnitVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesunits.CFMUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesunits.CFMUnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesunits.CFMUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesunits.CFMUnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesunits.CFMUnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesunits.CFMUnitVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesunits.CFMUnitVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesunits.CFMUnitVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesunits.CFMUnitVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.CFMUnitVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesunits.CFMUnitVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesunits.CFMUnitVector_begin(self)

    def end(self):
        return _openstudioutilitiesunits.CFMUnitVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesunits.CFMUnitVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesunits.CFMUnitVector_rend(self)

    def clear(self):
        return _openstudioutilitiesunits.CFMUnitVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesunits.CFMUnitVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesunits.CFMUnitVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesunits.CFMUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.CFMUnitVector_swiginit(self, _openstudioutilitiesunits.new_CFMUnitVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesunits.CFMUnitVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesunits.CFMUnitVector_front(self)

    def back(self):
        return _openstudioutilitiesunits.CFMUnitVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesunits.CFMUnitVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesunits.CFMUnitVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesunits.CFMUnitVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesunits.CFMUnitVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesunits.CFMUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_CFMUnitVector

# Register CFMUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.CFMUnitVector_swigregister(CFMUnitVector)
class OptionalCFMUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalCFMUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalCFMUnit(*args))

    def reset(self):
        return _openstudioutilitiesunits.OptionalCFMUnit_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesunits.OptionalCFMUnit___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesunits.OptionalCFMUnit___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesunits.OptionalCFMUnit_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesunits.OptionalCFMUnit_isNull(self)

    def empty(self):
        return _openstudioutilitiesunits.OptionalCFMUnit_empty(self)

    def get(self):
        return _openstudioutilitiesunits.OptionalCFMUnit_get(self)

    def set(self, t):
        return _openstudioutilitiesunits.OptionalCFMUnit_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesunits.OptionalCFMUnit_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalCFMUnit

# Register OptionalCFMUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalCFMUnit_swigregister(OptionalCFMUnit)
class GPDUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesunits.GPDUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesunits.GPDUnitVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesunits.GPDUnitVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesunits.GPDUnitVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesunits.GPDUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesunits.GPDUnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesunits.GPDUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesunits.GPDUnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesunits.GPDUnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesunits.GPDUnitVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesunits.GPDUnitVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesunits.GPDUnitVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesunits.GPDUnitVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.GPDUnitVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesunits.GPDUnitVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesunits.GPDUnitVector_begin(self)

    def end(self):
        return _openstudioutilitiesunits.GPDUnitVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesunits.GPDUnitVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesunits.GPDUnitVector_rend(self)

    def clear(self):
        return _openstudioutilitiesunits.GPDUnitVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesunits.GPDUnitVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesunits.GPDUnitVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesunits.GPDUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.GPDUnitVector_swiginit(self, _openstudioutilitiesunits.new_GPDUnitVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesunits.GPDUnitVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesunits.GPDUnitVector_front(self)

    def back(self):
        return _openstudioutilitiesunits.GPDUnitVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesunits.GPDUnitVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesunits.GPDUnitVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesunits.GPDUnitVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesunits.GPDUnitVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesunits.GPDUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_GPDUnitVector

# Register GPDUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.GPDUnitVector_swigregister(GPDUnitVector)
class OptionalGPDUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalGPDUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalGPDUnit(*args))

    def reset(self):
        return _openstudioutilitiesunits.OptionalGPDUnit_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesunits.OptionalGPDUnit___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesunits.OptionalGPDUnit___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesunits.OptionalGPDUnit_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesunits.OptionalGPDUnit_isNull(self)

    def empty(self):
        return _openstudioutilitiesunits.OptionalGPDUnit_empty(self)

    def get(self):
        return _openstudioutilitiesunits.OptionalGPDUnit_get(self)

    def set(self, t):
        return _openstudioutilitiesunits.OptionalGPDUnit_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesunits.OptionalGPDUnit_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalGPDUnit

# Register OptionalGPDUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalGPDUnit_swigregister(OptionalGPDUnit)
class MPHUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesunits.MPHUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesunits.MPHUnitVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesunits.MPHUnitVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesunits.MPHUnitVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesunits.MPHUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesunits.MPHUnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesunits.MPHUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesunits.MPHUnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesunits.MPHUnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesunits.MPHUnitVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesunits.MPHUnitVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesunits.MPHUnitVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesunits.MPHUnitVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.MPHUnitVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesunits.MPHUnitVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesunits.MPHUnitVector_begin(self)

    def end(self):
        return _openstudioutilitiesunits.MPHUnitVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesunits.MPHUnitVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesunits.MPHUnitVector_rend(self)

    def clear(self):
        return _openstudioutilitiesunits.MPHUnitVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesunits.MPHUnitVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesunits.MPHUnitVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesunits.MPHUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.MPHUnitVector_swiginit(self, _openstudioutilitiesunits.new_MPHUnitVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesunits.MPHUnitVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesunits.MPHUnitVector_front(self)

    def back(self):
        return _openstudioutilitiesunits.MPHUnitVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesunits.MPHUnitVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesunits.MPHUnitVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesunits.MPHUnitVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesunits.MPHUnitVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesunits.MPHUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_MPHUnitVector

# Register MPHUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.MPHUnitVector_swigregister(MPHUnitVector)
class OptionalMPHUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalMPHUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalMPHUnit(*args))

    def reset(self):
        return _openstudioutilitiesunits.OptionalMPHUnit_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesunits.OptionalMPHUnit___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesunits.OptionalMPHUnit___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesunits.OptionalMPHUnit_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesunits.OptionalMPHUnit_isNull(self)

    def empty(self):
        return _openstudioutilitiesunits.OptionalMPHUnit_empty(self)

    def get(self):
        return _openstudioutilitiesunits.OptionalMPHUnit_get(self)

    def set(self, t):
        return _openstudioutilitiesunits.OptionalMPHUnit_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesunits.OptionalMPHUnit_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalMPHUnit

# Register OptionalMPHUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalMPHUnit_swigregister(OptionalMPHUnit)
class WhUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesunits.WhUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesunits.WhUnitVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesunits.WhUnitVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesunits.WhUnitVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesunits.WhUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesunits.WhUnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesunits.WhUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesunits.WhUnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesunits.WhUnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesunits.WhUnitVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesunits.WhUnitVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesunits.WhUnitVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesunits.WhUnitVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.WhUnitVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesunits.WhUnitVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesunits.WhUnitVector_begin(self)

    def end(self):
        return _openstudioutilitiesunits.WhUnitVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesunits.WhUnitVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesunits.WhUnitVector_rend(self)

    def clear(self):
        return _openstudioutilitiesunits.WhUnitVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesunits.WhUnitVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesunits.WhUnitVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesunits.WhUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.WhUnitVector_swiginit(self, _openstudioutilitiesunits.new_WhUnitVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesunits.WhUnitVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesunits.WhUnitVector_front(self)

    def back(self):
        return _openstudioutilitiesunits.WhUnitVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesunits.WhUnitVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesunits.WhUnitVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesunits.WhUnitVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesunits.WhUnitVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesunits.WhUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_WhUnitVector

# Register WhUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.WhUnitVector_swigregister(WhUnitVector)
class OptionalWhUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalWhUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalWhUnit(*args))

    def reset(self):
        return _openstudioutilitiesunits.OptionalWhUnit_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesunits.OptionalWhUnit___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesunits.OptionalWhUnit___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesunits.OptionalWhUnit_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesunits.OptionalWhUnit_isNull(self)

    def empty(self):
        return _openstudioutilitiesunits.OptionalWhUnit_empty(self)

    def get(self):
        return _openstudioutilitiesunits.OptionalWhUnit_get(self)

    def set(self, t):
        return _openstudioutilitiesunits.OptionalWhUnit_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesunits.OptionalWhUnit_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalWhUnit

# Register OptionalWhUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalWhUnit_swigregister(OptionalWhUnit)
class ThermUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesunits.ThermUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesunits.ThermUnitVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesunits.ThermUnitVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesunits.ThermUnitVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesunits.ThermUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesunits.ThermUnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesunits.ThermUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesunits.ThermUnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesunits.ThermUnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesunits.ThermUnitVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesunits.ThermUnitVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesunits.ThermUnitVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesunits.ThermUnitVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.ThermUnitVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesunits.ThermUnitVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesunits.ThermUnitVector_begin(self)

    def end(self):
        return _openstudioutilitiesunits.ThermUnitVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesunits.ThermUnitVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesunits.ThermUnitVector_rend(self)

    def clear(self):
        return _openstudioutilitiesunits.ThermUnitVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesunits.ThermUnitVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesunits.ThermUnitVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesunits.ThermUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.ThermUnitVector_swiginit(self, _openstudioutilitiesunits.new_ThermUnitVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesunits.ThermUnitVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesunits.ThermUnitVector_front(self)

    def back(self):
        return _openstudioutilitiesunits.ThermUnitVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesunits.ThermUnitVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesunits.ThermUnitVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesunits.ThermUnitVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesunits.ThermUnitVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesunits.ThermUnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_ThermUnitVector

# Register ThermUnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.ThermUnitVector_swigregister(ThermUnitVector)
class OptionalThermUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalThermUnit_swiginit(self, _openstudioutilitiesunits.new_OptionalThermUnit(*args))

    def reset(self):
        return _openstudioutilitiesunits.OptionalThermUnit_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesunits.OptionalThermUnit___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesunits.OptionalThermUnit___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesunits.OptionalThermUnit_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesunits.OptionalThermUnit_isNull(self)

    def empty(self):
        return _openstudioutilitiesunits.OptionalThermUnit_empty(self)

    def get(self):
        return _openstudioutilitiesunits.OptionalThermUnit_get(self)

    def set(self, t):
        return _openstudioutilitiesunits.OptionalThermUnit_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesunits.OptionalThermUnit_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalThermUnit

# Register OptionalThermUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalThermUnit_swigregister(OptionalThermUnit)
class Misc1UnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesunits.Misc1UnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesunits.Misc1UnitVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesunits.Misc1UnitVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesunits.Misc1UnitVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesunits.Misc1UnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesunits.Misc1UnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesunits.Misc1UnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesunits.Misc1UnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesunits.Misc1UnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesunits.Misc1UnitVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesunits.Misc1UnitVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesunits.Misc1UnitVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesunits.Misc1UnitVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.Misc1UnitVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesunits.Misc1UnitVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesunits.Misc1UnitVector_begin(self)

    def end(self):
        return _openstudioutilitiesunits.Misc1UnitVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesunits.Misc1UnitVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesunits.Misc1UnitVector_rend(self)

    def clear(self):
        return _openstudioutilitiesunits.Misc1UnitVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesunits.Misc1UnitVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesunits.Misc1UnitVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesunits.Misc1UnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.Misc1UnitVector_swiginit(self, _openstudioutilitiesunits.new_Misc1UnitVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesunits.Misc1UnitVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesunits.Misc1UnitVector_front(self)

    def back(self):
        return _openstudioutilitiesunits.Misc1UnitVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesunits.Misc1UnitVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesunits.Misc1UnitVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesunits.Misc1UnitVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesunits.Misc1UnitVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesunits.Misc1UnitVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_Misc1UnitVector

# Register Misc1UnitVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.Misc1UnitVector_swigregister(Misc1UnitVector)
class OptionalMisc1Unit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalMisc1Unit_swiginit(self, _openstudioutilitiesunits.new_OptionalMisc1Unit(*args))

    def reset(self):
        return _openstudioutilitiesunits.OptionalMisc1Unit_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesunits.OptionalMisc1Unit___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesunits.OptionalMisc1Unit___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesunits.OptionalMisc1Unit_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesunits.OptionalMisc1Unit_isNull(self)

    def empty(self):
        return _openstudioutilitiesunits.OptionalMisc1Unit_empty(self)

    def get(self):
        return _openstudioutilitiesunits.OptionalMisc1Unit_get(self)

    def set(self, t):
        return _openstudioutilitiesunits.OptionalMisc1Unit_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesunits.OptionalMisc1Unit_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalMisc1Unit

# Register OptionalMisc1Unit in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalMisc1Unit_swigregister(OptionalMisc1Unit)
class UnitSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.UnitSystem_swiginit(self, _openstudioutilitiesunits.new_UnitSystem(*args))

    def valueName(self):
        return _openstudioutilitiesunits.UnitSystem_valueName(self)

    def value(self):
        return _openstudioutilitiesunits.UnitSystem_value(self)

    def valueDescription(self):
        return _openstudioutilitiesunits.UnitSystem_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesunits.UnitSystem___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesunits.UnitSystem___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesunits.UnitSystem___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesunits.UnitSystem___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesunits.UnitSystem___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesunits.UnitSystem___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesunits.UnitSystem_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesunits.UnitSystem_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesunits.UnitSystem_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesunits.UnitSystem___str__(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_UnitSystem

# Register UnitSystem in _openstudioutilitiesunits:
_openstudioutilitiesunits.UnitSystem_swigregister(UnitSystem)
class ZUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.ZUnit_swiginit(self, _openstudioutilitiesunits.new_ZUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_ZUnit

    def clone(self):
        return _openstudioutilitiesunits.ZUnit_clone(self)

    def cloneToMixed(self):
        return _openstudioutilitiesunits.ZUnit_cloneToMixed(self)

    def baseUnits(self):
        return _openstudioutilitiesunits.ZUnit_baseUnits(self)

    def isBaseUnit(self, baseUnit):
        return _openstudioutilitiesunits.ZUnit_isBaseUnit(self, baseUnit)

    def baseUnitExponent(self, baseUnit):
        return _openstudioutilitiesunits.ZUnit_baseUnitExponent(self, baseUnit)

    def setBaseUnitExponent(self, baseUnit, exponent):
        return _openstudioutilitiesunits.ZUnit_setBaseUnitExponent(self, baseUnit, exponent)

    def scale(self):
        return _openstudioutilitiesunits.ZUnit_scale(self)

    def setScale(self, *args):
        return _openstudioutilitiesunits.ZUnit_setScale(self, *args)

    def standardString(self, withScale=True):
        return _openstudioutilitiesunits.ZUnit_standardString(self, withScale)

    def prettyString(self, withScale=True):
        return _openstudioutilitiesunits.ZUnit_prettyString(self, withScale)

    def setPrettyString(self, str):
        return _openstudioutilitiesunits.ZUnit_setPrettyString(self, str)

    def toString(self, withScale=True):
        return _openstudioutilitiesunits.ZUnit_toString(self, withScale)

    def system(self):
        return _openstudioutilitiesunits.ZUnit_system(self)

    def __eq__(self, rUnit):
        return _openstudioutilitiesunits.ZUnit___eq__(self, rUnit)

    def __imul__(self, rUnit):
        return _openstudioutilitiesunits.ZUnit___imul__(self, rUnit)

    def __itruediv__(self, *args):
        return _openstudioutilitiesunits.ZUnit___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def pow(self, expNum, expDenom=1, okToCallFactory=True):
        return _openstudioutilitiesunits.ZUnit_pow(self, expNum, expDenom, okToCallFactory)

    def to_Unit(self):
        return _openstudioutilitiesunits.ZUnit_to_Unit(self)

    def to_TemperatureUnit(self):
        return _openstudioutilitiesunits.ZUnit_to_TemperatureUnit(self)

    def to_CelsiusUnit(self):
        return _openstudioutilitiesunits.ZUnit_to_CelsiusUnit(self)

    def to_FahrenheitUnit(self):
        return _openstudioutilitiesunits.ZUnit_to_FahrenheitUnit(self)

    def to_SIUnit(self):
        return _openstudioutilitiesunits.ZUnit_to_SIUnit(self)

    def to_IPUnit(self):
        return _openstudioutilitiesunits.ZUnit_to_IPUnit(self)

    def to_BTUUnit(self):
        return _openstudioutilitiesunits.ZUnit_to_BTUUnit(self)

    def to_CFMUnit(self):
        return _openstudioutilitiesunits.ZUnit_to_CFMUnit(self)

    def to_GPDUnit(self):
        return _openstudioutilitiesunits.ZUnit_to_GPDUnit(self)

    def to_MPHUnit(self):
        return _openstudioutilitiesunits.ZUnit_to_MPHUnit(self)

    def to_WhUnit(self):
        return _openstudioutilitiesunits.ZUnit_to_WhUnit(self)

    def to_ThermUnit(self):
        return _openstudioutilitiesunits.ZUnit_to_ThermUnit(self)

    def to_Misc1Unit(self):
        return _openstudioutilitiesunits.ZUnit_to_Misc1Unit(self)

    def __str__(self):
        return _openstudioutilitiesunits.ZUnit___str__(self)

    def __mul__(self, rUnit):
        return _openstudioutilitiesunits.ZUnit___mul__(self, rUnit)

    def __truediv__(self, *args):
        return _openstudioutilitiesunits.ZUnit___truediv__(self, *args)
    __div__ = __truediv__



# Register ZUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.ZUnit_swigregister(ZUnit)

def parseUnitString(unitString):
    return _openstudioutilitiesunits.parseUnitString(unitString)
class TemperatureUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesunits.delete_TemperatureUnit

    def isAbsolute(self):
        return _openstudioutilitiesunits.TemperatureUnit_isAbsolute(self)

    def setAsAbsolute(self):
        return _openstudioutilitiesunits.TemperatureUnit_setAsAbsolute(self)

    def setAsRelative(self):
        return _openstudioutilitiesunits.TemperatureUnit_setAsRelative(self)

# Register TemperatureUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.TemperatureUnit_swigregister(TemperatureUnit)
class CelsiusUnit(TemperatureUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.CelsiusUnit_swiginit(self, _openstudioutilitiesunits.new_CelsiusUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_CelsiusUnit

# Register CelsiusUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.CelsiusUnit_swigregister(CelsiusUnit)

def createCelsiusTemperature():
    return _openstudioutilitiesunits.createCelsiusTemperature()
class FahrenheitUnit(TemperatureUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.FahrenheitUnit_swiginit(self, _openstudioutilitiesunits.new_FahrenheitUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_FahrenheitUnit

    def __itruediv__(self, *args):
        return _openstudioutilitiesunits.FahrenheitUnit___itruediv__(self, *args)
    __idiv__ = __itruediv__



# Register FahrenheitUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.FahrenheitUnit_swigregister(FahrenheitUnit)

def createFahrenheitTemperature():
    return _openstudioutilitiesunits.createFahrenheitTemperature()
class SIExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, kg=0, m=0, s=0, K=0, A=0, cd=0, mol=0, rad=0, sr=0, people=0, cycle=0, dollar=0):
        _openstudioutilitiesunits.SIExpnt_swiginit(self, _openstudioutilitiesunits.new_SIExpnt(kg, m, s, K, A, cd, mol, rad, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_SIExpnt

# Register SIExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.SIExpnt_swigregister(SIExpnt)
class SIUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.SIUnit_swiginit(self, _openstudioutilitiesunits.new_SIUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_SIUnit

# Register SIUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.SIUnit_swigregister(SIUnit)

def createSIMass():
    return _openstudioutilitiesunits.createSIMass()

def createSILength():
    return _openstudioutilitiesunits.createSILength()

def createSITime():
    return _openstudioutilitiesunits.createSITime()

def createSITemperature():
    return _openstudioutilitiesunits.createSITemperature()

def createSIElectricCurrent():
    return _openstudioutilitiesunits.createSIElectricCurrent()

def createSILuminousIntensity():
    return _openstudioutilitiesunits.createSILuminousIntensity()

def createSIAmountOfSubstance():
    return _openstudioutilitiesunits.createSIAmountOfSubstance()

def createSIAngle():
    return _openstudioutilitiesunits.createSIAngle()

def createSISolidAngle():
    return _openstudioutilitiesunits.createSISolidAngle()

def createSIPeople():
    return _openstudioutilitiesunits.createSIPeople()

def createSICycle():
    return _openstudioutilitiesunits.createSICycle()

def createSICurrency():
    return _openstudioutilitiesunits.createSICurrency()

def createSIForce():
    return _openstudioutilitiesunits.createSIForce()

def createSIEnergy():
    return _openstudioutilitiesunits.createSIEnergy()

def createSIPower():
    return _openstudioutilitiesunits.createSIPower()

def createSIElectricCharge():
    return _openstudioutilitiesunits.createSIElectricCharge()

def createSIElectricalPotential():
    return _openstudioutilitiesunits.createSIElectricalPotential()

def createSIElectricCapacitance():
    return _openstudioutilitiesunits.createSIElectricCapacitance()

def createSIElectricResistance():
    return _openstudioutilitiesunits.createSIElectricResistance()

def createSIMagneticFlux():
    return _openstudioutilitiesunits.createSIMagneticFlux()

def createSIMagneticFieldStrength():
    return _openstudioutilitiesunits.createSIMagneticFieldStrength()

def createSIInductance():
    return _openstudioutilitiesunits.createSIInductance()

def createSILuminousFlux():
    return _openstudioutilitiesunits.createSILuminousFlux()

def createSIIlluminance():
    return _openstudioutilitiesunits.createSIIlluminance()

def createSIFrequency():
    return _openstudioutilitiesunits.createSIFrequency()

def createSIEnergyUseIntensity():
    return _openstudioutilitiesunits.createSIEnergyUseIntensity()

def createSIPowerDensity():
    return _openstudioutilitiesunits.createSIPowerDensity()

def createSIPowerPerPerson():
    return _openstudioutilitiesunits.createSIPowerPerPerson()

def createSIPressure():
    return _openstudioutilitiesunits.createSIPressure()

def createSIThermalConductance():
    return _openstudioutilitiesunits.createSIThermalConductance()

def createSIThermalResistance():
    return _openstudioutilitiesunits.createSIThermalResistance()

def createSIHeatCapacity():
    return _openstudioutilitiesunits.createSIHeatCapacity()
class IPExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lbm=0, ft=0, s=0, R=0, A=0, cd=0, lbmol=0, lbf=0, deg=0, sr=0, people=0, cycle=0, dollar=0):
        _openstudioutilitiesunits.IPExpnt_swiginit(self, _openstudioutilitiesunits.new_IPExpnt(lbm, ft, s, R, A, cd, lbmol, lbf, deg, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_IPExpnt

# Register IPExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.IPExpnt_swigregister(IPExpnt)
class IPUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.IPUnit_swiginit(self, _openstudioutilitiesunits.new_IPUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_IPUnit

    @staticmethod
    def gc():
        return _openstudioutilitiesunits.IPUnit_gc()

    def lbmToLbf(self):
        return _openstudioutilitiesunits.IPUnit_lbmToLbf(self)

    def lbfToLbm(self):
        return _openstudioutilitiesunits.IPUnit_lbfToLbm(self)

# Register IPUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.IPUnit_swigregister(IPUnit)

def createIPMass():
    return _openstudioutilitiesunits.createIPMass()

def createIPLength():
    return _openstudioutilitiesunits.createIPLength()

def createIPTime():
    return _openstudioutilitiesunits.createIPTime()

def createIPTemperature():
    return _openstudioutilitiesunits.createIPTemperature()

def createIPElectricCurrent():
    return _openstudioutilitiesunits.createIPElectricCurrent()

def createIPLuminousIntensity():
    return _openstudioutilitiesunits.createIPLuminousIntensity()

def createIPAmountOfSubstance():
    return _openstudioutilitiesunits.createIPAmountOfSubstance()

def createIPAngle():
    return _openstudioutilitiesunits.createIPAngle()

def createIPSolidAngle():
    return _openstudioutilitiesunits.createIPSolidAngle()

def createIPPeople():
    return _openstudioutilitiesunits.createIPPeople()

def createIPCycle():
    return _openstudioutilitiesunits.createIPCycle()

def createIPCurrency():
    return _openstudioutilitiesunits.createIPCurrency()

def createIPForce():
    return _openstudioutilitiesunits.createIPForce()

def createIPEnergy():
    return _openstudioutilitiesunits.createIPEnergy()

def createIPPower():
    return _openstudioutilitiesunits.createIPPower()

def createIPElectricCharge():
    return _openstudioutilitiesunits.createIPElectricCharge()

def createIPLuminousFlux():
    return _openstudioutilitiesunits.createIPLuminousFlux()

def createIPIlluminance():
    return _openstudioutilitiesunits.createIPIlluminance()

def createIPFrequency():
    return _openstudioutilitiesunits.createIPFrequency()
class BTUExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, btu=0, ft=0, h=0, R=0, A=0, cd=0, lbmol=0, deg=0, sr=0, people=0, cycle=0, dollar=0):
        _openstudioutilitiesunits.BTUExpnt_swiginit(self, _openstudioutilitiesunits.new_BTUExpnt(btu, ft, h, R, A, cd, lbmol, deg, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_BTUExpnt

# Register BTUExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.BTUExpnt_swigregister(BTUExpnt)
class BTUUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.BTUUnit_swiginit(self, _openstudioutilitiesunits.new_BTUUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_BTUUnit

# Register BTUUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.BTUUnit_swigregister(BTUUnit)

def createBTUEnergy():
    return _openstudioutilitiesunits.createBTUEnergy()

def createBTULength():
    return _openstudioutilitiesunits.createBTULength()

def createBTUTime():
    return _openstudioutilitiesunits.createBTUTime()

def createBTUTemperature():
    return _openstudioutilitiesunits.createBTUTemperature()

def createBTUElectricCurrent():
    return _openstudioutilitiesunits.createBTUElectricCurrent()

def createBTULuminousIntensity():
    return _openstudioutilitiesunits.createBTULuminousIntensity()

def createBTUAmountOfSubstance():
    return _openstudioutilitiesunits.createBTUAmountOfSubstance()

def createBTUAngle():
    return _openstudioutilitiesunits.createBTUAngle()

def createBTUSolidAngle():
    return _openstudioutilitiesunits.createBTUSolidAngle()

def createBTUPeople():
    return _openstudioutilitiesunits.createBTUPeople()

def createBTUCycle():
    return _openstudioutilitiesunits.createBTUCycle()

def createBTUCurrency():
    return _openstudioutilitiesunits.createBTUCurrency()

def createBTUPower():
    return _openstudioutilitiesunits.createBTUPower()

def createBTULuminousFlux():
    return _openstudioutilitiesunits.createBTULuminousFlux()

def createBTUIlluminance():
    return _openstudioutilitiesunits.createBTUIlluminance()
class CFMExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ft=0, min=0, ton=0, R=0, A=0, cd=0, lbmol=0, deg=0, sr=0, people=0, cycle=0, dollar=0):
        _openstudioutilitiesunits.CFMExpnt_swiginit(self, _openstudioutilitiesunits.new_CFMExpnt(ft, min, ton, R, A, cd, lbmol, deg, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_CFMExpnt

# Register CFMExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.CFMExpnt_swigregister(CFMExpnt)
class CFMUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.CFMUnit_swiginit(self, _openstudioutilitiesunits.new_CFMUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_CFMUnit

# Register CFMUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.CFMUnit_swigregister(CFMUnit)

def createCFMLength():
    return _openstudioutilitiesunits.createCFMLength()

def createCFMTime():
    return _openstudioutilitiesunits.createCFMTime()

def createCFMPower():
    return _openstudioutilitiesunits.createCFMPower()

def createCFMTemperature():
    return _openstudioutilitiesunits.createCFMTemperature()

def createCFMElectricCurrent():
    return _openstudioutilitiesunits.createCFMElectricCurrent()

def createCFMLuminousIntensity():
    return _openstudioutilitiesunits.createCFMLuminousIntensity()

def createCFMAmountOfSubstance():
    return _openstudioutilitiesunits.createCFMAmountOfSubstance()

def createCFMAngle():
    return _openstudioutilitiesunits.createCFMAngle()

def createCFMSolidAngle():
    return _openstudioutilitiesunits.createCFMSolidAngle()

def createCFMPeople():
    return _openstudioutilitiesunits.createCFMPeople()

def createCFMCycle():
    return _openstudioutilitiesunits.createCFMCycle()

def createCFMCurrency():
    return _openstudioutilitiesunits.createCFMCurrency()

def createCFMVolumetricFlowrate():
    return _openstudioutilitiesunits.createCFMVolumetricFlowrate()

def createCFMLuminousFlux():
    return _openstudioutilitiesunits.createCFMLuminousFlux()

def createCFMIlluminance():
    return _openstudioutilitiesunits.createCFMIlluminance()

def createCFMFrequency():
    return _openstudioutilitiesunits.createCFMFrequency()
class GPDExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, inH2O=0, gal=0, day=0, R=0, A=0, cd=0, lbmol=0, deg=0, sr=0, people=0, cycle=0, dollar=0):
        _openstudioutilitiesunits.GPDExpnt_swiginit(self, _openstudioutilitiesunits.new_GPDExpnt(inH2O, gal, day, R, A, cd, lbmol, deg, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_GPDExpnt

# Register GPDExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.GPDExpnt_swigregister(GPDExpnt)
class GPDUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.GPDUnit_swiginit(self, _openstudioutilitiesunits.new_GPDUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_GPDUnit

# Register GPDUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.GPDUnit_swigregister(GPDUnit)

def createGPDPressure():
    return _openstudioutilitiesunits.createGPDPressure()

def createGPDLength():
    return _openstudioutilitiesunits.createGPDLength()

def createGPDTime():
    return _openstudioutilitiesunits.createGPDTime()

def createGPDTemperature():
    return _openstudioutilitiesunits.createGPDTemperature()

def createGPDElectricCurrent():
    return _openstudioutilitiesunits.createGPDElectricCurrent()

def createGPDLuminousIntensity():
    return _openstudioutilitiesunits.createGPDLuminousIntensity()

def createGPDAmountOfSubstance():
    return _openstudioutilitiesunits.createGPDAmountOfSubstance()

def createGPDAngle():
    return _openstudioutilitiesunits.createGPDAngle()

def createGPDSolidAngle():
    return _openstudioutilitiesunits.createGPDSolidAngle()

def createGPDPeople():
    return _openstudioutilitiesunits.createGPDPeople()

def createGPDCycle():
    return _openstudioutilitiesunits.createGPDCycle()

def createGPDCurrency():
    return _openstudioutilitiesunits.createGPDCurrency()

def createGPDVolume():
    return _openstudioutilitiesunits.createGPDVolume()

def createGPDVolumetricFlowrate():
    return _openstudioutilitiesunits.createGPDVolumetricFlowrate()

def createGPDLuminousFlux():
    return _openstudioutilitiesunits.createGPDLuminousFlux()
class MPHExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, inHg=0, mi=0, h=0, R=0, A=0, cd=0, lbmol=0, deg=0, sr=0, people=0, cycle=0, dollar=0):
        _openstudioutilitiesunits.MPHExpnt_swiginit(self, _openstudioutilitiesunits.new_MPHExpnt(inHg, mi, h, R, A, cd, lbmol, deg, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_MPHExpnt

# Register MPHExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.MPHExpnt_swigregister(MPHExpnt)
class MPHUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.MPHUnit_swiginit(self, _openstudioutilitiesunits.new_MPHUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_MPHUnit

# Register MPHUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.MPHUnit_swigregister(MPHUnit)

def createMPHPressure():
    return _openstudioutilitiesunits.createMPHPressure()

def createMPHLength():
    return _openstudioutilitiesunits.createMPHLength()

def createMPHTime():
    return _openstudioutilitiesunits.createMPHTime()

def createMPHTemperature():
    return _openstudioutilitiesunits.createMPHTemperature()

def createMPHElectricCurrent():
    return _openstudioutilitiesunits.createMPHElectricCurrent()

def createMPHLuminousIntensity():
    return _openstudioutilitiesunits.createMPHLuminousIntensity()

def createMPHAmountOfSubstance():
    return _openstudioutilitiesunits.createMPHAmountOfSubstance()

def createMPHAngle():
    return _openstudioutilitiesunits.createMPHAngle()

def createMPHSolidAngle():
    return _openstudioutilitiesunits.createMPHSolidAngle()

def createMPHPeople():
    return _openstudioutilitiesunits.createMPHPeople()

def createMPHCycle():
    return _openstudioutilitiesunits.createMPHCycle()

def createMPHCurrency():
    return _openstudioutilitiesunits.createMPHCurrency()

def createMPHVelocity():
    return _openstudioutilitiesunits.createMPHVelocity()

def createMPHLuminousFlux():
    return _openstudioutilitiesunits.createMPHLuminousFlux()
class WhExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, W=0, h=0, m=0, K=0, A=0, cd=0, mol=0, rad=0, sr=0, people=0, cycle=0, dollar=0):
        _openstudioutilitiesunits.WhExpnt_swiginit(self, _openstudioutilitiesunits.new_WhExpnt(W, h, m, K, A, cd, mol, rad, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_WhExpnt

# Register WhExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.WhExpnt_swigregister(WhExpnt)
class WhUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.WhUnit_swiginit(self, _openstudioutilitiesunits.new_WhUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_WhUnit

# Register WhUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.WhUnit_swigregister(WhUnit)

def createWhPower():
    return _openstudioutilitiesunits.createWhPower()

def createWhTime():
    return _openstudioutilitiesunits.createWhTime()

def createWhLength():
    return _openstudioutilitiesunits.createWhLength()

def createWhTemperature():
    return _openstudioutilitiesunits.createWhTemperature()

def createWhElectricCurrent():
    return _openstudioutilitiesunits.createWhElectricCurrent()

def createWhLuminousIntensity():
    return _openstudioutilitiesunits.createWhLuminousIntensity()

def createWhAmountOfSubstance():
    return _openstudioutilitiesunits.createWhAmountOfSubstance()

def createWhAngle():
    return _openstudioutilitiesunits.createWhAngle()

def createWhSolidAngle():
    return _openstudioutilitiesunits.createWhSolidAngle()

def createWhPeople():
    return _openstudioutilitiesunits.createWhPeople()

def createWhCycle():
    return _openstudioutilitiesunits.createWhCycle()

def createWhCurrency():
    return _openstudioutilitiesunits.createWhCurrency()

def createWhEnergy():
    return _openstudioutilitiesunits.createWhEnergy()

def createWhElectricalPotential():
    return _openstudioutilitiesunits.createWhElectricalPotential()

def createWhElectricResistance():
    return _openstudioutilitiesunits.createWhElectricResistance()

def createWhLuminousFlux():
    return _openstudioutilitiesunits.createWhLuminousFlux()

def createWhIlluminance():
    return _openstudioutilitiesunits.createWhIlluminance()
class ThermExpnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, therm=0, t_in=0, yr=0, R=0, A=0, cd=0, lbmol=0, deg=0, sr=0, people=0, cycle=0, dollar=0):
        _openstudioutilitiesunits.ThermExpnt_swiginit(self, _openstudioutilitiesunits.new_ThermExpnt(therm, t_in, yr, R, A, cd, lbmol, deg, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_ThermExpnt

# Register ThermExpnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.ThermExpnt_swigregister(ThermExpnt)
class ThermUnit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.ThermUnit_swiginit(self, _openstudioutilitiesunits.new_ThermUnit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_ThermUnit

# Register ThermUnit in _openstudioutilitiesunits:
_openstudioutilitiesunits.ThermUnit_swigregister(ThermUnit)

def createThermEnergy():
    return _openstudioutilitiesunits.createThermEnergy()

def createThermLength():
    return _openstudioutilitiesunits.createThermLength()

def createThermTime():
    return _openstudioutilitiesunits.createThermTime()

def createThermTemperature():
    return _openstudioutilitiesunits.createThermTemperature()

def createThermElectricCurrent():
    return _openstudioutilitiesunits.createThermElectricCurrent()

def createThermLuminousIntensity():
    return _openstudioutilitiesunits.createThermLuminousIntensity()

def createThermAmountOfSubstance():
    return _openstudioutilitiesunits.createThermAmountOfSubstance()

def createThermAngle():
    return _openstudioutilitiesunits.createThermAngle()

def createThermSolidAngle():
    return _openstudioutilitiesunits.createThermSolidAngle()

def createThermPeople():
    return _openstudioutilitiesunits.createThermPeople()

def createThermCycle():
    return _openstudioutilitiesunits.createThermCycle()

def createThermCurrency():
    return _openstudioutilitiesunits.createThermCurrency()

def createThermLuminousFlux():
    return _openstudioutilitiesunits.createThermLuminousFlux()
class Misc1Expnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ftH2O=0, L=0, day=0, K=0, A=0, cd=0, mol=0, rad=0, sr=0, people=0, cycle=0, dollar=0):
        _openstudioutilitiesunits.Misc1Expnt_swiginit(self, _openstudioutilitiesunits.new_Misc1Expnt(ftH2O, L, day, K, A, cd, mol, rad, sr, people, cycle, dollar))
    __swig_destroy__ = _openstudioutilitiesunits.delete_Misc1Expnt

# Register Misc1Expnt in _openstudioutilitiesunits:
_openstudioutilitiesunits.Misc1Expnt_swigregister(Misc1Expnt)
class Misc1Unit(ZUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.Misc1Unit_swiginit(self, _openstudioutilitiesunits.new_Misc1Unit(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_Misc1Unit

# Register Misc1Unit in _openstudioutilitiesunits:
_openstudioutilitiesunits.Misc1Unit_swigregister(Misc1Unit)

def createMisc1Pressure():
    return _openstudioutilitiesunits.createMisc1Pressure()

def createMisc1Length():
    return _openstudioutilitiesunits.createMisc1Length()

def createMisc1Time():
    return _openstudioutilitiesunits.createMisc1Time()

def createMisc1Temperature():
    return _openstudioutilitiesunits.createMisc1Temperature()

def createMisc1ElectricCurrent():
    return _openstudioutilitiesunits.createMisc1ElectricCurrent()

def createMisc1LuminousIntensity():
    return _openstudioutilitiesunits.createMisc1LuminousIntensity()

def createMisc1AmountOfSubstance():
    return _openstudioutilitiesunits.createMisc1AmountOfSubstance()

def createMisc1Angle():
    return _openstudioutilitiesunits.createMisc1Angle()

def createMisc1SolidAngle():
    return _openstudioutilitiesunits.createMisc1SolidAngle()

def createMisc1People():
    return _openstudioutilitiesunits.createMisc1People()

def createMisc1Cycle():
    return _openstudioutilitiesunits.createMisc1Cycle()

def createMisc1Currency():
    return _openstudioutilitiesunits.createMisc1Currency()

def createMisc1Volume():
    return _openstudioutilitiesunits.createMisc1Volume()

def createMisc1LuminousFlux():
    return _openstudioutilitiesunits.createMisc1LuminousFlux()

def isFixedPrecisionValue(s):
    return _openstudioutilitiesunits.isFixedPrecisionValue(s)

def containsFixedPrecisionValue(s):
    return _openstudioutilitiesunits.containsFixedPrecisionValue(s)

def isScientificNotationValue(s):
    return _openstudioutilitiesunits.isScientificNotationValue(s)

def containsScientificNotationValue(s):
    return _openstudioutilitiesunits.containsScientificNotationValue(s)

def isAtomicUnit(s):
    return _openstudioutilitiesunits.isAtomicUnit(s)

def containsAtomicUnit(s):
    return _openstudioutilitiesunits.containsAtomicUnit(s)

def isCompoundUnit(s):
    return _openstudioutilitiesunits.isCompoundUnit(s)

def containsCompoundUnit(s):
    return _openstudioutilitiesunits.containsCompoundUnit(s)

def isScaledUnit(s):
    return _openstudioutilitiesunits.isScaledUnit(s)

def containsScaledUnit(s):
    return _openstudioutilitiesunits.containsScaledUnit(s)

def isDirectScaledUnit(s):
    return _openstudioutilitiesunits.isDirectScaledUnit(s)

def containsDirectScaledUnit(s):
    return _openstudioutilitiesunits.containsDirectScaledUnit(s)

def isUnit(s):
    return _openstudioutilitiesunits.isUnit(s)

def containsUnit(s):
    return _openstudioutilitiesunits.containsUnit(s)

def isQuantity(s):
    return _openstudioutilitiesunits.isQuantity(s)

def containsQuantity(s):
    return _openstudioutilitiesunits.containsQuantity(s)

def getSystem(unitString):
    return _openstudioutilitiesunits.getSystem(unitString)

def isInSystem(unitString, system):
    return _openstudioutilitiesunits.isInSystem(unitString, system)

def containsRegisteredBaseUnit(unitString):
    return _openstudioutilitiesunits.containsRegisteredBaseUnit(unitString)

def extractUnitString(text):
    return _openstudioutilitiesunits.extractUnitString(text)

def convertToStandardForm(unitString):
    return _openstudioutilitiesunits.convertToStandardForm(unitString)

def replaceUnitString(text, newUnitString):
    return _openstudioutilitiesunits.replaceUnitString(text, newUnitString)

def isUnitString(unitString):
    return _openstudioutilitiesunits.isUnitString(unitString)

def createDimensionlessUnit(system):
    return _openstudioutilitiesunits.createDimensionlessUnit(system)

def createUnit(*args):
    return _openstudioutilitiesunits.createUnit(*args)

def unitStringsEqual(uStr1, uStr2):
    return _openstudioutilitiesunits.unitStringsEqual(uStr1, uStr2)

def createIPPowerDensity():
    return _openstudioutilitiesunits.createIPPowerDensity()

def createGPMVolumetricFlowrate():
    return _openstudioutilitiesunits.createGPMVolumetricFlowrate()

def createIPPressure():
    return _openstudioutilitiesunits.createIPPressure()
class QuantityVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesunits.QuantityVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesunits.QuantityVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesunits.QuantityVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesunits.QuantityVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesunits.QuantityVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesunits.QuantityVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesunits.QuantityVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesunits.QuantityVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesunits.QuantityVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesunits.QuantityVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesunits.QuantityVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesunits.QuantityVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesunits.QuantityVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.QuantityVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesunits.QuantityVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesunits.QuantityVector_begin(self)

    def end(self):
        return _openstudioutilitiesunits.QuantityVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesunits.QuantityVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesunits.QuantityVector_rend(self)

    def clear(self):
        return _openstudioutilitiesunits.QuantityVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesunits.QuantityVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesunits.QuantityVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesunits.QuantityVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesunits.QuantityVector_swiginit(self, _openstudioutilitiesunits.new_QuantityVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesunits.QuantityVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesunits.QuantityVector_front(self)

    def back(self):
        return _openstudioutilitiesunits.QuantityVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesunits.QuantityVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesunits.QuantityVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesunits.QuantityVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesunits.QuantityVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesunits.QuantityVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_QuantityVector

# Register QuantityVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.QuantityVector_swigregister(QuantityVector)
class OptionalQuantity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OptionalQuantity_swiginit(self, _openstudioutilitiesunits.new_OptionalQuantity(*args))

    def reset(self):
        return _openstudioutilitiesunits.OptionalQuantity_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesunits.OptionalQuantity___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesunits.OptionalQuantity___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesunits.OptionalQuantity_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesunits.OptionalQuantity_isNull(self)

    def empty(self):
        return _openstudioutilitiesunits.OptionalQuantity_empty(self)

    def get(self):
        return _openstudioutilitiesunits.OptionalQuantity_get(self)

    def set(self, t):
        return _openstudioutilitiesunits.OptionalQuantity_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesunits.OptionalQuantity_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OptionalQuantity

# Register OptionalQuantity in _openstudioutilitiesunits:
_openstudioutilitiesunits.OptionalQuantity_swigregister(OptionalQuantity)
class Quantity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.Quantity_swiginit(self, _openstudioutilitiesunits.new_Quantity(*args))
    __swig_destroy__ = _openstudioutilitiesunits.delete_Quantity

    def value(self):
        return _openstudioutilitiesunits.Quantity_value(self)

    def setValue(self, newValue):
        return _openstudioutilitiesunits.Quantity_setValue(self, newValue)

    def units(self):
        return _openstudioutilitiesunits.Quantity_units(self)

    def system(self):
        return _openstudioutilitiesunits.Quantity_system(self)

    def isTemperature(self):
        return _openstudioutilitiesunits.Quantity_isTemperature(self)

    def baseUnits(self):
        return _openstudioutilitiesunits.Quantity_baseUnits(self)

    def baseUnitExponent(self, baseUnit):
        return _openstudioutilitiesunits.Quantity_baseUnitExponent(self, baseUnit)

    def setBaseUnitExponent(self, baseUnit, exponent):
        return _openstudioutilitiesunits.Quantity_setBaseUnitExponent(self, baseUnit, exponent)

    def standardUnitsString(self, withScale=True):
        return _openstudioutilitiesunits.Quantity_standardUnitsString(self, withScale)

    def prettyUnitsString(self, withScale=True):
        return _openstudioutilitiesunits.Quantity_prettyUnitsString(self, withScale)

    def setPrettyUnitsString(self, str):
        return _openstudioutilitiesunits.Quantity_setPrettyUnitsString(self, str)

    def scale(self):
        return _openstudioutilitiesunits.Quantity_scale(self)

    def setScale(self, *args):
        return _openstudioutilitiesunits.Quantity_setScale(self, *args)

    def isAbsolute(self):
        return _openstudioutilitiesunits.Quantity_isAbsolute(self)

    def isRelative(self):
        return _openstudioutilitiesunits.Quantity_isRelative(self)

    def setAsAbsolute(self):
        return _openstudioutilitiesunits.Quantity_setAsAbsolute(self)

    def setAsRelative(self):
        return _openstudioutilitiesunits.Quantity_setAsRelative(self)

    def lbmToLbf(self):
        return _openstudioutilitiesunits.Quantity_lbmToLbf(self)

    def lbfToLbm(self):
        return _openstudioutilitiesunits.Quantity_lbfToLbm(self)

    def __iadd__(self, rQuantity):
        return _openstudioutilitiesunits.Quantity___iadd__(self, rQuantity)

    def __isub__(self, rQuantity):
        return _openstudioutilitiesunits.Quantity___isub__(self, rQuantity)

    def __imul__(self, *args):
        return _openstudioutilitiesunits.Quantity___imul__(self, *args)

    def __itruediv__(self, *args):
        return _openstudioutilitiesunits.Quantity___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def pow(self, expNum, expDenom=1):
        return _openstudioutilitiesunits.Quantity_pow(self, expNum, expDenom)

    def __str__(self):
        return _openstudioutilitiesunits.Quantity___str__(self)

    def __neg__(self):
        return _openstudioutilitiesunits.Quantity___neg__(self)

    def __add__(self, rQuantity):
        return _openstudioutilitiesunits.Quantity___add__(self, rQuantity)

    def __sub__(self, rQuantity):
        return _openstudioutilitiesunits.Quantity___sub__(self, rQuantity)

    def __mul__(self, *args):
        return _openstudioutilitiesunits.Quantity___mul__(self, *args)

    def __truediv__(self, *args):
        return _openstudioutilitiesunits.Quantity___truediv__(self, *args)
    __div__ = __truediv__



# Register Quantity in _openstudioutilitiesunits:
_openstudioutilitiesunits.Quantity_swigregister(Quantity)

def __lshift__(*args):
    return _openstudioutilitiesunits.__lshift__(*args)

def pow(*args):
    return _openstudioutilitiesunits.pow(*args)
class OSOptionalQuantity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OSOptionalQuantity_swiginit(self, _openstudioutilitiesunits.new_OSOptionalQuantity(*args))

    def empty(self):
        return _openstudioutilitiesunits.OSOptionalQuantity_empty(self)

    def isSet(self):
        return _openstudioutilitiesunits.OSOptionalQuantity_isSet(self)

    def get(self):
        return _openstudioutilitiesunits.OSOptionalQuantity_get(self)

    def units(self):
        return _openstudioutilitiesunits.OSOptionalQuantity_units(self)
    __swig_destroy__ = _openstudioutilitiesunits.delete_OSOptionalQuantity

# Register OSOptionalQuantity in _openstudioutilitiesunits:
_openstudioutilitiesunits.OSOptionalQuantity_swigregister(OSOptionalQuantity)
class OSQuantityVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesunits.OSQuantityVector_swiginit(self, _openstudioutilitiesunits.new_OSQuantityVector(*args))

    def units(self):
        return _openstudioutilitiesunits.OSQuantityVector_units(self)

    def system(self):
        return _openstudioutilitiesunits.OSQuantityVector_system(self)

    def scale(self):
        return _openstudioutilitiesunits.OSQuantityVector_scale(self)

    def quantities(self):
        return _openstudioutilitiesunits.OSQuantityVector_quantities(self)

    def values(self):
        return _openstudioutilitiesunits.OSQuantityVector_values(self)

    def getQuantity(self, i):
        return _openstudioutilitiesunits.OSQuantityVector_getQuantity(self, i)

    def empty(self):
        return _openstudioutilitiesunits.OSQuantityVector_empty(self)

    def size(self):
        return _openstudioutilitiesunits.OSQuantityVector_size(self)

    def setScale(self, *args):
        return _openstudioutilitiesunits.OSQuantityVector_setScale(self, *args)

    def push_back(self, q):
        return _openstudioutilitiesunits.OSQuantityVector_push_back(self, q)

    def pop_back(self):
        return _openstudioutilitiesunits.OSQuantityVector_pop_back(self)

    def resize(self, n, value=0.0):
        return _openstudioutilitiesunits.OSQuantityVector_resize(self, n, value)

    def clear(self):
        return _openstudioutilitiesunits.OSQuantityVector_clear(self)

    def isTemperature(self):
        return _openstudioutilitiesunits.OSQuantityVector_isTemperature(self)

    def isAbsolute(self):
        return _openstudioutilitiesunits.OSQuantityVector_isAbsolute(self)

    def isRelative(self):
        return _openstudioutilitiesunits.OSQuantityVector_isRelative(self)

    def setAsAbsolute(self):
        return _openstudioutilitiesunits.OSQuantityVector_setAsAbsolute(self)

    def setAsRelative(self):
        return _openstudioutilitiesunits.OSQuantityVector_setAsRelative(self)

    def lbmToLbf(self):
        return _openstudioutilitiesunits.OSQuantityVector_lbmToLbf(self)

    def lbfToLbm(self):
        return _openstudioutilitiesunits.OSQuantityVector_lbfToLbm(self)

    def __iadd__(self, *args):
        return _openstudioutilitiesunits.OSQuantityVector___iadd__(self, *args)

    def __isub__(self, *args):
        return _openstudioutilitiesunits.OSQuantityVector___isub__(self, *args)

    def __imul__(self, *args):
        return _openstudioutilitiesunits.OSQuantityVector___imul__(self, *args)

    def __itruediv__(self, *args):
        return _openstudioutilitiesunits.OSQuantityVector___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __swig_destroy__ = _openstudioutilitiesunits.delete_OSQuantityVector

# Register OSQuantityVector in _openstudioutilitiesunits:
_openstudioutilitiesunits.OSQuantityVector_swigregister(OSQuantityVector)

def __add__(*args):
    return _openstudioutilitiesunits.__add__(*args)

def __sub__(*args):
    return _openstudioutilitiesunits.__sub__(*args)

def __mul__(*args):
    return _openstudioutilitiesunits.__mul__(*args)

def __truediv__(*args):
    return _openstudioutilitiesunits.__truediv__(*args)

def dot(lVector, rVector):
    return _openstudioutilitiesunits.dot(lVector, rVector)

def __eq__(*args):
    return _openstudioutilitiesunits.__eq__(*args)

def __ne__(*args):
    return _openstudioutilitiesunits.__ne__(*args)

def createQuantity(*args):
    return _openstudioutilitiesunits.createQuantity(*args)
class TemperatureConversionRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    STND = _openstudioutilitiesunits.TemperatureConversionRule_STND
    ABS = _openstudioutilitiesunits.TemperatureConversionRule_ABS
    REL = _openstudioutilitiesunits.TemperatureConversionRule_REL

    def __init__(self):
        _openstudioutilitiesunits.TemperatureConversionRule_swiginit(self, _openstudioutilitiesunits.new_TemperatureConversionRule())
    __swig_destroy__ = _openstudioutilitiesunits.delete_TemperatureConversionRule

# Register TemperatureConversionRule in _openstudioutilitiesunits:
_openstudioutilitiesunits.TemperatureConversionRule_swigregister(TemperatureConversionRule)
class baseUnitConversionFactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    system = property(_openstudioutilitiesunits.baseUnitConversionFactor_system_get, _openstudioutilitiesunits.baseUnitConversionFactor_system_set)
    originalUnit = property(_openstudioutilitiesunits.baseUnitConversionFactor_originalUnit_get, _openstudioutilitiesunits.baseUnitConversionFactor_originalUnit_set)
    targetUnit = property(_openstudioutilitiesunits.baseUnitConversionFactor_targetUnit_get, _openstudioutilitiesunits.baseUnitConversionFactor_targetUnit_set)
    factor = property(_openstudioutilitiesunits.baseUnitConversionFactor_factor_get, _openstudioutilitiesunits.baseUnitConversionFactor_factor_set)
    offset = property(_openstudioutilitiesunits.baseUnitConversionFactor_offset_get, _openstudioutilitiesunits.baseUnitConversionFactor_offset_set)

    def __init__(self):
        _openstudioutilitiesunits.baseUnitConversionFactor_swiginit(self, _openstudioutilitiesunits.new_baseUnitConversionFactor())
    __swig_destroy__ = _openstudioutilitiesunits.delete_baseUnitConversionFactor

# Register baseUnitConversionFactor in _openstudioutilitiesunits:
_openstudioutilitiesunits.baseUnitConversionFactor_swigregister(baseUnitConversionFactor)

def convert(*args):
    return _openstudioutilitiesunits.convert(*args)

