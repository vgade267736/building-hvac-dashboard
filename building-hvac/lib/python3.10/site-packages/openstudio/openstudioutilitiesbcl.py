# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudioutilitiesbcl
else:
    import _openstudioutilitiesbcl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesbcl.delete_SwigPyIterator

    def value(self):
        return _openstudioutilitiesbcl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudioutilitiesbcl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudioutilitiesbcl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudioutilitiesbcl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudioutilitiesbcl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudioutilitiesbcl.SwigPyIterator_copy(self)

    def next(self):
        return _openstudioutilitiesbcl.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudioutilitiesbcl.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudioutilitiesbcl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudioutilitiesbcl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudioutilitiesbcl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudioutilitiesbcl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudioutilitiesbcl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudioutilitiesbcl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudioutilitiesbcl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudioutilitiesbcl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudioutilitiesbcl.SHARED_PTR_DISOWN
from .import openstudioutilitiescore
from .import openstudioutilitiessql
from .import openstudioutilitiesgeometry
from .import openstudioutilitiesplot
from .import openstudioutilitiesdata
from .import openstudioutilitiestime
from .import openstudioutilitiesunits
class RemoteQueryResponseVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_empty(self)

    def size(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_begin(self)

    def end(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_rend(self)

    def clear(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesbcl.RemoteQueryResponseVector_swiginit(self, _openstudioutilitiesbcl.new_RemoteQueryResponseVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_front(self)

    def back(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesbcl.RemoteQueryResponseVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_RemoteQueryResponseVector

# Register RemoteQueryResponseVector in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.RemoteQueryResponseVector_swigregister(RemoteQueryResponseVector)
class BCLSearchResultVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLSearchResultVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesbcl.BCLSearchResultVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLSearchResultVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesbcl.BCLSearchResultVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesbcl.BCLSearchResultVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesbcl.BCLSearchResultVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesbcl.BCLSearchResultVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector_empty(self)

    def size(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesbcl.BCLSearchResultVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector_begin(self)

    def end(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector_rend(self)

    def clear(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesbcl.BCLSearchResultVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLSearchResultVector_swiginit(self, _openstudioutilitiesbcl.new_BCLSearchResultVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesbcl.BCLSearchResultVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector_front(self)

    def back(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesbcl.BCLSearchResultVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesbcl.BCLSearchResultVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesbcl.BCLSearchResultVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesbcl.BCLSearchResultVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesbcl.BCLSearchResultVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLSearchResultVector

# Register BCLSearchResultVector in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLSearchResultVector_swigregister(BCLSearchResultVector)
class OptionalBCLSearchResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.OptionalBCLSearchResult_swiginit(self, _openstudioutilitiesbcl.new_OptionalBCLSearchResult(*args))

    def reset(self):
        return _openstudioutilitiesbcl.OptionalBCLSearchResult_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesbcl.OptionalBCLSearchResult___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesbcl.OptionalBCLSearchResult___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesbcl.OptionalBCLSearchResult_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesbcl.OptionalBCLSearchResult_isNull(self)

    def empty(self):
        return _openstudioutilitiesbcl.OptionalBCLSearchResult_empty(self)

    def get(self):
        return _openstudioutilitiesbcl.OptionalBCLSearchResult_get(self)

    def set(self, t):
        return _openstudioutilitiesbcl.OptionalBCLSearchResult_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesbcl.OptionalBCLSearchResult_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLSearchResult

# Register OptionalBCLSearchResult in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.OptionalBCLSearchResult_swigregister(OptionalBCLSearchResult)
class BCLMetaSearchResultVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_empty(self)

    def size(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_begin(self)

    def end(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_rend(self)

    def clear(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLMetaSearchResultVector_swiginit(self, _openstudioutilitiesbcl.new_BCLMetaSearchResultVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_front(self)

    def back(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResultVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMetaSearchResultVector

# Register BCLMetaSearchResultVector in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLMetaSearchResultVector_swigregister(BCLMetaSearchResultVector)
class OptionalBCLMetaSearchResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.OptionalBCLMetaSearchResult_swiginit(self, _openstudioutilitiesbcl.new_OptionalBCLMetaSearchResult(*args))

    def reset(self):
        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult_isNull(self)

    def empty(self):
        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult_empty(self)

    def get(self):
        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult_get(self)

    def set(self, t):
        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesbcl.OptionalBCLMetaSearchResult_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLMetaSearchResult

# Register OptionalBCLMetaSearchResult in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.OptionalBCLMetaSearchResult_swigregister(OptionalBCLMetaSearchResult)
class BCLFacetVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesbcl.BCLFacetVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesbcl.BCLFacetVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesbcl.BCLFacetVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesbcl.BCLFacetVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLFacetVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesbcl.BCLFacetVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLFacetVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesbcl.BCLFacetVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesbcl.BCLFacetVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesbcl.BCLFacetVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesbcl.BCLFacetVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesbcl.BCLFacetVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesbcl.BCLFacetVector_empty(self)

    def size(self):
        return _openstudioutilitiesbcl.BCLFacetVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesbcl.BCLFacetVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesbcl.BCLFacetVector_begin(self)

    def end(self):
        return _openstudioutilitiesbcl.BCLFacetVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesbcl.BCLFacetVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesbcl.BCLFacetVector_rend(self)

    def clear(self):
        return _openstudioutilitiesbcl.BCLFacetVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesbcl.BCLFacetVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesbcl.BCLFacetVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesbcl.BCLFacetVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLFacetVector_swiginit(self, _openstudioutilitiesbcl.new_BCLFacetVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesbcl.BCLFacetVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesbcl.BCLFacetVector_front(self)

    def back(self):
        return _openstudioutilitiesbcl.BCLFacetVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesbcl.BCLFacetVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesbcl.BCLFacetVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesbcl.BCLFacetVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesbcl.BCLFacetVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesbcl.BCLFacetVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLFacetVector

# Register BCLFacetVector in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLFacetVector_swigregister(BCLFacetVector)
class BCLTaxonomyTermVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_empty(self)

    def size(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_begin(self)

    def end(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_rend(self)

    def clear(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLTaxonomyTermVector_swiginit(self, _openstudioutilitiesbcl.new_BCLTaxonomyTermVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_front(self)

    def back(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTermVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLTaxonomyTermVector

# Register BCLTaxonomyTermVector in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLTaxonomyTermVector_swigregister(BCLTaxonomyTermVector)
class BCLFileVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesbcl.BCLFileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesbcl.BCLFileVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesbcl.BCLFileVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesbcl.BCLFileVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLFileVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesbcl.BCLFileVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLFileVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesbcl.BCLFileVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesbcl.BCLFileVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesbcl.BCLFileVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesbcl.BCLFileVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesbcl.BCLFileVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesbcl.BCLFileVector_empty(self)

    def size(self):
        return _openstudioutilitiesbcl.BCLFileVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesbcl.BCLFileVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesbcl.BCLFileVector_begin(self)

    def end(self):
        return _openstudioutilitiesbcl.BCLFileVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesbcl.BCLFileVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesbcl.BCLFileVector_rend(self)

    def clear(self):
        return _openstudioutilitiesbcl.BCLFileVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesbcl.BCLFileVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesbcl.BCLFileVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesbcl.BCLFileVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLFileVector_swiginit(self, _openstudioutilitiesbcl.new_BCLFileVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesbcl.BCLFileVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesbcl.BCLFileVector_front(self)

    def back(self):
        return _openstudioutilitiesbcl.BCLFileVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesbcl.BCLFileVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesbcl.BCLFileVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesbcl.BCLFileVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesbcl.BCLFileVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesbcl.BCLFileVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLFileVector

# Register BCLFileVector in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLFileVector_swigregister(BCLFileVector)
class BCLProvenanceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLProvenanceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesbcl.BCLProvenanceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLProvenanceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesbcl.BCLProvenanceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesbcl.BCLProvenanceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesbcl.BCLProvenanceVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesbcl.BCLProvenanceVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector_empty(self)

    def size(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesbcl.BCLProvenanceVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector_begin(self)

    def end(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector_rend(self)

    def clear(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesbcl.BCLProvenanceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLProvenanceVector_swiginit(self, _openstudioutilitiesbcl.new_BCLProvenanceVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesbcl.BCLProvenanceVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector_front(self)

    def back(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesbcl.BCLProvenanceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesbcl.BCLProvenanceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesbcl.BCLProvenanceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesbcl.BCLProvenanceVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesbcl.BCLProvenanceVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLProvenanceVector

# Register BCLProvenanceVector in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLProvenanceVector_swigregister(BCLProvenanceVector)
class BCLCostVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesbcl.BCLCostVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesbcl.BCLCostVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesbcl.BCLCostVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesbcl.BCLCostVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLCostVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesbcl.BCLCostVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLCostVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesbcl.BCLCostVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesbcl.BCLCostVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesbcl.BCLCostVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesbcl.BCLCostVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesbcl.BCLCostVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesbcl.BCLCostVector_empty(self)

    def size(self):
        return _openstudioutilitiesbcl.BCLCostVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesbcl.BCLCostVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesbcl.BCLCostVector_begin(self)

    def end(self):
        return _openstudioutilitiesbcl.BCLCostVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesbcl.BCLCostVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesbcl.BCLCostVector_rend(self)

    def clear(self):
        return _openstudioutilitiesbcl.BCLCostVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesbcl.BCLCostVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesbcl.BCLCostVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesbcl.BCLCostVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLCostVector_swiginit(self, _openstudioutilitiesbcl.new_BCLCostVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesbcl.BCLCostVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesbcl.BCLCostVector_front(self)

    def back(self):
        return _openstudioutilitiesbcl.BCLCostVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesbcl.BCLCostVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesbcl.BCLCostVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesbcl.BCLCostVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesbcl.BCLCostVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesbcl.BCLCostVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLCostVector

# Register BCLCostVector in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLCostVector_swigregister(BCLCostVector)
class OptionalBCLFileReference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.OptionalBCLFileReference_swiginit(self, _openstudioutilitiesbcl.new_OptionalBCLFileReference(*args))

    def reset(self):
        return _openstudioutilitiesbcl.OptionalBCLFileReference_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesbcl.OptionalBCLFileReference___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesbcl.OptionalBCLFileReference___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesbcl.OptionalBCLFileReference_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesbcl.OptionalBCLFileReference_isNull(self)

    def empty(self):
        return _openstudioutilitiesbcl.OptionalBCLFileReference_empty(self)

    def get(self):
        return _openstudioutilitiesbcl.OptionalBCLFileReference_get(self)

    def set(self, t):
        return _openstudioutilitiesbcl.OptionalBCLFileReference_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesbcl.OptionalBCLFileReference_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLFileReference

# Register OptionalBCLFileReference in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.OptionalBCLFileReference_swigregister(OptionalBCLFileReference)
class BCLFileReferenceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLFileReferenceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesbcl.BCLFileReferenceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLFileReferenceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesbcl.BCLFileReferenceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesbcl.BCLFileReferenceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesbcl.BCLFileReferenceVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_empty(self)

    def size(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_begin(self)

    def end(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_rend(self)

    def clear(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLFileReferenceVector_swiginit(self, _openstudioutilitiesbcl.new_BCLFileReferenceVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_front(self)

    def back(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesbcl.BCLFileReferenceVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLFileReferenceVector

# Register BCLFileReferenceVector in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLFileReferenceVector_swigregister(BCLFileReferenceVector)
class OptionalBCLComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.OptionalBCLComponent_swiginit(self, _openstudioutilitiesbcl.new_OptionalBCLComponent(*args))

    def reset(self):
        return _openstudioutilitiesbcl.OptionalBCLComponent_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesbcl.OptionalBCLComponent___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesbcl.OptionalBCLComponent___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesbcl.OptionalBCLComponent_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesbcl.OptionalBCLComponent_isNull(self)

    def empty(self):
        return _openstudioutilitiesbcl.OptionalBCLComponent_empty(self)

    def get(self):
        return _openstudioutilitiesbcl.OptionalBCLComponent_get(self)

    def set(self, t):
        return _openstudioutilitiesbcl.OptionalBCLComponent_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesbcl.OptionalBCLComponent_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLComponent

# Register OptionalBCLComponent in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.OptionalBCLComponent_swigregister(OptionalBCLComponent)
class BCLComponentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesbcl.BCLComponentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesbcl.BCLComponentVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesbcl.BCLComponentVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesbcl.BCLComponentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLComponentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesbcl.BCLComponentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLComponentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesbcl.BCLComponentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesbcl.BCLComponentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesbcl.BCLComponentVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesbcl.BCLComponentVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesbcl.BCLComponentVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesbcl.BCLComponentVector_empty(self)

    def size(self):
        return _openstudioutilitiesbcl.BCLComponentVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesbcl.BCLComponentVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesbcl.BCLComponentVector_begin(self)

    def end(self):
        return _openstudioutilitiesbcl.BCLComponentVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesbcl.BCLComponentVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesbcl.BCLComponentVector_rend(self)

    def clear(self):
        return _openstudioutilitiesbcl.BCLComponentVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesbcl.BCLComponentVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesbcl.BCLComponentVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesbcl.BCLComponentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLComponentVector_swiginit(self, _openstudioutilitiesbcl.new_BCLComponentVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesbcl.BCLComponentVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesbcl.BCLComponentVector_front(self)

    def back(self):
        return _openstudioutilitiesbcl.BCLComponentVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesbcl.BCLComponentVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesbcl.BCLComponentVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesbcl.BCLComponentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesbcl.BCLComponentVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesbcl.BCLComponentVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLComponentVector

# Register BCLComponentVector in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLComponentVector_swigregister(BCLComponentVector)
class OptionalBCLMeasureArgument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.OptionalBCLMeasureArgument_swiginit(self, _openstudioutilitiesbcl.new_OptionalBCLMeasureArgument(*args))

    def reset(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument_isNull(self)

    def empty(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument_empty(self)

    def get(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument_get(self)

    def set(self, t):
        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesbcl.OptionalBCLMeasureArgument_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLMeasureArgument

# Register OptionalBCLMeasureArgument in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.OptionalBCLMeasureArgument_swigregister(OptionalBCLMeasureArgument)
class BCLMeasureArgumentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_empty(self)

    def size(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_begin(self)

    def end(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_rend(self)

    def clear(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLMeasureArgumentVector_swiginit(self, _openstudioutilitiesbcl.new_BCLMeasureArgumentVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_front(self)

    def back(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesbcl.BCLMeasureArgumentVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMeasureArgumentVector

# Register BCLMeasureArgumentVector in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLMeasureArgumentVector_swigregister(BCLMeasureArgumentVector)
class OptionalBCLMeasureOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.OptionalBCLMeasureOutput_swiginit(self, _openstudioutilitiesbcl.new_OptionalBCLMeasureOutput(*args))

    def reset(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput_isNull(self)

    def empty(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput_empty(self)

    def get(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput_get(self)

    def set(self, t):
        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesbcl.OptionalBCLMeasureOutput_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLMeasureOutput

# Register OptionalBCLMeasureOutput in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.OptionalBCLMeasureOutput_swigregister(OptionalBCLMeasureOutput)
class BCLMeasureOutputVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_empty(self)

    def size(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_begin(self)

    def end(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_rend(self)

    def clear(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLMeasureOutputVector_swiginit(self, _openstudioutilitiesbcl.new_BCLMeasureOutputVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_front(self)

    def back(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesbcl.BCLMeasureOutputVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMeasureOutputVector

# Register BCLMeasureOutputVector in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLMeasureOutputVector_swigregister(BCLMeasureOutputVector)
class OptionalBCLMeasure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.OptionalBCLMeasure_swiginit(self, _openstudioutilitiesbcl.new_OptionalBCLMeasure(*args))

    def reset(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasure_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasure___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasure___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasure_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasure_isNull(self)

    def empty(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasure_empty(self)

    def get(self):
        return _openstudioutilitiesbcl.OptionalBCLMeasure_get(self)

    def set(self, t):
        return _openstudioutilitiesbcl.OptionalBCLMeasure_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesbcl.OptionalBCLMeasure_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLMeasure

# Register OptionalBCLMeasure in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.OptionalBCLMeasure_swigregister(OptionalBCLMeasure)
class BCLMeasureVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesbcl.BCLMeasureVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesbcl.BCLMeasureVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesbcl.BCLMeasureVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesbcl.BCLMeasureVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLMeasureVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLMeasureVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesbcl.BCLMeasureVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesbcl.BCLMeasureVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesbcl.BCLMeasureVector_empty(self)

    def size(self):
        return _openstudioutilitiesbcl.BCLMeasureVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesbcl.BCLMeasureVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesbcl.BCLMeasureVector_begin(self)

    def end(self):
        return _openstudioutilitiesbcl.BCLMeasureVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesbcl.BCLMeasureVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesbcl.BCLMeasureVector_rend(self)

    def clear(self):
        return _openstudioutilitiesbcl.BCLMeasureVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesbcl.BCLMeasureVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesbcl.BCLMeasureVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLMeasureVector_swiginit(self, _openstudioutilitiesbcl.new_BCLMeasureVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesbcl.BCLMeasureVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesbcl.BCLMeasureVector_front(self)

    def back(self):
        return _openstudioutilitiesbcl.BCLMeasureVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesbcl.BCLMeasureVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesbcl.BCLMeasureVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesbcl.BCLMeasureVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesbcl.BCLMeasureVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesbcl.BCLMeasureVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMeasureVector

# Register BCLMeasureVector in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLMeasureVector_swigregister(BCLMeasureVector)
class BCLXMLVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesbcl.BCLXMLVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesbcl.BCLXMLVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesbcl.BCLXMLVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesbcl.BCLXMLVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLXMLVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesbcl.BCLXMLVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesbcl.BCLXMLVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesbcl.BCLXMLVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesbcl.BCLXMLVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesbcl.BCLXMLVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesbcl.BCLXMLVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesbcl.BCLXMLVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesbcl.BCLXMLVector_empty(self)

    def size(self):
        return _openstudioutilitiesbcl.BCLXMLVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesbcl.BCLXMLVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesbcl.BCLXMLVector_begin(self)

    def end(self):
        return _openstudioutilitiesbcl.BCLXMLVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesbcl.BCLXMLVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesbcl.BCLXMLVector_rend(self)

    def clear(self):
        return _openstudioutilitiesbcl.BCLXMLVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesbcl.BCLXMLVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesbcl.BCLXMLVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesbcl.BCLXMLVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLXMLVector_swiginit(self, _openstudioutilitiesbcl.new_BCLXMLVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesbcl.BCLXMLVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesbcl.BCLXMLVector_front(self)

    def back(self):
        return _openstudioutilitiesbcl.BCLXMLVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesbcl.BCLXMLVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesbcl.BCLXMLVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesbcl.BCLXMLVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesbcl.BCLXMLVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesbcl.BCLXMLVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLXMLVector

# Register BCLXMLVector in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLXMLVector_swigregister(BCLXMLVector)
class OptionalBCLXML(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.OptionalBCLXML_swiginit(self, _openstudioutilitiesbcl.new_OptionalBCLXML(*args))

    def reset(self):
        return _openstudioutilitiesbcl.OptionalBCLXML_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesbcl.OptionalBCLXML___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesbcl.OptionalBCLXML___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesbcl.OptionalBCLXML_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesbcl.OptionalBCLXML_isNull(self)

    def empty(self):
        return _openstudioutilitiesbcl.OptionalBCLXML_empty(self)

    def get(self):
        return _openstudioutilitiesbcl.OptionalBCLXML_get(self)

    def set(self, t):
        return _openstudioutilitiesbcl.OptionalBCLXML_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesbcl.OptionalBCLXML_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalBCLXML

# Register OptionalBCLXML in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.OptionalBCLXML_swigregister(OptionalBCLXML)
class PugixmldocPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioutilitiesbcl.PugixmldocPtr_swiginit(self, _openstudioutilitiesbcl.new_PugixmldocPtr())
    __swig_destroy__ = _openstudioutilitiesbcl.delete_PugixmldocPtr

# Register PugixmldocPtr in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.PugixmldocPtr_swigregister(PugixmldocPtr)
class OptionalMeasureType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.OptionalMeasureType_swiginit(self, _openstudioutilitiesbcl.new_OptionalMeasureType(*args))

    def reset(self):
        return _openstudioutilitiesbcl.OptionalMeasureType_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesbcl.OptionalMeasureType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesbcl.OptionalMeasureType___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesbcl.OptionalMeasureType_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesbcl.OptionalMeasureType_isNull(self)

    def empty(self):
        return _openstudioutilitiesbcl.OptionalMeasureType_empty(self)

    def get(self):
        return _openstudioutilitiesbcl.OptionalMeasureType_get(self)

    def set(self, t):
        return _openstudioutilitiesbcl.OptionalMeasureType_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesbcl.OptionalMeasureType_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalMeasureType

# Register OptionalMeasureType in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.OptionalMeasureType_swigregister(OptionalMeasureType)
class OptionalMeasureLanguage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.OptionalMeasureLanguage_swiginit(self, _openstudioutilitiesbcl.new_OptionalMeasureLanguage(*args))

    def reset(self):
        return _openstudioutilitiesbcl.OptionalMeasureLanguage_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesbcl.OptionalMeasureLanguage___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesbcl.OptionalMeasureLanguage___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesbcl.OptionalMeasureLanguage_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesbcl.OptionalMeasureLanguage_isNull(self)

    def empty(self):
        return _openstudioutilitiesbcl.OptionalMeasureLanguage_empty(self)

    def get(self):
        return _openstudioutilitiesbcl.OptionalMeasureLanguage_get(self)

    def set(self, t):
        return _openstudioutilitiesbcl.OptionalMeasureLanguage_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesbcl.OptionalMeasureLanguage_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_OptionalMeasureLanguage

# Register OptionalMeasureLanguage in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.OptionalMeasureLanguage_swigregister(OptionalMeasureLanguage)
class MeasureType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.MeasureType_swiginit(self, _openstudioutilitiesbcl.new_MeasureType(*args))

    def valueName(self):
        return _openstudioutilitiesbcl.MeasureType_valueName(self)

    def value(self):
        return _openstudioutilitiesbcl.MeasureType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesbcl.MeasureType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesbcl.MeasureType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesbcl.MeasureType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesbcl.MeasureType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesbcl.MeasureType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesbcl.MeasureType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesbcl.MeasureType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesbcl.MeasureType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesbcl.MeasureType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesbcl.MeasureType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesbcl.MeasureType___str__(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_MeasureType

# Register MeasureType in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.MeasureType_swigregister(MeasureType)
class MeasureBadgeType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.MeasureBadgeType_swiginit(self, _openstudioutilitiesbcl.new_MeasureBadgeType(*args))

    def valueName(self):
        return _openstudioutilitiesbcl.MeasureBadgeType_valueName(self)

    def value(self):
        return _openstudioutilitiesbcl.MeasureBadgeType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesbcl.MeasureBadgeType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesbcl.MeasureBadgeType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesbcl.MeasureBadgeType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesbcl.MeasureBadgeType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesbcl.MeasureBadgeType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesbcl.MeasureBadgeType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesbcl.MeasureBadgeType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesbcl.MeasureBadgeType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesbcl.MeasureBadgeType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesbcl.MeasureBadgeType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesbcl.MeasureBadgeType___str__(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_MeasureBadgeType

# Register MeasureBadgeType in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.MeasureBadgeType_swigregister(MeasureBadgeType)
class MeasureLanguage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.MeasureLanguage_swiginit(self, _openstudioutilitiesbcl.new_MeasureLanguage(*args))

    def valueName(self):
        return _openstudioutilitiesbcl.MeasureLanguage_valueName(self)

    def value(self):
        return _openstudioutilitiesbcl.MeasureLanguage_value(self)

    def valueDescription(self):
        return _openstudioutilitiesbcl.MeasureLanguage_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesbcl.MeasureLanguage___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesbcl.MeasureLanguage___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesbcl.MeasureLanguage___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesbcl.MeasureLanguage___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesbcl.MeasureLanguage___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesbcl.MeasureLanguage___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesbcl.MeasureLanguage_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesbcl.MeasureLanguage_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesbcl.MeasureLanguage_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesbcl.MeasureLanguage___str__(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_MeasureLanguage

# Register MeasureLanguage in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.MeasureLanguage_swigregister(MeasureLanguage)
class BCLXMLType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLXMLType_swiginit(self, _openstudioutilitiesbcl.new_BCLXMLType(*args))

    def valueName(self):
        return _openstudioutilitiesbcl.BCLXMLType_valueName(self)

    def value(self):
        return _openstudioutilitiesbcl.BCLXMLType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesbcl.BCLXMLType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesbcl.BCLXMLType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesbcl.BCLXMLType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesbcl.BCLXMLType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesbcl.BCLXMLType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesbcl.BCLXMLType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesbcl.BCLXMLType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesbcl.BCLXMLType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesbcl.BCLXMLType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesbcl.BCLXMLType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesbcl.BCLXMLType___str__(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLXMLType

# Register BCLXMLType in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLXMLType_swigregister(BCLXMLType)
class BCLFileReference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, measureRootDir, relativePath, setMembers=False):
        _openstudioutilitiesbcl.BCLFileReference_swiginit(self, _openstudioutilitiesbcl.new_BCLFileReference(measureRootDir, relativePath, setMembers))
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLFileReference

    def path(self):
        return _openstudioutilitiesbcl.BCLFileReference_path(self)

    def relativePath(self):
        return _openstudioutilitiesbcl.BCLFileReference_relativePath(self)

    def checksum(self):
        return _openstudioutilitiesbcl.BCLFileReference_checksum(self)

    def softwareProgram(self):
        return _openstudioutilitiesbcl.BCLFileReference_softwareProgram(self)

    def softwareProgramVersion(self):
        return _openstudioutilitiesbcl.BCLFileReference_softwareProgramVersion(self)

    def minCompatibleVersion(self):
        return _openstudioutilitiesbcl.BCLFileReference_minCompatibleVersion(self)

    def maxCompatibleVersion(self):
        return _openstudioutilitiesbcl.BCLFileReference_maxCompatibleVersion(self)

    def fileName(self):
        return _openstudioutilitiesbcl.BCLFileReference_fileName(self)

    def fileType(self):
        return _openstudioutilitiesbcl.BCLFileReference_fileType(self)

    def usageType(self):
        return _openstudioutilitiesbcl.BCLFileReference_usageType(self)

    def setChecksum(self, checksum):
        return _openstudioutilitiesbcl.BCLFileReference_setChecksum(self, checksum)

    def setSoftwareProgram(self, softwareProgram):
        return _openstudioutilitiesbcl.BCLFileReference_setSoftwareProgram(self, softwareProgram)

    def setSoftwareProgramVersion(self, softwareProgramVersion):
        return _openstudioutilitiesbcl.BCLFileReference_setSoftwareProgramVersion(self, softwareProgramVersion)

    def setMinCompatibleVersion(self, minCompatibleVersion):
        return _openstudioutilitiesbcl.BCLFileReference_setMinCompatibleVersion(self, minCompatibleVersion)

    def resetMinCompatibleVersion(self):
        return _openstudioutilitiesbcl.BCLFileReference_resetMinCompatibleVersion(self)

    def setMaxCompatibleVersion(self, maxCompatibleVersion):
        return _openstudioutilitiesbcl.BCLFileReference_setMaxCompatibleVersion(self, maxCompatibleVersion)

    def resetMaxCompatibleVersion(self):
        return _openstudioutilitiesbcl.BCLFileReference_resetMaxCompatibleVersion(self)

    def setUsageType(self, usageType):
        return _openstudioutilitiesbcl.BCLFileReference_setUsageType(self, usageType)

    def writeValues(self, element):
        return _openstudioutilitiesbcl.BCLFileReference_writeValues(self, element)

    def toJSON(self):
        return _openstudioutilitiesbcl.BCLFileReference_toJSON(self)

    def toJSONString(self):
        return _openstudioutilitiesbcl.BCLFileReference_toJSONString(self)

    def checkForUpdate(self):
        return _openstudioutilitiesbcl.BCLFileReference_checkForUpdate(self)

# Register BCLFileReference in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLFileReference_swigregister(BCLFileReference)

def __ne__(*args):
    return _openstudioutilitiesbcl.__ne__(*args)

def __gt__(*args):
    return _openstudioutilitiesbcl.__gt__(*args)

def __le__(*args):
    return _openstudioutilitiesbcl.__le__(*args)

def __ge__(*args):
    return _openstudioutilitiesbcl.__ge__(*args)
class BCLComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLComponent_swiginit(self, _openstudioutilitiesbcl.new_BCLComponent(*args))
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLComponent

    def directory(self):
        return _openstudioutilitiesbcl.BCLComponent_directory(self)

    def uid(self):
        return _openstudioutilitiesbcl.BCLComponent_uid(self)

    def versionId(self):
        return _openstudioutilitiesbcl.BCLComponent_versionId(self)

    def name(self):
        return _openstudioutilitiesbcl.BCLComponent_name(self)

    def description(self):
        return _openstudioutilitiesbcl.BCLComponent_description(self)

    def files(self, *args):
        return _openstudioutilitiesbcl.BCLComponent_files(self, *args)

    def filetypes(self):
        return _openstudioutilitiesbcl.BCLComponent_filetypes(self)

    def attributes(self):
        return _openstudioutilitiesbcl.BCLComponent_attributes(self)

    def setName(self, name):
        return _openstudioutilitiesbcl.BCLComponent_setName(self, name)

    def __eq__(self, other):
        return _openstudioutilitiesbcl.BCLComponent___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesbcl.BCLComponent___ne__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesbcl.BCLComponent___lt__(self, other)

# Register BCLComponent in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLComponent_swigregister(BCLComponent)
class BCLMeasureArgument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLMeasureArgument_swiginit(self, _openstudioutilitiesbcl.new_BCLMeasureArgument(*args))

    def name(self):
        return _openstudioutilitiesbcl.BCLMeasureArgument_name(self)

    def displayName(self):
        return _openstudioutilitiesbcl.BCLMeasureArgument_displayName(self)

    def description(self):
        return _openstudioutilitiesbcl.BCLMeasureArgument_description(self)

    def type(self):
        return _openstudioutilitiesbcl.BCLMeasureArgument_type(self)

    def units(self):
        return _openstudioutilitiesbcl.BCLMeasureArgument_units(self)

    def required(self):
        return _openstudioutilitiesbcl.BCLMeasureArgument_required(self)

    def modelDependent(self):
        return _openstudioutilitiesbcl.BCLMeasureArgument_modelDependent(self)

    def defaultValue(self):
        return _openstudioutilitiesbcl.BCLMeasureArgument_defaultValue(self)

    def choiceValues(self):
        return _openstudioutilitiesbcl.BCLMeasureArgument_choiceValues(self)

    def choiceDisplayNames(self):
        return _openstudioutilitiesbcl.BCLMeasureArgument_choiceDisplayNames(self)

    def minValue(self):
        return _openstudioutilitiesbcl.BCLMeasureArgument_minValue(self)

    def maxValue(self):
        return _openstudioutilitiesbcl.BCLMeasureArgument_maxValue(self)

    def writeValues(self, element):
        return _openstudioutilitiesbcl.BCLMeasureArgument_writeValues(self, element)

    def toJSON(self):
        return _openstudioutilitiesbcl.BCLMeasureArgument_toJSON(self)

    def toJSONString(self):
        return _openstudioutilitiesbcl.BCLMeasureArgument_toJSONString(self)

    def __eq__(self, other):
        return _openstudioutilitiesbcl.BCLMeasureArgument___eq__(self, other)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMeasureArgument

# Register BCLMeasureArgument in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLMeasureArgument_swigregister(BCLMeasureArgument)
class BCLMeasureOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLMeasureOutput_swiginit(self, _openstudioutilitiesbcl.new_BCLMeasureOutput(*args))

    def name(self):
        return _openstudioutilitiesbcl.BCLMeasureOutput_name(self)

    def displayName(self):
        return _openstudioutilitiesbcl.BCLMeasureOutput_displayName(self)

    def shortName(self):
        return _openstudioutilitiesbcl.BCLMeasureOutput_shortName(self)

    def description(self):
        return _openstudioutilitiesbcl.BCLMeasureOutput_description(self)

    def type(self):
        return _openstudioutilitiesbcl.BCLMeasureOutput_type(self)

    def units(self):
        return _openstudioutilitiesbcl.BCLMeasureOutput_units(self)

    def modelDependent(self):
        return _openstudioutilitiesbcl.BCLMeasureOutput_modelDependent(self)

    def writeValues(self, element):
        return _openstudioutilitiesbcl.BCLMeasureOutput_writeValues(self, element)

    def toJSON(self):
        return _openstudioutilitiesbcl.BCLMeasureOutput_toJSON(self)

    def toJSONString(self):
        return _openstudioutilitiesbcl.BCLMeasureOutput_toJSONString(self)

    def __eq__(self, other):
        return _openstudioutilitiesbcl.BCLMeasureOutput___eq__(self, other)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMeasureOutput

# Register BCLMeasureOutput in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLMeasureOutput_swigregister(BCLMeasureOutput)
class BCLMeasure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLMeasure_swiginit(self, _openstudioutilitiesbcl.new_BCLMeasure(*args))

    @staticmethod
    def makeClassName(name):
        return _openstudioutilitiesbcl.BCLMeasure_makeClassName(name)

    @staticmethod
    def load(dir):
        return _openstudioutilitiesbcl.BCLMeasure_load(dir)

    @staticmethod
    def suggestedIntendedSoftwareTools():
        return _openstudioutilitiesbcl.BCLMeasure_suggestedIntendedSoftwareTools()

    @staticmethod
    def suggestedIntendedUseCases():
        return _openstudioutilitiesbcl.BCLMeasure_suggestedIntendedUseCases()

    @staticmethod
    def suggestedFirstLevelTaxonomyTerms():
        return _openstudioutilitiesbcl.BCLMeasure_suggestedFirstLevelTaxonomyTerms()

    @staticmethod
    def suggestedSecondLevelTaxonomyTerms(firstLevelTaxonomyTerm):
        return _openstudioutilitiesbcl.BCLMeasure_suggestedSecondLevelTaxonomyTerms(firstLevelTaxonomyTerm)

    @staticmethod
    def isIgnoredFileName(fileName):
        return _openstudioutilitiesbcl.BCLMeasure_isIgnoredFileName(fileName)

    @staticmethod
    def isApprovedFile(absoluteFilePath, measureDir):
        return _openstudioutilitiesbcl.BCLMeasure_isApprovedFile(absoluteFilePath, measureDir)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMeasure

    def directory(self):
        return _openstudioutilitiesbcl.BCLMeasure_directory(self)

    def error(self):
        return _openstudioutilitiesbcl.BCLMeasure_error(self)

    def uid(self):
        return _openstudioutilitiesbcl.BCLMeasure_uid(self)

    def uuid(self):
        return _openstudioutilitiesbcl.BCLMeasure_uuid(self)

    def versionId(self):
        return _openstudioutilitiesbcl.BCLMeasure_versionId(self)

    def versionUUID(self):
        return _openstudioutilitiesbcl.BCLMeasure_versionUUID(self)

    def versionModified(self):
        return _openstudioutilitiesbcl.BCLMeasure_versionModified(self)

    def xmlChecksum(self):
        return _openstudioutilitiesbcl.BCLMeasure_xmlChecksum(self)

    def xmlString(self):
        return _openstudioutilitiesbcl.BCLMeasure_xmlString(self)

    def name(self):
        return _openstudioutilitiesbcl.BCLMeasure_name(self)

    def displayName(self):
        return _openstudioutilitiesbcl.BCLMeasure_displayName(self)

    def className(self):
        return _openstudioutilitiesbcl.BCLMeasure_className(self)

    def description(self):
        return _openstudioutilitiesbcl.BCLMeasure_description(self)

    def modelerDescription(self):
        return _openstudioutilitiesbcl.BCLMeasure_modelerDescription(self)

    def arguments(self):
        return _openstudioutilitiesbcl.BCLMeasure_arguments(self)

    def outputs(self):
        return _openstudioutilitiesbcl.BCLMeasure_outputs(self)

    def tags(self):
        return _openstudioutilitiesbcl.BCLMeasure_tags(self)

    def attributes(self):
        return _openstudioutilitiesbcl.BCLMeasure_attributes(self)

    def files(self):
        return _openstudioutilitiesbcl.BCLMeasure_files(self)

    def setError(self, error):
        return _openstudioutilitiesbcl.BCLMeasure_setError(self, error)

    def resetError(self):
        return _openstudioutilitiesbcl.BCLMeasure_resetError(self)

    def setName(self, name):
        return _openstudioutilitiesbcl.BCLMeasure_setName(self, name)

    def setDisplayName(self, displayName):
        return _openstudioutilitiesbcl.BCLMeasure_setDisplayName(self, displayName)

    def setClassName(self, className):
        return _openstudioutilitiesbcl.BCLMeasure_setClassName(self, className)

    def setDescription(self, description):
        return _openstudioutilitiesbcl.BCLMeasure_setDescription(self, description)

    def setModelerDescription(self, modelerDescription):
        return _openstudioutilitiesbcl.BCLMeasure_setModelerDescription(self, modelerDescription)

    def setArguments(self, arguments):
        return _openstudioutilitiesbcl.BCLMeasure_setArguments(self, arguments)

    def setOutputs(self, outputs):
        return _openstudioutilitiesbcl.BCLMeasure_setOutputs(self, outputs)

    def taxonomyTag(self):
        return _openstudioutilitiesbcl.BCLMeasure_taxonomyTag(self)

    def setTaxonomyTag(self, taxonomyTag):
        return _openstudioutilitiesbcl.BCLMeasure_setTaxonomyTag(self, taxonomyTag)

    def measureType(self):
        return _openstudioutilitiesbcl.BCLMeasure_measureType(self)

    def measureLanguage(self):
        return _openstudioutilitiesbcl.BCLMeasure_measureLanguage(self)

    def setMeasureType(self, measureType):
        return _openstudioutilitiesbcl.BCLMeasure_setMeasureType(self, measureType)

    def setMeasureLanguage(self, measureLanguage):
        return _openstudioutilitiesbcl.BCLMeasure_setMeasureLanguage(self, measureLanguage)

    def intendedSoftwareTools(self):
        return _openstudioutilitiesbcl.BCLMeasure_intendedSoftwareTools(self)

    def intendedUseCases(self):
        return _openstudioutilitiesbcl.BCLMeasure_intendedUseCases(self)

    def primaryRubyScriptPath(self):
        return _openstudioutilitiesbcl.BCLMeasure_primaryRubyScriptPath(self)

    def primaryPythonScriptPath(self):
        return _openstudioutilitiesbcl.BCLMeasure_primaryPythonScriptPath(self)

    def primaryScriptPath(self):
        return _openstudioutilitiesbcl.BCLMeasure_primaryScriptPath(self)

    def inputFileType(self):
        return _openstudioutilitiesbcl.BCLMeasure_inputFileType(self)

    def outputFileType(self):
        return _openstudioutilitiesbcl.BCLMeasure_outputFileType(self)

    def clearFiles(self):
        return _openstudioutilitiesbcl.BCLMeasure_clearFiles(self)

    def addAttribute(self, attribute):
        return _openstudioutilitiesbcl.BCLMeasure_addAttribute(self, attribute)

    def getAttributes(self, name):
        return _openstudioutilitiesbcl.BCLMeasure_getAttributes(self, name)

    def removeAttributes(self, name):
        return _openstudioutilitiesbcl.BCLMeasure_removeAttributes(self, name)

    def clearAttributes(self):
        return _openstudioutilitiesbcl.BCLMeasure_clearAttributes(self)

    def missingRequiredFields(self):
        return _openstudioutilitiesbcl.BCLMeasure_missingRequiredFields(self)

    def checkForUpdatesFiles(self):
        return _openstudioutilitiesbcl.BCLMeasure_checkForUpdatesFiles(self)

    def checkForUpdatesXML(self):
        return _openstudioutilitiesbcl.BCLMeasure_checkForUpdatesXML(self)

    def __eq__(self, other):
        return _openstudioutilitiesbcl.BCLMeasure___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesbcl.BCLMeasure___ne__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesbcl.BCLMeasure___lt__(self, other)

    def save(self):
        return _openstudioutilitiesbcl.BCLMeasure_save(self)

    def clone(self, newDir):
        return _openstudioutilitiesbcl.BCLMeasure_clone(self, newDir)

    def changeUID(self):
        return _openstudioutilitiesbcl.BCLMeasure_changeUID(self)

    def incrementVersionId(self):
        return _openstudioutilitiesbcl.BCLMeasure_incrementVersionId(self)

    def updateMeasureScript(self, oldMeasureType, newMeasureType, oldMeasureLanguage, newMeasureLanguage, oldClassName, newClassName, name, description, modelerDescription):
        return _openstudioutilitiesbcl.BCLMeasure_updateMeasureScript(self, oldMeasureType, newMeasureType, oldMeasureLanguage, newMeasureLanguage, oldClassName, newClassName, name, description, modelerDescription)

    def updateMeasureTests(self, oldClassName, newClassName):
        return _openstudioutilitiesbcl.BCLMeasure_updateMeasureTests(self, oldClassName, newClassName)

    @staticmethod
    def getMeasuresInDir(dir):
        return _openstudioutilitiesbcl.BCLMeasure_getMeasuresInDir(dir)

    def toJSON(self):
        return _openstudioutilitiesbcl.BCLMeasure_toJSON(self)

    def toJSONString(self):
        return _openstudioutilitiesbcl.BCLMeasure_toJSONString(self)

# Register BCLMeasure in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLMeasure_swigregister(BCLMeasure)
class BCLXML(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesbcl.BCLXML_swiginit(self, _openstudioutilitiesbcl.new_BCLXML(*args))

    @staticmethod
    def load(xmlPath):
        return _openstudioutilitiesbcl.BCLXML_load(xmlPath)

    @staticmethod
    def escapeString(txt):
        return _openstudioutilitiesbcl.BCLXML_escapeString(txt)

    @staticmethod
    def decodeString(txt):
        return _openstudioutilitiesbcl.BCLXML_decodeString(txt)

    @staticmethod
    def currentSchemaVersion():
        return _openstudioutilitiesbcl.BCLXML_currentSchemaVersion()
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLXML

    def path(self):
        return _openstudioutilitiesbcl.BCLXML_path(self)

    def directory(self):
        return _openstudioutilitiesbcl.BCLXML_directory(self)

    def error(self):
        return _openstudioutilitiesbcl.BCLXML_error(self)

    def uid(self):
        return _openstudioutilitiesbcl.BCLXML_uid(self)

    def versionId(self):
        return _openstudioutilitiesbcl.BCLXML_versionId(self)

    def versionModified(self):
        return _openstudioutilitiesbcl.BCLXML_versionModified(self)

    def xmlChecksum(self):
        return _openstudioutilitiesbcl.BCLXML_xmlChecksum(self)

    def name(self):
        return _openstudioutilitiesbcl.BCLXML_name(self)

    def displayName(self):
        return _openstudioutilitiesbcl.BCLXML_displayName(self)

    def className(self):
        return _openstudioutilitiesbcl.BCLXML_className(self)

    def description(self):
        return _openstudioutilitiesbcl.BCLXML_description(self)

    def modelerDescription(self):
        return _openstudioutilitiesbcl.BCLXML_modelerDescription(self)

    def arguments(self):
        return _openstudioutilitiesbcl.BCLXML_arguments(self)

    def outputs(self):
        return _openstudioutilitiesbcl.BCLXML_outputs(self)

    def files(self, *args):
        return _openstudioutilitiesbcl.BCLXML_files(self, *args)

    def attributes(self):
        return _openstudioutilitiesbcl.BCLXML_attributes(self)

    def getAttributes(self, name):
        return _openstudioutilitiesbcl.BCLXML_getAttributes(self, name)

    def tags(self):
        return _openstudioutilitiesbcl.BCLXML_tags(self)

    def resetXMLChecksum(self):
        return _openstudioutilitiesbcl.BCLXML_resetXMLChecksum(self)

    def setError(self, error):
        return _openstudioutilitiesbcl.BCLXML_setError(self, error)

    def resetError(self):
        return _openstudioutilitiesbcl.BCLXML_resetError(self)

    def setName(self, name):
        return _openstudioutilitiesbcl.BCLXML_setName(self, name)

    def setDisplayName(self, displayName):
        return _openstudioutilitiesbcl.BCLXML_setDisplayName(self, displayName)

    def setClassName(self, className):
        return _openstudioutilitiesbcl.BCLXML_setClassName(self, className)

    def setDescription(self, description):
        return _openstudioutilitiesbcl.BCLXML_setDescription(self, description)

    def setModelerDescription(self, modelerDescription):
        return _openstudioutilitiesbcl.BCLXML_setModelerDescription(self, modelerDescription)

    def setArguments(self, arguments):
        return _openstudioutilitiesbcl.BCLXML_setArguments(self, arguments)

    def setOutputs(self, outputs):
        return _openstudioutilitiesbcl.BCLXML_setOutputs(self, outputs)

    def addFile(self, file):
        return _openstudioutilitiesbcl.BCLXML_addFile(self, file)

    def hasFile(self, path):
        return _openstudioutilitiesbcl.BCLXML_hasFile(self, path)

    def removeFile(self, path):
        return _openstudioutilitiesbcl.BCLXML_removeFile(self, path)

    def clearFiles(self):
        return _openstudioutilitiesbcl.BCLXML_clearFiles(self)

    def addAttribute(self, attribute):
        return _openstudioutilitiesbcl.BCLXML_addAttribute(self, attribute)

    def removeAttributes(self, name):
        return _openstudioutilitiesbcl.BCLXML_removeAttributes(self, name)

    def clearAttributes(self):
        return _openstudioutilitiesbcl.BCLXML_clearAttributes(self)

    def addTag(self, tagName):
        return _openstudioutilitiesbcl.BCLXML_addTag(self, tagName)

    def removeTag(self, tagName):
        return _openstudioutilitiesbcl.BCLXML_removeTag(self, tagName)

    def clearTags(self):
        return _openstudioutilitiesbcl.BCLXML_clearTags(self)

    def save(self):
        return _openstudioutilitiesbcl.BCLXML_save(self)

    def saveAs(self, xmlPath):
        return _openstudioutilitiesbcl.BCLXML_saveAs(self, xmlPath)

    def toString(self):
        return _openstudioutilitiesbcl.BCLXML_toString(self)

    def changeUID(self):
        return _openstudioutilitiesbcl.BCLXML_changeUID(self)

    def incrementVersionId(self):
        return _openstudioutilitiesbcl.BCLXML_incrementVersionId(self)

    def checkForUpdatesXML(self):
        return _openstudioutilitiesbcl.BCLXML_checkForUpdatesXML(self)

    def toJSON(self):
        return _openstudioutilitiesbcl.BCLXML_toJSON(self)

    def toJSONString(self):
        return _openstudioutilitiesbcl.BCLXML_toJSONString(self)

    def __str__(self):
        return _openstudioutilitiesbcl.BCLXML___str__(self)

# Register BCLXML in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLXML_swigregister(BCLXML)
class BCLFacet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, facetElement):
        _openstudioutilitiesbcl.BCLFacet_swiginit(self, _openstudioutilitiesbcl.new_BCLFacet(facetElement))

    def field(self):
        return _openstudioutilitiesbcl.BCLFacet_field(self)

    def label(self):
        return _openstudioutilitiesbcl.BCLFacet_label(self)

    def items(self):
        return _openstudioutilitiesbcl.BCLFacet_items(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLFacet

# Register BCLFacet in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLFacet_swigregister(BCLFacet)
class BCLTaxonomyTerm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, taxonomyElement):
        _openstudioutilitiesbcl.BCLTaxonomyTerm_swiginit(self, _openstudioutilitiesbcl.new_BCLTaxonomyTerm(taxonomyElement))

    def name(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTerm_name(self)

    def tid(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTerm_tid(self)

    def numResults(self):
        return _openstudioutilitiesbcl.BCLTaxonomyTerm_numResults(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLTaxonomyTerm

# Register BCLTaxonomyTerm in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLTaxonomyTerm_swigregister(BCLTaxonomyTerm)
class BCLFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fileElement):
        _openstudioutilitiesbcl.BCLFile_swiginit(self, _openstudioutilitiesbcl.new_BCLFile(fileElement))

    def softwareProgram(self):
        return _openstudioutilitiesbcl.BCLFile_softwareProgram(self)

    def identifier(self):
        return _openstudioutilitiesbcl.BCLFile_identifier(self)

    def minCompatibleVersion(self):
        return _openstudioutilitiesbcl.BCLFile_minCompatibleVersion(self)

    def maxCompatibleVersion(self):
        return _openstudioutilitiesbcl.BCLFile_maxCompatibleVersion(self)

    def filename(self):
        return _openstudioutilitiesbcl.BCLFile_filename(self)

    def url(self):
        return _openstudioutilitiesbcl.BCLFile_url(self)

    def filetype(self):
        return _openstudioutilitiesbcl.BCLFile_filetype(self)

    def usageType(self):
        return _openstudioutilitiesbcl.BCLFile_usageType(self)

    def checksum(self):
        return _openstudioutilitiesbcl.BCLFile_checksum(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLFile

# Register BCLFile in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLFile_swigregister(BCLFile)
class BCLProvenance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, provenanceElement):
        _openstudioutilitiesbcl.BCLProvenance_swiginit(self, _openstudioutilitiesbcl.new_BCLProvenance(provenanceElement))

    def author(self):
        return _openstudioutilitiesbcl.BCLProvenance_author(self)

    def datetime(self):
        return _openstudioutilitiesbcl.BCLProvenance_datetime(self)

    def comment(self):
        return _openstudioutilitiesbcl.BCLProvenance_comment(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLProvenance

# Register BCLProvenance in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLProvenance_swigregister(BCLProvenance)
class BCLCost(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, costElement):
        _openstudioutilitiesbcl.BCLCost_swiginit(self, _openstudioutilitiesbcl.new_BCLCost(costElement))

    def instanceName(self):
        return _openstudioutilitiesbcl.BCLCost_instanceName(self)

    def costType(self):
        return _openstudioutilitiesbcl.BCLCost_costType(self)

    def category(self):
        return _openstudioutilitiesbcl.BCLCost_category(self)

    def value(self):
        return _openstudioutilitiesbcl.BCLCost_value(self)

    def units(self):
        return _openstudioutilitiesbcl.BCLCost_units(self)

    def interval(self):
        return _openstudioutilitiesbcl.BCLCost_interval(self)

    def intervalUnits(self):
        return _openstudioutilitiesbcl.BCLCost_intervalUnits(self)

    def year(self):
        return _openstudioutilitiesbcl.BCLCost_year(self)

    def location(self):
        return _openstudioutilitiesbcl.BCLCost_location(self)

    def currency(self):
        return _openstudioutilitiesbcl.BCLCost_currency(self)

    def source(self):
        return _openstudioutilitiesbcl.BCLCost_source(self)

    def referenceComponentName(self):
        return _openstudioutilitiesbcl.BCLCost_referenceComponentName(self)

    def referenceComponentId(self):
        return _openstudioutilitiesbcl.BCLCost_referenceComponentId(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLCost

# Register BCLCost in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLCost_swigregister(BCLCost)
class BCLMetaSearchResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, resultElement):
        _openstudioutilitiesbcl.BCLMetaSearchResult_swiginit(self, _openstudioutilitiesbcl.new_BCLMetaSearchResult(resultElement))

    def numResults(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResult_numResults(self)

    def facets(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResult_facets(self)

    def taxonomyTerms(self):
        return _openstudioutilitiesbcl.BCLMetaSearchResult_taxonomyTerms(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLMetaSearchResult

# Register BCLMetaSearchResult in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLMetaSearchResult_swigregister(BCLMetaSearchResult)
class BCLSearchResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, componentElement):
        _openstudioutilitiesbcl.BCLSearchResult_swiginit(self, _openstudioutilitiesbcl.new_BCLSearchResult(componentElement))

    def name(self):
        return _openstudioutilitiesbcl.BCLSearchResult_name(self)

    def uid(self):
        return _openstudioutilitiesbcl.BCLSearchResult_uid(self)

    def versionId(self):
        return _openstudioutilitiesbcl.BCLSearchResult_versionId(self)

    def description(self):
        return _openstudioutilitiesbcl.BCLSearchResult_description(self)

    def modelerDescription(self):
        return _openstudioutilitiesbcl.BCLSearchResult_modelerDescription(self)

    def fidelityLevel(self):
        return _openstudioutilitiesbcl.BCLSearchResult_fidelityLevel(self)

    def componentType(self):
        return _openstudioutilitiesbcl.BCLSearchResult_componentType(self)

    def provenanceRequired(self):
        return _openstudioutilitiesbcl.BCLSearchResult_provenanceRequired(self)

    def provenances(self):
        return _openstudioutilitiesbcl.BCLSearchResult_provenances(self)

    def tags(self):
        return _openstudioutilitiesbcl.BCLSearchResult_tags(self)

    def attributes(self):
        return _openstudioutilitiesbcl.BCLSearchResult_attributes(self)

    def files(self):
        return _openstudioutilitiesbcl.BCLSearchResult_files(self)

    def costs(self):
        return _openstudioutilitiesbcl.BCLSearchResult_costs(self)

    def org(self):
        return _openstudioutilitiesbcl.BCLSearchResult_org(self)

    def repo(self):
        return _openstudioutilitiesbcl.BCLSearchResult_repo(self)

    def releaseTag(self):
        return _openstudioutilitiesbcl.BCLSearchResult_releaseTag(self)

    def versionModified(self):
        return _openstudioutilitiesbcl.BCLSearchResult_versionModified(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCLSearchResult

# Register BCLSearchResult in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCLSearchResult_swigregister(BCLSearchResult)
class BCL(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesbcl.delete_BCL

    def getComponent(self, *args):
        return _openstudioutilitiesbcl.BCL_getComponent(self, *args)

    def getMeasure(self, *args):
        return _openstudioutilitiesbcl.BCL_getMeasure(self, *args)

# Register BCL in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.BCL_swigregister(BCL)

def getComponent(*args):
    return _openstudioutilitiesbcl.getComponent(*args)

def getMeasure(*args):
    return _openstudioutilitiesbcl.getMeasure(*args)
class RemoteQueryResponse(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, domDocument):
        _openstudioutilitiesbcl.RemoteQueryResponse_swiginit(self, _openstudioutilitiesbcl.new_RemoteQueryResponse(domDocument))

    def root(self):
        return _openstudioutilitiesbcl.RemoteQueryResponse_root(self)
    __swig_destroy__ = _openstudioutilitiesbcl.delete_RemoteQueryResponse

# Register RemoteQueryResponse in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.RemoteQueryResponse_swigregister(RemoteQueryResponse)
class RemoteBCL(BCL):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioutilitiesbcl.RemoteBCL_swiginit(self, _openstudioutilitiesbcl.new_RemoteBCL())
    __swig_destroy__ = _openstudioutilitiesbcl.delete_RemoteBCL

    def getComponent(self, *args):
        return _openstudioutilitiesbcl.RemoteBCL_getComponent(self, *args)

    def getMeasure(self, *args):
        return _openstudioutilitiesbcl.RemoteBCL_getMeasure(self, *args)

    def metaSearchComponentLibrary(self, *args):
        return _openstudioutilitiesbcl.RemoteBCL_metaSearchComponentLibrary(self, *args)

    def searchComponentLibrary(self, *args):
        return _openstudioutilitiesbcl.RemoteBCL_searchComponentLibrary(self, *args)

    def searchMeasureLibrary(self, *args):
        return _openstudioutilitiesbcl.RemoteBCL_searchMeasureLibrary(self, *args)

    def checkForComponentUpdates(self):
        return _openstudioutilitiesbcl.RemoteBCL_checkForComponentUpdates(self)

    def checkForMeasureUpdates(self):
        return _openstudioutilitiesbcl.RemoteBCL_checkForMeasureUpdates(self)

    def componentsWithUpdates(self):
        return _openstudioutilitiesbcl.RemoteBCL_componentsWithUpdates(self)

    def measuresWithUpdates(self):
        return _openstudioutilitiesbcl.RemoteBCL_measuresWithUpdates(self)

    def updateComponents(self):
        return _openstudioutilitiesbcl.RemoteBCL_updateComponents(self)

    def updateMeasures(self):
        return _openstudioutilitiesbcl.RemoteBCL_updateMeasures(self)

    @staticmethod
    def isOnline():
        return _openstudioutilitiesbcl.RemoteBCL_isOnline()

    def lastComponentDownload(self):
        return _openstudioutilitiesbcl.RemoteBCL_lastComponentDownload(self)

    def lastMeasureDownload(self):
        return _openstudioutilitiesbcl.RemoteBCL_lastMeasureDownload(self)

    def lastMetaSearch(self):
        return _openstudioutilitiesbcl.RemoteBCL_lastMetaSearch(self)

    def lastSearch(self):
        return _openstudioutilitiesbcl.RemoteBCL_lastSearch(self)

    def remoteUrl(self):
        return _openstudioutilitiesbcl.RemoteBCL_remoteUrl(self)

    @staticmethod
    def remoteProductionUrl():
        return _openstudioutilitiesbcl.RemoteBCL_remoteProductionUrl()

    @staticmethod
    def remoteDevelopmentUrl():
        return _openstudioutilitiesbcl.RemoteBCL_remoteDevelopmentUrl()

    def useRemoteDevelopmentUrl(self):
        return _openstudioutilitiesbcl.RemoteBCL_useRemoteDevelopmentUrl(self)

    def useRemoteProductionUrl(self):
        return _openstudioutilitiesbcl.RemoteBCL_useRemoteProductionUrl(self)

    def authKey(self):
        return _openstudioutilitiesbcl.RemoteBCL_authKey(self)

    def prodAuthKey(self):
        return _openstudioutilitiesbcl.RemoteBCL_prodAuthKey(self)

    def setProdAuthKey(self, prodAuthKey):
        return _openstudioutilitiesbcl.RemoteBCL_setProdAuthKey(self, prodAuthKey)

    def devAuthKey(self):
        return _openstudioutilitiesbcl.RemoteBCL_devAuthKey(self)

    def setDevAuthKey(self, devAuthKey):
        return _openstudioutilitiesbcl.RemoteBCL_setDevAuthKey(self, devAuthKey)

    def resultsPerQuery(self):
        return _openstudioutilitiesbcl.RemoteBCL_resultsPerQuery(self)

    def lastTotalResults(self):
        return _openstudioutilitiesbcl.RemoteBCL_lastTotalResults(self)

    def numResultPages(self):
        return _openstudioutilitiesbcl.RemoteBCL_numResultPages(self)

    def timeOutSeconds(self):
        return _openstudioutilitiesbcl.RemoteBCL_timeOutSeconds(self)

    def setTimeOutSeconds(self, timeOutSeconds):
        return _openstudioutilitiesbcl.RemoteBCL_setTimeOutSeconds(self, timeOutSeconds)

    def waitForComponentDownload(self, *args):
        return _openstudioutilitiesbcl.RemoteBCL_waitForComponentDownload(self, *args)

    def waitForMeasureDownload(self, *args):
        return _openstudioutilitiesbcl.RemoteBCL_waitForMeasureDownload(self, *args)

    def waitForMetaSearch(self, *args):
        return _openstudioutilitiesbcl.RemoteBCL_waitForMetaSearch(self, *args)

    def waitForSearch(self, *args):
        return _openstudioutilitiesbcl.RemoteBCL_waitForSearch(self, *args)

    def downloadComponent(self, uid):
        return _openstudioutilitiesbcl.RemoteBCL_downloadComponent(self, uid)

    def downloadMeasure(self, uid):
        return _openstudioutilitiesbcl.RemoteBCL_downloadMeasure(self, uid)

    def startComponentLibraryMetaSearch(self, *args):
        return _openstudioutilitiesbcl.RemoteBCL_startComponentLibraryMetaSearch(self, *args)

    def startComponentLibrarySearch(self, *args):
        return _openstudioutilitiesbcl.RemoteBCL_startComponentLibrarySearch(self, *args)

# Register RemoteBCL in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.RemoteBCL_swigregister(RemoteBCL)
class LocalBCL(BCL):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance(*args):
        return _openstudioutilitiesbcl.LocalBCL_instance(*args)

    @staticmethod
    def close():
        return _openstudioutilitiesbcl.LocalBCL_close()
    __swig_destroy__ = _openstudioutilitiesbcl.delete_LocalBCL

    def getComponent(self, *args):
        return _openstudioutilitiesbcl.LocalBCL_getComponent(self, *args)

    def getMeasure(self, *args):
        return _openstudioutilitiesbcl.LocalBCL_getMeasure(self, *args)

    def components(self):
        return _openstudioutilitiesbcl.LocalBCL_components(self)

    def measures(self):
        return _openstudioutilitiesbcl.LocalBCL_measures(self)

    def measureUids(self):
        return _openstudioutilitiesbcl.LocalBCL_measureUids(self)

    def searchComponents(self, *args):
        return _openstudioutilitiesbcl.LocalBCL_searchComponents(self, *args)

    def searchMeasures(self, *args):
        return _openstudioutilitiesbcl.LocalBCL_searchMeasures(self, *args)

    def addComponent(self, component):
        return _openstudioutilitiesbcl.LocalBCL_addComponent(self, component)

    def removeComponent(self, component):
        return _openstudioutilitiesbcl.LocalBCL_removeComponent(self, component)

    def addMeasure(self, measure):
        return _openstudioutilitiesbcl.LocalBCL_addMeasure(self, measure)

    def removeMeasure(self, measure):
        return _openstudioutilitiesbcl.LocalBCL_removeMeasure(self, measure)

    def removeOutdatedLocalComponents(self, uid, currentVersionId):
        return _openstudioutilitiesbcl.LocalBCL_removeOutdatedLocalComponents(self, uid, currentVersionId)

    def removeOutdatedLocalMeasures(self, uid, currentVersionId):
        return _openstudioutilitiesbcl.LocalBCL_removeOutdatedLocalMeasures(self, uid, currentVersionId)

    def componentAttributeSearch(self, searchTerms):
        return _openstudioutilitiesbcl.LocalBCL_componentAttributeSearch(self, searchTerms)

    def measureAttributeSearch(self, searchTerms):
        return _openstudioutilitiesbcl.LocalBCL_measureAttributeSearch(self, searchTerms)

    def prodAuthKey(self):
        return _openstudioutilitiesbcl.LocalBCL_prodAuthKey(self)

    def setProdAuthKey(self, prodAuthKey):
        return _openstudioutilitiesbcl.LocalBCL_setProdAuthKey(self, prodAuthKey)

    def devAuthKey(self):
        return _openstudioutilitiesbcl.LocalBCL_devAuthKey(self)

    def setDevAuthKey(self, devAuthKey):
        return _openstudioutilitiesbcl.LocalBCL_setDevAuthKey(self, devAuthKey)

    def libraryPath(self):
        return _openstudioutilitiesbcl.LocalBCL_libraryPath(self)

    def dbPath(self):
        return _openstudioutilitiesbcl.LocalBCL_dbPath(self)

# Register LocalBCL in _openstudioutilitiesbcl:
_openstudioutilitiesbcl.LocalBCL_swigregister(LocalBCL)

