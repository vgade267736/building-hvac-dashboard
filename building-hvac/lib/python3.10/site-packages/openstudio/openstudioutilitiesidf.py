# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudioutilitiesidf
else:
    import _openstudioutilitiesidf

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesidf.delete_SwigPyIterator

    def value(self):
        return _openstudioutilitiesidf.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudioutilitiesidf.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudioutilitiesidf.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudioutilitiesidf.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudioutilitiesidf.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudioutilitiesidf.SwigPyIterator_copy(self)

    def next(self):
        return _openstudioutilitiesidf.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudioutilitiesidf.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudioutilitiesidf.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudioutilitiesidf.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudioutilitiesidf.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudioutilitiesidf.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudioutilitiesidf.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudioutilitiesidf.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudioutilitiesidf.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudioutilitiesidf.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudioutilitiesidf:
_openstudioutilitiesidf.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudioutilitiesidf.SHARED_PTR_DISOWN
from .import openstudioutilitiescore
from .import openstudioutilitiesidd
from .import openstudioutilitiesunits
class OptionalIdfObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.OptionalIdfObject_swiginit(self, _openstudioutilitiesidf.new_OptionalIdfObject(*args))

    def reset(self):
        return _openstudioutilitiesidf.OptionalIdfObject_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesidf.OptionalIdfObject___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesidf.OptionalIdfObject___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesidf.OptionalIdfObject_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesidf.OptionalIdfObject_isNull(self)

    def empty(self):
        return _openstudioutilitiesidf.OptionalIdfObject_empty(self)

    def get(self):
        return _openstudioutilitiesidf.OptionalIdfObject_get(self)

    def set(self, t):
        return _openstudioutilitiesidf.OptionalIdfObject_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesidf.OptionalIdfObject_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalIdfObject

# Register OptionalIdfObject in _openstudioutilitiesidf:
_openstudioutilitiesidf.OptionalIdfObject_swigregister(OptionalIdfObject)
class OptionalIdfFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.OptionalIdfFile_swiginit(self, _openstudioutilitiesidf.new_OptionalIdfFile(*args))

    def reset(self):
        return _openstudioutilitiesidf.OptionalIdfFile_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesidf.OptionalIdfFile___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesidf.OptionalIdfFile___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesidf.OptionalIdfFile_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesidf.OptionalIdfFile_isNull(self)

    def empty(self):
        return _openstudioutilitiesidf.OptionalIdfFile_empty(self)

    def get(self):
        return _openstudioutilitiesidf.OptionalIdfFile_get(self)

    def set(self, t):
        return _openstudioutilitiesidf.OptionalIdfFile_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesidf.OptionalIdfFile_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalIdfFile

# Register OptionalIdfFile in _openstudioutilitiesidf:
_openstudioutilitiesidf.OptionalIdfFile_swigregister(OptionalIdfFile)
class OptionalImfFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.OptionalImfFile_swiginit(self, _openstudioutilitiesidf.new_OptionalImfFile(*args))

    def reset(self):
        return _openstudioutilitiesidf.OptionalImfFile_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesidf.OptionalImfFile___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesidf.OptionalImfFile___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesidf.OptionalImfFile_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesidf.OptionalImfFile_isNull(self)

    def empty(self):
        return _openstudioutilitiesidf.OptionalImfFile_empty(self)

    def get(self):
        return _openstudioutilitiesidf.OptionalImfFile_get(self)

    def set(self, t):
        return _openstudioutilitiesidf.OptionalImfFile_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesidf.OptionalImfFile_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalImfFile

# Register OptionalImfFile in _openstudioutilitiesidf:
_openstudioutilitiesidf.OptionalImfFile_swigregister(OptionalImfFile)
class OptionalWorkspace(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.OptionalWorkspace_swiginit(self, _openstudioutilitiesidf.new_OptionalWorkspace(*args))

    def reset(self):
        return _openstudioutilitiesidf.OptionalWorkspace_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesidf.OptionalWorkspace___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesidf.OptionalWorkspace___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesidf.OptionalWorkspace_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesidf.OptionalWorkspace_isNull(self)

    def empty(self):
        return _openstudioutilitiesidf.OptionalWorkspace_empty(self)

    def get(self):
        return _openstudioutilitiesidf.OptionalWorkspace_get(self)

    def set(self, t):
        return _openstudioutilitiesidf.OptionalWorkspace_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesidf.OptionalWorkspace_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalWorkspace

# Register OptionalWorkspace in _openstudioutilitiesidf:
_openstudioutilitiesidf.OptionalWorkspace_swigregister(OptionalWorkspace)
class OptionalWorkspaceObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.OptionalWorkspaceObject_swiginit(self, _openstudioutilitiesidf.new_OptionalWorkspaceObject(*args))

    def reset(self):
        return _openstudioutilitiesidf.OptionalWorkspaceObject_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesidf.OptionalWorkspaceObject___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesidf.OptionalWorkspaceObject___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesidf.OptionalWorkspaceObject_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesidf.OptionalWorkspaceObject_isNull(self)

    def empty(self):
        return _openstudioutilitiesidf.OptionalWorkspaceObject_empty(self)

    def get(self):
        return _openstudioutilitiesidf.OptionalWorkspaceObject_get(self)

    def set(self, t):
        return _openstudioutilitiesidf.OptionalWorkspaceObject_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesidf.OptionalWorkspaceObject_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalWorkspaceObject

# Register OptionalWorkspaceObject in _openstudioutilitiesidf:
_openstudioutilitiesidf.OptionalWorkspaceObject_swigregister(OptionalWorkspaceObject)
class OptionalWorkspaceExtensibleGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_swiginit(self, _openstudioutilitiesidf.new_OptionalWorkspaceExtensibleGroup(*args))

    def reset(self):
        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_isNull(self)

    def empty(self):
        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_empty(self)

    def get(self):
        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_get(self)

    def set(self, t):
        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalWorkspaceExtensibleGroup

# Register OptionalWorkspaceExtensibleGroup in _openstudioutilitiesidf:
_openstudioutilitiesidf.OptionalWorkspaceExtensibleGroup_swigregister(OptionalWorkspaceExtensibleGroup)
class OptionalDataError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.OptionalDataError_swiginit(self, _openstudioutilitiesidf.new_OptionalDataError(*args))

    def reset(self):
        return _openstudioutilitiesidf.OptionalDataError_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiesidf.OptionalDataError___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiesidf.OptionalDataError___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiesidf.OptionalDataError_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiesidf.OptionalDataError_isNull(self)

    def empty(self):
        return _openstudioutilitiesidf.OptionalDataError_empty(self)

    def get(self):
        return _openstudioutilitiesidf.OptionalDataError_get(self)

    def set(self, t):
        return _openstudioutilitiesidf.OptionalDataError_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiesidf.OptionalDataError_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiesidf.delete_OptionalDataError

# Register OptionalDataError in _openstudioutilitiesidf:
_openstudioutilitiesidf.OptionalDataError_swigregister(OptionalDataError)
class IdfObjectVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesidf.IdfObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesidf.IdfObjectVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesidf.IdfObjectVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesidf.IdfObjectVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesidf.IdfObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesidf.IdfObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesidf.IdfObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesidf.IdfObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesidf.IdfObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesidf.IdfObjectVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesidf.IdfObjectVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesidf.IdfObjectVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesidf.IdfObjectVector_empty(self)

    def size(self):
        return _openstudioutilitiesidf.IdfObjectVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesidf.IdfObjectVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesidf.IdfObjectVector_begin(self)

    def end(self):
        return _openstudioutilitiesidf.IdfObjectVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesidf.IdfObjectVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesidf.IdfObjectVector_rend(self)

    def clear(self):
        return _openstudioutilitiesidf.IdfObjectVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesidf.IdfObjectVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesidf.IdfObjectVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesidf.IdfObjectVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesidf.IdfObjectVector_swiginit(self, _openstudioutilitiesidf.new_IdfObjectVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesidf.IdfObjectVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesidf.IdfObjectVector_front(self)

    def back(self):
        return _openstudioutilitiesidf.IdfObjectVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesidf.IdfObjectVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesidf.IdfObjectVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesidf.IdfObjectVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesidf.IdfObjectVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesidf.IdfObjectVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfObjectVector

# Register IdfObjectVector in _openstudioutilitiesidf:
_openstudioutilitiesidf.IdfObjectVector_swigregister(IdfObjectVector)
class IdfExtensibleGroupVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_empty(self)

    def size(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_begin(self)

    def end(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_rend(self)

    def clear(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesidf.IdfExtensibleGroupVector_swiginit(self, _openstudioutilitiesidf.new_IdfExtensibleGroupVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_front(self)

    def back(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesidf.IdfExtensibleGroupVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfExtensibleGroupVector

# Register IdfExtensibleGroupVector in _openstudioutilitiesidf:
_openstudioutilitiesidf.IdfExtensibleGroupVector_swigregister(IdfExtensibleGroupVector)
class WorkspaceObjectVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesidf.WorkspaceObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesidf.WorkspaceObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesidf.WorkspaceObjectVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector_empty(self)

    def size(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesidf.WorkspaceObjectVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector_begin(self)

    def end(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector_rend(self)

    def clear(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesidf.WorkspaceObjectVector_swiginit(self, _openstudioutilitiesidf.new_WorkspaceObjectVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesidf.WorkspaceObjectVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector_front(self)

    def back(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesidf.WorkspaceObjectVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiesidf.WorkspaceObjectVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesidf.WorkspaceObjectVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesidf.WorkspaceObjectVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesidf.delete_WorkspaceObjectVector

# Register WorkspaceObjectVector in _openstudioutilitiesidf:
_openstudioutilitiesidf.WorkspaceObjectVector_swigregister(WorkspaceObjectVector)
class WorkspaceObjectVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_pop(self)

    def append(self, x):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_append(self, x)

    def empty(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_empty(self)

    def size(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_size(self)

    def swap(self, v):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_begin(self)

    def end(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_end(self)

    def rbegin(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_rend(self)

    def clear(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiesidf.WorkspaceObjectVectorVector_swiginit(self, _openstudioutilitiesidf.new_WorkspaceObjectVectorVector(*args))

    def push_back(self, x):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_front(self)

    def back(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiesidf.WorkspaceObjectVectorVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiesidf.delete_WorkspaceObjectVectorVector

# Register WorkspaceObjectVectorVector in _openstudioutilitiesidf:
_openstudioutilitiesidf.WorkspaceObjectVectorVector_swigregister(WorkspaceObjectVectorVector)

def applyHandleMap(*args):
    return _openstudioutilitiesidf.applyHandleMap(*args)
class StrictnessLevel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.StrictnessLevel_swiginit(self, _openstudioutilitiesidf.new_StrictnessLevel(*args))

    def valueName(self):
        return _openstudioutilitiesidf.StrictnessLevel_valueName(self)

    def value(self):
        return _openstudioutilitiesidf.StrictnessLevel_value(self)

    def valueDescription(self):
        return _openstudioutilitiesidf.StrictnessLevel_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesidf.StrictnessLevel___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidf.StrictnessLevel___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesidf.StrictnessLevel___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesidf.StrictnessLevel___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesidf.StrictnessLevel___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesidf.StrictnessLevel___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesidf.StrictnessLevel_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesidf.StrictnessLevel_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesidf.StrictnessLevel_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesidf.StrictnessLevel___str__(self)
    __swig_destroy__ = _openstudioutilitiesidf.delete_StrictnessLevel

# Register StrictnessLevel in _openstudioutilitiesidf:
_openstudioutilitiesidf.StrictnessLevel_swigregister(StrictnessLevel)
class Scope(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.Scope_swiginit(self, _openstudioutilitiesidf.new_Scope(*args))

    def valueName(self):
        return _openstudioutilitiesidf.Scope_valueName(self)

    def value(self):
        return _openstudioutilitiesidf.Scope_value(self)

    def valueDescription(self):
        return _openstudioutilitiesidf.Scope_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesidf.Scope___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidf.Scope___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesidf.Scope___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesidf.Scope___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesidf.Scope___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesidf.Scope___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesidf.Scope_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesidf.Scope_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesidf.Scope_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesidf.Scope___str__(self)
    __swig_destroy__ = _openstudioutilitiesidf.delete_Scope

# Register Scope in _openstudioutilitiesidf:
_openstudioutilitiesidf.Scope_swigregister(Scope)
class DataErrorType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.DataErrorType_swiginit(self, _openstudioutilitiesidf.new_DataErrorType(*args))

    def valueName(self):
        return _openstudioutilitiesidf.DataErrorType_valueName(self)

    def value(self):
        return _openstudioutilitiesidf.DataErrorType_value(self)

    def valueDescription(self):
        return _openstudioutilitiesidf.DataErrorType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiesidf.DataErrorType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidf.DataErrorType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiesidf.DataErrorType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiesidf.DataErrorType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiesidf.DataErrorType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiesidf.DataErrorType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiesidf.DataErrorType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiesidf.DataErrorType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiesidf.DataErrorType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiesidf.DataErrorType___str__(self)
    __swig_destroy__ = _openstudioutilitiesidf.delete_DataErrorType

# Register DataErrorType in _openstudioutilitiesidf:
_openstudioutilitiesidf.DataErrorType_swigregister(DataErrorType)
class DataError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.DataError_swiginit(self, _openstudioutilitiesidf.new_DataError(*args))

    def scope(self):
        return _openstudioutilitiesidf.DataError_scope(self)

    def type(self):
        return _openstudioutilitiesidf.DataError_type(self)

    def fieldIdentifier(self):
        return _openstudioutilitiesidf.DataError_fieldIdentifier(self)

    def objectIdentifier(self):
        return _openstudioutilitiesidf.DataError_objectIdentifier(self)

    def objectName(self):
        return _openstudioutilitiesidf.DataError_objectName(self)

    def objectType(self):
        return _openstudioutilitiesidf.DataError_objectType(self)

    def __eq__(self, otherError):
        return _openstudioutilitiesidf.DataError___eq__(self, otherError)

    def __ne__(self, otherError):
        return _openstudioutilitiesidf.DataError___ne__(self, otherError)

    def __str__(self):
        return _openstudioutilitiesidf.DataError___str__(self)
    __swig_destroy__ = _openstudioutilitiesidf.delete_DataError

# Register DataError in _openstudioutilitiesidf:
_openstudioutilitiesidf.DataError_swigregister(DataError)
class DataErrorLess(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, left, right):
        return _openstudioutilitiesidf.DataErrorLess___call__(self, left, right)

    def __init__(self):
        _openstudioutilitiesidf.DataErrorLess_swiginit(self, _openstudioutilitiesidf.new_DataErrorLess())
    __swig_destroy__ = _openstudioutilitiesidf.delete_DataErrorLess

# Register DataErrorLess in _openstudioutilitiesidf:
_openstudioutilitiesidf.DataErrorLess_swigregister(DataErrorLess)
class ValidityReport(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.ValidityReport_swiginit(self, _openstudioutilitiesidf.new_ValidityReport(*args))

    def insertError(self, error):
        return _openstudioutilitiesidf.ValidityReport_insertError(self, error)

    def level(self):
        return _openstudioutilitiesidf.ValidityReport_level(self)

    def scope(self):
        return _openstudioutilitiesidf.ValidityReport_scope(self)

    def objectName(self):
        return _openstudioutilitiesidf.ValidityReport_objectName(self)

    def objectType(self):
        return _openstudioutilitiesidf.ValidityReport_objectType(self)

    def numErrors(self):
        return _openstudioutilitiesidf.ValidityReport_numErrors(self)

    def nextError(self):
        return _openstudioutilitiesidf.ValidityReport_nextError(self)

    def __str__(self):
        return _openstudioutilitiesidf.ValidityReport___str__(self)
    __swig_destroy__ = _openstudioutilitiesidf.delete_ValidityReport

# Register ValidityReport in _openstudioutilitiesidf:
_openstudioutilitiesidf.ValidityReport_swigregister(ValidityReport)
class IdfObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfObject

    def __init__(self, *args):
        _openstudioutilitiesidf.IdfObject_swiginit(self, _openstudioutilitiesidf.new_IdfObject(*args))

    def clone(self, keepHandle=False):
        return _openstudioutilitiesidf.IdfObject_clone(self, keepHandle)

    def handle(self):
        return _openstudioutilitiesidf.IdfObject_handle(self)

    def iddObject(self):
        return _openstudioutilitiesidf.IdfObject_iddObject(self)

    def comment(self):
        return _openstudioutilitiesidf.IdfObject_comment(self)

    def fieldComment(self, index, returnDefault=False):
        return _openstudioutilitiesidf.IdfObject_fieldComment(self, index, returnDefault)

    def name(self, returnDefault=False):
        return _openstudioutilitiesidf.IdfObject_name(self, returnDefault)

    def nameString(self, returnDefault=False):
        return _openstudioutilitiesidf.IdfObject_nameString(self, returnDefault)

    def briefDescription(self):
        return _openstudioutilitiesidf.IdfObject_briefDescription(self)

    def isEmpty(self, index):
        return _openstudioutilitiesidf.IdfObject_isEmpty(self, index)

    def getString(self, index, returnDefault=False, returnUninitializedEmpty=False):
        return _openstudioutilitiesidf.IdfObject_getString(self, index, returnDefault, returnUninitializedEmpty)

    def getField(self, index, returnDefault=False):
        return _openstudioutilitiesidf.IdfObject_getField(self, index, returnDefault)

    def getDouble(self, index, returnDefault=False):
        return _openstudioutilitiesidf.IdfObject_getDouble(self, index, returnDefault)

    def getQuantity(self, index, returnDefault=False, returnIP=False):
        return _openstudioutilitiesidf.IdfObject_getQuantity(self, index, returnDefault, returnIP)

    def getUnsigned(self, index, returnDefault=False):
        return _openstudioutilitiesidf.IdfObject_getUnsigned(self, index, returnDefault)

    def getInt(self, index, returnDefault=False):
        return _openstudioutilitiesidf.IdfObject_getInt(self, index, returnDefault)

    def getExtensibleGroup(self, groupIndex):
        return _openstudioutilitiesidf.IdfObject_getExtensibleGroup(self, groupIndex)

    def extensibleGroups(self):
        return _openstudioutilitiesidf.IdfObject_extensibleGroups(self)

    def setComment(self, msg):
        return _openstudioutilitiesidf.IdfObject_setComment(self, msg)

    def setFieldComment(self, index, cmnt):
        return _openstudioutilitiesidf.IdfObject_setFieldComment(self, index, cmnt)

    def setName(self, newName):
        return _openstudioutilitiesidf.IdfObject_setName(self, newName)

    def createName(self, overwrite=True):
        return _openstudioutilitiesidf.IdfObject_createName(self, overwrite)

    def setString(self, index, value):
        return _openstudioutilitiesidf.IdfObject_setString(self, index, value)

    def setDouble(self, index, value):
        return _openstudioutilitiesidf.IdfObject_setDouble(self, index, value)

    def setQuantity(self, index, q):
        return _openstudioutilitiesidf.IdfObject_setQuantity(self, index, q)

    def setUnsigned(self, index, value):
        return _openstudioutilitiesidf.IdfObject_setUnsigned(self, index, value)

    def setInt(self, index, value):
        return _openstudioutilitiesidf.IdfObject_setInt(self, index, value)

    def pushExtensibleGroup(self, *args):
        return _openstudioutilitiesidf.IdfObject_pushExtensibleGroup(self, *args)

    def insertExtensibleGroup(self, *args):
        return _openstudioutilitiesidf.IdfObject_insertExtensibleGroup(self, *args)

    def popExtensibleGroup(self):
        return _openstudioutilitiesidf.IdfObject_popExtensibleGroup(self)

    def eraseExtensibleGroup(self, groupIndex):
        return _openstudioutilitiesidf.IdfObject_eraseExtensibleGroup(self, groupIndex)

    def clearExtensibleGroups(self):
        return _openstudioutilitiesidf.IdfObject_clearExtensibleGroups(self)

    def numFields(self):
        return _openstudioutilitiesidf.IdfObject_numFields(self)

    def numNonextensibleFields(self):
        return _openstudioutilitiesidf.IdfObject_numNonextensibleFields(self)

    def minFields(self):
        return _openstudioutilitiesidf.IdfObject_minFields(self)

    def maxFields(self):
        return _openstudioutilitiesidf.IdfObject_maxFields(self)

    def numExtensibleGroups(self):
        return _openstudioutilitiesidf.IdfObject_numExtensibleGroups(self)

    def minExtensibleGroups(self):
        return _openstudioutilitiesidf.IdfObject_minExtensibleGroups(self)

    def maxExtensibleGroups(self):
        return _openstudioutilitiesidf.IdfObject_maxExtensibleGroups(self)

    def isObjectListField(self, index):
        return _openstudioutilitiesidf.IdfObject_isObjectListField(self, index)

    def objectListFields(self):
        return _openstudioutilitiesidf.IdfObject_objectListFields(self)

    def isDataField(self, index):
        return _openstudioutilitiesidf.IdfObject_isDataField(self, index)

    def dataFields(self):
        return _openstudioutilitiesidf.IdfObject_dataFields(self)

    def requiredFields(self):
        return _openstudioutilitiesidf.IdfObject_requiredFields(self)

    def isValid(self, level, checkNames=False):
        return _openstudioutilitiesidf.IdfObject_isValid(self, level, checkNames)

    def validityReport(self, level, checkNames=False):
        return _openstudioutilitiesidf.IdfObject_validityReport(self, level, checkNames)

    def dataFieldsEqual(self, other):
        return _openstudioutilitiesidf.IdfObject_dataFieldsEqual(self, other)

    def objectListFieldsEqual(self, other):
        return _openstudioutilitiesidf.IdfObject_objectListFieldsEqual(self, other)

    def objectListFieldsNonConflicting(self, other):
        return _openstudioutilitiesidf.IdfObject_objectListFieldsNonConflicting(self, other)

    def __eq__(self, other):
        return _openstudioutilitiesidf.IdfObject___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidf.IdfObject___ne__(self, other)

    @staticmethod
    def load(*args):
        return _openstudioutilitiesidf.IdfObject_load(*args)

    @staticmethod
    def printedFieldSpace():
        return _openstudioutilitiesidf.IdfObject_printedFieldSpace()

    def printName(self, os, hasFields=True):
        return _openstudioutilitiesidf.IdfObject_printName(self, os, hasFields)

    def printField(self, os, index, isLastField=False):
        return _openstudioutilitiesidf.IdfObject_printField(self, os, index, isLastField)

    def __str__(self):
        return _openstudioutilitiesidf.IdfObject___str__(self)

# Register IdfObject in _openstudioutilitiesidf:
_openstudioutilitiesidf.IdfObject_swigregister(IdfObject)
class IdfObjectNameLess(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, left, right):
        return _openstudioutilitiesidf.IdfObjectNameLess___call__(self, left, right)

    def __init__(self):
        _openstudioutilitiesidf.IdfObjectNameLess_swiginit(self, _openstudioutilitiesidf.new_IdfObjectNameLess())
    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfObjectNameLess

# Register IdfObjectNameLess in _openstudioutilitiesidf:
_openstudioutilitiesidf.IdfObjectNameLess_swigregister(IdfObjectNameLess)
class IdfObjectImplLess(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, left, right):
        return _openstudioutilitiesidf.IdfObjectImplLess___call__(self, left, right)

    def __init__(self):
        _openstudioutilitiesidf.IdfObjectImplLess_swiginit(self, _openstudioutilitiesidf.new_IdfObjectImplLess())
    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfObjectImplLess

# Register IdfObjectImplLess in _openstudioutilitiesidf:
_openstudioutilitiesidf.IdfObjectImplLess_swigregister(IdfObjectImplLess)
class IdfObjectTypeLess(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, left, right):
        return _openstudioutilitiesidf.IdfObjectTypeLess___call__(self, left, right)

    def __init__(self):
        _openstudioutilitiesidf.IdfObjectTypeLess_swiginit(self, _openstudioutilitiesidf.new_IdfObjectTypeLess())
    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfObjectTypeLess

# Register IdfObjectTypeLess in _openstudioutilitiesidf:
_openstudioutilitiesidf.IdfObjectTypeLess_swigregister(IdfObjectTypeLess)

def objectName(obj):
    return _openstudioutilitiesidf.objectName(obj)

def getIdfObjectHandles(objects):
    return _openstudioutilitiesidf.getIdfObjectHandles(objects)

def getWorkspaceObjectHandles(objects):
    return _openstudioutilitiesidf.getWorkspaceObjectHandles(objects)
class HandleSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesidf.HandleSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesidf.HandleSet___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesidf.HandleSet___bool__(self)

    def __len__(self):
        return _openstudioutilitiesidf.HandleSet___len__(self)

    def append(self, x):
        return _openstudioutilitiesidf.HandleSet_append(self, x)

    def __contains__(self, x):
        return _openstudioutilitiesidf.HandleSet___contains__(self, x)

    def __getitem__(self, i):
        return _openstudioutilitiesidf.HandleSet___getitem__(self, i)

    def add(self, x):
        return _openstudioutilitiesidf.HandleSet_add(self, x)

    def discard(self, x):
        return _openstudioutilitiesidf.HandleSet_discard(self, x)

    def __init__(self, *args):
        _openstudioutilitiesidf.HandleSet_swiginit(self, _openstudioutilitiesidf.new_HandleSet(*args))

    def empty(self):
        return _openstudioutilitiesidf.HandleSet_empty(self)

    def size(self):
        return _openstudioutilitiesidf.HandleSet_size(self)

    def clear(self):
        return _openstudioutilitiesidf.HandleSet_clear(self)

    def swap(self, v):
        return _openstudioutilitiesidf.HandleSet_swap(self, v)

    def count(self, x):
        return _openstudioutilitiesidf.HandleSet_count(self, x)

    def begin(self):
        return _openstudioutilitiesidf.HandleSet_begin(self)

    def end(self):
        return _openstudioutilitiesidf.HandleSet_end(self)

    def rbegin(self):
        return _openstudioutilitiesidf.HandleSet_rbegin(self)

    def rend(self):
        return _openstudioutilitiesidf.HandleSet_rend(self)

    def erase(self, *args):
        return _openstudioutilitiesidf.HandleSet_erase(self, *args)

    def find(self, x):
        return _openstudioutilitiesidf.HandleSet_find(self, x)

    def lower_bound(self, x):
        return _openstudioutilitiesidf.HandleSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _openstudioutilitiesidf.HandleSet_upper_bound(self, x)

    def equal_range(self, x):
        return _openstudioutilitiesidf.HandleSet_equal_range(self, x)

    def insert(self, __x):
        return _openstudioutilitiesidf.HandleSet_insert(self, __x)
    __swig_destroy__ = _openstudioutilitiesidf.delete_HandleSet

# Register HandleSet in _openstudioutilitiesidf:
_openstudioutilitiesidf.HandleSet_swigregister(HandleSet)
class HandleMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiesidf.HandleMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiesidf.HandleMap___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiesidf.HandleMap___bool__(self)

    def __len__(self):
        return _openstudioutilitiesidf.HandleMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _openstudioutilitiesidf.HandleMap___getitem__(self, key)

    def __delitem__(self, key):
        return _openstudioutilitiesidf.HandleMap___delitem__(self, key)

    def has_key(self, key):
        return _openstudioutilitiesidf.HandleMap_has_key(self, key)

    def keys(self):
        return _openstudioutilitiesidf.HandleMap_keys(self)

    def values(self):
        return _openstudioutilitiesidf.HandleMap_values(self)

    def items(self):
        return _openstudioutilitiesidf.HandleMap_items(self)

    def __contains__(self, key):
        return _openstudioutilitiesidf.HandleMap___contains__(self, key)

    def key_iterator(self):
        return _openstudioutilitiesidf.HandleMap_key_iterator(self)

    def value_iterator(self):
        return _openstudioutilitiesidf.HandleMap_value_iterator(self)

    def __setitem__(self, *args):
        return _openstudioutilitiesidf.HandleMap___setitem__(self, *args)

    def asdict(self):
        return _openstudioutilitiesidf.HandleMap_asdict(self)

    def __init__(self, *args):
        _openstudioutilitiesidf.HandleMap_swiginit(self, _openstudioutilitiesidf.new_HandleMap(*args))

    def empty(self):
        return _openstudioutilitiesidf.HandleMap_empty(self)

    def size(self):
        return _openstudioutilitiesidf.HandleMap_size(self)

    def swap(self, v):
        return _openstudioutilitiesidf.HandleMap_swap(self, v)

    def begin(self):
        return _openstudioutilitiesidf.HandleMap_begin(self)

    def end(self):
        return _openstudioutilitiesidf.HandleMap_end(self)

    def rbegin(self):
        return _openstudioutilitiesidf.HandleMap_rbegin(self)

    def rend(self):
        return _openstudioutilitiesidf.HandleMap_rend(self)

    def clear(self):
        return _openstudioutilitiesidf.HandleMap_clear(self)

    def get_allocator(self):
        return _openstudioutilitiesidf.HandleMap_get_allocator(self)

    def count(self, x):
        return _openstudioutilitiesidf.HandleMap_count(self, x)

    def erase(self, *args):
        return _openstudioutilitiesidf.HandleMap_erase(self, *args)

    def find(self, x):
        return _openstudioutilitiesidf.HandleMap_find(self, x)

    def lower_bound(self, x):
        return _openstudioutilitiesidf.HandleMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _openstudioutilitiesidf.HandleMap_upper_bound(self, x)
    __swig_destroy__ = _openstudioutilitiesidf.delete_HandleMap

# Register HandleMap in _openstudioutilitiesidf:
_openstudioutilitiesidf.HandleMap_swigregister(HandleMap)
class IdfExtensibleGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfExtensibleGroup

    def fields(self, returnDefault=False):
        return _openstudioutilitiesidf.IdfExtensibleGroup_fields(self, returnDefault)

    def fieldsWithHandles(self, returnDefault=False):
        return _openstudioutilitiesidf.IdfExtensibleGroup_fieldsWithHandles(self, returnDefault)

    def fieldComments(self, returnDefault=False):
        return _openstudioutilitiesidf.IdfExtensibleGroup_fieldComments(self, returnDefault)

    def fieldComment(self, fieldIndex, returnDefault=False):
        return _openstudioutilitiesidf.IdfExtensibleGroup_fieldComment(self, fieldIndex, returnDefault)

    def getString(self, fieldIndex, returnDefault=False):
        return _openstudioutilitiesidf.IdfExtensibleGroup_getString(self, fieldIndex, returnDefault)

    def getField(self, index, returnDefault=False):
        return _openstudioutilitiesidf.IdfExtensibleGroup_getField(self, index, returnDefault)

    def isEmpty(self, fieldIndex):
        return _openstudioutilitiesidf.IdfExtensibleGroup_isEmpty(self, fieldIndex)

    def getDouble(self, fieldIndex, returnDefault=False):
        return _openstudioutilitiesidf.IdfExtensibleGroup_getDouble(self, fieldIndex, returnDefault)

    def getUnsigned(self, fieldIndex, returnDefault=False):
        return _openstudioutilitiesidf.IdfExtensibleGroup_getUnsigned(self, fieldIndex, returnDefault)

    def getInt(self, fieldIndex, returnDefault=False):
        return _openstudioutilitiesidf.IdfExtensibleGroup_getInt(self, fieldIndex, returnDefault)

    def setFieldComment(self, fieldIndex, cmnt):
        return _openstudioutilitiesidf.IdfExtensibleGroup_setFieldComment(self, fieldIndex, cmnt)

    def setFields(self, values):
        return _openstudioutilitiesidf.IdfExtensibleGroup_setFields(self, values)

    def setString(self, *args):
        return _openstudioutilitiesidf.IdfExtensibleGroup_setString(self, *args)

    def setDouble(self, fieldIndex, value):
        return _openstudioutilitiesidf.IdfExtensibleGroup_setDouble(self, fieldIndex, value)

    def setUnsigned(self, fieldIndex, value):
        return _openstudioutilitiesidf.IdfExtensibleGroup_setUnsigned(self, fieldIndex, value)

    def setInt(self, fieldIndex, value):
        return _openstudioutilitiesidf.IdfExtensibleGroup_setInt(self, fieldIndex, value)

    def pushClone(self):
        return _openstudioutilitiesidf.IdfExtensibleGroup_pushClone(self)

    def insertClone(self, groupIndex):
        return _openstudioutilitiesidf.IdfExtensibleGroup_insertClone(self, groupIndex)

    def empty(self):
        return _openstudioutilitiesidf.IdfExtensibleGroup_empty(self)

    def groupIndex(self):
        return _openstudioutilitiesidf.IdfExtensibleGroup_groupIndex(self)

    def numFields(self):
        return _openstudioutilitiesidf.IdfExtensibleGroup_numFields(self)

    def isValid(self, fieldIndex):
        return _openstudioutilitiesidf.IdfExtensibleGroup_isValid(self, fieldIndex)

    def objectListFields(self):
        return _openstudioutilitiesidf.IdfExtensibleGroup_objectListFields(self)

    def dataFields(self):
        return _openstudioutilitiesidf.IdfExtensibleGroup_dataFields(self)

    def requiredFields(self):
        return _openstudioutilitiesidf.IdfExtensibleGroup_requiredFields(self)

    def __eq__(self, other):
        return _openstudioutilitiesidf.IdfExtensibleGroup___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidf.IdfExtensibleGroup___ne__(self, other)

    def to_WorkspaceExtensibleGroup(self):
        return _openstudioutilitiesidf.IdfExtensibleGroup_to_WorkspaceExtensibleGroup(self)

# Register IdfExtensibleGroup in _openstudioutilitiesidf:
_openstudioutilitiesidf.IdfExtensibleGroup_swigregister(IdfExtensibleGroup)
class ImfFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.ImfFile_swiginit(self, _openstudioutilitiesidf.new_ImfFile(*args))

    def iddFile(self):
        return _openstudioutilitiesidf.ImfFile_iddFile(self)

    def iddFileType(self):
        return _openstudioutilitiesidf.ImfFile_iddFileType(self)

    def sectionNames(self):
        return _openstudioutilitiesidf.ImfFile_sectionNames(self)

    def section(self, section):
        return _openstudioutilitiesidf.ImfFile_section(self, section)

    def numSections(self):
        return _openstudioutilitiesidf.ImfFile_numSections(self)

    @staticmethod
    def load(*args):
        return _openstudioutilitiesidf.ImfFile_load(*args)

    def save(self, p, overwrite=False):
        return _openstudioutilitiesidf.ImfFile_save(self, p, overwrite)

    def __str__(self):
        return _openstudioutilitiesidf.ImfFile___str__(self)
    __swig_destroy__ = _openstudioutilitiesidf.delete_ImfFile

# Register ImfFile in _openstudioutilitiesidf:
_openstudioutilitiesidf.ImfFile_swigregister(ImfFile)
class IdfFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.IdfFile_swiginit(self, _openstudioutilitiesidf.new_IdfFile(*args))

    def header(self):
        return _openstudioutilitiesidf.IdfFile_header(self)

    def version(self):
        return _openstudioutilitiesidf.IdfFile_version(self)

    def iddFile(self):
        return _openstudioutilitiesidf.IdfFile_iddFile(self)

    def iddFileType(self):
        return _openstudioutilitiesidf.IdfFile_iddFileType(self)

    def versionObject(self):
        return _openstudioutilitiesidf.IdfFile_versionObject(self)

    def getObject(self, *args):
        return _openstudioutilitiesidf.IdfFile_getObject(self, *args)

    def objects(self):
        return _openstudioutilitiesidf.IdfFile_objects(self)

    def getObjectsByType(self, *args):
        return _openstudioutilitiesidf.IdfFile_getObjectsByType(self, *args)

    def getObjectsByName(self, name):
        return _openstudioutilitiesidf.IdfFile_getObjectsByName(self, name)

    def setHeader(self, header):
        return _openstudioutilitiesidf.IdfFile_setHeader(self, header)

    def addObject(self, object):
        return _openstudioutilitiesidf.IdfFile_addObject(self, object)

    def addObjects(self, objects):
        return _openstudioutilitiesidf.IdfFile_addObjects(self, objects)

    def insertObjectByIddObjectType(self, object):
        return _openstudioutilitiesidf.IdfFile_insertObjectByIddObjectType(self, object)

    def removeObject(self, object):
        return _openstudioutilitiesidf.IdfFile_removeObject(self, object)

    def removeObjects(self, objects):
        return _openstudioutilitiesidf.IdfFile_removeObjects(self, objects)

    def empty(self):
        return _openstudioutilitiesidf.IdfFile_empty(self)

    def numObjects(self):
        return _openstudioutilitiesidf.IdfFile_numObjects(self)

    def numObjectsOfType(self, *args):
        return _openstudioutilitiesidf.IdfFile_numObjectsOfType(self, *args)

    def isValid(self, level):
        return _openstudioutilitiesidf.IdfFile_isValid(self, level)

    def validityReport(self, level):
        return _openstudioutilitiesidf.IdfFile_validityReport(self, level)

    @staticmethod
    def loadVersionOnly(*args):
        return _openstudioutilitiesidf.IdfFile_loadVersionOnly(*args)

    def save(self, p, overwrite=False):
        return _openstudioutilitiesidf.IdfFile_save(self, p, overwrite)

    def __str__(self):
        return _openstudioutilitiesidf.IdfFile___str__(self)

    @staticmethod
    def load(*args):
        return _openstudioutilitiesidf.IdfFile_load(*args)
    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfFile

# Register IdfFile in _openstudioutilitiesidf:
_openstudioutilitiesidf.IdfFile_swigregister(IdfFile)
class ObjectOrderBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiesidf.ObjectOrderBase_swiginit(self, _openstudioutilitiesidf.new_ObjectOrderBase(*args))
    __swig_destroy__ = _openstudioutilitiesidf.delete_ObjectOrderBase

    def orderByIddEnum(self):
        return _openstudioutilitiesidf.ObjectOrderBase_orderByIddEnum(self)

    def setOrderByIddEnum(self):
        return _openstudioutilitiesidf.ObjectOrderBase_setOrderByIddEnum(self)

    def iddOrder(self):
        return _openstudioutilitiesidf.ObjectOrderBase_iddOrder(self)

    def setIddOrder(self, order):
        return _openstudioutilitiesidf.ObjectOrderBase_setIddOrder(self, order)

    def push_back(self, type):
        return _openstudioutilitiesidf.ObjectOrderBase_push_back(self, type)

    def insert(self, *args):
        return _openstudioutilitiesidf.ObjectOrderBase_insert(self, *args)

    def move(self, *args):
        return _openstudioutilitiesidf.ObjectOrderBase_move(self, *args)

    def swap(self, type1, type2):
        return _openstudioutilitiesidf.ObjectOrderBase_swap(self, type1, type2)

    def erase(self, type):
        return _openstudioutilitiesidf.ObjectOrderBase_erase(self, type)

    def setDirectOrder(self):
        return _openstudioutilitiesidf.ObjectOrderBase_setDirectOrder(self)

    def less(self, *args):
        return _openstudioutilitiesidf.ObjectOrderBase_less(self, *args)

    def inOrder(self, type):
        return _openstudioutilitiesidf.ObjectOrderBase_inOrder(self, type)

    def indexInOrder(self, type):
        return _openstudioutilitiesidf.ObjectOrderBase_indexInOrder(self, type)

# Register ObjectOrderBase in _openstudioutilitiesidf:
_openstudioutilitiesidf.ObjectOrderBase_swigregister(ObjectOrderBase)
class WorkspaceObjectOrder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesidf.delete_WorkspaceObjectOrder

    def orderByIddEnum(self):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_orderByIddEnum(self)

    def setOrderByIddEnum(self):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_setOrderByIddEnum(self)

    def iddOrder(self):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_iddOrder(self)

    def setIddOrder(self, order):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_setIddOrder(self, order)

    def isDirectOrder(self):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_isDirectOrder(self)

    def directOrder(self):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_directOrder(self)

    def setDirectOrder(self, order):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_setDirectOrder(self, order)

    def push_back(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_push_back(self, *args)

    def insert(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_insert(self, *args)

    def move(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_move(self, *args)

    def swap(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_swap(self, *args)

    def erase(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_erase(self, *args)

    def sort(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_sort(self, *args)

    def inOrder(self, handle):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_inOrder(self, handle)

    def indexInOrder(self, handle):
        return _openstudioutilitiesidf.WorkspaceObjectOrder_indexInOrder(self, handle)

# Register WorkspaceObjectOrder in _openstudioutilitiesidf:
_openstudioutilitiesidf.WorkspaceObjectOrder_swigregister(WorkspaceObjectOrder)
class WorkspaceExtensibleGroup(IdfExtensibleGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesidf.delete_WorkspaceExtensibleGroup

    def getTarget(self, fieldIndex):
        return _openstudioutilitiesidf.WorkspaceExtensibleGroup_getTarget(self, fieldIndex)

    def getTargets(self):
        return _openstudioutilitiesidf.WorkspaceExtensibleGroup_getTargets(self)

    def getSourceFieldIndices(self, targetHandle):
        return _openstudioutilitiesidf.WorkspaceExtensibleGroup_getSourceFieldIndices(self, targetHandle)

    def setPointer(self, *args):
        return _openstudioutilitiesidf.WorkspaceExtensibleGroup_setPointer(self, *args)

    def isSource(self):
        return _openstudioutilitiesidf.WorkspaceExtensibleGroup_isSource(self)

    def canBeSource(self):
        return _openstudioutilitiesidf.WorkspaceExtensibleGroup_canBeSource(self)

# Register WorkspaceExtensibleGroup in _openstudioutilitiesidf:
_openstudioutilitiesidf.WorkspaceExtensibleGroup_swigregister(WorkspaceExtensibleGroup)
class WorkspaceObject(IdfObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiesidf.delete_WorkspaceObject

    def __init__(self, *args):
        _openstudioutilitiesidf.WorkspaceObject_swiginit(self, _openstudioutilitiesidf.new_WorkspaceObject(*args))

    def remove(self):
        return _openstudioutilitiesidf.WorkspaceObject_remove(self)

    def workspace(self):
        return _openstudioutilitiesidf.WorkspaceObject_workspace(self)

    def getTarget(self, index):
        return _openstudioutilitiesidf.WorkspaceObject_getTarget(self, index)

    def targets(self):
        return _openstudioutilitiesidf.WorkspaceObject_targets(self)

    def getSourceIndices(self, targetHandle):
        return _openstudioutilitiesidf.WorkspaceObject_getSourceIndices(self, targetHandle)

    def sources(self):
        return _openstudioutilitiesidf.WorkspaceObject_sources(self)

    def getSources(self, type):
        return _openstudioutilitiesidf.WorkspaceObject_getSources(self, type)

    def setPointer(self, index, targetHandle):
        return _openstudioutilitiesidf.WorkspaceObject_setPointer(self, index, targetHandle)

    def __lt__(self, right):
        return _openstudioutilitiesidf.WorkspaceObject___lt__(self, right)

    def initialized(self):
        return _openstudioutilitiesidf.WorkspaceObject_initialized(self)

    def numSources(self):
        return _openstudioutilitiesidf.WorkspaceObject_numSources(self)

    def isSource(self):
        return _openstudioutilitiesidf.WorkspaceObject_isSource(self)

    def canBeSource(self, *args):
        return _openstudioutilitiesidf.WorkspaceObject_canBeSource(self, *args)

    def isTarget(self):
        return _openstudioutilitiesidf.WorkspaceObject_isTarget(self)

    def canBeTarget(self):
        return _openstudioutilitiesidf.WorkspaceObject_canBeTarget(self)

    def objectListFieldsEqual(self, other):
        return _openstudioutilitiesidf.WorkspaceObject_objectListFieldsEqual(self, other)

    def objectListFieldsNonConflicting(self, other):
        return _openstudioutilitiesidf.WorkspaceObject_objectListFieldsNonConflicting(self, other)

    def idfObject(self, *args):
        return _openstudioutilitiesidf.WorkspaceObject_idfObject(self, *args)

    def __str__(self):
        return _openstudioutilitiesidf.WorkspaceObject___str__(self)

# Register WorkspaceObject in _openstudioutilitiesidf:
_openstudioutilitiesidf.WorkspaceObject_swigregister(WorkspaceObject)
class Workspace(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clone(self, keepHandles=False):
        return _openstudioutilitiesidf.Workspace_clone(self, keepHandles)

    def cloneSubset(self, *args):
        return _openstudioutilitiesidf.Workspace_cloneSubset(self, *args)
    __swig_destroy__ = _openstudioutilitiesidf.delete_Workspace

    def strictnessLevel(self):
        return _openstudioutilitiesidf.Workspace_strictnessLevel(self)

    def version(self):
        return _openstudioutilitiesidf.Workspace_version(self)

    def iddFile(self):
        return _openstudioutilitiesidf.Workspace_iddFile(self)

    def iddFileType(self):
        return _openstudioutilitiesidf.Workspace_iddFileType(self)

    def getIddObject(self, type):
        return _openstudioutilitiesidf.Workspace_getIddObject(self, type)

    def name(self, handle):
        return _openstudioutilitiesidf.Workspace_name(self, handle)

    def getObject(self, handle):
        return _openstudioutilitiesidf.Workspace_getObject(self, handle)

    def objects(self, sorted=False):
        return _openstudioutilitiesidf.Workspace_objects(self, sorted)

    def handles(self, sorted=False):
        return _openstudioutilitiesidf.Workspace_handles(self, sorted)

    def objectsWithURLFields(self):
        return _openstudioutilitiesidf.Workspace_objectsWithURLFields(self)

    def versionObject(self):
        return _openstudioutilitiesidf.Workspace_versionObject(self)

    def getObjects(self, handles):
        return _openstudioutilitiesidf.Workspace_getObjects(self, handles)

    def getObjectsByName(self, name, exactMatch=True):
        return _openstudioutilitiesidf.Workspace_getObjectsByName(self, name, exactMatch)

    def getObjectsByReference(self, *args):
        return _openstudioutilitiesidf.Workspace_getObjectsByReference(self, *args)

    def getObjectByNameAndReference(self, name, referenceNames):
        return _openstudioutilitiesidf.Workspace_getObjectByNameAndReference(self, name, referenceNames)

    def getObjectsByType(self, *args):
        return _openstudioutilitiesidf.Workspace_getObjectsByType(self, *args)

    def getObjectByTypeAndName(self, *args):
        return _openstudioutilitiesidf.Workspace_getObjectByTypeAndName(self, *args)

    def getObjectsByTypeAndName(self, *args):
        return _openstudioutilitiesidf.Workspace_getObjectsByTypeAndName(self, *args)

    def fastNaming(self):
        return _openstudioutilitiesidf.Workspace_fastNaming(self)

    def setStrictnessLevel(self, level):
        return _openstudioutilitiesidf.Workspace_setStrictnessLevel(self, level)

    def addObject(self, idfObject):
        return _openstudioutilitiesidf.Workspace_addObject(self, idfObject)

    def insertObject(self, idfObject):
        return _openstudioutilitiesidf.Workspace_insertObject(self, idfObject)

    def addObjects(self, *args):
        return _openstudioutilitiesidf.Workspace_addObjects(self, *args)

    def insertObjects(self, *args):
        return _openstudioutilitiesidf.Workspace_insertObjects(self, *args)

    def addAndInsertObjects(self, *args):
        return _openstudioutilitiesidf.Workspace_addAndInsertObjects(self, *args)

    def swap(self, *args):
        return _openstudioutilitiesidf.Workspace_swap(self, *args)

    def removeObject(self, handle):
        return _openstudioutilitiesidf.Workspace_removeObject(self, handle)

    def removeObjects(self, handles):
        return _openstudioutilitiesidf.Workspace_removeObjects(self, handles)

    def setFastNaming(self, fastNaming):
        return _openstudioutilitiesidf.Workspace_setFastNaming(self, fastNaming)

    def order(self, *args):
        return _openstudioutilitiesidf.Workspace_order(self, *args)

    def sort(self, *args):
        return _openstudioutilitiesidf.Workspace_sort(self, *args)

    def numObjects(self):
        return _openstudioutilitiesidf.Workspace_numObjects(self)

    def numObjectsOfType(self, *args):
        return _openstudioutilitiesidf.Workspace_numObjectsOfType(self, *args)

    def isMember(self, handle):
        return _openstudioutilitiesidf.Workspace_isMember(self, handle)

    def canBeTarget(self, handle, referenceListNames):
        return _openstudioutilitiesidf.Workspace_canBeTarget(self, handle, referenceListNames)

    def isInIddFile(self, type):
        return _openstudioutilitiesidf.Workspace_isInIddFile(self, type)

    def nextName(self, *args):
        return _openstudioutilitiesidf.Workspace_nextName(self, *args)

    def isValid(self, *args):
        return _openstudioutilitiesidf.Workspace_isValid(self, *args)

    def validityReport(self, *args):
        return _openstudioutilitiesidf.Workspace_validityReport(self, *args)

    def __eq__(self, other):
        return _openstudioutilitiesidf.Workspace___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiesidf.Workspace___ne__(self, other)

    def save(self, p, overwrite=False):
        return _openstudioutilitiesidf.Workspace_save(self, p, overwrite)

    @staticmethod
    def load(*args):
        return _openstudioutilitiesidf.Workspace_load(*args)

    def toIdfFile(self):
        return _openstudioutilitiesidf.Workspace_toIdfFile(self)

    def connectProgressBar(self, progressBar):
        return _openstudioutilitiesidf.Workspace_connectProgressBar(self, progressBar)

    def disconnectProgressBar(self, progressBar):
        return _openstudioutilitiesidf.Workspace_disconnectProgressBar(self, progressBar)

    def __init__(self, *args):
        if self.__class__ == Workspace:
            _self = None
        else:
            _self = self
        _openstudioutilitiesidf.Workspace_swiginit(self, _openstudioutilitiesidf.new_Workspace(_self, *args))

    def addVersionObject(self):
        return _openstudioutilitiesidf.Workspace_addVersionObject(self)

    def __str__(self):
        return _openstudioutilitiesidf.Workspace___str__(self)
    def __disown__(self):
        self.this.disown()
        _openstudioutilitiesidf.disown_Workspace(self)
        return weakref.proxy(self)

# Register Workspace in _openstudioutilitiesidf:
_openstudioutilitiesidf.Workspace_swigregister(Workspace)

def __lshift__(*args):
    return _openstudioutilitiesidf.__lshift__(*args)
class IdfObjectWatcher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, idfObject):
        if self.__class__ == IdfObjectWatcher:
            _self = None
        else:
            _self = self
        _openstudioutilitiesidf.IdfObjectWatcher_swiginit(self, _openstudioutilitiesidf.new_IdfObjectWatcher(_self, idfObject))
    __swig_destroy__ = _openstudioutilitiesidf.delete_IdfObjectWatcher

    def enabled(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_enabled(self)

    def enable(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_enable(self)

    def disable(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_disable(self)

    def dirty(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_dirty(self)

    def dataChanged(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_dataChanged(self)

    def nameChanged(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_nameChanged(self)

    def clearState(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_clearState(self)

    def onChangeIdfObject(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_onChangeIdfObject(self)

    def onDataFieldChange(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_onDataFieldChange(self)

    def onNameChange(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_onNameChange(self)

    def onBecomeDirty(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_onBecomeDirty(self)

    def onBecomeClean(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_onBecomeClean(self)

    def change(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_change(self)

    def dataChange(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_dataChange(self)

    def nameChange(self):
        return _openstudioutilitiesidf.IdfObjectWatcher_nameChange(self)
    def __disown__(self):
        self.this.disown()
        _openstudioutilitiesidf.disown_IdfObjectWatcher(self)
        return weakref.proxy(self)

# Register IdfObjectWatcher in _openstudioutilitiesidf:
_openstudioutilitiesidf.IdfObjectWatcher_swigregister(IdfObjectWatcher)
class WorkspaceObjectWatcher(IdfObjectWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, workspaceObject):
        if self.__class__ == WorkspaceObjectWatcher:
            _self = None
        else:
            _self = self
        _openstudioutilitiesidf.WorkspaceObjectWatcher_swiginit(self, _openstudioutilitiesidf.new_WorkspaceObjectWatcher(_self, workspaceObject))
    __swig_destroy__ = _openstudioutilitiesidf.delete_WorkspaceObjectWatcher

    def relationshipChanged(self):
        return _openstudioutilitiesidf.WorkspaceObjectWatcher_relationshipChanged(self)

    def clearState(self):
        return _openstudioutilitiesidf.WorkspaceObjectWatcher_clearState(self)

    def onRelationshipChange(self, index, newHandle, oldHandle):
        return _openstudioutilitiesidf.WorkspaceObjectWatcher_onRelationshipChange(self, index, newHandle, oldHandle)

    def onRemoveFromWorkspace(self, handle):
        return _openstudioutilitiesidf.WorkspaceObjectWatcher_onRemoveFromWorkspace(self, handle)

    def relationshipChange(self, index, newHandle, oldHandle):
        return _openstudioutilitiesidf.WorkspaceObjectWatcher_relationshipChange(self, index, newHandle, oldHandle)

    def removedFromWorkspace(self, *args):
        return _openstudioutilitiesidf.WorkspaceObjectWatcher_removedFromWorkspace(self, *args)
    def __disown__(self):
        self.this.disown()
        _openstudioutilitiesidf.disown_WorkspaceObjectWatcher(self)
        return weakref.proxy(self)

# Register WorkspaceObjectWatcher in _openstudioutilitiesidf:
_openstudioutilitiesidf.WorkspaceObjectWatcher_swigregister(WorkspaceObjectWatcher)
class WorkspaceWatcher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, workspace):
        if self.__class__ == WorkspaceWatcher:
            _self = None
        else:
            _self = self
        _openstudioutilitiesidf.WorkspaceWatcher_swiginit(self, _openstudioutilitiesidf.new_WorkspaceWatcher(_self, workspace))
    __swig_destroy__ = _openstudioutilitiesidf.delete_WorkspaceWatcher

    def enabled(self):
        return _openstudioutilitiesidf.WorkspaceWatcher_enabled(self)

    def enable(self):
        return _openstudioutilitiesidf.WorkspaceWatcher_enable(self)

    def disable(self):
        return _openstudioutilitiesidf.WorkspaceWatcher_disable(self)

    def dirty(self):
        return _openstudioutilitiesidf.WorkspaceWatcher_dirty(self)

    def objectAdded(self):
        return _openstudioutilitiesidf.WorkspaceWatcher_objectAdded(self)

    def objectRemoved(self):
        return _openstudioutilitiesidf.WorkspaceWatcher_objectRemoved(self)

    def clearState(self):
        return _openstudioutilitiesidf.WorkspaceWatcher_clearState(self)

    def onChangeWorkspace(self):
        return _openstudioutilitiesidf.WorkspaceWatcher_onChangeWorkspace(self)

    def onBecomeDirty(self):
        return _openstudioutilitiesidf.WorkspaceWatcher_onBecomeDirty(self)

    def onBecomeClean(self):
        return _openstudioutilitiesidf.WorkspaceWatcher_onBecomeClean(self)

    def onObjectAdd(self, addedObject):
        return _openstudioutilitiesidf.WorkspaceWatcher_onObjectAdd(self, addedObject)

    def onObjectRemove(self, removedObject):
        return _openstudioutilitiesidf.WorkspaceWatcher_onObjectRemove(self, removedObject)

    def change(self):
        return _openstudioutilitiesidf.WorkspaceWatcher_change(self)

    def objectAdd(self, addedObject, type, uuid):
        return _openstudioutilitiesidf.WorkspaceWatcher_objectAdd(self, addedObject, type, uuid)

    def objectRemove(self, removedObject, type, uuid):
        return _openstudioutilitiesidf.WorkspaceWatcher_objectRemove(self, removedObject, type, uuid)
    def __disown__(self):
        self.this.disown()
        _openstudioutilitiesidf.disown_WorkspaceWatcher(self)
        return weakref.proxy(self)

# Register WorkspaceWatcher in _openstudioutilitiesidf:
_openstudioutilitiesidf.WorkspaceWatcher_swigregister(WorkspaceWatcher)

