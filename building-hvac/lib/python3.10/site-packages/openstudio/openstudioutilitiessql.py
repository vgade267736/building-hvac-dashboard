# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudioutilitiessql
else:
    import _openstudioutilitiessql

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiessql.delete_SwigPyIterator

    def value(self):
        return _openstudioutilitiessql.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudioutilitiessql.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudioutilitiessql.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudioutilitiessql.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudioutilitiessql.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudioutilitiessql.SwigPyIterator_copy(self)

    def next(self):
        return _openstudioutilitiessql.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudioutilitiessql.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudioutilitiessql.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudioutilitiessql.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudioutilitiessql.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudioutilitiessql.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudioutilitiessql.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudioutilitiessql.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudioutilitiessql.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudioutilitiessql.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudioutilitiessql:
_openstudioutilitiessql.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudioutilitiessql.SHARED_PTR_DISOWN
from .import openstudioutilitiesgeometry
from .import openstudioutilitiesplot
from .import openstudioutilitiesdata
from .import openstudioutilitiestime
from .import openstudioutilitiescore
from .import openstudioutilitiesunits
class OptionalSqlFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiessql.OptionalSqlFile_swiginit(self, _openstudioutilitiessql.new_OptionalSqlFile(*args))

    def reset(self):
        return _openstudioutilitiessql.OptionalSqlFile_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiessql.OptionalSqlFile___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiessql.OptionalSqlFile___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiessql.OptionalSqlFile_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiessql.OptionalSqlFile_isNull(self)

    def empty(self):
        return _openstudioutilitiessql.OptionalSqlFile_empty(self)

    def get(self):
        return _openstudioutilitiessql.OptionalSqlFile_get(self)

    def set(self, t):
        return _openstudioutilitiessql.OptionalSqlFile_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiessql.OptionalSqlFile_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiessql.delete_OptionalSqlFile

# Register OptionalSqlFile in _openstudioutilitiessql:
_openstudioutilitiessql.OptionalSqlFile_swigregister(OptionalSqlFile)
class OptionalEnvironmentType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiessql.OptionalEnvironmentType_swiginit(self, _openstudioutilitiessql.new_OptionalEnvironmentType(*args))

    def reset(self):
        return _openstudioutilitiessql.OptionalEnvironmentType_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiessql.OptionalEnvironmentType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiessql.OptionalEnvironmentType___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiessql.OptionalEnvironmentType_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiessql.OptionalEnvironmentType_isNull(self)

    def empty(self):
        return _openstudioutilitiessql.OptionalEnvironmentType_empty(self)

    def get(self):
        return _openstudioutilitiessql.OptionalEnvironmentType_get(self)

    def set(self, t):
        return _openstudioutilitiessql.OptionalEnvironmentType_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiessql.OptionalEnvironmentType_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiessql.delete_OptionalEnvironmentType

# Register OptionalEnvironmentType in _openstudioutilitiessql:
_openstudioutilitiessql.OptionalEnvironmentType_swigregister(OptionalEnvironmentType)
class OptionalReportingFrequency(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiessql.OptionalReportingFrequency_swiginit(self, _openstudioutilitiessql.new_OptionalReportingFrequency(*args))

    def reset(self):
        return _openstudioutilitiessql.OptionalReportingFrequency_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiessql.OptionalReportingFrequency___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiessql.OptionalReportingFrequency___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiessql.OptionalReportingFrequency_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiessql.OptionalReportingFrequency_isNull(self)

    def empty(self):
        return _openstudioutilitiessql.OptionalReportingFrequency_empty(self)

    def get(self):
        return _openstudioutilitiessql.OptionalReportingFrequency_get(self)

    def set(self, t):
        return _openstudioutilitiessql.OptionalReportingFrequency_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiessql.OptionalReportingFrequency_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiessql.delete_OptionalReportingFrequency

# Register OptionalReportingFrequency in _openstudioutilitiessql:
_openstudioutilitiessql.OptionalReportingFrequency_swigregister(OptionalReportingFrequency)
class OptionalKeyValueIdentifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiessql.OptionalKeyValueIdentifier_swiginit(self, _openstudioutilitiessql.new_OptionalKeyValueIdentifier(*args))

    def reset(self):
        return _openstudioutilitiessql.OptionalKeyValueIdentifier_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiessql.OptionalKeyValueIdentifier___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiessql.OptionalKeyValueIdentifier___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiessql.OptionalKeyValueIdentifier_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiessql.OptionalKeyValueIdentifier_isNull(self)

    def empty(self):
        return _openstudioutilitiessql.OptionalKeyValueIdentifier_empty(self)

    def get(self):
        return _openstudioutilitiessql.OptionalKeyValueIdentifier_get(self)

    def set(self, t):
        return _openstudioutilitiessql.OptionalKeyValueIdentifier_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiessql.OptionalKeyValueIdentifier_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiessql.delete_OptionalKeyValueIdentifier

# Register OptionalKeyValueIdentifier in _openstudioutilitiessql:
_openstudioutilitiessql.OptionalKeyValueIdentifier_swigregister(OptionalKeyValueIdentifier)
class OptionalEnvironmentIdentifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiessql.OptionalEnvironmentIdentifier_swiginit(self, _openstudioutilitiessql.new_OptionalEnvironmentIdentifier(*args))

    def reset(self):
        return _openstudioutilitiessql.OptionalEnvironmentIdentifier_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiessql.OptionalEnvironmentIdentifier___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiessql.OptionalEnvironmentIdentifier___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiessql.OptionalEnvironmentIdentifier_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiessql.OptionalEnvironmentIdentifier_isNull(self)

    def empty(self):
        return _openstudioutilitiessql.OptionalEnvironmentIdentifier_empty(self)

    def get(self):
        return _openstudioutilitiessql.OptionalEnvironmentIdentifier_get(self)

    def set(self, t):
        return _openstudioutilitiessql.OptionalEnvironmentIdentifier_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiessql.OptionalEnvironmentIdentifier_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiessql.delete_OptionalEnvironmentIdentifier

# Register OptionalEnvironmentIdentifier in _openstudioutilitiessql:
_openstudioutilitiessql.OptionalEnvironmentIdentifier_swigregister(OptionalEnvironmentIdentifier)
class OptionalTimeSeriesIdentifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiessql.OptionalTimeSeriesIdentifier_swiginit(self, _openstudioutilitiessql.new_OptionalTimeSeriesIdentifier(*args))

    def reset(self):
        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier_isNull(self)

    def empty(self):
        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier_empty(self)

    def get(self):
        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier_get(self)

    def set(self, t):
        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiessql.OptionalTimeSeriesIdentifier_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiessql.delete_OptionalTimeSeriesIdentifier

# Register OptionalTimeSeriesIdentifier in _openstudioutilitiessql:
_openstudioutilitiessql.OptionalTimeSeriesIdentifier_swigregister(OptionalTimeSeriesIdentifier)
class ReportingFrequencySet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiessql.ReportingFrequencySet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiessql.ReportingFrequencySet___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiessql.ReportingFrequencySet___bool__(self)

    def __len__(self):
        return _openstudioutilitiessql.ReportingFrequencySet___len__(self)

    def append(self, x):
        return _openstudioutilitiessql.ReportingFrequencySet_append(self, x)

    def __contains__(self, x):
        return _openstudioutilitiessql.ReportingFrequencySet___contains__(self, x)

    def __getitem__(self, i):
        return _openstudioutilitiessql.ReportingFrequencySet___getitem__(self, i)

    def add(self, x):
        return _openstudioutilitiessql.ReportingFrequencySet_add(self, x)

    def discard(self, x):
        return _openstudioutilitiessql.ReportingFrequencySet_discard(self, x)

    def __init__(self, *args):
        _openstudioutilitiessql.ReportingFrequencySet_swiginit(self, _openstudioutilitiessql.new_ReportingFrequencySet(*args))

    def empty(self):
        return _openstudioutilitiessql.ReportingFrequencySet_empty(self)

    def size(self):
        return _openstudioutilitiessql.ReportingFrequencySet_size(self)

    def clear(self):
        return _openstudioutilitiessql.ReportingFrequencySet_clear(self)

    def swap(self, v):
        return _openstudioutilitiessql.ReportingFrequencySet_swap(self, v)

    def count(self, x):
        return _openstudioutilitiessql.ReportingFrequencySet_count(self, x)

    def begin(self):
        return _openstudioutilitiessql.ReportingFrequencySet_begin(self)

    def end(self):
        return _openstudioutilitiessql.ReportingFrequencySet_end(self)

    def rbegin(self):
        return _openstudioutilitiessql.ReportingFrequencySet_rbegin(self)

    def rend(self):
        return _openstudioutilitiessql.ReportingFrequencySet_rend(self)

    def erase(self, *args):
        return _openstudioutilitiessql.ReportingFrequencySet_erase(self, *args)

    def find(self, x):
        return _openstudioutilitiessql.ReportingFrequencySet_find(self, x)

    def lower_bound(self, x):
        return _openstudioutilitiessql.ReportingFrequencySet_lower_bound(self, x)

    def upper_bound(self, x):
        return _openstudioutilitiessql.ReportingFrequencySet_upper_bound(self, x)

    def equal_range(self, x):
        return _openstudioutilitiessql.ReportingFrequencySet_equal_range(self, x)

    def insert(self, __x):
        return _openstudioutilitiessql.ReportingFrequencySet_insert(self, __x)
    __swig_destroy__ = _openstudioutilitiessql.delete_ReportingFrequencySet

# Register ReportingFrequencySet in _openstudioutilitiessql:
_openstudioutilitiessql.ReportingFrequencySet_swigregister(ReportingFrequencySet)
class ReportingFrequencyVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiessql.ReportingFrequencyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiessql.ReportingFrequencyVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiessql.ReportingFrequencyVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiessql.ReportingFrequencyVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiessql.ReportingFrequencyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiessql.ReportingFrequencyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiessql.ReportingFrequencyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiessql.ReportingFrequencyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiessql.ReportingFrequencyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiessql.ReportingFrequencyVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiessql.ReportingFrequencyVector_pop(self)

    def append(self, x):
        return _openstudioutilitiessql.ReportingFrequencyVector_append(self, x)

    def empty(self):
        return _openstudioutilitiessql.ReportingFrequencyVector_empty(self)

    def size(self):
        return _openstudioutilitiessql.ReportingFrequencyVector_size(self)

    def swap(self, v):
        return _openstudioutilitiessql.ReportingFrequencyVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiessql.ReportingFrequencyVector_begin(self)

    def end(self):
        return _openstudioutilitiessql.ReportingFrequencyVector_end(self)

    def rbegin(self):
        return _openstudioutilitiessql.ReportingFrequencyVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiessql.ReportingFrequencyVector_rend(self)

    def clear(self):
        return _openstudioutilitiessql.ReportingFrequencyVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiessql.ReportingFrequencyVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiessql.ReportingFrequencyVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiessql.ReportingFrequencyVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiessql.ReportingFrequencyVector_swiginit(self, _openstudioutilitiessql.new_ReportingFrequencyVector(*args))

    def push_back(self, x):
        return _openstudioutilitiessql.ReportingFrequencyVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiessql.ReportingFrequencyVector_front(self)

    def back(self):
        return _openstudioutilitiessql.ReportingFrequencyVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiessql.ReportingFrequencyVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiessql.ReportingFrequencyVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiessql.ReportingFrequencyVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiessql.ReportingFrequencyVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiessql.ReportingFrequencyVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiessql.delete_ReportingFrequencyVector

# Register ReportingFrequencyVector in _openstudioutilitiessql:
_openstudioutilitiessql.ReportingFrequencyVector_swigregister(ReportingFrequencyVector)
class IntDateTimePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiessql.IntDateTimePair_swiginit(self, _openstudioutilitiessql.new_IntDateTimePair(*args))
    first = property(_openstudioutilitiessql.IntDateTimePair_first_get, _openstudioutilitiessql.IntDateTimePair_first_set)
    second = property(_openstudioutilitiessql.IntDateTimePair_second_get, _openstudioutilitiessql.IntDateTimePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _openstudioutilitiessql.delete_IntDateTimePair

# Register IntDateTimePair in _openstudioutilitiessql:
_openstudioutilitiessql.IntDateTimePair_swigregister(IntDateTimePair)
class IntDateTimePairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiessql.IntDateTimePairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiessql.IntDateTimePairVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiessql.IntDateTimePairVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiessql.IntDateTimePairVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiessql.IntDateTimePairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiessql.IntDateTimePairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiessql.IntDateTimePairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiessql.IntDateTimePairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiessql.IntDateTimePairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiessql.IntDateTimePairVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiessql.IntDateTimePairVector_pop(self)

    def append(self, x):
        return _openstudioutilitiessql.IntDateTimePairVector_append(self, x)

    def empty(self):
        return _openstudioutilitiessql.IntDateTimePairVector_empty(self)

    def size(self):
        return _openstudioutilitiessql.IntDateTimePairVector_size(self)

    def swap(self, v):
        return _openstudioutilitiessql.IntDateTimePairVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiessql.IntDateTimePairVector_begin(self)

    def end(self):
        return _openstudioutilitiessql.IntDateTimePairVector_end(self)

    def rbegin(self):
        return _openstudioutilitiessql.IntDateTimePairVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiessql.IntDateTimePairVector_rend(self)

    def clear(self):
        return _openstudioutilitiessql.IntDateTimePairVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiessql.IntDateTimePairVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiessql.IntDateTimePairVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiessql.IntDateTimePairVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiessql.IntDateTimePairVector_swiginit(self, _openstudioutilitiessql.new_IntDateTimePairVector(*args))

    def push_back(self, x):
        return _openstudioutilitiessql.IntDateTimePairVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiessql.IntDateTimePairVector_front(self)

    def back(self):
        return _openstudioutilitiessql.IntDateTimePairVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiessql.IntDateTimePairVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiessql.IntDateTimePairVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiessql.IntDateTimePairVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiessql.IntDateTimePairVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiessql.IntDateTimePairVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiessql.delete_IntDateTimePairVector

# Register IntDateTimePairVector in _openstudioutilitiessql:
_openstudioutilitiessql.IntDateTimePairVector_swigregister(IntDateTimePairVector)
class SummaryDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiessql.SummaryDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiessql.SummaryDataVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiessql.SummaryDataVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiessql.SummaryDataVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiessql.SummaryDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiessql.SummaryDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiessql.SummaryDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiessql.SummaryDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiessql.SummaryDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiessql.SummaryDataVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiessql.SummaryDataVector_pop(self)

    def append(self, x):
        return _openstudioutilitiessql.SummaryDataVector_append(self, x)

    def empty(self):
        return _openstudioutilitiessql.SummaryDataVector_empty(self)

    def size(self):
        return _openstudioutilitiessql.SummaryDataVector_size(self)

    def swap(self, v):
        return _openstudioutilitiessql.SummaryDataVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiessql.SummaryDataVector_begin(self)

    def end(self):
        return _openstudioutilitiessql.SummaryDataVector_end(self)

    def rbegin(self):
        return _openstudioutilitiessql.SummaryDataVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiessql.SummaryDataVector_rend(self)

    def clear(self):
        return _openstudioutilitiessql.SummaryDataVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiessql.SummaryDataVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiessql.SummaryDataVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiessql.SummaryDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiessql.SummaryDataVector_swiginit(self, _openstudioutilitiessql.new_SummaryDataVector(*args))

    def push_back(self, x):
        return _openstudioutilitiessql.SummaryDataVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiessql.SummaryDataVector_front(self)

    def back(self):
        return _openstudioutilitiessql.SummaryDataVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiessql.SummaryDataVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioutilitiessql.SummaryDataVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioutilitiessql.SummaryDataVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiessql.SummaryDataVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiessql.SummaryDataVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiessql.delete_SummaryDataVector

# Register SummaryDataVector in _openstudioutilitiessql:
_openstudioutilitiessql.SummaryDataVector_swigregister(SummaryDataVector)
class SqlTimeSeriesQueryVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_pop(self)

    def append(self, x):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_append(self, x)

    def empty(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_empty(self)

    def size(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_size(self)

    def swap(self, v):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_begin(self)

    def end(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_end(self)

    def rbegin(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_rend(self)

    def clear(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiessql.SqlTimeSeriesQueryVector_swiginit(self, _openstudioutilitiessql.new_SqlTimeSeriesQueryVector(*args))

    def push_back(self, x):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_front(self)

    def back(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiessql.SqlTimeSeriesQueryVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiessql.delete_SqlTimeSeriesQueryVector

# Register SqlTimeSeriesQueryVector in _openstudioutilitiessql:
_openstudioutilitiessql.SqlTimeSeriesQueryVector_swigregister(SqlTimeSeriesQueryVector)
class SummaryData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, t_value, t_units, t_reportingFrequency, t_fuelType, t_installLocationType):
        _openstudioutilitiessql.SummaryData_swiginit(self, _openstudioutilitiessql.new_SummaryData(t_value, t_units, t_reportingFrequency, t_fuelType, t_installLocationType))
    value = property(_openstudioutilitiessql.SummaryData_value_get, _openstudioutilitiessql.SummaryData_value_set)
    units = property(_openstudioutilitiessql.SummaryData_units_get, _openstudioutilitiessql.SummaryData_units_set)
    reportingFrequency = property(_openstudioutilitiessql.SummaryData_reportingFrequency_get, _openstudioutilitiessql.SummaryData_reportingFrequency_set)
    fuelType = property(_openstudioutilitiessql.SummaryData_fuelType_get, _openstudioutilitiessql.SummaryData_fuelType_set)
    installLocationType = property(_openstudioutilitiessql.SummaryData_installLocationType_get, _openstudioutilitiessql.SummaryData_installLocationType_set)
    __swig_destroy__ = _openstudioutilitiessql.delete_SummaryData

# Register SummaryData in _openstudioutilitiessql:
_openstudioutilitiessql.SummaryData_swigregister(SummaryData)
class SqlFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiessql.SqlFile_swiginit(self, _openstudioutilitiessql.new_SqlFile(*args))
    __swig_destroy__ = _openstudioutilitiessql.delete_SqlFile

    def removeIndexes(self):
        return _openstudioutilitiessql.SqlFile_removeIndexes(self)

    def createIndexes(self):
        return _openstudioutilitiessql.SqlFile_createIndexes(self)

    def connectionOpen(self):
        return _openstudioutilitiessql.SqlFile_connectionOpen(self)

    def path(self):
        return _openstudioutilitiessql.SqlFile_path(self)

    def supportedVersion(self):
        return _openstudioutilitiessql.SqlFile_supportedVersion(self)

    def hasYear(self):
        return _openstudioutilitiessql.SqlFile_hasYear(self)

    def hasIlluminanceMapYear(self):
        return _openstudioutilitiessql.SqlFile_hasIlluminanceMapYear(self)

    def getExteriorFenestrationValue(self, subSurfaceName, columnName):
        return _openstudioutilitiessql.SqlFile_getExteriorFenestrationValue(self, subSurfaceName, columnName)

    def assemblyUFactor(self, subSurfaceName):
        return _openstudioutilitiessql.SqlFile_assemblyUFactor(self, subSurfaceName)

    def assemblySHGC(self, subSurfaceName):
        return _openstudioutilitiessql.SqlFile_assemblySHGC(self, subSurfaceName)

    def assemblyVisibleTransmittance(self, subSurfaceName):
        return _openstudioutilitiessql.SqlFile_assemblyVisibleTransmittance(self, subSurfaceName)

    def close(self):
        return _openstudioutilitiessql.SqlFile_close(self)

    def reopen(self):
        return _openstudioutilitiessql.SqlFile_reopen(self)

    def energyPlusSqliteFile(self):
        return _openstudioutilitiessql.SqlFile_energyPlusSqliteFile(self)

    def hoursSimulated(self):
        return _openstudioutilitiessql.SqlFile_hoursSimulated(self)

    def netSiteEnergy(self):
        return _openstudioutilitiessql.SqlFile_netSiteEnergy(self)

    def netSourceEnergy(self):
        return _openstudioutilitiessql.SqlFile_netSourceEnergy(self)

    def totalSiteEnergy(self):
        return _openstudioutilitiessql.SqlFile_totalSiteEnergy(self)

    def totalSourceEnergy(self):
        return _openstudioutilitiessql.SqlFile_totalSourceEnergy(self)

    def annualTotalCost(self, fuel):
        return _openstudioutilitiessql.SqlFile_annualTotalCost(self, fuel)

    def annualTotalCostPerBldgArea(self, fuel):
        return _openstudioutilitiessql.SqlFile_annualTotalCostPerBldgArea(self, fuel)

    def annualTotalCostPerNetConditionedBldgArea(self, fuel):
        return _openstudioutilitiessql.SqlFile_annualTotalCostPerNetConditionedBldgArea(self, fuel)

    def annualTotalUtilityCost(self):
        return _openstudioutilitiessql.SqlFile_annualTotalUtilityCost(self)

    def economicsEnergyCost(self):
        return _openstudioutilitiessql.SqlFile_economicsEnergyCost(self)

    def getElecOrGasUse(self, t_getGas=True):
        return _openstudioutilitiessql.SqlFile_getElecOrGasUse(self, t_getGas)

    def getElecOrGasCost(self, t_getGas=True):
        return _openstudioutilitiessql.SqlFile_getElecOrGasCost(self, t_getGas)

    def endUses(self):
        return _openstudioutilitiessql.SqlFile_endUses(self)

    def energyConsumptionByMonth(self, t_fuelType, t_categoryType, t_monthOfYear):
        return _openstudioutilitiessql.SqlFile_energyConsumptionByMonth(self, t_fuelType, t_categoryType, t_monthOfYear)

    def peakEnergyDemandByMonth(self, t_fuelType, t_categoryType, t_monthOfYear):
        return _openstudioutilitiessql.SqlFile_peakEnergyDemandByMonth(self, t_fuelType, t_categoryType, t_monthOfYear)

    def electricityHeating(self):
        return _openstudioutilitiessql.SqlFile_electricityHeating(self)

    def electricityCooling(self):
        return _openstudioutilitiessql.SqlFile_electricityCooling(self)

    def electricityInteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_electricityInteriorLighting(self)

    def electricityExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_electricityExteriorLighting(self)

    def electricityInteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_electricityInteriorEquipment(self)

    def electricityExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_electricityExteriorEquipment(self)

    def electricityFans(self):
        return _openstudioutilitiessql.SqlFile_electricityFans(self)

    def electricityPumps(self):
        return _openstudioutilitiessql.SqlFile_electricityPumps(self)

    def electricityHeatRejection(self):
        return _openstudioutilitiessql.SqlFile_electricityHeatRejection(self)

    def electricityHumidification(self):
        return _openstudioutilitiessql.SqlFile_electricityHumidification(self)

    def electricityHeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_electricityHeatRecovery(self)

    def electricityWaterSystems(self):
        return _openstudioutilitiessql.SqlFile_electricityWaterSystems(self)

    def electricityRefrigeration(self):
        return _openstudioutilitiessql.SqlFile_electricityRefrigeration(self)

    def electricityGenerators(self):
        return _openstudioutilitiessql.SqlFile_electricityGenerators(self)

    def electricityTotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_electricityTotalEndUses(self)

    def naturalGasHeating(self):
        return _openstudioutilitiessql.SqlFile_naturalGasHeating(self)

    def naturalGasCooling(self):
        return _openstudioutilitiessql.SqlFile_naturalGasCooling(self)

    def naturalGasInteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_naturalGasInteriorLighting(self)

    def naturalGasExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_naturalGasExteriorLighting(self)

    def naturalGasInteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_naturalGasInteriorEquipment(self)

    def naturalGasExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_naturalGasExteriorEquipment(self)

    def naturalGasFans(self):
        return _openstudioutilitiessql.SqlFile_naturalGasFans(self)

    def naturalGasPumps(self):
        return _openstudioutilitiessql.SqlFile_naturalGasPumps(self)

    def naturalGasHeatRejection(self):
        return _openstudioutilitiessql.SqlFile_naturalGasHeatRejection(self)

    def naturalGasHumidification(self):
        return _openstudioutilitiessql.SqlFile_naturalGasHumidification(self)

    def naturalGasHeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_naturalGasHeatRecovery(self)

    def naturalGasWaterSystems(self):
        return _openstudioutilitiessql.SqlFile_naturalGasWaterSystems(self)

    def naturalGasRefrigeration(self):
        return _openstudioutilitiessql.SqlFile_naturalGasRefrigeration(self)

    def naturalGasGenerators(self):
        return _openstudioutilitiessql.SqlFile_naturalGasGenerators(self)

    def naturalGasTotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_naturalGasTotalEndUses(self)

    def gasolineHeating(self):
        return _openstudioutilitiessql.SqlFile_gasolineHeating(self)

    def gasolineCooling(self):
        return _openstudioutilitiessql.SqlFile_gasolineCooling(self)

    def gasolineInteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_gasolineInteriorLighting(self)

    def gasolineExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_gasolineExteriorLighting(self)

    def gasolineInteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_gasolineInteriorEquipment(self)

    def gasolineExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_gasolineExteriorEquipment(self)

    def gasolineFans(self):
        return _openstudioutilitiessql.SqlFile_gasolineFans(self)

    def gasolinePumps(self):
        return _openstudioutilitiessql.SqlFile_gasolinePumps(self)

    def gasolineHeatRejection(self):
        return _openstudioutilitiessql.SqlFile_gasolineHeatRejection(self)

    def gasolineHumidification(self):
        return _openstudioutilitiessql.SqlFile_gasolineHumidification(self)

    def gasolineHeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_gasolineHeatRecovery(self)

    def gasolineWaterSystems(self):
        return _openstudioutilitiessql.SqlFile_gasolineWaterSystems(self)

    def gasolineRefrigeration(self):
        return _openstudioutilitiessql.SqlFile_gasolineRefrigeration(self)

    def gasolineGenerators(self):
        return _openstudioutilitiessql.SqlFile_gasolineGenerators(self)

    def gasolineTotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_gasolineTotalEndUses(self)

    def dieselHeating(self):
        return _openstudioutilitiessql.SqlFile_dieselHeating(self)

    def dieselCooling(self):
        return _openstudioutilitiessql.SqlFile_dieselCooling(self)

    def dieselInteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_dieselInteriorLighting(self)

    def dieselExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_dieselExteriorLighting(self)

    def dieselInteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_dieselInteriorEquipment(self)

    def dieselExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_dieselExteriorEquipment(self)

    def dieselFans(self):
        return _openstudioutilitiessql.SqlFile_dieselFans(self)

    def dieselPumps(self):
        return _openstudioutilitiessql.SqlFile_dieselPumps(self)

    def dieselHeatRejection(self):
        return _openstudioutilitiessql.SqlFile_dieselHeatRejection(self)

    def dieselHumidification(self):
        return _openstudioutilitiessql.SqlFile_dieselHumidification(self)

    def dieselHeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_dieselHeatRecovery(self)

    def dieselWaterSystems(self):
        return _openstudioutilitiessql.SqlFile_dieselWaterSystems(self)

    def dieselRefrigeration(self):
        return _openstudioutilitiessql.SqlFile_dieselRefrigeration(self)

    def dieselGenerators(self):
        return _openstudioutilitiessql.SqlFile_dieselGenerators(self)

    def dieselTotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_dieselTotalEndUses(self)

    def coalHeating(self):
        return _openstudioutilitiessql.SqlFile_coalHeating(self)

    def coalCooling(self):
        return _openstudioutilitiessql.SqlFile_coalCooling(self)

    def coalInteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_coalInteriorLighting(self)

    def coalExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_coalExteriorLighting(self)

    def coalInteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_coalInteriorEquipment(self)

    def coalExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_coalExteriorEquipment(self)

    def coalFans(self):
        return _openstudioutilitiessql.SqlFile_coalFans(self)

    def coalPumps(self):
        return _openstudioutilitiessql.SqlFile_coalPumps(self)

    def coalHeatRejection(self):
        return _openstudioutilitiessql.SqlFile_coalHeatRejection(self)

    def coalHumidification(self):
        return _openstudioutilitiessql.SqlFile_coalHumidification(self)

    def coalHeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_coalHeatRecovery(self)

    def coalWaterSystems(self):
        return _openstudioutilitiessql.SqlFile_coalWaterSystems(self)

    def coalRefrigeration(self):
        return _openstudioutilitiessql.SqlFile_coalRefrigeration(self)

    def coalGenerators(self):
        return _openstudioutilitiessql.SqlFile_coalGenerators(self)

    def coalTotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_coalTotalEndUses(self)

    def fuelOilNo1Heating(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1Heating(self)

    def fuelOilNo1Cooling(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1Cooling(self)

    def fuelOilNo1InteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1InteriorLighting(self)

    def fuelOilNo1ExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1ExteriorLighting(self)

    def fuelOilNo1InteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1InteriorEquipment(self)

    def fuelOilNo1ExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1ExteriorEquipment(self)

    def fuelOilNo1Fans(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1Fans(self)

    def fuelOilNo1Pumps(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1Pumps(self)

    def fuelOilNo1HeatRejection(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1HeatRejection(self)

    def fuelOilNo1Humidification(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1Humidification(self)

    def fuelOilNo1HeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1HeatRecovery(self)

    def fuelOilNo1WaterSystems(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1WaterSystems(self)

    def fuelOilNo1Refrigeration(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1Refrigeration(self)

    def fuelOilNo1Generators(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1Generators(self)

    def fuelOilNo1TotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo1TotalEndUses(self)

    def fuelOilNo2Heating(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2Heating(self)

    def fuelOilNo2Cooling(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2Cooling(self)

    def fuelOilNo2InteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2InteriorLighting(self)

    def fuelOilNo2ExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2ExteriorLighting(self)

    def fuelOilNo2InteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2InteriorEquipment(self)

    def fuelOilNo2ExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2ExteriorEquipment(self)

    def fuelOilNo2Fans(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2Fans(self)

    def fuelOilNo2Pumps(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2Pumps(self)

    def fuelOilNo2HeatRejection(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2HeatRejection(self)

    def fuelOilNo2Humidification(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2Humidification(self)

    def fuelOilNo2HeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2HeatRecovery(self)

    def fuelOilNo2WaterSystems(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2WaterSystems(self)

    def fuelOilNo2Refrigeration(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2Refrigeration(self)

    def fuelOilNo2Generators(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2Generators(self)

    def fuelOilNo2TotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_fuelOilNo2TotalEndUses(self)

    def propaneHeating(self):
        return _openstudioutilitiessql.SqlFile_propaneHeating(self)

    def propaneCooling(self):
        return _openstudioutilitiessql.SqlFile_propaneCooling(self)

    def propaneInteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_propaneInteriorLighting(self)

    def propaneExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_propaneExteriorLighting(self)

    def propaneInteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_propaneInteriorEquipment(self)

    def propaneExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_propaneExteriorEquipment(self)

    def propaneFans(self):
        return _openstudioutilitiessql.SqlFile_propaneFans(self)

    def propanePumps(self):
        return _openstudioutilitiessql.SqlFile_propanePumps(self)

    def propaneHeatRejection(self):
        return _openstudioutilitiessql.SqlFile_propaneHeatRejection(self)

    def propaneHumidification(self):
        return _openstudioutilitiessql.SqlFile_propaneHumidification(self)

    def propaneHeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_propaneHeatRecovery(self)

    def propaneWaterSystems(self):
        return _openstudioutilitiessql.SqlFile_propaneWaterSystems(self)

    def propaneRefrigeration(self):
        return _openstudioutilitiessql.SqlFile_propaneRefrigeration(self)

    def propaneGenerators(self):
        return _openstudioutilitiessql.SqlFile_propaneGenerators(self)

    def propaneTotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_propaneTotalEndUses(self)

    def otherFuel1Heating(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1Heating(self)

    def otherFuel1Cooling(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1Cooling(self)

    def otherFuel1InteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1InteriorLighting(self)

    def otherFuel1ExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1ExteriorLighting(self)

    def otherFuel1InteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1InteriorEquipment(self)

    def otherFuel1ExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1ExteriorEquipment(self)

    def otherFuel1Fans(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1Fans(self)

    def otherFuel1Pumps(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1Pumps(self)

    def otherFuel1HeatRejection(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1HeatRejection(self)

    def otherFuel1Humidification(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1Humidification(self)

    def otherFuel1HeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1HeatRecovery(self)

    def otherFuel1WaterSystems(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1WaterSystems(self)

    def otherFuel1Refrigeration(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1Refrigeration(self)

    def otherFuel1Generators(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1Generators(self)

    def otherFuel1TotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_otherFuel1TotalEndUses(self)

    def otherFuel2Heating(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2Heating(self)

    def otherFuel2Cooling(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2Cooling(self)

    def otherFuel2InteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2InteriorLighting(self)

    def otherFuel2ExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2ExteriorLighting(self)

    def otherFuel2InteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2InteriorEquipment(self)

    def otherFuel2ExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2ExteriorEquipment(self)

    def otherFuel2Fans(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2Fans(self)

    def otherFuel2Pumps(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2Pumps(self)

    def otherFuel2HeatRejection(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2HeatRejection(self)

    def otherFuel2Humidification(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2Humidification(self)

    def otherFuel2HeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2HeatRecovery(self)

    def otherFuel2WaterSystems(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2WaterSystems(self)

    def otherFuel2Refrigeration(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2Refrigeration(self)

    def otherFuel2Generators(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2Generators(self)

    def otherFuel2TotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_otherFuel2TotalEndUses(self)

    def districtCoolingHeating(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingHeating(self)

    def districtCoolingCooling(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingCooling(self)

    def districtCoolingInteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingInteriorLighting(self)

    def districtCoolingExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingExteriorLighting(self)

    def districtCoolingInteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingInteriorEquipment(self)

    def districtCoolingExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingExteriorEquipment(self)

    def districtCoolingFans(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingFans(self)

    def districtCoolingPumps(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingPumps(self)

    def districtCoolingHeatRejection(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingHeatRejection(self)

    def districtCoolingHumidification(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingHumidification(self)

    def districtCoolingHeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingHeatRecovery(self)

    def districtCoolingWaterSystems(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingWaterSystems(self)

    def districtCoolingRefrigeration(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingRefrigeration(self)

    def districtCoolingGenerators(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingGenerators(self)

    def districtCoolingTotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_districtCoolingTotalEndUses(self)

    def districtHeatingHeating(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingHeating(self)

    def districtHeatingCooling(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingCooling(self)

    def districtHeatingInteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingInteriorLighting(self)

    def districtHeatingExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingExteriorLighting(self)

    def districtHeatingInteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingInteriorEquipment(self)

    def districtHeatingExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingExteriorEquipment(self)

    def districtHeatingFans(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingFans(self)

    def districtHeatingPumps(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingPumps(self)

    def districtHeatingHeatRejection(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingHeatRejection(self)

    def districtHeatingHumidification(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingHumidification(self)

    def districtHeatingHeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingHeatRecovery(self)

    def districtHeatingWaterSystems(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterSystems(self)

    def districtHeatingRefrigeration(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingRefrigeration(self)

    def districtHeatingGenerators(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingGenerators(self)

    def districtHeatingTotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingTotalEndUses(self)

    def districtHeatingWaterHeating(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterHeating(self)

    def districtHeatingWaterCooling(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterCooling(self)

    def districtHeatingWaterInteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterInteriorLighting(self)

    def districtHeatingWaterExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterExteriorLighting(self)

    def districtHeatingWaterInteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterInteriorEquipment(self)

    def districtHeatingWaterExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterExteriorEquipment(self)

    def districtHeatingWaterFans(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterFans(self)

    def districtHeatingWaterPumps(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterPumps(self)

    def districtHeatingWaterHeatRejection(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterHeatRejection(self)

    def districtHeatingWaterHumidification(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterHumidification(self)

    def districtHeatingWaterHeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterHeatRecovery(self)

    def districtHeatingWaterWaterSystems(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterWaterSystems(self)

    def districtHeatingWaterRefrigeration(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterRefrigeration(self)

    def districtHeatingWaterGenerators(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterGenerators(self)

    def districtHeatingWaterTotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingWaterTotalEndUses(self)

    def districtHeatingSteamHeating(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamHeating(self)

    def districtHeatingSteamCooling(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamCooling(self)

    def districtHeatingSteamInteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamInteriorLighting(self)

    def districtHeatingSteamExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamExteriorLighting(self)

    def districtHeatingSteamInteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamInteriorEquipment(self)

    def districtHeatingSteamExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamExteriorEquipment(self)

    def districtHeatingSteamFans(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamFans(self)

    def districtHeatingSteamPumps(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamPumps(self)

    def districtHeatingSteamHeatRejection(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamHeatRejection(self)

    def districtHeatingSteamHumidification(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamHumidification(self)

    def districtHeatingSteamHeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamHeatRecovery(self)

    def districtHeatingSteamWaterSystems(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamWaterSystems(self)

    def districtHeatingSteamRefrigeration(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamRefrigeration(self)

    def districtHeatingSteamGenerators(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamGenerators(self)

    def districtHeatingSteamTotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_districtHeatingSteamTotalEndUses(self)

    def waterHeating(self):
        return _openstudioutilitiessql.SqlFile_waterHeating(self)

    def waterCooling(self):
        return _openstudioutilitiessql.SqlFile_waterCooling(self)

    def waterInteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_waterInteriorLighting(self)

    def waterExteriorLighting(self):
        return _openstudioutilitiessql.SqlFile_waterExteriorLighting(self)

    def waterInteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_waterInteriorEquipment(self)

    def waterExteriorEquipment(self):
        return _openstudioutilitiessql.SqlFile_waterExteriorEquipment(self)

    def waterFans(self):
        return _openstudioutilitiessql.SqlFile_waterFans(self)

    def waterPumps(self):
        return _openstudioutilitiessql.SqlFile_waterPumps(self)

    def waterHeatRejection(self):
        return _openstudioutilitiessql.SqlFile_waterHeatRejection(self)

    def waterHumidification(self):
        return _openstudioutilitiessql.SqlFile_waterHumidification(self)

    def waterHeatRecovery(self):
        return _openstudioutilitiessql.SqlFile_waterHeatRecovery(self)

    def waterWaterSystems(self):
        return _openstudioutilitiessql.SqlFile_waterWaterSystems(self)

    def waterRefrigeration(self):
        return _openstudioutilitiessql.SqlFile_waterRefrigeration(self)

    def waterGenerators(self):
        return _openstudioutilitiessql.SqlFile_waterGenerators(self)

    def waterTotalEndUses(self):
        return _openstudioutilitiessql.SqlFile_waterTotalEndUses(self)

    def hoursHeatingSetpointNotMet(self):
        return _openstudioutilitiessql.SqlFile_hoursHeatingSetpointNotMet(self)

    def hoursCoolingSetpointNotMet(self):
        return _openstudioutilitiessql.SqlFile_hoursCoolingSetpointNotMet(self)

    def daylightSavingsPeriod(self):
        return _openstudioutilitiessql.SqlFile_daylightSavingsPeriod(self)

    def energyPlusVersion(self):
        return _openstudioutilitiessql.SqlFile_energyPlusVersion(self)

    def availableTimeSeries(self):
        return _openstudioutilitiessql.SqlFile_availableTimeSeries(self)

    def environmentType(self, envPeriod):
        return _openstudioutilitiessql.SqlFile_environmentType(self, envPeriod)

    def availableEnvPeriods(self):
        return _openstudioutilitiessql.SqlFile_availableEnvPeriods(self)

    def availableReportingFrequencies(self, envPeriod):
        return _openstudioutilitiessql.SqlFile_availableReportingFrequencies(self, envPeriod)

    def reportingFrequencyFromDB(self, dbReportingFrequency):
        return _openstudioutilitiessql.SqlFile_reportingFrequencyFromDB(self, dbReportingFrequency)

    def availableVariableNames(self, envPeriod, reportingFrequency):
        return _openstudioutilitiessql.SqlFile_availableVariableNames(self, envPeriod, reportingFrequency)

    def availableKeyValues(self, envPeriod, reportingFrequency, timeSeriesName):
        return _openstudioutilitiessql.SqlFile_availableKeyValues(self, envPeriod, reportingFrequency, timeSeriesName)

    def runPeriodValue(self, envPeriod, timeSeriesName, keyValue):
        return _openstudioutilitiessql.SqlFile_runPeriodValue(self, envPeriod, timeSeriesName, keyValue)

    def expandQuery(self, query):
        return _openstudioutilitiessql.SqlFile_expandQuery(self, query)

    def timeSeries(self, *args):
        return _openstudioutilitiessql.SqlFile_timeSeries(self, *args)

    def illuminanceMapNames(self, *args):
        return _openstudioutilitiessql.SqlFile_illuminanceMapNames(self, *args)

    def illuminanceMapZoneNames(self, *args):
        return _openstudioutilitiessql.SqlFile_illuminanceMapZoneNames(self, *args)

    def illuminanceMapRefPt(self, *args):
        return _openstudioutilitiessql.SqlFile_illuminanceMapRefPt(self, *args)

    def illuminanceMapMinValue(self, *args):
        return _openstudioutilitiessql.SqlFile_illuminanceMapMinValue(self, *args)

    def illuminanceMapMaxValue(self, *args):
        return _openstudioutilitiessql.SqlFile_illuminanceMapMaxValue(self, *args)

    def illuminanceMapIndex(self, name):
        return _openstudioutilitiessql.SqlFile_illuminanceMapIndex(self, name)

    def illuminanceMapX(self, *args):
        return _openstudioutilitiessql.SqlFile_illuminanceMapX(self, *args)

    def illuminanceMapY(self, *args):
        return _openstudioutilitiessql.SqlFile_illuminanceMapY(self, *args)

    def illuminanceMapHourlyReportIndex(self, mapIndex, dateTime):
        return _openstudioutilitiessql.SqlFile_illuminanceMapHourlyReportIndex(self, mapIndex, dateTime)

    def illuminanceMapDate(self, hourlyReportIndex):
        return _openstudioutilitiessql.SqlFile_illuminanceMapDate(self, hourlyReportIndex)

    def illuminanceMapHourlyReportIndicesDates(self, *args):
        return _openstudioutilitiessql.SqlFile_illuminanceMapHourlyReportIndicesDates(self, *args)

    def illuminanceMapHourlyReportIndices(self, *args):
        return _openstudioutilitiessql.SqlFile_illuminanceMapHourlyReportIndices(self, *args)

    def illuminanceMap(self, *args):
        return _openstudioutilitiessql.SqlFile_illuminanceMap(self, *args)

    def getSummaryData(self):
        return _openstudioutilitiessql.SqlFile_getSummaryData(self)

    def insertZone(self, t_name, t_relNorth, t_originX, t_originY, t_originZ, t_centroidX, t_centroidY, t_centroidZ, t_ofType, t_multiplier, t_listMultiplier, t_minimumX, t_maximumX, t_minimumY, t_maximumY, t_minimumZ, t_maximumZ, t_ceilingHeight, t_volume, t_insideConvectionAlgo, t_outsideConvectionAlgo, t_floorArea, t_extGrossWallArea, t_extNetWallArea, t_extWindowArea, t_isPartOfTotalArea):
        return _openstudioutilitiessql.SqlFile_insertZone(self, t_name, t_relNorth, t_originX, t_originY, t_originZ, t_centroidX, t_centroidY, t_centroidZ, t_ofType, t_multiplier, t_listMultiplier, t_minimumX, t_maximumX, t_minimumY, t_maximumY, t_minimumZ, t_maximumZ, t_ceilingHeight, t_volume, t_insideConvectionAlgo, t_outsideConvectionAlgo, t_floorArea, t_extGrossWallArea, t_extNetWallArea, t_extWindowArea, t_isPartOfTotalArea)

    def insertIlluminanceMap(self, t_zoneName, t_name, t_environmentName, t_times, t_xs, t_ys, t_z, t_maps):
        return _openstudioutilitiessql.SqlFile_insertIlluminanceMap(self, t_zoneName, t_name, t_environmentName, t_times, t_xs, t_ys, t_z, t_maps)

    def execAndReturnFirstDouble(self, statement):
        return _openstudioutilitiessql.SqlFile_execAndReturnFirstDouble(self, statement)

    def execAndReturnFirstInt(self, statement):
        return _openstudioutilitiessql.SqlFile_execAndReturnFirstInt(self, statement)

    def execAndReturnFirstString(self, statement):
        return _openstudioutilitiessql.SqlFile_execAndReturnFirstString(self, statement)

    def execAndReturnVectorOfDouble(self, statement):
        return _openstudioutilitiessql.SqlFile_execAndReturnVectorOfDouble(self, statement)

    def execAndReturnVectorOfInt(self, statement):
        return _openstudioutilitiessql.SqlFile_execAndReturnVectorOfInt(self, statement)

    def execAndReturnVectorOfString(self, statement):
        return _openstudioutilitiessql.SqlFile_execAndReturnVectorOfString(self, statement)

    def execute(self, statement):
        return _openstudioutilitiessql.SqlFile_execute(self, statement)

    def insertTimeSeriesData(self, t_variableType, t_indexGroup, t_timestepType, t_keyValue, t_variableName, t_reportingFrequency, t_scheduleName, t_variableUnits, t_timeSeries):
        return _openstudioutilitiessql.SqlFile_insertTimeSeriesData(self, t_variableType, t_indexGroup, t_timestepType, t_keyValue, t_variableName, t_reportingFrequency, t_scheduleName, t_variableUnits, t_timeSeries)

    def __eq__(self, other):
        return _openstudioutilitiessql.SqlFile___eq__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiessql.SqlFile___lt__(self, other)

# Register SqlFile in _openstudioutilitiessql:
_openstudioutilitiessql.SqlFile_swigregister(SqlFile)
class EnvironmentIdentifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiessql.EnvironmentIdentifier_swiginit(self, _openstudioutilitiessql.new_EnvironmentIdentifier(*args))

    def type(self):
        return _openstudioutilitiessql.EnvironmentIdentifier_type(self)

    def name(self):
        return _openstudioutilitiessql.EnvironmentIdentifier_name(self)
    __swig_destroy__ = _openstudioutilitiessql.delete_EnvironmentIdentifier

# Register EnvironmentIdentifier in _openstudioutilitiessql:
_openstudioutilitiessql.EnvironmentIdentifier_swigregister(EnvironmentIdentifier)
class TimeSeriesIdentifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiessql.TimeSeriesIdentifier_swiginit(self, _openstudioutilitiessql.new_TimeSeriesIdentifier(*args))

    def name(self):
        return _openstudioutilitiessql.TimeSeriesIdentifier_name(self)

    def regex(self):
        return _openstudioutilitiessql.TimeSeriesIdentifier_regex(self)
    __swig_destroy__ = _openstudioutilitiessql.delete_TimeSeriesIdentifier

# Register TimeSeriesIdentifier in _openstudioutilitiessql:
_openstudioutilitiessql.TimeSeriesIdentifier_swigregister(TimeSeriesIdentifier)
class KeyValueIdentifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiessql.KeyValueIdentifier_swiginit(self, _openstudioutilitiessql.new_KeyValueIdentifier(*args))

    def names(self):
        return _openstudioutilitiessql.KeyValueIdentifier_names(self)

    def regex(self):
        return _openstudioutilitiessql.KeyValueIdentifier_regex(self)
    __swig_destroy__ = _openstudioutilitiessql.delete_KeyValueIdentifier

# Register KeyValueIdentifier in _openstudioutilitiessql:
_openstudioutilitiessql.KeyValueIdentifier_swigregister(KeyValueIdentifier)
class SqlFileTimeSeriesQuery(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiessql.SqlFileTimeSeriesQuery_swiginit(self, _openstudioutilitiessql.new_SqlFileTimeSeriesQuery(*args))

    def environment(self):
        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_environment(self)

    def reportingFrequency(self):
        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_reportingFrequency(self)

    def timeSeries(self):
        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_timeSeries(self)

    def keyValues(self):
        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_keyValues(self)

    def vetted(self):
        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_vetted(self)

    def setEnvironment(self, envId):
        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_setEnvironment(self, envId)

    def setReportingFrequency(self, rf):
        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_setReportingFrequency(self, rf)

    def setTimeSeries(self, tsId):
        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_setTimeSeries(self, tsId)

    def setKeyValues(self, kvId):
        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_setKeyValues(self, kvId)

    def clearEnvironment(self):
        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_clearEnvironment(self)

    def clearReportingFrequency(self):
        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_clearReportingFrequency(self)

    def clearTimeSeries(self):
        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_clearTimeSeries(self)

    def clearKeyValues(self):
        return _openstudioutilitiessql.SqlFileTimeSeriesQuery_clearKeyValues(self)
    __swig_destroy__ = _openstudioutilitiessql.delete_SqlFileTimeSeriesQuery

# Register SqlFileTimeSeriesQuery in _openstudioutilitiessql:
_openstudioutilitiessql.SqlFileTimeSeriesQuery_swigregister(SqlFileTimeSeriesQuery)

def environmentPeriods(queries):
    return _openstudioutilitiessql.environmentPeriods(queries)

def reportingFrequencies(queries):
    return _openstudioutilitiessql.reportingFrequencies(queries)

def timeSeriesNames(queries):
    return _openstudioutilitiessql.timeSeriesNames(queries)
class ReportingFrequency(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiessql.ReportingFrequency_swiginit(self, _openstudioutilitiessql.new_ReportingFrequency(*args))

    def valueName(self):
        return _openstudioutilitiessql.ReportingFrequency_valueName(self)

    def value(self):
        return _openstudioutilitiessql.ReportingFrequency_value(self)

    def valueDescription(self):
        return _openstudioutilitiessql.ReportingFrequency_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiessql.ReportingFrequency___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiessql.ReportingFrequency___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiessql.ReportingFrequency___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiessql.ReportingFrequency___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiessql.ReportingFrequency___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiessql.ReportingFrequency___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiessql.ReportingFrequency_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiessql.ReportingFrequency_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiessql.ReportingFrequency_getLookupMap()

    def __str__(self):
        return _openstudioutilitiessql.ReportingFrequency___str__(self)
    __swig_destroy__ = _openstudioutilitiessql.delete_ReportingFrequency

# Register ReportingFrequency in _openstudioutilitiessql:
_openstudioutilitiessql.ReportingFrequency_swigregister(ReportingFrequency)
class EnvironmentType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiessql.EnvironmentType_swiginit(self, _openstudioutilitiessql.new_EnvironmentType(*args))

    def valueName(self):
        return _openstudioutilitiessql.EnvironmentType_valueName(self)

    def value(self):
        return _openstudioutilitiessql.EnvironmentType_value(self)

    def valueDescription(self):
        return _openstudioutilitiessql.EnvironmentType_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiessql.EnvironmentType___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiessql.EnvironmentType___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiessql.EnvironmentType___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiessql.EnvironmentType___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiessql.EnvironmentType___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiessql.EnvironmentType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiessql.EnvironmentType_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiessql.EnvironmentType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiessql.EnvironmentType_getLookupMap()

    def __str__(self):
        return _openstudioutilitiessql.EnvironmentType___str__(self)
    __swig_destroy__ = _openstudioutilitiessql.delete_EnvironmentType

# Register EnvironmentType in _openstudioutilitiessql:
_openstudioutilitiessql.EnvironmentType_swigregister(EnvironmentType)

