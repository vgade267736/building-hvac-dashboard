# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelgeometry
else:
    import _openstudiomodelgeometry

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SwigPyIterator

    def value(self):
        return _openstudiomodelgeometry.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudiomodelgeometry.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudiomodelgeometry.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudiomodelgeometry.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudiomodelgeometry.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudiomodelgeometry.SwigPyIterator_copy(self)

    def next(self):
        return _openstudiomodelgeometry.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudiomodelgeometry.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudiomodelgeometry.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudiomodelgeometry.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudiomodelgeometry.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudiomodelgeometry.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudiomodelgeometry.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudiomodelgeometry.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudiomodelgeometry.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudiomodelgeometry.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelgeometry:
_openstudiomodelgeometry.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudiomodelgeometry.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudioutilitiesxml

# Import common modules
import typing
import warnings

from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources

Model = openstudiomodelcore.Model

class OptionalSite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSite_swiginit(self, _openstudiomodelgeometry.new_OptionalSite(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSite_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSite___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSite___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSite_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSite_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSite_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSite_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSite_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSite_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSite

# Register OptionalSite in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSite_swigregister(OptionalSite)
class OptionalFacility(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalFacility_swiginit(self, _openstudiomodelgeometry.new_OptionalFacility(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalFacility_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalFacility___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalFacility___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalFacility_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalFacility_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalFacility_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalFacility_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalFacility_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalFacility_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalFacility

# Register OptionalFacility in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalFacility_swigregister(OptionalFacility)
class OptionalBuilding(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalBuilding_swiginit(self, _openstudiomodelgeometry.new_OptionalBuilding(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalBuilding_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalBuilding___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalBuilding___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalBuilding_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalBuilding_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalBuilding_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalBuilding_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalBuilding_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalBuilding_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalBuilding

# Register OptionalBuilding in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalBuilding_swigregister(OptionalBuilding)
class BuildingStoryVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.BuildingStoryVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.BuildingStoryVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.BuildingStoryVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.BuildingStoryVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.BuildingStoryVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.BuildingStoryVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.BuildingStoryVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.BuildingStoryVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.BuildingStoryVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.BuildingStoryVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.BuildingStoryVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.BuildingStoryVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.BuildingStoryVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.BuildingStoryVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.BuildingStoryVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.BuildingStoryVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.BuildingStoryVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.BuildingStoryVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.BuildingStoryVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.BuildingStoryVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.BuildingStoryVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.BuildingStoryVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.BuildingStoryVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.BuildingStoryVector_swiginit(self, _openstudiomodelgeometry.new_BuildingStoryVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.BuildingStoryVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.BuildingStoryVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.BuildingStoryVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.BuildingStoryVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.BuildingStoryVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.BuildingStoryVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.BuildingStoryVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.BuildingStoryVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_BuildingStoryVector

# Register BuildingStoryVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.BuildingStoryVector_swigregister(BuildingStoryVector)
class OptionalBuildingStory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalBuildingStory_swiginit(self, _openstudiomodelgeometry.new_OptionalBuildingStory(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalBuildingStory_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalBuildingStory___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalBuildingStory___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalBuildingStory_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalBuildingStory_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalBuildingStory_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalBuildingStory_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalBuildingStory_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalBuildingStory_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalBuildingStory

# Register OptionalBuildingStory in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalBuildingStory_swigregister(OptionalBuildingStory)
class BuildingUnitVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.BuildingUnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.BuildingUnitVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.BuildingUnitVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.BuildingUnitVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.BuildingUnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.BuildingUnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.BuildingUnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.BuildingUnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.BuildingUnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.BuildingUnitVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.BuildingUnitVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.BuildingUnitVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.BuildingUnitVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.BuildingUnitVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.BuildingUnitVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.BuildingUnitVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.BuildingUnitVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.BuildingUnitVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.BuildingUnitVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.BuildingUnitVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.BuildingUnitVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.BuildingUnitVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.BuildingUnitVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.BuildingUnitVector_swiginit(self, _openstudiomodelgeometry.new_BuildingUnitVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.BuildingUnitVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.BuildingUnitVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.BuildingUnitVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.BuildingUnitVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.BuildingUnitVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.BuildingUnitVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.BuildingUnitVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.BuildingUnitVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_BuildingUnitVector

# Register BuildingUnitVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.BuildingUnitVector_swigregister(BuildingUnitVector)
class OptionalBuildingUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalBuildingUnit_swiginit(self, _openstudiomodelgeometry.new_OptionalBuildingUnit(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalBuildingUnit_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalBuildingUnit___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalBuildingUnit___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalBuildingUnit_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalBuildingUnit_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalBuildingUnit_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalBuildingUnit_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalBuildingUnit_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalBuildingUnit_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalBuildingUnit

# Register OptionalBuildingUnit in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalBuildingUnit_swigregister(OptionalBuildingUnit)
class PlanarSurfaceGroupVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.PlanarSurfaceGroupVector_swiginit(self, _openstudiomodelgeometry.new_PlanarSurfaceGroupVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroupVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_PlanarSurfaceGroupVector

# Register PlanarSurfaceGroupVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.PlanarSurfaceGroupVector_swigregister(PlanarSurfaceGroupVector)
class OptionalPlanarSurfaceGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalPlanarSurfaceGroup_swiginit(self, _openstudiomodelgeometry.new_OptionalPlanarSurfaceGroup(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalPlanarSurfaceGroup_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalPlanarSurfaceGroup___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalPlanarSurfaceGroup___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalPlanarSurfaceGroup_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalPlanarSurfaceGroup_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalPlanarSurfaceGroup_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalPlanarSurfaceGroup_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalPlanarSurfaceGroup_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalPlanarSurfaceGroup_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalPlanarSurfaceGroup

# Register OptionalPlanarSurfaceGroup in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalPlanarSurfaceGroup_swigregister(OptionalPlanarSurfaceGroup)
class SpaceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SpaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SpaceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SpaceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SpaceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SpaceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SpaceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SpaceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SpaceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SpaceVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SpaceVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SpaceVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SpaceVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SpaceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SpaceVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SpaceVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SpaceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SpaceVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SpaceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SpaceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SpaceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SpaceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceVector_swiginit(self, _openstudiomodelgeometry.new_SpaceVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SpaceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SpaceVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SpaceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SpaceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SpaceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SpaceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SpaceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SpaceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceVector

# Register SpaceVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceVector_swigregister(SpaceVector)
class OptionalSpace(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSpace_swiginit(self, _openstudiomodelgeometry.new_OptionalSpace(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSpace_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSpace___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSpace___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSpace_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSpace_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSpace_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSpace_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSpace_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSpace_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSpace

# Register OptionalSpace in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSpace_swigregister(OptionalSpace)
class SpaceItemVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SpaceItemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SpaceItemVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SpaceItemVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SpaceItemVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceItemVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SpaceItemVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceItemVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SpaceItemVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SpaceItemVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SpaceItemVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SpaceItemVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SpaceItemVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SpaceItemVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SpaceItemVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SpaceItemVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SpaceItemVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SpaceItemVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SpaceItemVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SpaceItemVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SpaceItemVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SpaceItemVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SpaceItemVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SpaceItemVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceItemVector_swiginit(self, _openstudiomodelgeometry.new_SpaceItemVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SpaceItemVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SpaceItemVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SpaceItemVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SpaceItemVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SpaceItemVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SpaceItemVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SpaceItemVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SpaceItemVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceItemVector

# Register SpaceItemVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceItemVector_swigregister(SpaceItemVector)
class OptionalSpaceItem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSpaceItem_swiginit(self, _openstudiomodelgeometry.new_OptionalSpaceItem(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSpaceItem_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSpaceItem___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSpaceItem___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSpaceItem_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSpaceItem_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSpaceItem_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSpaceItem_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSpaceItem_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSpaceItem_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSpaceItem

# Register OptionalSpaceItem in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSpaceItem_swigregister(OptionalSpaceItem)
class SpaceLoadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SpaceLoadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SpaceLoadVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SpaceLoadVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SpaceLoadVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceLoadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SpaceLoadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceLoadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SpaceLoadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SpaceLoadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SpaceLoadVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SpaceLoadVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SpaceLoadVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SpaceLoadVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SpaceLoadVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SpaceLoadVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SpaceLoadVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SpaceLoadVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SpaceLoadVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SpaceLoadVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SpaceLoadVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SpaceLoadVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SpaceLoadVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SpaceLoadVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceLoadVector_swiginit(self, _openstudiomodelgeometry.new_SpaceLoadVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SpaceLoadVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SpaceLoadVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SpaceLoadVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SpaceLoadVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SpaceLoadVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SpaceLoadVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SpaceLoadVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SpaceLoadVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceLoadVector

# Register SpaceLoadVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceLoadVector_swigregister(SpaceLoadVector)
class OptionalSpaceLoad(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSpaceLoad_swiginit(self, _openstudiomodelgeometry.new_OptionalSpaceLoad(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSpaceLoad_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSpaceLoad___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSpaceLoad___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSpaceLoad_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSpaceLoad_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSpaceLoad_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSpaceLoad_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSpaceLoad_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSpaceLoad_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSpaceLoad

# Register OptionalSpaceLoad in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSpaceLoad_swigregister(OptionalSpaceLoad)
class SpaceLoadInstanceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceLoadInstanceVector_swiginit(self, _openstudiomodelgeometry.new_SpaceLoadInstanceVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SpaceLoadInstanceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceLoadInstanceVector

# Register SpaceLoadInstanceVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceLoadInstanceVector_swigregister(SpaceLoadInstanceVector)
class OptionalSpaceLoadInstance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSpaceLoadInstance_swiginit(self, _openstudiomodelgeometry.new_OptionalSpaceLoadInstance(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSpaceLoadInstance_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSpaceLoadInstance___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSpaceLoadInstance___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSpaceLoadInstance_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSpaceLoadInstance_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSpaceLoadInstance_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSpaceLoadInstance_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSpaceLoadInstance_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSpaceLoadInstance_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSpaceLoadInstance

# Register OptionalSpaceLoadInstance in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSpaceLoadInstance_swigregister(OptionalSpaceLoadInstance)
class LightsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.LightsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.LightsVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.LightsVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.LightsVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.LightsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.LightsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.LightsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.LightsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.LightsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.LightsVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.LightsVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.LightsVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.LightsVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.LightsVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.LightsVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.LightsVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.LightsVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.LightsVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.LightsVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.LightsVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.LightsVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.LightsVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.LightsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.LightsVector_swiginit(self, _openstudiomodelgeometry.new_LightsVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.LightsVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.LightsVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.LightsVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.LightsVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.LightsVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.LightsVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.LightsVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.LightsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_LightsVector

# Register LightsVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.LightsVector_swigregister(LightsVector)
class OptionalLights(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalLights_swiginit(self, _openstudiomodelgeometry.new_OptionalLights(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalLights_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalLights___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalLights___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalLights_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalLights_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalLights_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalLights_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalLights_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalLights_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalLights

# Register OptionalLights in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalLights_swigregister(OptionalLights)
class PlanarSurfaceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.PlanarSurfaceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.PlanarSurfaceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.PlanarSurfaceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.PlanarSurfaceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.PlanarSurfaceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.PlanarSurfaceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.PlanarSurfaceVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.PlanarSurfaceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.PlanarSurfaceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.PlanarSurfaceVector_swiginit(self, _openstudiomodelgeometry.new_PlanarSurfaceVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.PlanarSurfaceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.PlanarSurfaceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.PlanarSurfaceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.PlanarSurfaceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.PlanarSurfaceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.PlanarSurfaceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_PlanarSurfaceVector

# Register PlanarSurfaceVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.PlanarSurfaceVector_swigregister(PlanarSurfaceVector)
class OptionalPlanarSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalPlanarSurface_swiginit(self, _openstudiomodelgeometry.new_OptionalPlanarSurface(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalPlanarSurface_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalPlanarSurface___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalPlanarSurface___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalPlanarSurface_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalPlanarSurface_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalPlanarSurface_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalPlanarSurface_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalPlanarSurface_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalPlanarSurface_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalPlanarSurface

# Register OptionalPlanarSurface in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalPlanarSurface_swigregister(OptionalPlanarSurface)
class DefaultConstructionSetVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.DefaultConstructionSetVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.DefaultConstructionSetVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.DefaultConstructionSetVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.DefaultConstructionSetVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.DefaultConstructionSetVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.DefaultConstructionSetVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.DefaultConstructionSetVector_swiginit(self, _openstudiomodelgeometry.new_DefaultConstructionSetVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.DefaultConstructionSetVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_DefaultConstructionSetVector

# Register DefaultConstructionSetVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.DefaultConstructionSetVector_swigregister(DefaultConstructionSetVector)
class OptionalDefaultConstructionSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalDefaultConstructionSet_swiginit(self, _openstudiomodelgeometry.new_OptionalDefaultConstructionSet(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalDefaultConstructionSet_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalDefaultConstructionSet___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalDefaultConstructionSet___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalDefaultConstructionSet_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalDefaultConstructionSet_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalDefaultConstructionSet_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalDefaultConstructionSet_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalDefaultConstructionSet_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalDefaultConstructionSet_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalDefaultConstructionSet

# Register OptionalDefaultConstructionSet in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalDefaultConstructionSet_swigregister(OptionalDefaultConstructionSet)
class SurfaceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SurfaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SurfaceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SurfaceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SurfaceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SurfaceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SurfaceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SurfaceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SurfaceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SurfaceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SurfaceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SurfaceVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SurfaceVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SurfaceVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SurfaceVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SurfaceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SurfaceVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SurfaceVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SurfaceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SurfaceVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SurfaceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SurfaceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SurfaceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SurfaceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfaceVector_swiginit(self, _openstudiomodelgeometry.new_SurfaceVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SurfaceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SurfaceVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SurfaceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SurfaceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SurfaceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SurfaceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SurfaceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SurfaceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfaceVector

# Register SurfaceVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfaceVector_swigregister(SurfaceVector)
class OptionalSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSurface_swiginit(self, _openstudiomodelgeometry.new_OptionalSurface(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSurface_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSurface___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSurface___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSurface_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSurface_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSurface_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSurface_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSurface_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSurface_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSurface

# Register OptionalSurface in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSurface_swigregister(OptionalSurface)
class SurfaceIntersectionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SurfaceIntersectionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SurfaceIntersectionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SurfaceIntersectionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SurfaceIntersectionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SurfaceIntersectionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SurfaceIntersectionVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfaceIntersectionVector_swiginit(self, _openstudiomodelgeometry.new_SurfaceIntersectionVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SurfaceIntersectionVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfaceIntersectionVector

# Register SurfaceIntersectionVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfaceIntersectionVector_swigregister(SurfaceIntersectionVector)
class OptionalSurfaceIntersection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSurfaceIntersection_swiginit(self, _openstudiomodelgeometry.new_OptionalSurfaceIntersection(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSurfaceIntersection_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSurfaceIntersection___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSurfaceIntersection___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSurfaceIntersection_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSurfaceIntersection_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSurfaceIntersection_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSurfaceIntersection_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSurfaceIntersection_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSurfaceIntersection_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSurfaceIntersection

# Register OptionalSurfaceIntersection in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSurfaceIntersection_swigregister(OptionalSurfaceIntersection)
class SubSurfaceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SubSurfaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SubSurfaceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SubSurfaceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SubSurfaceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SubSurfaceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SubSurfaceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SubSurfaceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SubSurfaceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SubSurfaceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SubSurfaceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SubSurfaceVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SubSurfaceVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SubSurfaceVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SubSurfaceVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SubSurfaceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SubSurfaceVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SubSurfaceVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SubSurfaceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SubSurfaceVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SubSurfaceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SubSurfaceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SubSurfaceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SubSurfaceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SubSurfaceVector_swiginit(self, _openstudiomodelgeometry.new_SubSurfaceVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SubSurfaceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SubSurfaceVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SubSurfaceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SubSurfaceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SubSurfaceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SubSurfaceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SubSurfaceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SubSurfaceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SubSurfaceVector

# Register SubSurfaceVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SubSurfaceVector_swigregister(SubSurfaceVector)
class OptionalSubSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSubSurface_swiginit(self, _openstudiomodelgeometry.new_OptionalSubSurface(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSubSurface_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSubSurface___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSubSurface___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSubSurface_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSubSurface_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSubSurface_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSubSurface_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSubSurface_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSubSurface_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSubSurface

# Register OptionalSubSurface in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSubSurface_swigregister(OptionalSubSurface)
class ShadingSurfaceGroupVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.ShadingSurfaceGroupVector_swiginit(self, _openstudiomodelgeometry.new_ShadingSurfaceGroupVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroupVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_ShadingSurfaceGroupVector

# Register ShadingSurfaceGroupVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.ShadingSurfaceGroupVector_swigregister(ShadingSurfaceGroupVector)
class OptionalShadingSurfaceGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalShadingSurfaceGroup_swiginit(self, _openstudiomodelgeometry.new_OptionalShadingSurfaceGroup(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalShadingSurfaceGroup_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalShadingSurfaceGroup___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalShadingSurfaceGroup___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalShadingSurfaceGroup_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalShadingSurfaceGroup_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalShadingSurfaceGroup_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalShadingSurfaceGroup_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalShadingSurfaceGroup_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalShadingSurfaceGroup_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalShadingSurfaceGroup

# Register OptionalShadingSurfaceGroup in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalShadingSurfaceGroup_swigregister(OptionalShadingSurfaceGroup)
class ShadingSurfaceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.ShadingSurfaceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.ShadingSurfaceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.ShadingSurfaceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.ShadingSurfaceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.ShadingSurfaceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.ShadingSurfaceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.ShadingSurfaceVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.ShadingSurfaceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.ShadingSurfaceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.ShadingSurfaceVector_swiginit(self, _openstudiomodelgeometry.new_ShadingSurfaceVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.ShadingSurfaceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.ShadingSurfaceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.ShadingSurfaceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.ShadingSurfaceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.ShadingSurfaceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.ShadingSurfaceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_ShadingSurfaceVector

# Register ShadingSurfaceVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.ShadingSurfaceVector_swigregister(ShadingSurfaceVector)
class OptionalShadingSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalShadingSurface_swiginit(self, _openstudiomodelgeometry.new_OptionalShadingSurface(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalShadingSurface_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalShadingSurface___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalShadingSurface___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalShadingSurface_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalShadingSurface_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalShadingSurface_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalShadingSurface_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalShadingSurface_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalShadingSurface_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalShadingSurface

# Register OptionalShadingSurface in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalShadingSurface_swigregister(OptionalShadingSurface)
class InteriorPartitionSurfaceGroupVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_swiginit(self, _openstudiomodelgeometry.new_InteriorPartitionSurfaceGroupVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_InteriorPartitionSurfaceGroupVector

# Register InteriorPartitionSurfaceGroupVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.InteriorPartitionSurfaceGroupVector_swigregister(InteriorPartitionSurfaceGroupVector)
class OptionalInteriorPartitionSurfaceGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalInteriorPartitionSurfaceGroup_swiginit(self, _openstudiomodelgeometry.new_OptionalInteriorPartitionSurfaceGroup(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurfaceGroup_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurfaceGroup___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurfaceGroup___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurfaceGroup_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurfaceGroup_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurfaceGroup_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurfaceGroup_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurfaceGroup_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurfaceGroup_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalInteriorPartitionSurfaceGroup

# Register OptionalInteriorPartitionSurfaceGroup in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalInteriorPartitionSurfaceGroup_swigregister(OptionalInteriorPartitionSurfaceGroup)
class InteriorPartitionSurfaceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.InteriorPartitionSurfaceVector_swiginit(self, _openstudiomodelgeometry.new_InteriorPartitionSurfaceVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_InteriorPartitionSurfaceVector

# Register InteriorPartitionSurfaceVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.InteriorPartitionSurfaceVector_swigregister(InteriorPartitionSurfaceVector)
class OptionalInteriorPartitionSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalInteriorPartitionSurface_swiginit(self, _openstudiomodelgeometry.new_OptionalInteriorPartitionSurface(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurface_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurface___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurface___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurface_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurface_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurface_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurface_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurface_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalInteriorPartitionSurface_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalInteriorPartitionSurface

# Register OptionalInteriorPartitionSurface in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalInteriorPartitionSurface_swigregister(OptionalInteriorPartitionSurface)
class SurfaceControlMovableInsulationVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_swiginit(self, _openstudiomodelgeometry.new_SurfaceControlMovableInsulationVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulationVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfaceControlMovableInsulationVector

# Register SurfaceControlMovableInsulationVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfaceControlMovableInsulationVector_swigregister(SurfaceControlMovableInsulationVector)
class OptionalSurfaceControlMovableInsulation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSurfaceControlMovableInsulation_swiginit(self, _openstudiomodelgeometry.new_OptionalSurfaceControlMovableInsulation(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSurfaceControlMovableInsulation_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSurfaceControlMovableInsulation___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSurfaceControlMovableInsulation___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSurfaceControlMovableInsulation_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSurfaceControlMovableInsulation_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSurfaceControlMovableInsulation_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSurfaceControlMovableInsulation_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSurfaceControlMovableInsulation_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSurfaceControlMovableInsulation_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSurfaceControlMovableInsulation

# Register OptionalSurfaceControlMovableInsulation in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSurfaceControlMovableInsulation_swigregister(OptionalSurfaceControlMovableInsulation)
class SurfacePropertyOtherSideCoefficientsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertyOtherSideCoefficientsVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertyOtherSideCoefficientsVector

# Register SurfacePropertyOtherSideCoefficientsVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertyOtherSideCoefficientsVector_swigregister(SurfacePropertyOtherSideCoefficientsVector)
class OptionalSurfacePropertyOtherSideCoefficients(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideCoefficients_swiginit(self, _openstudiomodelgeometry.new_OptionalSurfacePropertyOtherSideCoefficients(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideCoefficients_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideCoefficients___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideCoefficients___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideCoefficients_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideCoefficients_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideCoefficients_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideCoefficients_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideCoefficients_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideCoefficients_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSurfacePropertyOtherSideCoefficients

# Register OptionalSurfacePropertyOtherSideCoefficients in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSurfacePropertyOtherSideCoefficients_swigregister(OptionalSurfacePropertyOtherSideCoefficients)
class SurfacePropertyOtherSideConditionsModelVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertyOtherSideConditionsModelVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertyOtherSideConditionsModelVector

# Register SurfacePropertyOtherSideConditionsModelVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModelVector_swigregister(SurfacePropertyOtherSideConditionsModelVector)
class OptionalSurfacePropertyOtherSideConditionsModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideConditionsModel_swiginit(self, _openstudiomodelgeometry.new_OptionalSurfacePropertyOtherSideConditionsModel(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideConditionsModel_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideConditionsModel___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideConditionsModel___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideConditionsModel_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideConditionsModel_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideConditionsModel_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideConditionsModel_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideConditionsModel_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSurfacePropertyOtherSideConditionsModel_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSurfacePropertyOtherSideConditionsModel

# Register OptionalSurfacePropertyOtherSideConditionsModel in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSurfacePropertyOtherSideConditionsModel_swigregister(OptionalSurfacePropertyOtherSideConditionsModel)
class SurfacePropertyLocalEnvironmentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertyLocalEnvironmentVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertyLocalEnvironmentVector

# Register SurfacePropertyLocalEnvironmentVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertyLocalEnvironmentVector_swigregister(SurfacePropertyLocalEnvironmentVector)
class OptionalSurfacePropertyLocalEnvironment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSurfacePropertyLocalEnvironment_swiginit(self, _openstudiomodelgeometry.new_OptionalSurfacePropertyLocalEnvironment(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyLocalEnvironment_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyLocalEnvironment___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyLocalEnvironment___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyLocalEnvironment_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyLocalEnvironment_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyLocalEnvironment_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyLocalEnvironment_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSurfacePropertyLocalEnvironment_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSurfacePropertyLocalEnvironment_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSurfacePropertyLocalEnvironment

# Register OptionalSurfacePropertyLocalEnvironment in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSurfacePropertyLocalEnvironment_swigregister(OptionalSurfacePropertyLocalEnvironment)
class SurroundingSurfaceGroupVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SurroundingSurfaceGroupVector_swiginit(self, _openstudiomodelgeometry.new_SurroundingSurfaceGroupVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroupVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurroundingSurfaceGroupVector

# Register SurroundingSurfaceGroupVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurroundingSurfaceGroupVector_swigregister(SurroundingSurfaceGroupVector)
class OptionalSurroundingSurfaceGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSurroundingSurfaceGroup_swiginit(self, _openstudiomodelgeometry.new_OptionalSurroundingSurfaceGroup(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSurroundingSurfaceGroup_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSurroundingSurfaceGroup___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSurroundingSurfaceGroup___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSurroundingSurfaceGroup_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSurroundingSurfaceGroup_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSurroundingSurfaceGroup_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSurroundingSurfaceGroup_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSurroundingSurfaceGroup_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSurroundingSurfaceGroup_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSurroundingSurfaceGroup

# Register OptionalSurroundingSurfaceGroup in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSurroundingSurfaceGroup_swigregister(OptionalSurroundingSurfaceGroup)
class SurfacePropertySurroundingSurfacesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertySurroundingSurfacesVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertySurroundingSurfacesVector

# Register SurfacePropertySurroundingSurfacesVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertySurroundingSurfacesVector_swigregister(SurfacePropertySurroundingSurfacesVector)
class OptionalSurfacePropertySurroundingSurfaces(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSurfacePropertySurroundingSurfaces_swiginit(self, _openstudiomodelgeometry.new_OptionalSurfacePropertySurroundingSurfaces(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertySurroundingSurfaces_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertySurroundingSurfaces___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertySurroundingSurfaces___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertySurroundingSurfaces_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertySurroundingSurfaces_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertySurroundingSurfaces_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertySurroundingSurfaces_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSurfacePropertySurroundingSurfaces_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSurfacePropertySurroundingSurfaces_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSurfacePropertySurroundingSurfaces

# Register OptionalSurfacePropertySurroundingSurfaces in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSurfacePropertySurroundingSurfaces_swigregister(OptionalSurfacePropertySurroundingSurfaces)
class GroundSurfaceGroupVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.GroundSurfaceGroupVector_swiginit(self, _openstudiomodelgeometry.new_GroundSurfaceGroupVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.GroundSurfaceGroupVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_GroundSurfaceGroupVector

# Register GroundSurfaceGroupVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.GroundSurfaceGroupVector_swigregister(GroundSurfaceGroupVector)
class OptionalGroundSurfaceGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalGroundSurfaceGroup_swiginit(self, _openstudiomodelgeometry.new_OptionalGroundSurfaceGroup(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalGroundSurfaceGroup_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalGroundSurfaceGroup___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalGroundSurfaceGroup___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalGroundSurfaceGroup_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalGroundSurfaceGroup_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalGroundSurfaceGroup_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalGroundSurfaceGroup_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalGroundSurfaceGroup_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalGroundSurfaceGroup_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalGroundSurfaceGroup

# Register OptionalGroundSurfaceGroup in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalGroundSurfaceGroup_swigregister(OptionalGroundSurfaceGroup)
class SurfacePropertyGroundSurfacesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertyGroundSurfacesVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertyGroundSurfacesVector

# Register SurfacePropertyGroundSurfacesVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertyGroundSurfacesVector_swigregister(SurfacePropertyGroundSurfacesVector)
class OptionalSurfacePropertyGroundSurfaces(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSurfacePropertyGroundSurfaces_swiginit(self, _openstudiomodelgeometry.new_OptionalSurfacePropertyGroundSurfaces(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyGroundSurfaces_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyGroundSurfaces___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyGroundSurfaces___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyGroundSurfaces_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyGroundSurfaces_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyGroundSurfaces_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyGroundSurfaces_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSurfacePropertyGroundSurfaces_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSurfacePropertyGroundSurfaces_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSurfacePropertyGroundSurfaces

# Register OptionalSurfacePropertyGroundSurfaces in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSurfacePropertyGroundSurfaces_swigregister(OptionalSurfacePropertyGroundSurfaces)
class SurfacePropertyIncidentSolarMultiplierVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertyIncidentSolarMultiplierVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertyIncidentSolarMultiplierVector

# Register SurfacePropertyIncidentSolarMultiplierVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplierVector_swigregister(SurfacePropertyIncidentSolarMultiplierVector)
class OptionalSurfacePropertyIncidentSolarMultiplier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSurfacePropertyIncidentSolarMultiplier_swiginit(self, _openstudiomodelgeometry.new_OptionalSurfacePropertyIncidentSolarMultiplier(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyIncidentSolarMultiplier_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyIncidentSolarMultiplier___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyIncidentSolarMultiplier___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyIncidentSolarMultiplier_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyIncidentSolarMultiplier_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyIncidentSolarMultiplier_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyIncidentSolarMultiplier_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSurfacePropertyIncidentSolarMultiplier_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSurfacePropertyIncidentSolarMultiplier_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSurfacePropertyIncidentSolarMultiplier

# Register OptionalSurfacePropertyIncidentSolarMultiplier in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSurfacePropertyIncidentSolarMultiplier_swigregister(OptionalSurfacePropertyIncidentSolarMultiplier)
class SurfacePropertyConvectionCoefficientsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertyConvectionCoefficientsVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertyConvectionCoefficientsVector

# Register SurfacePropertyConvectionCoefficientsVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertyConvectionCoefficientsVector_swigregister(SurfacePropertyConvectionCoefficientsVector)
class OptionalSurfacePropertyConvectionCoefficients(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSurfacePropertyConvectionCoefficients_swiginit(self, _openstudiomodelgeometry.new_OptionalSurfacePropertyConvectionCoefficients(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyConvectionCoefficients_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyConvectionCoefficients___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyConvectionCoefficients___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyConvectionCoefficients_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyConvectionCoefficients_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyConvectionCoefficients_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyConvectionCoefficients_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSurfacePropertyConvectionCoefficients_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSurfacePropertyConvectionCoefficients_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSurfacePropertyConvectionCoefficients

# Register OptionalSurfacePropertyConvectionCoefficients in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSurfacePropertyConvectionCoefficients_swigregister(OptionalSurfacePropertyConvectionCoefficients)
class PeopleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.PeopleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.PeopleVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.PeopleVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.PeopleVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.PeopleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.PeopleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.PeopleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.PeopleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.PeopleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.PeopleVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.PeopleVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.PeopleVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.PeopleVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.PeopleVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.PeopleVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.PeopleVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.PeopleVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.PeopleVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.PeopleVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.PeopleVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.PeopleVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.PeopleVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.PeopleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.PeopleVector_swiginit(self, _openstudiomodelgeometry.new_PeopleVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.PeopleVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.PeopleVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.PeopleVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.PeopleVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.PeopleVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.PeopleVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.PeopleVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.PeopleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_PeopleVector

# Register PeopleVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.PeopleVector_swigregister(PeopleVector)
class OptionalPeople(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalPeople_swiginit(self, _openstudiomodelgeometry.new_OptionalPeople(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalPeople_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalPeople___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalPeople___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalPeople_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalPeople_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalPeople_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalPeople_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalPeople_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalPeople_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalPeople

# Register OptionalPeople in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalPeople_swigregister(OptionalPeople)
class LuminaireVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.LuminaireVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.LuminaireVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.LuminaireVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.LuminaireVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.LuminaireVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.LuminaireVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.LuminaireVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.LuminaireVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.LuminaireVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.LuminaireVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.LuminaireVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.LuminaireVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.LuminaireVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.LuminaireVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.LuminaireVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.LuminaireVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.LuminaireVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.LuminaireVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.LuminaireVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.LuminaireVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.LuminaireVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.LuminaireVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.LuminaireVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.LuminaireVector_swiginit(self, _openstudiomodelgeometry.new_LuminaireVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.LuminaireVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.LuminaireVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.LuminaireVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.LuminaireVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.LuminaireVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.LuminaireVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.LuminaireVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.LuminaireVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_LuminaireVector

# Register LuminaireVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.LuminaireVector_swigregister(LuminaireVector)
class OptionalLuminaire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalLuminaire_swiginit(self, _openstudiomodelgeometry.new_OptionalLuminaire(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalLuminaire_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalLuminaire___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalLuminaire___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalLuminaire_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalLuminaire_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalLuminaire_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalLuminaire_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalLuminaire_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalLuminaire_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalLuminaire

# Register OptionalLuminaire in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalLuminaire_swigregister(OptionalLuminaire)
class ElectricEquipmentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.ElectricEquipmentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.ElectricEquipmentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.ElectricEquipmentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.ElectricEquipmentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.ElectricEquipmentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.ElectricEquipmentVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.ElectricEquipmentVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.ElectricEquipmentVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.ElectricEquipmentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.ElectricEquipmentVector_swiginit(self, _openstudiomodelgeometry.new_ElectricEquipmentVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.ElectricEquipmentVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.ElectricEquipmentVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.ElectricEquipmentVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.ElectricEquipmentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.ElectricEquipmentVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.ElectricEquipmentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_ElectricEquipmentVector

# Register ElectricEquipmentVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.ElectricEquipmentVector_swigregister(ElectricEquipmentVector)
class OptionalElectricEquipment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalElectricEquipment_swiginit(self, _openstudiomodelgeometry.new_OptionalElectricEquipment(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalElectricEquipment_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalElectricEquipment___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalElectricEquipment___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalElectricEquipment_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalElectricEquipment_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalElectricEquipment_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalElectricEquipment_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalElectricEquipment_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalElectricEquipment_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalElectricEquipment

# Register OptionalElectricEquipment in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalElectricEquipment_swigregister(OptionalElectricEquipment)
class ElectricEquipmentITEAirCooledVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_swiginit(self, _openstudiomodelgeometry.new_ElectricEquipmentITEAirCooledVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_ElectricEquipmentITEAirCooledVector

# Register ElectricEquipmentITEAirCooledVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.ElectricEquipmentITEAirCooledVector_swigregister(ElectricEquipmentITEAirCooledVector)
class OptionalElectricEquipmentITEAirCooled(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalElectricEquipmentITEAirCooled_swiginit(self, _openstudiomodelgeometry.new_OptionalElectricEquipmentITEAirCooled(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalElectricEquipmentITEAirCooled_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalElectricEquipmentITEAirCooled___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalElectricEquipmentITEAirCooled___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalElectricEquipmentITEAirCooled_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalElectricEquipmentITEAirCooled_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalElectricEquipmentITEAirCooled_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalElectricEquipmentITEAirCooled_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalElectricEquipmentITEAirCooled_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalElectricEquipmentITEAirCooled_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalElectricEquipmentITEAirCooled

# Register OptionalElectricEquipmentITEAirCooled in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalElectricEquipmentITEAirCooled_swigregister(OptionalElectricEquipmentITEAirCooled)
class GasEquipmentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.GasEquipmentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.GasEquipmentVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.GasEquipmentVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.GasEquipmentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.GasEquipmentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.GasEquipmentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.GasEquipmentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.GasEquipmentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.GasEquipmentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.GasEquipmentVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.GasEquipmentVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.GasEquipmentVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.GasEquipmentVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.GasEquipmentVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.GasEquipmentVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.GasEquipmentVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.GasEquipmentVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.GasEquipmentVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.GasEquipmentVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.GasEquipmentVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.GasEquipmentVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.GasEquipmentVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.GasEquipmentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.GasEquipmentVector_swiginit(self, _openstudiomodelgeometry.new_GasEquipmentVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.GasEquipmentVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.GasEquipmentVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.GasEquipmentVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.GasEquipmentVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.GasEquipmentVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.GasEquipmentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.GasEquipmentVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.GasEquipmentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_GasEquipmentVector

# Register GasEquipmentVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.GasEquipmentVector_swigregister(GasEquipmentVector)
class OptionalGasEquipment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalGasEquipment_swiginit(self, _openstudiomodelgeometry.new_OptionalGasEquipment(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalGasEquipment_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalGasEquipment___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalGasEquipment___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalGasEquipment_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalGasEquipment_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalGasEquipment_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalGasEquipment_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalGasEquipment_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalGasEquipment_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalGasEquipment

# Register OptionalGasEquipment in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalGasEquipment_swigregister(OptionalGasEquipment)
class HotWaterEquipmentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.HotWaterEquipmentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.HotWaterEquipmentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.HotWaterEquipmentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.HotWaterEquipmentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.HotWaterEquipmentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.HotWaterEquipmentVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.HotWaterEquipmentVector_swiginit(self, _openstudiomodelgeometry.new_HotWaterEquipmentVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.HotWaterEquipmentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_HotWaterEquipmentVector

# Register HotWaterEquipmentVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.HotWaterEquipmentVector_swigregister(HotWaterEquipmentVector)
class OptionalHotWaterEquipment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalHotWaterEquipment_swiginit(self, _openstudiomodelgeometry.new_OptionalHotWaterEquipment(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalHotWaterEquipment_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalHotWaterEquipment___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalHotWaterEquipment___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalHotWaterEquipment_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalHotWaterEquipment_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalHotWaterEquipment_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalHotWaterEquipment_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalHotWaterEquipment_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalHotWaterEquipment_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalHotWaterEquipment

# Register OptionalHotWaterEquipment in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalHotWaterEquipment_swigregister(OptionalHotWaterEquipment)
class SteamEquipmentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SteamEquipmentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SteamEquipmentVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SteamEquipmentVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SteamEquipmentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SteamEquipmentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SteamEquipmentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SteamEquipmentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SteamEquipmentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SteamEquipmentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SteamEquipmentVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SteamEquipmentVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SteamEquipmentVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SteamEquipmentVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SteamEquipmentVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SteamEquipmentVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SteamEquipmentVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SteamEquipmentVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SteamEquipmentVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SteamEquipmentVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SteamEquipmentVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SteamEquipmentVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SteamEquipmentVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SteamEquipmentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SteamEquipmentVector_swiginit(self, _openstudiomodelgeometry.new_SteamEquipmentVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SteamEquipmentVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SteamEquipmentVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SteamEquipmentVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SteamEquipmentVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SteamEquipmentVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SteamEquipmentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SteamEquipmentVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SteamEquipmentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SteamEquipmentVector

# Register SteamEquipmentVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SteamEquipmentVector_swigregister(SteamEquipmentVector)
class OptionalSteamEquipment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSteamEquipment_swiginit(self, _openstudiomodelgeometry.new_OptionalSteamEquipment(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSteamEquipment_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSteamEquipment___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSteamEquipment___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSteamEquipment_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSteamEquipment_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSteamEquipment_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSteamEquipment_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSteamEquipment_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSteamEquipment_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSteamEquipment

# Register OptionalSteamEquipment in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSteamEquipment_swigregister(OptionalSteamEquipment)
class OtherEquipmentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.OtherEquipmentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.OtherEquipmentVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.OtherEquipmentVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.OtherEquipmentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.OtherEquipmentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.OtherEquipmentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.OtherEquipmentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.OtherEquipmentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.OtherEquipmentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.OtherEquipmentVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.OtherEquipmentVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.OtherEquipmentVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.OtherEquipmentVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.OtherEquipmentVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.OtherEquipmentVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.OtherEquipmentVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.OtherEquipmentVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.OtherEquipmentVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.OtherEquipmentVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.OtherEquipmentVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.OtherEquipmentVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.OtherEquipmentVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.OtherEquipmentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.OtherEquipmentVector_swiginit(self, _openstudiomodelgeometry.new_OtherEquipmentVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.OtherEquipmentVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.OtherEquipmentVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.OtherEquipmentVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.OtherEquipmentVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.OtherEquipmentVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.OtherEquipmentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.OtherEquipmentVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.OtherEquipmentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OtherEquipmentVector

# Register OtherEquipmentVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.OtherEquipmentVector_swigregister(OtherEquipmentVector)
class OptionalOtherEquipment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalOtherEquipment_swiginit(self, _openstudiomodelgeometry.new_OptionalOtherEquipment(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalOtherEquipment_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalOtherEquipment___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalOtherEquipment___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalOtherEquipment_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalOtherEquipment_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalOtherEquipment_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalOtherEquipment_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalOtherEquipment_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalOtherEquipment_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalOtherEquipment

# Register OptionalOtherEquipment in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalOtherEquipment_swigregister(OptionalOtherEquipment)
class InternalMassVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.InternalMassVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.InternalMassVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.InternalMassVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.InternalMassVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.InternalMassVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.InternalMassVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.InternalMassVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.InternalMassVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.InternalMassVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.InternalMassVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.InternalMassVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.InternalMassVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.InternalMassVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.InternalMassVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.InternalMassVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.InternalMassVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.InternalMassVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.InternalMassVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.InternalMassVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.InternalMassVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.InternalMassVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.InternalMassVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.InternalMassVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.InternalMassVector_swiginit(self, _openstudiomodelgeometry.new_InternalMassVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.InternalMassVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.InternalMassVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.InternalMassVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.InternalMassVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.InternalMassVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.InternalMassVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.InternalMassVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.InternalMassVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_InternalMassVector

# Register InternalMassVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.InternalMassVector_swigregister(InternalMassVector)
class OptionalInternalMass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalInternalMass_swiginit(self, _openstudiomodelgeometry.new_OptionalInternalMass(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalInternalMass_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalInternalMass___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalInternalMass___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalInternalMass_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalInternalMass_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalInternalMass_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalInternalMass_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalInternalMass_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalInternalMass_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalInternalMass

# Register OptionalInternalMass in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalInternalMass_swigregister(OptionalInternalMass)
class SpaceInfiltrationDesignFlowRateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_swiginit(self, _openstudiomodelgeometry.new_SpaceInfiltrationDesignFlowRateVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceInfiltrationDesignFlowRateVector

# Register SpaceInfiltrationDesignFlowRateVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceInfiltrationDesignFlowRateVector_swigregister(SpaceInfiltrationDesignFlowRateVector)
class OptionalSpaceInfiltrationDesignFlowRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSpaceInfiltrationDesignFlowRate_swiginit(self, _openstudiomodelgeometry.new_OptionalSpaceInfiltrationDesignFlowRate(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationDesignFlowRate_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationDesignFlowRate___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationDesignFlowRate___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationDesignFlowRate_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationDesignFlowRate_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationDesignFlowRate_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationDesignFlowRate_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationDesignFlowRate_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationDesignFlowRate_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSpaceInfiltrationDesignFlowRate

# Register OptionalSpaceInfiltrationDesignFlowRate in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSpaceInfiltrationDesignFlowRate_swigregister(OptionalSpaceInfiltrationDesignFlowRate)
class SpaceInfiltrationEffectiveLeakageAreaVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_swiginit(self, _openstudiomodelgeometry.new_SpaceInfiltrationEffectiveLeakageAreaVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceInfiltrationEffectiveLeakageAreaVector

# Register SpaceInfiltrationEffectiveLeakageAreaVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageAreaVector_swigregister(SpaceInfiltrationEffectiveLeakageAreaVector)
class OptionalSpaceInfiltrationEffectiveLeakageArea(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSpaceInfiltrationEffectiveLeakageArea_swiginit(self, _openstudiomodelgeometry.new_OptionalSpaceInfiltrationEffectiveLeakageArea(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationEffectiveLeakageArea_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationEffectiveLeakageArea___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationEffectiveLeakageArea___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationEffectiveLeakageArea_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationEffectiveLeakageArea_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationEffectiveLeakageArea_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationEffectiveLeakageArea_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationEffectiveLeakageArea_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationEffectiveLeakageArea_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSpaceInfiltrationEffectiveLeakageArea

# Register OptionalSpaceInfiltrationEffectiveLeakageArea in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSpaceInfiltrationEffectiveLeakageArea_swigregister(OptionalSpaceInfiltrationEffectiveLeakageArea)
class SpaceInfiltrationFlowCoefficientVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_swiginit(self, _openstudiomodelgeometry.new_SpaceInfiltrationFlowCoefficientVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceInfiltrationFlowCoefficientVector

# Register SpaceInfiltrationFlowCoefficientVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceInfiltrationFlowCoefficientVector_swigregister(SpaceInfiltrationFlowCoefficientVector)
class OptionalSpaceInfiltrationFlowCoefficient(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSpaceInfiltrationFlowCoefficient_swiginit(self, _openstudiomodelgeometry.new_OptionalSpaceInfiltrationFlowCoefficient(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationFlowCoefficient_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationFlowCoefficient___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationFlowCoefficient___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationFlowCoefficient_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationFlowCoefficient_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationFlowCoefficient_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationFlowCoefficient_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationFlowCoefficient_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSpaceInfiltrationFlowCoefficient_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSpaceInfiltrationFlowCoefficient

# Register OptionalSpaceInfiltrationFlowCoefficient in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSpaceInfiltrationFlowCoefficient_swigregister(OptionalSpaceInfiltrationFlowCoefficient)
class DaylightingControlVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.DaylightingControlVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.DaylightingControlVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.DaylightingControlVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.DaylightingControlVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.DaylightingControlVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.DaylightingControlVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.DaylightingControlVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.DaylightingControlVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.DaylightingControlVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.DaylightingControlVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.DaylightingControlVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.DaylightingControlVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.DaylightingControlVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.DaylightingControlVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.DaylightingControlVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.DaylightingControlVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.DaylightingControlVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.DaylightingControlVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.DaylightingControlVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.DaylightingControlVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.DaylightingControlVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.DaylightingControlVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.DaylightingControlVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.DaylightingControlVector_swiginit(self, _openstudiomodelgeometry.new_DaylightingControlVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.DaylightingControlVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.DaylightingControlVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.DaylightingControlVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.DaylightingControlVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.DaylightingControlVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.DaylightingControlVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.DaylightingControlVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.DaylightingControlVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_DaylightingControlVector

# Register DaylightingControlVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.DaylightingControlVector_swigregister(DaylightingControlVector)
class OptionalDaylightingControl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalDaylightingControl_swiginit(self, _openstudiomodelgeometry.new_OptionalDaylightingControl(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalDaylightingControl_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalDaylightingControl___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalDaylightingControl___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalDaylightingControl_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalDaylightingControl_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalDaylightingControl_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalDaylightingControl_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalDaylightingControl_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalDaylightingControl_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalDaylightingControl

# Register OptionalDaylightingControl in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalDaylightingControl_swigregister(OptionalDaylightingControl)
class GlareSensorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.GlareSensorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.GlareSensorVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.GlareSensorVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.GlareSensorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.GlareSensorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.GlareSensorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.GlareSensorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.GlareSensorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.GlareSensorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.GlareSensorVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.GlareSensorVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.GlareSensorVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.GlareSensorVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.GlareSensorVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.GlareSensorVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.GlareSensorVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.GlareSensorVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.GlareSensorVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.GlareSensorVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.GlareSensorVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.GlareSensorVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.GlareSensorVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.GlareSensorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.GlareSensorVector_swiginit(self, _openstudiomodelgeometry.new_GlareSensorVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.GlareSensorVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.GlareSensorVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.GlareSensorVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.GlareSensorVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.GlareSensorVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.GlareSensorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.GlareSensorVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.GlareSensorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_GlareSensorVector

# Register GlareSensorVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.GlareSensorVector_swigregister(GlareSensorVector)
class OptionalGlareSensor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalGlareSensor_swiginit(self, _openstudiomodelgeometry.new_OptionalGlareSensor(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalGlareSensor_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalGlareSensor___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalGlareSensor___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalGlareSensor_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalGlareSensor_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalGlareSensor_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalGlareSensor_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalGlareSensor_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalGlareSensor_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalGlareSensor

# Register OptionalGlareSensor in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalGlareSensor_swigregister(OptionalGlareSensor)
class IlluminanceMapVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.IlluminanceMapVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.IlluminanceMapVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.IlluminanceMapVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.IlluminanceMapVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.IlluminanceMapVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.IlluminanceMapVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.IlluminanceMapVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.IlluminanceMapVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.IlluminanceMapVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.IlluminanceMapVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.IlluminanceMapVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.IlluminanceMapVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.IlluminanceMapVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.IlluminanceMapVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.IlluminanceMapVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.IlluminanceMapVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.IlluminanceMapVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.IlluminanceMapVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.IlluminanceMapVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.IlluminanceMapVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.IlluminanceMapVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.IlluminanceMapVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.IlluminanceMapVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.IlluminanceMapVector_swiginit(self, _openstudiomodelgeometry.new_IlluminanceMapVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.IlluminanceMapVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.IlluminanceMapVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.IlluminanceMapVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.IlluminanceMapVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.IlluminanceMapVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.IlluminanceMapVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.IlluminanceMapVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.IlluminanceMapVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_IlluminanceMapVector

# Register IlluminanceMapVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.IlluminanceMapVector_swigregister(IlluminanceMapVector)
class OptionalIlluminanceMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalIlluminanceMap_swiginit(self, _openstudiomodelgeometry.new_OptionalIlluminanceMap(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalIlluminanceMap_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalIlluminanceMap___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalIlluminanceMap___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalIlluminanceMap_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalIlluminanceMap_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalIlluminanceMap_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalIlluminanceMap_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalIlluminanceMap_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalIlluminanceMap_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalIlluminanceMap

# Register OptionalIlluminanceMap in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalIlluminanceMap_swigregister(OptionalIlluminanceMap)
class DaylightingDeviceShelfVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.DaylightingDeviceShelfVector_swiginit(self, _openstudiomodelgeometry.new_DaylightingDeviceShelfVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelfVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_DaylightingDeviceShelfVector

# Register DaylightingDeviceShelfVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.DaylightingDeviceShelfVector_swigregister(DaylightingDeviceShelfVector)
class OptionalDaylightingDeviceShelf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalDaylightingDeviceShelf_swiginit(self, _openstudiomodelgeometry.new_OptionalDaylightingDeviceShelf(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceShelf_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceShelf___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceShelf___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceShelf_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceShelf_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceShelf_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceShelf_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceShelf_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceShelf_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalDaylightingDeviceShelf

# Register OptionalDaylightingDeviceShelf in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalDaylightingDeviceShelf_swigregister(OptionalDaylightingDeviceShelf)
class DaylightingDeviceTubularVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.DaylightingDeviceTubularVector_swiginit(self, _openstudiomodelgeometry.new_DaylightingDeviceTubularVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubularVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_DaylightingDeviceTubularVector

# Register DaylightingDeviceTubularVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.DaylightingDeviceTubularVector_swigregister(DaylightingDeviceTubularVector)
class OptionalDaylightingDeviceTubular(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalDaylightingDeviceTubular_swiginit(self, _openstudiomodelgeometry.new_OptionalDaylightingDeviceTubular(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceTubular_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceTubular___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceTubular___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceTubular_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceTubular_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceTubular_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceTubular_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceTubular_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceTubular_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalDaylightingDeviceTubular

# Register OptionalDaylightingDeviceTubular in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalDaylightingDeviceTubular_swigregister(OptionalDaylightingDeviceTubular)
class DaylightingDeviceLightWellVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.DaylightingDeviceLightWellVector_swiginit(self, _openstudiomodelgeometry.new_DaylightingDeviceLightWellVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWellVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_DaylightingDeviceLightWellVector

# Register DaylightingDeviceLightWellVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.DaylightingDeviceLightWellVector_swigregister(DaylightingDeviceLightWellVector)
class OptionalDaylightingDeviceLightWell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalDaylightingDeviceLightWell_swiginit(self, _openstudiomodelgeometry.new_OptionalDaylightingDeviceLightWell(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceLightWell_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceLightWell___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceLightWell___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceLightWell_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceLightWell_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceLightWell_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceLightWell_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceLightWell_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalDaylightingDeviceLightWell_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalDaylightingDeviceLightWell

# Register OptionalDaylightingDeviceLightWell in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalDaylightingDeviceLightWell_swigregister(OptionalDaylightingDeviceLightWell)
class SpaceTypeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SpaceTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SpaceTypeVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SpaceTypeVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SpaceTypeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SpaceTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SpaceTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SpaceTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SpaceTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SpaceTypeVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SpaceTypeVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SpaceTypeVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SpaceTypeVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SpaceTypeVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SpaceTypeVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SpaceTypeVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SpaceTypeVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SpaceTypeVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SpaceTypeVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SpaceTypeVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SpaceTypeVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SpaceTypeVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SpaceTypeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceTypeVector_swiginit(self, _openstudiomodelgeometry.new_SpaceTypeVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SpaceTypeVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SpaceTypeVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SpaceTypeVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SpaceTypeVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SpaceTypeVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SpaceTypeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SpaceTypeVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SpaceTypeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceTypeVector

# Register SpaceTypeVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceTypeVector_swigregister(SpaceTypeVector)
class OptionalSpaceType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSpaceType_swiginit(self, _openstudiomodelgeometry.new_OptionalSpaceType(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSpaceType_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSpaceType___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSpaceType___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSpaceType_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSpaceType_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSpaceType_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSpaceType_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSpaceType_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSpaceType_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSpaceType

# Register OptionalSpaceType in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSpaceType_swigregister(OptionalSpaceType)
class LightingSimulationZoneVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.LightingSimulationZoneVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.LightingSimulationZoneVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.LightingSimulationZoneVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.LightingSimulationZoneVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.LightingSimulationZoneVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.LightingSimulationZoneVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.LightingSimulationZoneVector_swiginit(self, _openstudiomodelgeometry.new_LightingSimulationZoneVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.LightingSimulationZoneVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_LightingSimulationZoneVector

# Register LightingSimulationZoneVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.LightingSimulationZoneVector_swigregister(LightingSimulationZoneVector)
class OptionalLightingSimulationZone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalLightingSimulationZone_swiginit(self, _openstudiomodelgeometry.new_OptionalLightingSimulationZone(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalLightingSimulationZone_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalLightingSimulationZone___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalLightingSimulationZone___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalLightingSimulationZone_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalLightingSimulationZone_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalLightingSimulationZone_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalLightingSimulationZone_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalLightingSimulationZone_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalLightingSimulationZone_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalLightingSimulationZone

# Register OptionalLightingSimulationZone in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalLightingSimulationZone_swigregister(OptionalLightingSimulationZone)
class CustomBlockVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.CustomBlockVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.CustomBlockVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.CustomBlockVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.CustomBlockVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.CustomBlockVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.CustomBlockVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.CustomBlockVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.CustomBlockVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.CustomBlockVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.CustomBlockVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.CustomBlockVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.CustomBlockVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.CustomBlockVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.CustomBlockVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.CustomBlockVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.CustomBlockVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.CustomBlockVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.CustomBlockVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.CustomBlockVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.CustomBlockVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.CustomBlockVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.CustomBlockVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.CustomBlockVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.CustomBlockVector_swiginit(self, _openstudiomodelgeometry.new_CustomBlockVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.CustomBlockVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.CustomBlockVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.CustomBlockVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.CustomBlockVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.CustomBlockVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.CustomBlockVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.CustomBlockVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.CustomBlockVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_CustomBlockVector

# Register CustomBlockVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.CustomBlockVector_swigregister(CustomBlockVector)
class OptionalCustomBlock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalCustomBlock_swiginit(self, _openstudiomodelgeometry.new_OptionalCustomBlock(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalCustomBlock_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalCustomBlock___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalCustomBlock___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalCustomBlock_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalCustomBlock_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalCustomBlock_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalCustomBlock_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalCustomBlock_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalCustomBlock_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalCustomBlock

# Register OptionalCustomBlock in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalCustomBlock_swigregister(OptionalCustomBlock)
class FoundationKivaVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.FoundationKivaVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.FoundationKivaVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.FoundationKivaVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.FoundationKivaVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.FoundationKivaVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.FoundationKivaVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.FoundationKivaVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.FoundationKivaVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.FoundationKivaVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.FoundationKivaVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.FoundationKivaVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.FoundationKivaVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.FoundationKivaVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.FoundationKivaVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.FoundationKivaVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.FoundationKivaVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.FoundationKivaVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.FoundationKivaVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.FoundationKivaVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.FoundationKivaVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.FoundationKivaVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.FoundationKivaVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.FoundationKivaVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.FoundationKivaVector_swiginit(self, _openstudiomodelgeometry.new_FoundationKivaVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.FoundationKivaVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.FoundationKivaVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.FoundationKivaVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.FoundationKivaVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.FoundationKivaVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.FoundationKivaVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.FoundationKivaVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.FoundationKivaVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_FoundationKivaVector

# Register FoundationKivaVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.FoundationKivaVector_swigregister(FoundationKivaVector)
class OptionalFoundationKiva(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalFoundationKiva_swiginit(self, _openstudiomodelgeometry.new_OptionalFoundationKiva(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalFoundationKiva_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalFoundationKiva___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalFoundationKiva___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalFoundationKiva_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalFoundationKiva_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalFoundationKiva_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalFoundationKiva_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalFoundationKiva_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalFoundationKiva_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalFoundationKiva

# Register OptionalFoundationKiva in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalFoundationKiva_swigregister(OptionalFoundationKiva)
class SurfacePropertyExposedFoundationPerimeterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertyExposedFoundationPerimeterVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertyExposedFoundationPerimeterVector

# Register SurfacePropertyExposedFoundationPerimeterVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeterVector_swigregister(SurfacePropertyExposedFoundationPerimeterVector)
class OptionalSurfacePropertyExposedFoundationPerimeter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalSurfacePropertyExposedFoundationPerimeter_swiginit(self, _openstudiomodelgeometry.new_OptionalSurfacePropertyExposedFoundationPerimeter(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyExposedFoundationPerimeter_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyExposedFoundationPerimeter___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyExposedFoundationPerimeter___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyExposedFoundationPerimeter_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyExposedFoundationPerimeter_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyExposedFoundationPerimeter_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalSurfacePropertyExposedFoundationPerimeter_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalSurfacePropertyExposedFoundationPerimeter_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalSurfacePropertyExposedFoundationPerimeter_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalSurfacePropertyExposedFoundationPerimeter

# Register OptionalSurfacePropertyExposedFoundationPerimeter in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalSurfacePropertyExposedFoundationPerimeter_swigregister(OptionalSurfacePropertyExposedFoundationPerimeter)
class ViewFactorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.ViewFactorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.ViewFactorVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.ViewFactorVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.ViewFactorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.ViewFactorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.ViewFactorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.ViewFactorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.ViewFactorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.ViewFactorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.ViewFactorVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.ViewFactorVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.ViewFactorVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.ViewFactorVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.ViewFactorVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.ViewFactorVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.ViewFactorVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.ViewFactorVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.ViewFactorVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.ViewFactorVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.ViewFactorVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.ViewFactorVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.ViewFactorVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.ViewFactorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.ViewFactorVector_swiginit(self, _openstudiomodelgeometry.new_ViewFactorVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.ViewFactorVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.ViewFactorVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.ViewFactorVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.ViewFactorVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.ViewFactorVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.ViewFactorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.ViewFactorVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.ViewFactorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_ViewFactorVector

# Register ViewFactorVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.ViewFactorVector_swigregister(ViewFactorVector)
class OptionalViewFactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalViewFactor_swiginit(self, _openstudiomodelgeometry.new_OptionalViewFactor(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalViewFactor_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalViewFactor___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalViewFactor___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalViewFactor_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalViewFactor_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalViewFactor_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalViewFactor_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalViewFactor_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalViewFactor_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalViewFactor

# Register OptionalViewFactor in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalViewFactor_swigregister(OptionalViewFactor)
class ZonePropertyUserViewFactorsBySurfaceNameVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_swiginit(self, _openstudiomodelgeometry.new_ZonePropertyUserViewFactorsBySurfaceNameVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_ZonePropertyUserViewFactorsBySurfaceNameVector

# Register ZonePropertyUserViewFactorsBySurfaceNameVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceNameVector_swigregister(ZonePropertyUserViewFactorsBySurfaceNameVector)
class OptionalZonePropertyUserViewFactorsBySurfaceName(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalZonePropertyUserViewFactorsBySurfaceName_swiginit(self, _openstudiomodelgeometry.new_OptionalZonePropertyUserViewFactorsBySurfaceName(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalZonePropertyUserViewFactorsBySurfaceName_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalZonePropertyUserViewFactorsBySurfaceName___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalZonePropertyUserViewFactorsBySurfaceName___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalZonePropertyUserViewFactorsBySurfaceName_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalZonePropertyUserViewFactorsBySurfaceName_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalZonePropertyUserViewFactorsBySurfaceName_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalZonePropertyUserViewFactorsBySurfaceName_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalZonePropertyUserViewFactorsBySurfaceName_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalZonePropertyUserViewFactorsBySurfaceName_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalZonePropertyUserViewFactorsBySurfaceName

# Register OptionalZonePropertyUserViewFactorsBySurfaceName in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalZonePropertyUserViewFactorsBySurfaceName_swigregister(OptionalZonePropertyUserViewFactorsBySurfaceName)
class ExteriorLoadInstanceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.ExteriorLoadInstanceVector_swiginit(self, _openstudiomodelgeometry.new_ExteriorLoadInstanceVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.ExteriorLoadInstanceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_ExteriorLoadInstanceVector

# Register ExteriorLoadInstanceVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.ExteriorLoadInstanceVector_swigregister(ExteriorLoadInstanceVector)
class OptionalExteriorLoadInstance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalExteriorLoadInstance_swiginit(self, _openstudiomodelgeometry.new_OptionalExteriorLoadInstance(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalExteriorLoadInstance_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalExteriorLoadInstance___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalExteriorLoadInstance___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalExteriorLoadInstance_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalExteriorLoadInstance_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalExteriorLoadInstance_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalExteriorLoadInstance_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalExteriorLoadInstance_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalExteriorLoadInstance_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalExteriorLoadInstance

# Register OptionalExteriorLoadInstance in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalExteriorLoadInstance_swigregister(OptionalExteriorLoadInstance)
class ExteriorLightsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.ExteriorLightsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.ExteriorLightsVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.ExteriorLightsVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.ExteriorLightsVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.ExteriorLightsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.ExteriorLightsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.ExteriorLightsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.ExteriorLightsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.ExteriorLightsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.ExteriorLightsVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.ExteriorLightsVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.ExteriorLightsVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.ExteriorLightsVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.ExteriorLightsVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.ExteriorLightsVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.ExteriorLightsVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.ExteriorLightsVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.ExteriorLightsVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.ExteriorLightsVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.ExteriorLightsVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.ExteriorLightsVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.ExteriorLightsVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.ExteriorLightsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.ExteriorLightsVector_swiginit(self, _openstudiomodelgeometry.new_ExteriorLightsVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.ExteriorLightsVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.ExteriorLightsVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.ExteriorLightsVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.ExteriorLightsVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.ExteriorLightsVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.ExteriorLightsVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.ExteriorLightsVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.ExteriorLightsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_ExteriorLightsVector

# Register ExteriorLightsVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.ExteriorLightsVector_swigregister(ExteriorLightsVector)
class OptionalExteriorLights(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalExteriorLights_swiginit(self, _openstudiomodelgeometry.new_OptionalExteriorLights(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalExteriorLights_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalExteriorLights___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalExteriorLights___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalExteriorLights_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalExteriorLights_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalExteriorLights_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalExteriorLights_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalExteriorLights_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalExteriorLights_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalExteriorLights

# Register OptionalExteriorLights in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalExteriorLights_swigregister(OptionalExteriorLights)
class ExteriorFuelEquipmentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.ExteriorFuelEquipmentVector_swiginit(self, _openstudiomodelgeometry.new_ExteriorFuelEquipmentVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipmentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_ExteriorFuelEquipmentVector

# Register ExteriorFuelEquipmentVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.ExteriorFuelEquipmentVector_swigregister(ExteriorFuelEquipmentVector)
class OptionalExteriorFuelEquipment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalExteriorFuelEquipment_swiginit(self, _openstudiomodelgeometry.new_OptionalExteriorFuelEquipment(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalExteriorFuelEquipment_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalExteriorFuelEquipment___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalExteriorFuelEquipment___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalExteriorFuelEquipment_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalExteriorFuelEquipment_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalExteriorFuelEquipment_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalExteriorFuelEquipment_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalExteriorFuelEquipment_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalExteriorFuelEquipment_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalExteriorFuelEquipment

# Register OptionalExteriorFuelEquipment in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalExteriorFuelEquipment_swigregister(OptionalExteriorFuelEquipment)
class ExteriorWaterEquipmentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector___bool__(self)

    def __len__(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_pop(self)

    def append(self, x):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_append(self, x)

    def empty(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_empty(self)

    def size(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_size(self)

    def swap(self, v):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_swap(self, v)

    def begin(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_begin(self)

    def end(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_end(self)

    def rbegin(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_rbegin(self)

    def rend(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_rend(self)

    def clear(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelgeometry.ExteriorWaterEquipmentVector_swiginit(self, _openstudiomodelgeometry.new_ExteriorWaterEquipmentVector(*args))

    def push_back(self, x):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_push_back(self, x)

    def front(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_front(self)

    def back(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipmentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_ExteriorWaterEquipmentVector

# Register ExteriorWaterEquipmentVector in _openstudiomodelgeometry:
_openstudiomodelgeometry.ExteriorWaterEquipmentVector_swigregister(ExteriorWaterEquipmentVector)
class OptionalExteriorWaterEquipment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.OptionalExteriorWaterEquipment_swiginit(self, _openstudiomodelgeometry.new_OptionalExteriorWaterEquipment(*args))

    def reset(self):
        return _openstudiomodelgeometry.OptionalExteriorWaterEquipment_reset(self)

    def __nonzero__(self):
        return _openstudiomodelgeometry.OptionalExteriorWaterEquipment___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelgeometry.OptionalExteriorWaterEquipment___ref__(self)

    def is_initialized(self):
        return _openstudiomodelgeometry.OptionalExteriorWaterEquipment_is_initialized(self)

    def isNull(self):
        return _openstudiomodelgeometry.OptionalExteriorWaterEquipment_isNull(self)

    def empty(self):
        return _openstudiomodelgeometry.OptionalExteriorWaterEquipment_empty(self)

    def get(self):
        return _openstudiomodelgeometry.OptionalExteriorWaterEquipment_get(self)

    def set(self, t):
        return _openstudiomodelgeometry.OptionalExteriorWaterEquipment_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelgeometry.OptionalExteriorWaterEquipment_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelgeometry.delete_OptionalExteriorWaterEquipment

# Register OptionalExteriorWaterEquipment in _openstudiomodelgeometry:
_openstudiomodelgeometry.OptionalExteriorWaterEquipment_swigregister(OptionalExteriorWaterEquipment)
class Site(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_Site

    def __init__(self, *args):
        _openstudiomodelgeometry.Site_swiginit(self, _openstudiomodelgeometry.new_Site(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.Site_iddObjectType()

    @staticmethod
    def validTerrainValues():
        return _openstudiomodelgeometry.Site_validTerrainValues()

    def latitude(self):
        return _openstudiomodelgeometry.Site_latitude(self)

    def isLatitudeDefaulted(self):
        return _openstudiomodelgeometry.Site_isLatitudeDefaulted(self)

    def longitude(self):
        return _openstudiomodelgeometry.Site_longitude(self)

    def isLongitudeDefaulted(self):
        return _openstudiomodelgeometry.Site_isLongitudeDefaulted(self)

    def timeZone(self):
        return _openstudiomodelgeometry.Site_timeZone(self)

    def isTimeZoneDefaulted(self):
        return _openstudiomodelgeometry.Site_isTimeZoneDefaulted(self)

    def elevation(self):
        return _openstudiomodelgeometry.Site_elevation(self)

    def isElevationDefaulted(self):
        return _openstudiomodelgeometry.Site_isElevationDefaulted(self)

    def terrain(self):
        return _openstudiomodelgeometry.Site_terrain(self)

    def isTerrainDefaulted(self):
        return _openstudiomodelgeometry.Site_isTerrainDefaulted(self)

    def keepSiteLocationInformation(self):
        return _openstudiomodelgeometry.Site_keepSiteLocationInformation(self)

    def isKeepSiteLocationInformationDefaulted(self):
        return _openstudiomodelgeometry.Site_isKeepSiteLocationInformationDefaulted(self)

    def setLatitude(self, latitude):
        return _openstudiomodelgeometry.Site_setLatitude(self, latitude)

    def resetLatitude(self):
        return _openstudiomodelgeometry.Site_resetLatitude(self)

    def setLongitude(self, longitude):
        return _openstudiomodelgeometry.Site_setLongitude(self, longitude)

    def resetLongitude(self):
        return _openstudiomodelgeometry.Site_resetLongitude(self)

    def setTimeZone(self, timeZone):
        return _openstudiomodelgeometry.Site_setTimeZone(self, timeZone)

    def resetTimeZone(self):
        return _openstudiomodelgeometry.Site_resetTimeZone(self)

    def setElevation(self, elevation):
        return _openstudiomodelgeometry.Site_setElevation(self, elevation)

    def resetElevation(self):
        return _openstudiomodelgeometry.Site_resetElevation(self)

    def setTerrain(self, terrain):
        return _openstudiomodelgeometry.Site_setTerrain(self, terrain)

    def resetTerrain(self):
        return _openstudiomodelgeometry.Site_resetTerrain(self)

    def setKeepSiteLocationInformation(self, keepSiteLocationInformation):
        return _openstudiomodelgeometry.Site_setKeepSiteLocationInformation(self, keepSiteLocationInformation)

    def resetKeepSiteLocationInformation(self):
        return _openstudiomodelgeometry.Site_resetKeepSiteLocationInformation(self)

    def weatherFile(self):
        return _openstudiomodelgeometry.Site_weatherFile(self)

    def siteGroundReflectance(self):
        return _openstudiomodelgeometry.Site_siteGroundReflectance(self)

    def siteGroundTemperatureBuildingSurface(self):
        return _openstudiomodelgeometry.Site_siteGroundTemperatureBuildingSurface(self)

    def siteGroundTemperatureDeep(self):
        return _openstudiomodelgeometry.Site_siteGroundTemperatureDeep(self)

    def siteGroundTemperatureShallow(self):
        return _openstudiomodelgeometry.Site_siteGroundTemperatureShallow(self)

    def siteGroundTemperatureFCfactorMethod(self):
        return _openstudiomodelgeometry.Site_siteGroundTemperatureFCfactorMethod(self)

    def siteWaterMainsTemperature(self):
        return _openstudiomodelgeometry.Site_siteWaterMainsTemperature(self)

    def climateZones(self):
        return _openstudiomodelgeometry.Site_climateZones(self)

    def shadingSurfaceGroups(self):
        return _openstudiomodelgeometry.Site_shadingSurfaceGroups(self)

# Register Site in _openstudiomodelgeometry:
_openstudiomodelgeometry.Site_swigregister(Site)

def toSite(idfObject):
    return _openstudiomodelgeometry.toSite(idfObject)

def getSite(t_model):
    return _openstudiomodelgeometry.getSite(t_model)

def getOptionalSite(t_model):
    return _openstudiomodelgeometry.getOptionalSite(t_model)

def _to_Site(self) -> OptionalSite:
    """Try to cast the ModelObject to a Site.

    :return: An Optional Site.
    """
    return toSite(self)
openstudioutilitiesidf.IdfObject.to_Site = _to_Site

def _getSite(self) -> Site:
    """Get or instantiate a UniqueModelObject of type Site.

    :return: An existing Site or a newly instantiated one.
    """
    return getSite(self)
Model.getSite = _getSite

def _getOptionalSite(self) -> OptionalSite:
    """Return a UniqueModelObject of type Site only if it's already present in the Model.

    :return: An Optional Site.
    """
    return getOptionalSite(self)
Model.getOptionalSite = _getOptionalSite

class Facility(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_Facility

    def __init__(self, *args):
        _openstudiomodelgeometry.Facility_swiginit(self, _openstudiomodelgeometry.new_Facility(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.Facility_iddObjectType()

    @staticmethod
    def fossilFuels():
        return _openstudiomodelgeometry.Facility_fossilFuels()

    def building(self):
        return _openstudiomodelgeometry.Facility_building(self)

    def meters(self):
        return _openstudiomodelgeometry.Facility_meters(self)

    def getMeterByFuelType(self, *args):
        return _openstudiomodelgeometry.Facility_getMeterByFuelType(self, *args)

    def exteriorLights(self):
        return _openstudiomodelgeometry.Facility_exteriorLights(self)

    def exteriorFuelEquipments(self):
        return _openstudiomodelgeometry.Facility_exteriorFuelEquipments(self)

    def exteriorWaterEquipments(self):
        return _openstudiomodelgeometry.Facility_exteriorWaterEquipments(self)

    def totalSiteEnergy(self):
        return _openstudiomodelgeometry.Facility_totalSiteEnergy(self)

    def netSiteEnergy(self):
        return _openstudiomodelgeometry.Facility_netSiteEnergy(self)

    def totalSourceEnergy(self):
        return _openstudiomodelgeometry.Facility_totalSourceEnergy(self)

    def netSourceEnergy(self):
        return _openstudiomodelgeometry.Facility_netSourceEnergy(self)

    def annualTotalCost(self, fuel):
        return _openstudiomodelgeometry.Facility_annualTotalCost(self, fuel)

    def annualTotalCostPerBldgArea(self, fuel):
        return _openstudiomodelgeometry.Facility_annualTotalCostPerBldgArea(self, fuel)

    def annualTotalCostPerNetConditionedBldgArea(self, fuel):
        return _openstudiomodelgeometry.Facility_annualTotalCostPerNetConditionedBldgArea(self, fuel)

    def annualTotalUtilityCost(self):
        return _openstudiomodelgeometry.Facility_annualTotalUtilityCost(self)

    def annualElectricTotalCost(self):
        return _openstudiomodelgeometry.Facility_annualElectricTotalCost(self)

    def annualGasTotalCost(self):
        return _openstudiomodelgeometry.Facility_annualGasTotalCost(self)

    def annualDistrictCoolingTotalCost(self):
        return _openstudiomodelgeometry.Facility_annualDistrictCoolingTotalCost(self)

    def annualDistrictHeatingTotalCost(self):
        return _openstudiomodelgeometry.Facility_annualDistrictHeatingTotalCost(self)

    def annualWaterTotalCost(self):
        return _openstudiomodelgeometry.Facility_annualWaterTotalCost(self)

    def economicsCapitalCost(self):
        return _openstudiomodelgeometry.Facility_economicsCapitalCost(self)

    def economicsEnergyCost(self):
        return _openstudiomodelgeometry.Facility_economicsEnergyCost(self)

    def economicsTLCC(self):
        return _openstudiomodelgeometry.Facility_economicsTLCC(self)

    def economicsVirtualRateGas(self):
        return _openstudiomodelgeometry.Facility_economicsVirtualRateGas(self)

    def economicsVirtualRateElec(self):
        return _openstudiomodelgeometry.Facility_economicsVirtualRateElec(self)

    def economicsVirtualRateCombined(self):
        return _openstudiomodelgeometry.Facility_economicsVirtualRateCombined(self)

    def economicsSPB(self):
        return _openstudiomodelgeometry.Facility_economicsSPB(self)

    def economicsDPB(self):
        return _openstudiomodelgeometry.Facility_economicsDPB(self)

    def economicsNPV(self):
        return _openstudiomodelgeometry.Facility_economicsNPV(self)

    def economicsIRR(self):
        return _openstudiomodelgeometry.Facility_economicsIRR(self)

    def electricityHeating(self):
        return _openstudiomodelgeometry.Facility_electricityHeating(self)

    def electricityCooling(self):
        return _openstudiomodelgeometry.Facility_electricityCooling(self)

    def electricityInteriorLighting(self):
        return _openstudiomodelgeometry.Facility_electricityInteriorLighting(self)

    def electricityExteriorLighting(self):
        return _openstudiomodelgeometry.Facility_electricityExteriorLighting(self)

    def electricityInteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_electricityInteriorEquipment(self)

    def electricityExteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_electricityExteriorEquipment(self)

    def electricityFans(self):
        return _openstudiomodelgeometry.Facility_electricityFans(self)

    def electricityPumps(self):
        return _openstudiomodelgeometry.Facility_electricityPumps(self)

    def electricityHeatRejection(self):
        return _openstudiomodelgeometry.Facility_electricityHeatRejection(self)

    def electricityHumidification(self):
        return _openstudiomodelgeometry.Facility_electricityHumidification(self)

    def electricityHeatRecovery(self):
        return _openstudiomodelgeometry.Facility_electricityHeatRecovery(self)

    def electricityWaterSystems(self):
        return _openstudiomodelgeometry.Facility_electricityWaterSystems(self)

    def electricityRefrigeration(self):
        return _openstudiomodelgeometry.Facility_electricityRefrigeration(self)

    def electricityGenerators(self):
        return _openstudiomodelgeometry.Facility_electricityGenerators(self)

    def electricityTotalEndUses(self):
        return _openstudiomodelgeometry.Facility_electricityTotalEndUses(self)

    def naturalGasHeating(self):
        return _openstudiomodelgeometry.Facility_naturalGasHeating(self)

    def naturalGasCooling(self):
        return _openstudiomodelgeometry.Facility_naturalGasCooling(self)

    def naturalGasInteriorLighting(self):
        return _openstudiomodelgeometry.Facility_naturalGasInteriorLighting(self)

    def naturalGasExteriorLighting(self):
        return _openstudiomodelgeometry.Facility_naturalGasExteriorLighting(self)

    def naturalGasInteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_naturalGasInteriorEquipment(self)

    def naturalGasExteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_naturalGasExteriorEquipment(self)

    def naturalGasFans(self):
        return _openstudiomodelgeometry.Facility_naturalGasFans(self)

    def naturalGasPumps(self):
        return _openstudiomodelgeometry.Facility_naturalGasPumps(self)

    def naturalGasHeatRejection(self):
        return _openstudiomodelgeometry.Facility_naturalGasHeatRejection(self)

    def naturalGasHumidification(self):
        return _openstudiomodelgeometry.Facility_naturalGasHumidification(self)

    def naturalGasHeatRecovery(self):
        return _openstudiomodelgeometry.Facility_naturalGasHeatRecovery(self)

    def naturalGasWaterSystems(self):
        return _openstudiomodelgeometry.Facility_naturalGasWaterSystems(self)

    def naturalGasRefrigeration(self):
        return _openstudiomodelgeometry.Facility_naturalGasRefrigeration(self)

    def naturalGasGenerators(self):
        return _openstudiomodelgeometry.Facility_naturalGasGenerators(self)

    def naturalGasTotalEndUses(self):
        return _openstudiomodelgeometry.Facility_naturalGasTotalEndUses(self)

    def gasolineHeating(self):
        return _openstudiomodelgeometry.Facility_gasolineHeating(self)

    def gasolineCooling(self):
        return _openstudiomodelgeometry.Facility_gasolineCooling(self)

    def gasolineInteriorLighting(self):
        return _openstudiomodelgeometry.Facility_gasolineInteriorLighting(self)

    def gasolineExteriorLighting(self):
        return _openstudiomodelgeometry.Facility_gasolineExteriorLighting(self)

    def gasolineInteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_gasolineInteriorEquipment(self)

    def gasolineExteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_gasolineExteriorEquipment(self)

    def gasolineFans(self):
        return _openstudiomodelgeometry.Facility_gasolineFans(self)

    def gasolinePumps(self):
        return _openstudiomodelgeometry.Facility_gasolinePumps(self)

    def gasolineHeatRejection(self):
        return _openstudiomodelgeometry.Facility_gasolineHeatRejection(self)

    def gasolineHumidification(self):
        return _openstudiomodelgeometry.Facility_gasolineHumidification(self)

    def gasolineHeatRecovery(self):
        return _openstudiomodelgeometry.Facility_gasolineHeatRecovery(self)

    def gasolineWaterSystems(self):
        return _openstudiomodelgeometry.Facility_gasolineWaterSystems(self)

    def gasolineRefrigeration(self):
        return _openstudiomodelgeometry.Facility_gasolineRefrigeration(self)

    def gasolineGenerators(self):
        return _openstudiomodelgeometry.Facility_gasolineGenerators(self)

    def gasolineTotalEndUses(self):
        return _openstudiomodelgeometry.Facility_gasolineTotalEndUses(self)

    def dieselHeating(self):
        return _openstudiomodelgeometry.Facility_dieselHeating(self)

    def dieselCooling(self):
        return _openstudiomodelgeometry.Facility_dieselCooling(self)

    def dieselInteriorLighting(self):
        return _openstudiomodelgeometry.Facility_dieselInteriorLighting(self)

    def dieselExteriorLighting(self):
        return _openstudiomodelgeometry.Facility_dieselExteriorLighting(self)

    def dieselInteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_dieselInteriorEquipment(self)

    def dieselExteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_dieselExteriorEquipment(self)

    def dieselFans(self):
        return _openstudiomodelgeometry.Facility_dieselFans(self)

    def dieselPumps(self):
        return _openstudiomodelgeometry.Facility_dieselPumps(self)

    def dieselHeatRejection(self):
        return _openstudiomodelgeometry.Facility_dieselHeatRejection(self)

    def dieselHumidification(self):
        return _openstudiomodelgeometry.Facility_dieselHumidification(self)

    def dieselHeatRecovery(self):
        return _openstudiomodelgeometry.Facility_dieselHeatRecovery(self)

    def dieselWaterSystems(self):
        return _openstudiomodelgeometry.Facility_dieselWaterSystems(self)

    def dieselRefrigeration(self):
        return _openstudiomodelgeometry.Facility_dieselRefrigeration(self)

    def dieselGenerators(self):
        return _openstudiomodelgeometry.Facility_dieselGenerators(self)

    def dieselTotalEndUses(self):
        return _openstudiomodelgeometry.Facility_dieselTotalEndUses(self)

    def coalHeating(self):
        return _openstudiomodelgeometry.Facility_coalHeating(self)

    def coalCooling(self):
        return _openstudiomodelgeometry.Facility_coalCooling(self)

    def coalInteriorLighting(self):
        return _openstudiomodelgeometry.Facility_coalInteriorLighting(self)

    def coalExteriorLighting(self):
        return _openstudiomodelgeometry.Facility_coalExteriorLighting(self)

    def coalInteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_coalInteriorEquipment(self)

    def coalExteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_coalExteriorEquipment(self)

    def coalFans(self):
        return _openstudiomodelgeometry.Facility_coalFans(self)

    def coalPumps(self):
        return _openstudiomodelgeometry.Facility_coalPumps(self)

    def coalHeatRejection(self):
        return _openstudiomodelgeometry.Facility_coalHeatRejection(self)

    def coalHumidification(self):
        return _openstudiomodelgeometry.Facility_coalHumidification(self)

    def coalHeatRecovery(self):
        return _openstudiomodelgeometry.Facility_coalHeatRecovery(self)

    def coalWaterSystems(self):
        return _openstudiomodelgeometry.Facility_coalWaterSystems(self)

    def coalRefrigeration(self):
        return _openstudiomodelgeometry.Facility_coalRefrigeration(self)

    def coalGenerators(self):
        return _openstudiomodelgeometry.Facility_coalGenerators(self)

    def coalTotalEndUses(self):
        return _openstudiomodelgeometry.Facility_coalTotalEndUses(self)

    def fuelOilNo1Heating(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1Heating(self)

    def fuelOilNo1Cooling(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1Cooling(self)

    def fuelOilNo1InteriorLighting(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1InteriorLighting(self)

    def fuelOilNo1ExteriorLighting(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1ExteriorLighting(self)

    def fuelOilNo1InteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1InteriorEquipment(self)

    def fuelOilNo1ExteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1ExteriorEquipment(self)

    def fuelOilNo1Fans(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1Fans(self)

    def fuelOilNo1Pumps(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1Pumps(self)

    def fuelOilNo1HeatRejection(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1HeatRejection(self)

    def fuelOilNo1Humidification(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1Humidification(self)

    def fuelOilNo1HeatRecovery(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1HeatRecovery(self)

    def fuelOilNo1WaterSystems(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1WaterSystems(self)

    def fuelOilNo1Refrigeration(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1Refrigeration(self)

    def fuelOilNo1Generators(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1Generators(self)

    def fuelOilNo1TotalEndUses(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo1TotalEndUses(self)

    def fuelOilNo2Heating(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2Heating(self)

    def fuelOilNo2Cooling(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2Cooling(self)

    def fuelOilNo2InteriorLighting(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2InteriorLighting(self)

    def fuelOilNo2ExteriorLighting(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2ExteriorLighting(self)

    def fuelOilNo2InteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2InteriorEquipment(self)

    def fuelOilNo2ExteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2ExteriorEquipment(self)

    def fuelOilNo2Fans(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2Fans(self)

    def fuelOilNo2Pumps(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2Pumps(self)

    def fuelOilNo2HeatRejection(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2HeatRejection(self)

    def fuelOilNo2Humidification(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2Humidification(self)

    def fuelOilNo2HeatRecovery(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2HeatRecovery(self)

    def fuelOilNo2WaterSystems(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2WaterSystems(self)

    def fuelOilNo2Refrigeration(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2Refrigeration(self)

    def fuelOilNo2Generators(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2Generators(self)

    def fuelOilNo2TotalEndUses(self):
        return _openstudiomodelgeometry.Facility_fuelOilNo2TotalEndUses(self)

    def propaneHeating(self):
        return _openstudiomodelgeometry.Facility_propaneHeating(self)

    def propaneCooling(self):
        return _openstudiomodelgeometry.Facility_propaneCooling(self)

    def propaneInteriorLighting(self):
        return _openstudiomodelgeometry.Facility_propaneInteriorLighting(self)

    def propaneExteriorLighting(self):
        return _openstudiomodelgeometry.Facility_propaneExteriorLighting(self)

    def propaneInteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_propaneInteriorEquipment(self)

    def propaneExteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_propaneExteriorEquipment(self)

    def propaneFans(self):
        return _openstudiomodelgeometry.Facility_propaneFans(self)

    def propanePumps(self):
        return _openstudiomodelgeometry.Facility_propanePumps(self)

    def propaneHeatRejection(self):
        return _openstudiomodelgeometry.Facility_propaneHeatRejection(self)

    def propaneHumidification(self):
        return _openstudiomodelgeometry.Facility_propaneHumidification(self)

    def propaneHeatRecovery(self):
        return _openstudiomodelgeometry.Facility_propaneHeatRecovery(self)

    def propaneWaterSystems(self):
        return _openstudiomodelgeometry.Facility_propaneWaterSystems(self)

    def propaneRefrigeration(self):
        return _openstudiomodelgeometry.Facility_propaneRefrigeration(self)

    def propaneGenerators(self):
        return _openstudiomodelgeometry.Facility_propaneGenerators(self)

    def propaneTotalEndUses(self):
        return _openstudiomodelgeometry.Facility_propaneTotalEndUses(self)

    def otherFuel1Heating(self):
        return _openstudiomodelgeometry.Facility_otherFuel1Heating(self)

    def otherFuel1Cooling(self):
        return _openstudiomodelgeometry.Facility_otherFuel1Cooling(self)

    def otherFuel1InteriorLighting(self):
        return _openstudiomodelgeometry.Facility_otherFuel1InteriorLighting(self)

    def otherFuel1ExteriorLighting(self):
        return _openstudiomodelgeometry.Facility_otherFuel1ExteriorLighting(self)

    def otherFuel1InteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_otherFuel1InteriorEquipment(self)

    def otherFuel1ExteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_otherFuel1ExteriorEquipment(self)

    def otherFuel1Fans(self):
        return _openstudiomodelgeometry.Facility_otherFuel1Fans(self)

    def otherFuel1Pumps(self):
        return _openstudiomodelgeometry.Facility_otherFuel1Pumps(self)

    def otherFuel1HeatRejection(self):
        return _openstudiomodelgeometry.Facility_otherFuel1HeatRejection(self)

    def otherFuel1Humidification(self):
        return _openstudiomodelgeometry.Facility_otherFuel1Humidification(self)

    def otherFuel1HeatRecovery(self):
        return _openstudiomodelgeometry.Facility_otherFuel1HeatRecovery(self)

    def otherFuel1WaterSystems(self):
        return _openstudiomodelgeometry.Facility_otherFuel1WaterSystems(self)

    def otherFuel1Refrigeration(self):
        return _openstudiomodelgeometry.Facility_otherFuel1Refrigeration(self)

    def otherFuel1Generators(self):
        return _openstudiomodelgeometry.Facility_otherFuel1Generators(self)

    def otherFuel1TotalEndUses(self):
        return _openstudiomodelgeometry.Facility_otherFuel1TotalEndUses(self)

    def otherFuel2Heating(self):
        return _openstudiomodelgeometry.Facility_otherFuel2Heating(self)

    def otherFuel2Cooling(self):
        return _openstudiomodelgeometry.Facility_otherFuel2Cooling(self)

    def otherFuel2InteriorLighting(self):
        return _openstudiomodelgeometry.Facility_otherFuel2InteriorLighting(self)

    def otherFuel2ExteriorLighting(self):
        return _openstudiomodelgeometry.Facility_otherFuel2ExteriorLighting(self)

    def otherFuel2InteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_otherFuel2InteriorEquipment(self)

    def otherFuel2ExteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_otherFuel2ExteriorEquipment(self)

    def otherFuel2Fans(self):
        return _openstudiomodelgeometry.Facility_otherFuel2Fans(self)

    def otherFuel2Pumps(self):
        return _openstudiomodelgeometry.Facility_otherFuel2Pumps(self)

    def otherFuel2HeatRejection(self):
        return _openstudiomodelgeometry.Facility_otherFuel2HeatRejection(self)

    def otherFuel2Humidification(self):
        return _openstudiomodelgeometry.Facility_otherFuel2Humidification(self)

    def otherFuel2HeatRecovery(self):
        return _openstudiomodelgeometry.Facility_otherFuel2HeatRecovery(self)

    def otherFuel2WaterSystems(self):
        return _openstudiomodelgeometry.Facility_otherFuel2WaterSystems(self)

    def otherFuel2Refrigeration(self):
        return _openstudiomodelgeometry.Facility_otherFuel2Refrigeration(self)

    def otherFuel2Generators(self):
        return _openstudiomodelgeometry.Facility_otherFuel2Generators(self)

    def otherFuel2TotalEndUses(self):
        return _openstudiomodelgeometry.Facility_otherFuel2TotalEndUses(self)

    def districtCoolingHeating(self):
        return _openstudiomodelgeometry.Facility_districtCoolingHeating(self)

    def districtCoolingCooling(self):
        return _openstudiomodelgeometry.Facility_districtCoolingCooling(self)

    def districtCoolingInteriorLighting(self):
        return _openstudiomodelgeometry.Facility_districtCoolingInteriorLighting(self)

    def districtCoolingExteriorLighting(self):
        return _openstudiomodelgeometry.Facility_districtCoolingExteriorLighting(self)

    def districtCoolingInteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_districtCoolingInteriorEquipment(self)

    def districtCoolingExteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_districtCoolingExteriorEquipment(self)

    def districtCoolingFans(self):
        return _openstudiomodelgeometry.Facility_districtCoolingFans(self)

    def districtCoolingPumps(self):
        return _openstudiomodelgeometry.Facility_districtCoolingPumps(self)

    def districtCoolingHeatRejection(self):
        return _openstudiomodelgeometry.Facility_districtCoolingHeatRejection(self)

    def districtCoolingHumidification(self):
        return _openstudiomodelgeometry.Facility_districtCoolingHumidification(self)

    def districtCoolingHeatRecovery(self):
        return _openstudiomodelgeometry.Facility_districtCoolingHeatRecovery(self)

    def districtCoolingWaterSystems(self):
        return _openstudiomodelgeometry.Facility_districtCoolingWaterSystems(self)

    def districtCoolingRefrigeration(self):
        return _openstudiomodelgeometry.Facility_districtCoolingRefrigeration(self)

    def districtCoolingGenerators(self):
        return _openstudiomodelgeometry.Facility_districtCoolingGenerators(self)

    def districtCoolingTotalEndUses(self):
        return _openstudiomodelgeometry.Facility_districtCoolingTotalEndUses(self)

    def districtHeatingHeating(self):
        return _openstudiomodelgeometry.Facility_districtHeatingHeating(self)

    def districtHeatingCooling(self):
        return _openstudiomodelgeometry.Facility_districtHeatingCooling(self)

    def districtHeatingInteriorLighting(self):
        return _openstudiomodelgeometry.Facility_districtHeatingInteriorLighting(self)

    def districtHeatingExteriorLighting(self):
        return _openstudiomodelgeometry.Facility_districtHeatingExteriorLighting(self)

    def districtHeatingInteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_districtHeatingInteriorEquipment(self)

    def districtHeatingExteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_districtHeatingExteriorEquipment(self)

    def districtHeatingFans(self):
        return _openstudiomodelgeometry.Facility_districtHeatingFans(self)

    def districtHeatingPumps(self):
        return _openstudiomodelgeometry.Facility_districtHeatingPumps(self)

    def districtHeatingHeatRejection(self):
        return _openstudiomodelgeometry.Facility_districtHeatingHeatRejection(self)

    def districtHeatingHumidification(self):
        return _openstudiomodelgeometry.Facility_districtHeatingHumidification(self)

    def districtHeatingHeatRecovery(self):
        return _openstudiomodelgeometry.Facility_districtHeatingHeatRecovery(self)

    def districtHeatingWaterSystems(self):
        return _openstudiomodelgeometry.Facility_districtHeatingWaterSystems(self)

    def districtHeatingRefrigeration(self):
        return _openstudiomodelgeometry.Facility_districtHeatingRefrigeration(self)

    def districtHeatingGenerators(self):
        return _openstudiomodelgeometry.Facility_districtHeatingGenerators(self)

    def districtHeatingTotalEndUses(self):
        return _openstudiomodelgeometry.Facility_districtHeatingTotalEndUses(self)

    def waterHeating(self):
        return _openstudiomodelgeometry.Facility_waterHeating(self)

    def waterCooling(self):
        return _openstudiomodelgeometry.Facility_waterCooling(self)

    def waterInteriorLighting(self):
        return _openstudiomodelgeometry.Facility_waterInteriorLighting(self)

    def waterExteriorLighting(self):
        return _openstudiomodelgeometry.Facility_waterExteriorLighting(self)

    def waterInteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_waterInteriorEquipment(self)

    def waterExteriorEquipment(self):
        return _openstudiomodelgeometry.Facility_waterExteriorEquipment(self)

    def waterFans(self):
        return _openstudiomodelgeometry.Facility_waterFans(self)

    def waterPumps(self):
        return _openstudiomodelgeometry.Facility_waterPumps(self)

    def waterHeatRejection(self):
        return _openstudiomodelgeometry.Facility_waterHeatRejection(self)

    def waterHumidification(self):
        return _openstudiomodelgeometry.Facility_waterHumidification(self)

    def waterHeatRecovery(self):
        return _openstudiomodelgeometry.Facility_waterHeatRecovery(self)

    def waterWaterSystems(self):
        return _openstudiomodelgeometry.Facility_waterWaterSystems(self)

    def waterRefrigeration(self):
        return _openstudiomodelgeometry.Facility_waterRefrigeration(self)

    def waterGenerators(self):
        return _openstudiomodelgeometry.Facility_waterGenerators(self)

    def waterTotalEndUses(self):
        return _openstudiomodelgeometry.Facility_waterTotalEndUses(self)

    def hoursHeatingSetpointNotMet(self):
        return _openstudiomodelgeometry.Facility_hoursHeatingSetpointNotMet(self)

    def hoursCoolingSetpointNotMet(self):
        return _openstudiomodelgeometry.Facility_hoursCoolingSetpointNotMet(self)

    def endUses(self):
        return _openstudiomodelgeometry.Facility_endUses(self)

    def calibrationResult(self):
        return _openstudiomodelgeometry.Facility_calibrationResult(self)

# Register Facility in _openstudiomodelgeometry:
_openstudiomodelgeometry.Facility_swigregister(Facility)

def toFacility(idfObject):
    return _openstudiomodelgeometry.toFacility(idfObject)

def getFacility(t_model):
    return _openstudiomodelgeometry.getFacility(t_model)

def getOptionalFacility(t_model):
    return _openstudiomodelgeometry.getOptionalFacility(t_model)

def _to_Facility(self) -> OptionalFacility:
    """Try to cast the ModelObject to a Facility.

    :return: An Optional Facility.
    """
    return toFacility(self)
openstudioutilitiesidf.IdfObject.to_Facility = _to_Facility

def _getFacility(self) -> Facility:
    """Get or instantiate a UniqueModelObject of type Facility.

    :return: An existing Facility or a newly instantiated one.
    """
    return getFacility(self)
Model.getFacility = _getFacility

def _getOptionalFacility(self) -> OptionalFacility:
    """Return a UniqueModelObject of type Facility only if it's already present in the Model.

    :return: An Optional Facility.
    """
    return getOptionalFacility(self)
Model.getOptionalFacility = _getOptionalFacility

class Building(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_Building

    def __init__(self, *args):
        _openstudiomodelgeometry.Building_swiginit(self, _openstudiomodelgeometry.new_Building(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.Building_iddObjectType()

    def northAxis(self):
        return _openstudiomodelgeometry.Building_northAxis(self)

    def isNorthAxisDefaulted(self):
        return _openstudiomodelgeometry.Building_isNorthAxisDefaulted(self)

    def nominalFloortoFloorHeight(self):
        return _openstudiomodelgeometry.Building_nominalFloortoFloorHeight(self)

    def standardsNumberOfStories(self):
        return _openstudiomodelgeometry.Building_standardsNumberOfStories(self)

    def standardsNumberOfAboveGroundStories(self):
        return _openstudiomodelgeometry.Building_standardsNumberOfAboveGroundStories(self)

    def standardsNumberOfLivingUnits(self):
        return _openstudiomodelgeometry.Building_standardsNumberOfLivingUnits(self)

    def nominalFloortoCeilingHeight(self):
        return _openstudiomodelgeometry.Building_nominalFloortoCeilingHeight(self)

    def standardsTemplate(self):
        return _openstudiomodelgeometry.Building_standardsTemplate(self)

    def suggestedStandardsTemplates(self):
        return _openstudiomodelgeometry.Building_suggestedStandardsTemplates(self)

    def standardsBuildingType(self):
        return _openstudiomodelgeometry.Building_standardsBuildingType(self)

    def suggestedStandardsBuildingTypes(self):
        return _openstudiomodelgeometry.Building_suggestedStandardsBuildingTypes(self)

    def relocatable(self):
        return _openstudiomodelgeometry.Building_relocatable(self)

    def isRelocatableDefaulted(self):
        return _openstudiomodelgeometry.Building_isRelocatableDefaulted(self)

    def getDefaultSchedule(self, defaultScheduleType):
        return _openstudiomodelgeometry.Building_getDefaultSchedule(self, defaultScheduleType)

    def setNorthAxis(self, northAxis):
        return _openstudiomodelgeometry.Building_setNorthAxis(self, northAxis)

    def resetNorthAxis(self):
        return _openstudiomodelgeometry.Building_resetNorthAxis(self)

    def setNominalFloortoFloorHeight(self, nominalFloortoFloorHeight):
        return _openstudiomodelgeometry.Building_setNominalFloortoFloorHeight(self, nominalFloortoFloorHeight)

    def resetNominalFloortoFloorHeight(self):
        return _openstudiomodelgeometry.Building_resetNominalFloortoFloorHeight(self)

    def setStandardsNumberOfStories(self, value):
        return _openstudiomodelgeometry.Building_setStandardsNumberOfStories(self, value)

    def resetStandardsNumberOfStories(self):
        return _openstudiomodelgeometry.Building_resetStandardsNumberOfStories(self)

    def setStandardsNumberOfAboveGroundStories(self, value):
        return _openstudiomodelgeometry.Building_setStandardsNumberOfAboveGroundStories(self, value)

    def resetStandardsNumberOfAboveGroundStories(self):
        return _openstudiomodelgeometry.Building_resetStandardsNumberOfAboveGroundStories(self)

    def setStandardsNumberOfLivingUnits(self, value):
        return _openstudiomodelgeometry.Building_setStandardsNumberOfLivingUnits(self, value)

    def resetStandardsNumberOfLivingUnits(self):
        return _openstudiomodelgeometry.Building_resetStandardsNumberOfLivingUnits(self)

    def setNominalFloortoCeilingHeight(self, nominalFloortoCeilingHeight):
        return _openstudiomodelgeometry.Building_setNominalFloortoCeilingHeight(self, nominalFloortoCeilingHeight)

    def resetNominalFloortoCeilingHeight(self):
        return _openstudiomodelgeometry.Building_resetNominalFloortoCeilingHeight(self)

    def setStandardsTemplate(self, standardsTemplate):
        return _openstudiomodelgeometry.Building_setStandardsTemplate(self, standardsTemplate)

    def resetStandardsTemplate(self):
        return _openstudiomodelgeometry.Building_resetStandardsTemplate(self)

    def setStandardsBuildingType(self, standardsBuildingType):
        return _openstudiomodelgeometry.Building_setStandardsBuildingType(self, standardsBuildingType)

    def resetStandardsBuildingType(self):
        return _openstudiomodelgeometry.Building_resetStandardsBuildingType(self)

    def setRelocatable(self, isRelocatable):
        return _openstudiomodelgeometry.Building_setRelocatable(self, isRelocatable)

    def setRelocatableNoFail(self, isRelocatable):
        return _openstudiomodelgeometry.Building_setRelocatableNoFail(self, isRelocatable)

    def resetRelocatable(self):
        return _openstudiomodelgeometry.Building_resetRelocatable(self)

    def spaceType(self):
        return _openstudiomodelgeometry.Building_spaceType(self)

    def setSpaceType(self, spaceType):
        return _openstudiomodelgeometry.Building_setSpaceType(self, spaceType)

    def resetSpaceType(self):
        return _openstudiomodelgeometry.Building_resetSpaceType(self)

    def defaultConstructionSet(self):
        return _openstudiomodelgeometry.Building_defaultConstructionSet(self)

    def setDefaultConstructionSet(self, defaultConstructionSet):
        return _openstudiomodelgeometry.Building_setDefaultConstructionSet(self, defaultConstructionSet)

    def resetDefaultConstructionSet(self):
        return _openstudiomodelgeometry.Building_resetDefaultConstructionSet(self)

    def defaultScheduleSet(self):
        return _openstudiomodelgeometry.Building_defaultScheduleSet(self)

    def setDefaultScheduleSet(self, defaultScheduleSet):
        return _openstudiomodelgeometry.Building_setDefaultScheduleSet(self, defaultScheduleSet)

    def resetDefaultScheduleSet(self):
        return _openstudiomodelgeometry.Building_resetDefaultScheduleSet(self)

    def meters(self):
        return _openstudiomodelgeometry.Building_meters(self)

    def buildingStories(self):
        return _openstudiomodelgeometry.Building_buildingStories(self)

    def facility(self):
        return _openstudiomodelgeometry.Building_facility(self)

    def spaces(self):
        return _openstudiomodelgeometry.Building_spaces(self)

    def shadingSurfaceGroups(self):
        return _openstudiomodelgeometry.Building_shadingSurfaceGroups(self)

    def thermalZones(self):
        return _openstudiomodelgeometry.Building_thermalZones(self)

    def exteriorWalls(self):
        return _openstudiomodelgeometry.Building_exteriorWalls(self)

    def roofs(self):
        return _openstudiomodelgeometry.Building_roofs(self)

    def floorArea(self):
        return _openstudiomodelgeometry.Building_floorArea(self)

    def conditionedFloorArea(self):
        return _openstudiomodelgeometry.Building_conditionedFloorArea(self)

    def exteriorSurfaceArea(self):
        return _openstudiomodelgeometry.Building_exteriorSurfaceArea(self)

    def exteriorWallArea(self):
        return _openstudiomodelgeometry.Building_exteriorWallArea(self)

    def airVolume(self):
        return _openstudiomodelgeometry.Building_airVolume(self)

    def numberOfPeople(self):
        return _openstudiomodelgeometry.Building_numberOfPeople(self)

    def peoplePerFloorArea(self):
        return _openstudiomodelgeometry.Building_peoplePerFloorArea(self)

    def floorAreaPerPerson(self):
        return _openstudiomodelgeometry.Building_floorAreaPerPerson(self)

    def lightingPower(self):
        return _openstudiomodelgeometry.Building_lightingPower(self)

    def lightingPowerPerFloorArea(self):
        return _openstudiomodelgeometry.Building_lightingPowerPerFloorArea(self)

    def lightingPowerPerPerson(self):
        return _openstudiomodelgeometry.Building_lightingPowerPerPerson(self)

    def electricEquipmentPower(self):
        return _openstudiomodelgeometry.Building_electricEquipmentPower(self)

    def electricEquipmentPowerPerFloorArea(self):
        return _openstudiomodelgeometry.Building_electricEquipmentPowerPerFloorArea(self)

    def electricEquipmentPowerPerPerson(self):
        return _openstudiomodelgeometry.Building_electricEquipmentPowerPerPerson(self)

    def gasEquipmentPower(self):
        return _openstudiomodelgeometry.Building_gasEquipmentPower(self)

    def gasEquipmentPowerPerFloorArea(self):
        return _openstudiomodelgeometry.Building_gasEquipmentPowerPerFloorArea(self)

    def gasEquipmentPowerPerPerson(self):
        return _openstudiomodelgeometry.Building_gasEquipmentPowerPerPerson(self)

    def infiltrationDesignFlowRate(self):
        return _openstudiomodelgeometry.Building_infiltrationDesignFlowRate(self)

    def infiltrationDesignFlowPerSpaceFloorArea(self):
        return _openstudiomodelgeometry.Building_infiltrationDesignFlowPerSpaceFloorArea(self)

    def infiltrationDesignFlowPerExteriorSurfaceArea(self):
        return _openstudiomodelgeometry.Building_infiltrationDesignFlowPerExteriorSurfaceArea(self)

    def infiltrationDesignFlowPerExteriorWallArea(self):
        return _openstudiomodelgeometry.Building_infiltrationDesignFlowPerExteriorWallArea(self)

    def infiltrationDesignAirChangesPerHour(self):
        return _openstudiomodelgeometry.Building_infiltrationDesignAirChangesPerHour(self)

    def transformation(self):
        return _openstudiomodelgeometry.Building_transformation(self)

    def generateSkylightPattern(self, skylightToProjectedFloorRatio, desiredWidth, desiredHeight):
        return _openstudiomodelgeometry.Building_generateSkylightPattern(self, skylightToProjectedFloorRatio, desiredWidth, desiredHeight)

    def exteriorPerimeter(self):
        return _openstudiomodelgeometry.Building_exteriorPerimeter(self)

# Register Building in _openstudiomodelgeometry:
_openstudiomodelgeometry.Building_swigregister(Building)

def toBuilding(idfObject):
    return _openstudiomodelgeometry.toBuilding(idfObject)

def getBuilding(t_model):
    return _openstudiomodelgeometry.getBuilding(t_model)

def getOptionalBuilding(t_model):
    return _openstudiomodelgeometry.getOptionalBuilding(t_model)

def _to_Building(self) -> OptionalBuilding:
    """Try to cast the ModelObject to a Building.

    :return: An Optional Building.
    """
    return toBuilding(self)
openstudioutilitiesidf.IdfObject.to_Building = _to_Building

def _getBuilding(self) -> Building:
    """Get or instantiate a UniqueModelObject of type Building.

    :return: An existing Building or a newly instantiated one.
    """
    return getBuilding(self)
Model.getBuilding = _getBuilding

def _getOptionalBuilding(self) -> OptionalBuilding:
    """Return a UniqueModelObject of type Building only if it's already present in the Model.

    :return: An Optional Building.
    """
    return getOptionalBuilding(self)
Model.getOptionalBuilding = _getOptionalBuilding

class BuildingStory(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_BuildingStory

    def __init__(self, *args):
        _openstudiomodelgeometry.BuildingStory_swiginit(self, _openstudiomodelgeometry.new_BuildingStory(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.BuildingStory_iddObjectType()

    def nominalZCoordinate(self):
        return _openstudiomodelgeometry.BuildingStory_nominalZCoordinate(self)

    def nominalFloortoFloorHeight(self):
        return _openstudiomodelgeometry.BuildingStory_nominalFloortoFloorHeight(self)

    def nominalFloortoCeilingHeight(self):
        return _openstudiomodelgeometry.BuildingStory_nominalFloortoCeilingHeight(self)

    def boundingBoxBuildingCoordinates(self):
        return _openstudiomodelgeometry.BuildingStory_boundingBoxBuildingCoordinates(self)

    def boundingBoxSiteCoordinates(self):
        return _openstudiomodelgeometry.BuildingStory_boundingBoxSiteCoordinates(self)

    def setNominalZCoordinate(self, nominalZCoordinate):
        return _openstudiomodelgeometry.BuildingStory_setNominalZCoordinate(self, nominalZCoordinate)

    def resetNominalZCoordinate(self):
        return _openstudiomodelgeometry.BuildingStory_resetNominalZCoordinate(self)

    def setNominalFloortoFloorHeight(self, nominalFloortoFloorHeight):
        return _openstudiomodelgeometry.BuildingStory_setNominalFloortoFloorHeight(self, nominalFloortoFloorHeight)

    def resetNominalFloortoFloorHeight(self):
        return _openstudiomodelgeometry.BuildingStory_resetNominalFloortoFloorHeight(self)

    def setNominalFloortoCeilingHeight(self, nominalFloortoCeilingHeight):
        return _openstudiomodelgeometry.BuildingStory_setNominalFloortoCeilingHeight(self, nominalFloortoCeilingHeight)

    def resetNominalFloortoCeilingHeight(self):
        return _openstudiomodelgeometry.BuildingStory_resetNominalFloortoCeilingHeight(self)

    def spaces(self):
        return _openstudiomodelgeometry.BuildingStory_spaces(self)

    def defaultConstructionSet(self):
        return _openstudiomodelgeometry.BuildingStory_defaultConstructionSet(self)

    def setDefaultConstructionSet(self, defaultConstructionSet):
        return _openstudiomodelgeometry.BuildingStory_setDefaultConstructionSet(self, defaultConstructionSet)

    def resetDefaultConstructionSet(self):
        return _openstudiomodelgeometry.BuildingStory_resetDefaultConstructionSet(self)

    def defaultScheduleSet(self):
        return _openstudiomodelgeometry.BuildingStory_defaultScheduleSet(self)

    def setDefaultScheduleSet(self, defaultScheduleSet):
        return _openstudiomodelgeometry.BuildingStory_setDefaultScheduleSet(self, defaultScheduleSet)

    def resetDefaultScheduleSet(self):
        return _openstudiomodelgeometry.BuildingStory_resetDefaultScheduleSet(self)

    def getDefaultSchedule(self, defaultScheduleType):
        return _openstudiomodelgeometry.BuildingStory_getDefaultSchedule(self, defaultScheduleType)

    def renderingColor(self):
        return _openstudiomodelgeometry.BuildingStory_renderingColor(self)

    def setRenderingColor(self, renderingColor):
        return _openstudiomodelgeometry.BuildingStory_setRenderingColor(self, renderingColor)

    def resetRenderingColor(self):
        return _openstudiomodelgeometry.BuildingStory_resetRenderingColor(self)

# Register BuildingStory in _openstudiomodelgeometry:
_openstudiomodelgeometry.BuildingStory_swigregister(BuildingStory)

def toBuildingStory(idfObject):
    return _openstudiomodelgeometry.toBuildingStory(idfObject)

def getBuildingStory(t_model, t_handle):
    return _openstudiomodelgeometry.getBuildingStory(t_model, t_handle)

def getBuildingStorys(t_model):
    return _openstudiomodelgeometry.getBuildingStorys(t_model)

def getBuildingStoryByName(t_model, t_name):
    return _openstudiomodelgeometry.getBuildingStoryByName(t_model, t_name)

def getBuildingStorysByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getBuildingStorysByName(t_model, t_name, t_exactMatch)

def _to_BuildingStory(self) -> OptionalBuildingStory:
    """Try to cast the ModelObject to a BuildingStory.

    :return: An Optional BuildingStory.
    """
    return toBuildingStory(self)
openstudioutilitiesidf.IdfObject.to_BuildingStory = _to_BuildingStory

def _getBuildingStory(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalBuildingStory:
    """Try to get an object of type BuildingStory referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional BuildingStory.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getBuildingStory(self, t_handle)
Model.getBuildingStory = _getBuildingStory

def _getBuildingStorys(self) -> BuildingStoryVector:
    """Get a vector of all objects of type BuildingStory in the model.

    :return: A vector of BuildingStory.
    """
    return getBuildingStorys(self)
Model.getBuildingStorys = _getBuildingStorys

def _getBuildingStoryByName(self, t_name: str) -> OptionalBuildingStory:
    """Try to get an object of type BuildingStory that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional BuildingStory.
    """
    return getBuildingStoryByName(self, t_name)
Model.getBuildingStoryByName = _getBuildingStoryByName

def _getBuildingStorysByName(self, t_name: str, t_exactMatch: bool) -> BuildingStoryVector:
    """Returns all objects of type BuildingStory named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getBuildingStorysByName(self, t_name, t_exactMatch)
Model.getBuildingStorysByName = _getBuildingStorysByName

class BuildingUnit(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_BuildingUnit

    def __init__(self, *args):
        _openstudiomodelgeometry.BuildingUnit_swiginit(self, _openstudiomodelgeometry.new_BuildingUnit(*args))

    @staticmethod
    def buildingUnitTypeValues():
        return _openstudiomodelgeometry.BuildingUnit_buildingUnitTypeValues()

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.BuildingUnit_iddObjectType()

    def renderingColor(self):
        return _openstudiomodelgeometry.BuildingUnit_renderingColor(self)

    def buildingUnitType(self):
        return _openstudiomodelgeometry.BuildingUnit_buildingUnitType(self)

    def spaces(self):
        return _openstudiomodelgeometry.BuildingUnit_spaces(self)

    def featureNames(self):
        return _openstudiomodelgeometry.BuildingUnit_featureNames(self)

    def getFeatureDataType(self, name):
        return _openstudiomodelgeometry.BuildingUnit_getFeatureDataType(self, name)

    def getFeatureAsString(self, name):
        return _openstudiomodelgeometry.BuildingUnit_getFeatureAsString(self, name)

    def getFeatureAsDouble(self, name):
        return _openstudiomodelgeometry.BuildingUnit_getFeatureAsDouble(self, name)

    def getFeatureAsInteger(self, name):
        return _openstudiomodelgeometry.BuildingUnit_getFeatureAsInteger(self, name)

    def getFeatureAsBoolean(self, name):
        return _openstudiomodelgeometry.BuildingUnit_getFeatureAsBoolean(self, name)

    def suggestedFeatures(self):
        return _openstudiomodelgeometry.BuildingUnit_suggestedFeatures(self)

    def floorArea(self):
        return _openstudiomodelgeometry.BuildingUnit_floorArea(self)

    def setRenderingColor(self, renderingColor):
        return _openstudiomodelgeometry.BuildingUnit_setRenderingColor(self, renderingColor)

    def resetRenderingColor(self):
        return _openstudiomodelgeometry.BuildingUnit_resetRenderingColor(self)

    def setBuildingUnitType(self, buildingUnitType):
        return _openstudiomodelgeometry.BuildingUnit_setBuildingUnitType(self, buildingUnitType)

    def resetBuildingUnitType(self):
        return _openstudiomodelgeometry.BuildingUnit_resetBuildingUnitType(self)

    def setFeature(self, *args):
        return _openstudiomodelgeometry.BuildingUnit_setFeature(self, *args)

    def resetFeature(self, name):
        return _openstudiomodelgeometry.BuildingUnit_resetFeature(self, name)

# Register BuildingUnit in _openstudiomodelgeometry:
_openstudiomodelgeometry.BuildingUnit_swigregister(BuildingUnit)

def toBuildingUnit(idfObject):
    return _openstudiomodelgeometry.toBuildingUnit(idfObject)

def getBuildingUnit(t_model, t_handle):
    return _openstudiomodelgeometry.getBuildingUnit(t_model, t_handle)

def getBuildingUnits(t_model):
    return _openstudiomodelgeometry.getBuildingUnits(t_model)

def getBuildingUnitByName(t_model, t_name):
    return _openstudiomodelgeometry.getBuildingUnitByName(t_model, t_name)

def getBuildingUnitsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getBuildingUnitsByName(t_model, t_name, t_exactMatch)

def _to_BuildingUnit(self) -> OptionalBuildingUnit:
    """Try to cast the ModelObject to a BuildingUnit.

    :return: An Optional BuildingUnit.
    """
    return toBuildingUnit(self)
openstudioutilitiesidf.IdfObject.to_BuildingUnit = _to_BuildingUnit

def _getBuildingUnit(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalBuildingUnit:
    """Try to get an object of type BuildingUnit referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional BuildingUnit.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getBuildingUnit(self, t_handle)
Model.getBuildingUnit = _getBuildingUnit

def _getBuildingUnits(self) -> BuildingUnitVector:
    """Get a vector of all objects of type BuildingUnit in the model.

    :return: A vector of BuildingUnit.
    """
    return getBuildingUnits(self)
Model.getBuildingUnits = _getBuildingUnits

def _getBuildingUnitByName(self, t_name: str) -> OptionalBuildingUnit:
    """Try to get an object of type BuildingUnit that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional BuildingUnit.
    """
    return getBuildingUnitByName(self, t_name)
Model.getBuildingUnitByName = _getBuildingUnitByName

def _getBuildingUnitsByName(self, t_name: str, t_exactMatch: bool) -> BuildingUnitVector:
    """Returns all objects of type BuildingUnit named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getBuildingUnitsByName(self, t_name, t_exactMatch)
Model.getBuildingUnitsByName = _getBuildingUnitsByName

class PlanarSurfaceGroup(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_PlanarSurfaceGroup

    def __init__(self, *args):
        _openstudiomodelgeometry.PlanarSurfaceGroup_swiginit(self, _openstudiomodelgeometry.new_PlanarSurfaceGroup(*args))

    def directionofRelativeNorth(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_directionofRelativeNorth(self)

    def isDirectionofRelativeNorthDefaulted(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_isDirectionofRelativeNorthDefaulted(self)

    def xOrigin(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_xOrigin(self)

    def isXOriginDefaulted(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_isXOriginDefaulted(self)

    def yOrigin(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_yOrigin(self)

    def isYOriginDefaulted(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_isYOriginDefaulted(self)

    def zOrigin(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_zOrigin(self)

    def isZOriginDefaulted(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_isZOriginDefaulted(self)

    def setDirectionofRelativeNorth(self, directionofRelativeNorth):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_setDirectionofRelativeNorth(self, directionofRelativeNorth)

    def resetDirectionofRelativeNorth(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_resetDirectionofRelativeNorth(self)

    def setXOrigin(self, xOrigin):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_setXOrigin(self, xOrigin)

    def resetXOrigin(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_resetXOrigin(self)

    def setYOrigin(self, yOrigin):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_setYOrigin(self, yOrigin)

    def resetYOrigin(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_resetYOrigin(self)

    def setZOrigin(self, zOrigin):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_setZOrigin(self, zOrigin)

    def resetZOrigin(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_resetZOrigin(self)

    def transformation(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_transformation(self)

    def buildingTransformation(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_buildingTransformation(self)

    def siteTransformation(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_siteTransformation(self)

    def setTransformation(self, transformation):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_setTransformation(self, transformation)

    def changeTransformation(self, transformation):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_changeTransformation(self, transformation)

    def boundingBox(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_boundingBox(self)

    def boundingBoxParentCoordinates(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_boundingBoxParentCoordinates(self)

    def boundingBoxBuildingCoordinates(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_boundingBoxBuildingCoordinates(self)

    def boundingBoxSiteCoordinates(self):
        return _openstudiomodelgeometry.PlanarSurfaceGroup_boundingBoxSiteCoordinates(self)

# Register PlanarSurfaceGroup in _openstudiomodelgeometry:
_openstudiomodelgeometry.PlanarSurfaceGroup_swigregister(PlanarSurfaceGroup)

def toPlanarSurfaceGroup(idfObject):
    return _openstudiomodelgeometry.toPlanarSurfaceGroup(idfObject)

def getPlanarSurfaceGroup(t_model, t_handle):
    return _openstudiomodelgeometry.getPlanarSurfaceGroup(t_model, t_handle)

def getPlanarSurfaceGroups(t_model):
    return _openstudiomodelgeometry.getPlanarSurfaceGroups(t_model)

def getPlanarSurfaceGroupByName(t_model, t_name):
    return _openstudiomodelgeometry.getPlanarSurfaceGroupByName(t_model, t_name)

def getPlanarSurfaceGroupsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getPlanarSurfaceGroupsByName(t_model, t_name, t_exactMatch)

def _to_PlanarSurfaceGroup(self) -> OptionalPlanarSurfaceGroup:
    """Try to cast the ModelObject to a PlanarSurfaceGroup.

    :return: An Optional PlanarSurfaceGroup.
    """
    return toPlanarSurfaceGroup(self)
openstudioutilitiesidf.IdfObject.to_PlanarSurfaceGroup = _to_PlanarSurfaceGroup

def _getPlanarSurfaceGroup(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPlanarSurfaceGroup:
    """Try to get an object of type PlanarSurfaceGroup referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PlanarSurfaceGroup.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPlanarSurfaceGroup(self, t_handle)
Model.getPlanarSurfaceGroup = _getPlanarSurfaceGroup

def _getPlanarSurfaceGroups(self) -> PlanarSurfaceGroupVector:
    """Get a vector of all objects of type PlanarSurfaceGroup in the model.

    :return: A vector of PlanarSurfaceGroup.
    """
    return getPlanarSurfaceGroups(self)
Model.getPlanarSurfaceGroups = _getPlanarSurfaceGroups

def _getPlanarSurfaceGroupByName(self, t_name: str) -> OptionalPlanarSurfaceGroup:
    """Try to get an object of type PlanarSurfaceGroup that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PlanarSurfaceGroup.
    """
    return getPlanarSurfaceGroupByName(self, t_name)
Model.getPlanarSurfaceGroupByName = _getPlanarSurfaceGroupByName

def _getPlanarSurfaceGroupsByName(self, t_name: str, t_exactMatch: bool) -> PlanarSurfaceGroupVector:
    """Returns all objects of type PlanarSurfaceGroup named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPlanarSurfaceGroupsByName(self, t_name, t_exactMatch)
Model.getPlanarSurfaceGroupsByName = _getPlanarSurfaceGroupsByName

class Space(PlanarSurfaceGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_Space

    def __init__(self, *args):
        _openstudiomodelgeometry.Space_swiginit(self, _openstudiomodelgeometry.new_Space(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.Space_iddObjectType()

    @staticmethod
    def fromFloorPrint(*args):
        return _openstudiomodelgeometry.Space_fromFloorPrint(*args)

    def partofTotalFloorArea(self):
        return _openstudiomodelgeometry.Space_partofTotalFloorArea(self)

    def isPartofTotalFloorAreaDefaulted(self):
        return _openstudiomodelgeometry.Space_isPartofTotalFloorAreaDefaulted(self)

    def setPartofTotalFloorArea(self, partofTotalFloorArea):
        return _openstudiomodelgeometry.Space_setPartofTotalFloorArea(self, partofTotalFloorArea)

    def resetPartofTotalFloorArea(self):
        return _openstudiomodelgeometry.Space_resetPartofTotalFloorArea(self)

    def setCeilingHeight(self, ceilingHeight):
        return _openstudiomodelgeometry.Space_setCeilingHeight(self, ceilingHeight)

    def autocalculateCeilingHeight(self):
        return _openstudiomodelgeometry.Space_autocalculateCeilingHeight(self)

    def resetCeilingHeight(self):
        return _openstudiomodelgeometry.Space_resetCeilingHeight(self)

    def setVolume(self, volume):
        return _openstudiomodelgeometry.Space_setVolume(self, volume)

    def autocalculateVolume(self):
        return _openstudiomodelgeometry.Space_autocalculateVolume(self)

    def resetVolume(self):
        return _openstudiomodelgeometry.Space_resetVolume(self)

    def setFloorArea(self, floorArea):
        return _openstudiomodelgeometry.Space_setFloorArea(self, floorArea)

    def autocalculateFloorArea(self):
        return _openstudiomodelgeometry.Space_autocalculateFloorArea(self)

    def resetFloorArea(self):
        return _openstudiomodelgeometry.Space_resetFloorArea(self)

    def spaceType(self):
        return _openstudiomodelgeometry.Space_spaceType(self)

    def isSpaceTypeDefaulted(self):
        return _openstudiomodelgeometry.Space_isSpaceTypeDefaulted(self)

    def setSpaceType(self, spaceType):
        return _openstudiomodelgeometry.Space_setSpaceType(self, spaceType)

    def resetSpaceType(self):
        return _openstudiomodelgeometry.Space_resetSpaceType(self)

    def defaultConstructionSet(self):
        return _openstudiomodelgeometry.Space_defaultConstructionSet(self)

    def getDefaultConstruction(self, planarSurface):
        return _openstudiomodelgeometry.Space_getDefaultConstruction(self, planarSurface)

    def setDefaultConstructionSet(self, defaultConstructionSet):
        return _openstudiomodelgeometry.Space_setDefaultConstructionSet(self, defaultConstructionSet)

    def resetDefaultConstructionSet(self):
        return _openstudiomodelgeometry.Space_resetDefaultConstructionSet(self)

    def defaultScheduleSet(self):
        return _openstudiomodelgeometry.Space_defaultScheduleSet(self)

    def getDefaultSchedule(self, defaultScheduleType):
        return _openstudiomodelgeometry.Space_getDefaultSchedule(self, defaultScheduleType)

    def setDefaultScheduleSet(self, defaultScheduleSet):
        return _openstudiomodelgeometry.Space_setDefaultScheduleSet(self, defaultScheduleSet)

    def resetDefaultScheduleSet(self):
        return _openstudiomodelgeometry.Space_resetDefaultScheduleSet(self)

    def thermalZone(self):
        return _openstudiomodelgeometry.Space_thermalZone(self)

    def setThermalZone(self, thermalZone):
        return _openstudiomodelgeometry.Space_setThermalZone(self, thermalZone)

    def resetThermalZone(self):
        return _openstudiomodelgeometry.Space_resetThermalZone(self)

    def buildingStory(self):
        return _openstudiomodelgeometry.Space_buildingStory(self)

    def setBuildingStory(self, buildingStory):
        return _openstudiomodelgeometry.Space_setBuildingStory(self, buildingStory)

    def resetBuildingStory(self):
        return _openstudiomodelgeometry.Space_resetBuildingStory(self)

    def buildingUnit(self):
        return _openstudiomodelgeometry.Space_buildingUnit(self)

    def setBuildingUnit(self, buildingUnit):
        return _openstudiomodelgeometry.Space_setBuildingUnit(self, buildingUnit)

    def resetBuildingUnit(self):
        return _openstudiomodelgeometry.Space_resetBuildingUnit(self)

    def shadingSurfaceGroups(self):
        return _openstudiomodelgeometry.Space_shadingSurfaceGroups(self)

    def interiorPartitionSurfaceGroups(self):
        return _openstudiomodelgeometry.Space_interiorPartitionSurfaceGroups(self)

    def surfaces(self):
        return _openstudiomodelgeometry.Space_surfaces(self)

    def internalMass(self):
        return _openstudiomodelgeometry.Space_internalMass(self)

    def people(self):
        return _openstudiomodelgeometry.Space_people(self)

    def lights(self):
        return _openstudiomodelgeometry.Space_lights(self)

    def luminaires(self):
        return _openstudiomodelgeometry.Space_luminaires(self)

    def electricEquipment(self):
        return _openstudiomodelgeometry.Space_electricEquipment(self)

    def electricEquipmentITEAirCooled(self):
        return _openstudiomodelgeometry.Space_electricEquipmentITEAirCooled(self)

    def gasEquipment(self):
        return _openstudiomodelgeometry.Space_gasEquipment(self)

    def hotWaterEquipment(self):
        return _openstudiomodelgeometry.Space_hotWaterEquipment(self)

    def steamEquipment(self):
        return _openstudiomodelgeometry.Space_steamEquipment(self)

    def otherEquipment(self):
        return _openstudiomodelgeometry.Space_otherEquipment(self)

    def waterUseEquipment(self):
        return _openstudiomodelgeometry.Space_waterUseEquipment(self)

    def daylightingControls(self):
        return _openstudiomodelgeometry.Space_daylightingControls(self)

    def illuminanceMaps(self):
        return _openstudiomodelgeometry.Space_illuminanceMaps(self)

    def glareSensors(self):
        return _openstudiomodelgeometry.Space_glareSensors(self)

    def spaceInfiltrationDesignFlowRates(self):
        return _openstudiomodelgeometry.Space_spaceInfiltrationDesignFlowRates(self)

    def spaceInfiltrationEffectiveLeakageAreas(self):
        return _openstudiomodelgeometry.Space_spaceInfiltrationEffectiveLeakageAreas(self)

    def spaceInfiltrationFlowCoefficients(self):
        return _openstudiomodelgeometry.Space_spaceInfiltrationFlowCoefficients(self)

    def designSpecificationOutdoorAir(self):
        return _openstudiomodelgeometry.Space_designSpecificationOutdoorAir(self)

    def isDesignSpecificationOutdoorAirDefaulted(self):
        return _openstudiomodelgeometry.Space_isDesignSpecificationOutdoorAirDefaulted(self)

    def setDesignSpecificationOutdoorAir(self, designSpecificationOutdoorAir):
        return _openstudiomodelgeometry.Space_setDesignSpecificationOutdoorAir(self, designSpecificationOutdoorAir)

    def resetDesignSpecificationOutdoorAir(self):
        return _openstudiomodelgeometry.Space_resetDesignSpecificationOutdoorAir(self)

    def multiplier(self):
        return _openstudiomodelgeometry.Space_multiplier(self)

    def exteriorArea(self):
        return _openstudiomodelgeometry.Space_exteriorArea(self)

    def exteriorWallArea(self):
        return _openstudiomodelgeometry.Space_exteriorWallArea(self)

    def ceilingHeight(self):
        return _openstudiomodelgeometry.Space_ceilingHeight(self)

    def isCeilingHeightDefaulted(self):
        return _openstudiomodelgeometry.Space_isCeilingHeightDefaulted(self)

    def isCeilingHeightAutocalculated(self):
        return _openstudiomodelgeometry.Space_isCeilingHeightAutocalculated(self)

    def volume(self):
        return _openstudiomodelgeometry.Space_volume(self)

    def isVolumeDefaulted(self):
        return _openstudiomodelgeometry.Space_isVolumeDefaulted(self)

    def isVolumeAutocalculated(self):
        return _openstudiomodelgeometry.Space_isVolumeAutocalculated(self)

    def floorArea(self):
        return _openstudiomodelgeometry.Space_floorArea(self)

    def isFloorAreaDefaulted(self):
        return _openstudiomodelgeometry.Space_isFloorAreaDefaulted(self)

    def isFloorAreaAutocalculated(self):
        return _openstudiomodelgeometry.Space_isFloorAreaAutocalculated(self)

    def numberOfPeople(self):
        return _openstudiomodelgeometry.Space_numberOfPeople(self)

    def setNumberOfPeople(self, *args):
        return _openstudiomodelgeometry.Space_setNumberOfPeople(self, *args)

    def peoplePerFloorArea(self):
        return _openstudiomodelgeometry.Space_peoplePerFloorArea(self)

    def setPeoplePerFloorArea(self, *args):
        return _openstudiomodelgeometry.Space_setPeoplePerFloorArea(self, *args)

    def floorAreaPerPerson(self):
        return _openstudiomodelgeometry.Space_floorAreaPerPerson(self)

    def setFloorAreaPerPerson(self, *args):
        return _openstudiomodelgeometry.Space_setFloorAreaPerPerson(self, *args)

    def lightingPower(self):
        return _openstudiomodelgeometry.Space_lightingPower(self)

    def setLightingPower(self, *args):
        return _openstudiomodelgeometry.Space_setLightingPower(self, *args)

    def lightingPowerPerFloorArea(self):
        return _openstudiomodelgeometry.Space_lightingPowerPerFloorArea(self)

    def setLightingPowerPerFloorArea(self, *args):
        return _openstudiomodelgeometry.Space_setLightingPowerPerFloorArea(self, *args)

    def lightingPowerPerPerson(self):
        return _openstudiomodelgeometry.Space_lightingPowerPerPerson(self)

    def setLightingPowerPerPerson(self, *args):
        return _openstudiomodelgeometry.Space_setLightingPowerPerPerson(self, *args)

    def electricEquipmentPower(self):
        return _openstudiomodelgeometry.Space_electricEquipmentPower(self)

    def setElectricEquipmentPower(self, *args):
        return _openstudiomodelgeometry.Space_setElectricEquipmentPower(self, *args)

    def electricEquipmentPowerPerFloorArea(self):
        return _openstudiomodelgeometry.Space_electricEquipmentPowerPerFloorArea(self)

    def setElectricEquipmentPowerPerFloorArea(self, *args):
        return _openstudiomodelgeometry.Space_setElectricEquipmentPowerPerFloorArea(self, *args)

    def electricEquipmentPowerPerPerson(self):
        return _openstudiomodelgeometry.Space_electricEquipmentPowerPerPerson(self)

    def setElectricEquipmentPowerPerPerson(self, *args):
        return _openstudiomodelgeometry.Space_setElectricEquipmentPowerPerPerson(self, *args)

    def electricEquipmentITEAirCooledPower(self):
        return _openstudiomodelgeometry.Space_electricEquipmentITEAirCooledPower(self)

    def electricEquipmentITEAirCooledPowerPerFloorArea(self):
        return _openstudiomodelgeometry.Space_electricEquipmentITEAirCooledPowerPerFloorArea(self)

    def gasEquipmentPower(self):
        return _openstudiomodelgeometry.Space_gasEquipmentPower(self)

    def setGasEquipmentPower(self, *args):
        return _openstudiomodelgeometry.Space_setGasEquipmentPower(self, *args)

    def gasEquipmentPowerPerFloorArea(self):
        return _openstudiomodelgeometry.Space_gasEquipmentPowerPerFloorArea(self)

    def setGasEquipmentPowerPerFloorArea(self, *args):
        return _openstudiomodelgeometry.Space_setGasEquipmentPowerPerFloorArea(self, *args)

    def gasEquipmentPowerPerPerson(self):
        return _openstudiomodelgeometry.Space_gasEquipmentPowerPerPerson(self)

    def setGasEquipmentPowerPerPerson(self, *args):
        return _openstudiomodelgeometry.Space_setGasEquipmentPowerPerPerson(self, *args)

    def infiltrationDesignFlowRate(self):
        return _openstudiomodelgeometry.Space_infiltrationDesignFlowRate(self)

    def infiltrationDesignFlowPerSpaceFloorArea(self):
        return _openstudiomodelgeometry.Space_infiltrationDesignFlowPerSpaceFloorArea(self)

    def infiltrationDesignFlowPerExteriorSurfaceArea(self):
        return _openstudiomodelgeometry.Space_infiltrationDesignFlowPerExteriorSurfaceArea(self)

    def infiltrationDesignFlowPerExteriorWallArea(self):
        return _openstudiomodelgeometry.Space_infiltrationDesignFlowPerExteriorWallArea(self)

    def infiltrationDesignAirChangesPerHour(self):
        return _openstudiomodelgeometry.Space_infiltrationDesignAirChangesPerHour(self)

    def hardApplySpaceType(self, hardSizeLoads):
        return _openstudiomodelgeometry.Space_hardApplySpaceType(self, hardSizeLoads)

    def hardApplySpaceLoadSchedules(self):
        return _openstudiomodelgeometry.Space_hardApplySpaceLoadSchedules(self)

    def hardApplyConstructions(self):
        return _openstudiomodelgeometry.Space_hardApplyConstructions(self)

    def unmatchSurfaces(self):
        return _openstudiomodelgeometry.Space_unmatchSurfaces(self)

    def matchSurfaces(self, other):
        return _openstudiomodelgeometry.Space_matchSurfaces(self, other)

    def intersectSurfaces(self, other):
        return _openstudiomodelgeometry.Space_intersectSurfaces(self, other)

    def findSurfaces(self, minDegreesFromNorth, maxDegreesFromNorth, minDegreesTilt, maxDegreesTilt, tol=1):
        return _openstudiomodelgeometry.Space_findSurfaces(self, minDegreesFromNorth, maxDegreesFromNorth, minDegreesTilt, maxDegreesTilt, tol)

    def floorPrint(self):
        return _openstudiomodelgeometry.Space_floorPrint(self)

    def isPlenum(self):
        return _openstudiomodelgeometry.Space_isPlenum(self)

    def exposedPerimeter(self, buildingPerimeter):
        return _openstudiomodelgeometry.Space_exposedPerimeter(self, buildingPerimeter)

    def polyhedron(self):
        return _openstudiomodelgeometry.Space_polyhedron(self)

    def isEnclosedVolume(self):
        return _openstudiomodelgeometry.Space_isEnclosedVolume(self)

    def zoneMixing(self):
        return _openstudiomodelgeometry.Space_zoneMixing(self)

    def supplyZoneMixing(self):
        return _openstudiomodelgeometry.Space_supplyZoneMixing(self)

    def exhaustZoneMixing(self):
        return _openstudiomodelgeometry.Space_exhaustZoneMixing(self)

    def findSurfacesWithIncorrectOrientation(self):
        return _openstudiomodelgeometry.Space_findSurfacesWithIncorrectOrientation(self)

    def areAllSurfacesCorrectlyOriented(self):
        return _openstudiomodelgeometry.Space_areAllSurfacesCorrectlyOriented(self)

    def fixSurfacesWithIncorrectOrientation(self):
        return _openstudiomodelgeometry.Space_fixSurfacesWithIncorrectOrientation(self)

    def isConvex(self):
        return _openstudiomodelgeometry.Space_isConvex(self)

    def findNonConvexSurfaces(self):
        return _openstudiomodelgeometry.Space_findNonConvexSurfaces(self)

    def cacheGeometryDiagnostics(self):
        return _openstudiomodelgeometry.Space_cacheGeometryDiagnostics(self)

    def resetCachedGeometryDiagnostics(self):
        return _openstudiomodelgeometry.Space_resetCachedGeometryDiagnostics(self)

# Register Space in _openstudiomodelgeometry:
_openstudiomodelgeometry.Space_swigregister(Space)

def intersectSurfaces(spaces):
    return _openstudiomodelgeometry.intersectSurfaces(spaces)

def matchSurfaces(spaces):
    return _openstudiomodelgeometry.matchSurfaces(spaces)

def unmatchSurfaces(spaces):
    return _openstudiomodelgeometry.unmatchSurfaces(spaces)

def generateSkylightPattern(spaces, directionOfRelativeNorth, skylightToProjectedFloorRatio, desiredWidth, desiredHeight):
    return _openstudiomodelgeometry.generateSkylightPattern(spaces, directionOfRelativeNorth, skylightToProjectedFloorRatio, desiredWidth, desiredHeight)

def toSpace(idfObject):
    return _openstudiomodelgeometry.toSpace(idfObject)

def getSpace(t_model, t_handle):
    return _openstudiomodelgeometry.getSpace(t_model, t_handle)

def getSpaces(t_model):
    return _openstudiomodelgeometry.getSpaces(t_model)

def getSpaceByName(t_model, t_name):
    return _openstudiomodelgeometry.getSpaceByName(t_model, t_name)

def getSpacesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSpacesByName(t_model, t_name, t_exactMatch)

def _to_Space(self) -> OptionalSpace:
    """Try to cast the ModelObject to a Space.

    :return: An Optional Space.
    """
    return toSpace(self)
openstudioutilitiesidf.IdfObject.to_Space = _to_Space

def _getSpace(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSpace:
    """Try to get an object of type Space referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Space.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSpace(self, t_handle)
Model.getSpace = _getSpace

def _getSpaces(self) -> SpaceVector:
    """Get a vector of all objects of type Space in the model.

    :return: A vector of Space.
    """
    return getSpaces(self)
Model.getSpaces = _getSpaces

def _getSpaceByName(self, t_name: str) -> OptionalSpace:
    """Try to get an object of type Space that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Space.
    """
    return getSpaceByName(self, t_name)
Model.getSpaceByName = _getSpaceByName

def _getSpacesByName(self, t_name: str, t_exactMatch: bool) -> SpaceVector:
    """Returns all objects of type Space named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSpacesByName(self, t_name, t_exactMatch)
Model.getSpacesByName = _getSpacesByName

class SpaceItem(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceItem

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceItem_swiginit(self, _openstudiomodelgeometry.new_SpaceItem(*args))

    def space(self):
        return _openstudiomodelgeometry.SpaceItem_space(self)

    def setSpace(self, space):
        return _openstudiomodelgeometry.SpaceItem_setSpace(self, space)

    def resetSpace(self):
        return _openstudiomodelgeometry.SpaceItem_resetSpace(self)

# Register SpaceItem in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceItem_swigregister(SpaceItem)

def toSpaceItem(idfObject):
    return _openstudiomodelgeometry.toSpaceItem(idfObject)

def getSpaceItem(t_model, t_handle):
    return _openstudiomodelgeometry.getSpaceItem(t_model, t_handle)

def getSpaceItems(t_model):
    return _openstudiomodelgeometry.getSpaceItems(t_model)

def getSpaceItemByName(t_model, t_name):
    return _openstudiomodelgeometry.getSpaceItemByName(t_model, t_name)

def getSpaceItemsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSpaceItemsByName(t_model, t_name, t_exactMatch)

def _to_SpaceItem(self) -> OptionalSpaceItem:
    """Try to cast the ModelObject to a SpaceItem.

    :return: An Optional SpaceItem.
    """
    return toSpaceItem(self)
openstudioutilitiesidf.IdfObject.to_SpaceItem = _to_SpaceItem

def _getSpaceItem(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSpaceItem:
    """Try to get an object of type SpaceItem referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SpaceItem.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSpaceItem(self, t_handle)
Model.getSpaceItem = _getSpaceItem

def _getSpaceItems(self) -> SpaceItemVector:
    """Get a vector of all objects of type SpaceItem in the model.

    :return: A vector of SpaceItem.
    """
    return getSpaceItems(self)
Model.getSpaceItems = _getSpaceItems

def _getSpaceItemByName(self, t_name: str) -> OptionalSpaceItem:
    """Try to get an object of type SpaceItem that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SpaceItem.
    """
    return getSpaceItemByName(self, t_name)
Model.getSpaceItemByName = _getSpaceItemByName

def _getSpaceItemsByName(self, t_name: str, t_exactMatch: bool) -> SpaceItemVector:
    """Returns all objects of type SpaceItem named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSpaceItemsByName(self, t_name, t_exactMatch)
Model.getSpaceItemsByName = _getSpaceItemsByName

class SpaceLoad(SpaceItem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceLoad

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceLoad_swiginit(self, _openstudiomodelgeometry.new_SpaceLoad(*args))

    def spaceType(self):
        return _openstudiomodelgeometry.SpaceLoad_spaceType(self)

    def setSpaceType(self, spaceType):
        return _openstudiomodelgeometry.SpaceLoad_setSpaceType(self, spaceType)

    def resetSpaceType(self):
        return _openstudiomodelgeometry.SpaceLoad_resetSpaceType(self)

    def hardSize(self):
        return _openstudiomodelgeometry.SpaceLoad_hardSize(self)

    def hardApplySchedules(self):
        return _openstudiomodelgeometry.SpaceLoad_hardApplySchedules(self)

    def isAbsolute(self):
        return _openstudiomodelgeometry.SpaceLoad_isAbsolute(self)

# Register SpaceLoad in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceLoad_swigregister(SpaceLoad)

def toSpaceLoad(idfObject):
    return _openstudiomodelgeometry.toSpaceLoad(idfObject)

def getSpaceLoad(t_model, t_handle):
    return _openstudiomodelgeometry.getSpaceLoad(t_model, t_handle)

def getSpaceLoads(t_model):
    return _openstudiomodelgeometry.getSpaceLoads(t_model)

def getSpaceLoadByName(t_model, t_name):
    return _openstudiomodelgeometry.getSpaceLoadByName(t_model, t_name)

def getSpaceLoadsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSpaceLoadsByName(t_model, t_name, t_exactMatch)

def _to_SpaceLoad(self) -> OptionalSpaceLoad:
    """Try to cast the ModelObject to a SpaceLoad.

    :return: An Optional SpaceLoad.
    """
    return toSpaceLoad(self)
openstudioutilitiesidf.IdfObject.to_SpaceLoad = _to_SpaceLoad

def _getSpaceLoad(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSpaceLoad:
    """Try to get an object of type SpaceLoad referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SpaceLoad.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSpaceLoad(self, t_handle)
Model.getSpaceLoad = _getSpaceLoad

def _getSpaceLoads(self) -> SpaceLoadVector:
    """Get a vector of all objects of type SpaceLoad in the model.

    :return: A vector of SpaceLoad.
    """
    return getSpaceLoads(self)
Model.getSpaceLoads = _getSpaceLoads

def _getSpaceLoadByName(self, t_name: str) -> OptionalSpaceLoad:
    """Try to get an object of type SpaceLoad that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SpaceLoad.
    """
    return getSpaceLoadByName(self, t_name)
Model.getSpaceLoadByName = _getSpaceLoadByName

def _getSpaceLoadsByName(self, t_name: str, t_exactMatch: bool) -> SpaceLoadVector:
    """Returns all objects of type SpaceLoad named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSpaceLoadsByName(self, t_name, t_exactMatch)
Model.getSpaceLoadsByName = _getSpaceLoadsByName

class SpaceLoadInstance(SpaceLoad):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceLoadInstance

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceLoadInstance_swiginit(self, _openstudiomodelgeometry.new_SpaceLoadInstance(*args))

    def definition(self):
        return _openstudiomodelgeometry.SpaceLoadInstance_definition(self)

    def setDefinition(self, definition):
        return _openstudiomodelgeometry.SpaceLoadInstance_setDefinition(self, definition)

    def makeUnique(self):
        return _openstudiomodelgeometry.SpaceLoadInstance_makeUnique(self)

    def multiplier(self):
        return _openstudiomodelgeometry.SpaceLoadInstance_multiplier(self)

    def isMultiplierDefaulted(self):
        return _openstudiomodelgeometry.SpaceLoadInstance_isMultiplierDefaulted(self)

    def floorArea(self):
        return _openstudiomodelgeometry.SpaceLoadInstance_floorArea(self)

    def quantity(self):
        return _openstudiomodelgeometry.SpaceLoadInstance_quantity(self)

# Register SpaceLoadInstance in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceLoadInstance_swigregister(SpaceLoadInstance)

def toSpaceLoadInstance(idfObject):
    return _openstudiomodelgeometry.toSpaceLoadInstance(idfObject)

def getSpaceLoadInstance(t_model, t_handle):
    return _openstudiomodelgeometry.getSpaceLoadInstance(t_model, t_handle)

def getSpaceLoadInstances(t_model):
    return _openstudiomodelgeometry.getSpaceLoadInstances(t_model)

def getSpaceLoadInstanceByName(t_model, t_name):
    return _openstudiomodelgeometry.getSpaceLoadInstanceByName(t_model, t_name)

def getSpaceLoadInstancesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSpaceLoadInstancesByName(t_model, t_name, t_exactMatch)

def _to_SpaceLoadInstance(self) -> OptionalSpaceLoadInstance:
    """Try to cast the ModelObject to a SpaceLoadInstance.

    :return: An Optional SpaceLoadInstance.
    """
    return toSpaceLoadInstance(self)
openstudioutilitiesidf.IdfObject.to_SpaceLoadInstance = _to_SpaceLoadInstance

def _getSpaceLoadInstance(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSpaceLoadInstance:
    """Try to get an object of type SpaceLoadInstance referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SpaceLoadInstance.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSpaceLoadInstance(self, t_handle)
Model.getSpaceLoadInstance = _getSpaceLoadInstance

def _getSpaceLoadInstances(self) -> SpaceLoadInstanceVector:
    """Get a vector of all objects of type SpaceLoadInstance in the model.

    :return: A vector of SpaceLoadInstance.
    """
    return getSpaceLoadInstances(self)
Model.getSpaceLoadInstances = _getSpaceLoadInstances

def _getSpaceLoadInstanceByName(self, t_name: str) -> OptionalSpaceLoadInstance:
    """Try to get an object of type SpaceLoadInstance that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SpaceLoadInstance.
    """
    return getSpaceLoadInstanceByName(self, t_name)
Model.getSpaceLoadInstanceByName = _getSpaceLoadInstanceByName

def _getSpaceLoadInstancesByName(self, t_name: str, t_exactMatch: bool) -> SpaceLoadInstanceVector:
    """Returns all objects of type SpaceLoadInstance named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSpaceLoadInstancesByName(self, t_name, t_exactMatch)
Model.getSpaceLoadInstancesByName = _getSpaceLoadInstancesByName

class Lights(SpaceLoadInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_Lights

    def __init__(self, *args):
        _openstudiomodelgeometry.Lights_swiginit(self, _openstudiomodelgeometry.new_Lights(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.Lights_iddObjectType()

    def lightsDefinition(self):
        return _openstudiomodelgeometry.Lights_lightsDefinition(self)

    def schedule(self):
        return _openstudiomodelgeometry.Lights_schedule(self)

    def isScheduleDefaulted(self):
        return _openstudiomodelgeometry.Lights_isScheduleDefaulted(self)

    def fractionReplaceable(self):
        return _openstudiomodelgeometry.Lights_fractionReplaceable(self)

    def isFractionReplaceableDefaulted(self):
        return _openstudiomodelgeometry.Lights_isFractionReplaceableDefaulted(self)

    def endUseSubcategory(self):
        return _openstudiomodelgeometry.Lights_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelgeometry.Lights_isEndUseSubcategoryDefaulted(self)

    def setLightsDefinition(self, definition):
        return _openstudiomodelgeometry.Lights_setLightsDefinition(self, definition)

    def setSchedule(self, schedule):
        return _openstudiomodelgeometry.Lights_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelgeometry.Lights_resetSchedule(self)

    def setFractionReplaceable(self, fractionReplaceable):
        return _openstudiomodelgeometry.Lights_setFractionReplaceable(self, fractionReplaceable)

    def resetFractionReplaceable(self):
        return _openstudiomodelgeometry.Lights_resetFractionReplaceable(self)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.Lights_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.Lights_resetMultiplier(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelgeometry.Lights_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelgeometry.Lights_resetEndUseSubcategory(self)

    def lightingLevel(self):
        return _openstudiomodelgeometry.Lights_lightingLevel(self)

    def powerPerFloorArea(self):
        return _openstudiomodelgeometry.Lights_powerPerFloorArea(self)

    def powerPerPerson(self):
        return _openstudiomodelgeometry.Lights_powerPerPerson(self)

    def getLightingPower(self, floorArea, numPeople):
        return _openstudiomodelgeometry.Lights_getLightingPower(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelgeometry.Lights_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelgeometry.Lights_getPowerPerPerson(self, floorArea, numPeople)

# Register Lights in _openstudiomodelgeometry:
_openstudiomodelgeometry.Lights_swigregister(Lights)

def toLights(idfObject):
    return _openstudiomodelgeometry.toLights(idfObject)

def getLights(t_model, t_handle):
    return _openstudiomodelgeometry.getLights(t_model, t_handle)

def getLightss(t_model):
    return _openstudiomodelgeometry.getLightss(t_model)

def getLightsByName(t_model, t_name):
    return _openstudiomodelgeometry.getLightsByName(t_model, t_name)

def getLightssByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getLightssByName(t_model, t_name, t_exactMatch)

def _to_Lights(self) -> OptionalLights:
    """Try to cast the ModelObject to a Lights.

    :return: An Optional Lights.
    """
    return toLights(self)
openstudioutilitiesidf.IdfObject.to_Lights = _to_Lights

def _getLights(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalLights:
    """Try to get an object of type Lights referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Lights.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getLights(self, t_handle)
Model.getLights = _getLights

def _getLightss(self) -> LightsVector:
    """Get a vector of all objects of type Lights in the model.

    :return: A vector of Lights.
    """
    return getLightss(self)
Model.getLightss = _getLightss

def _getLightsByName(self, t_name: str) -> OptionalLights:
    """Try to get an object of type Lights that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Lights.
    """
    return getLightsByName(self, t_name)
Model.getLightsByName = _getLightsByName

def _getLightssByName(self, t_name: str, t_exactMatch: bool) -> LightsVector:
    """Returns all objects of type Lights named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getLightssByName(self, t_name, t_exactMatch)
Model.getLightssByName = _getLightssByName

class FilmResistanceType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.FilmResistanceType_swiginit(self, _openstudiomodelgeometry.new_FilmResistanceType(*args))

    def valueName(self):
        return _openstudiomodelgeometry.FilmResistanceType_valueName(self)

    def value(self):
        return _openstudiomodelgeometry.FilmResistanceType_value(self)

    def valueDescription(self):
        return _openstudiomodelgeometry.FilmResistanceType_valueDescription(self)

    def __eq__(self, other):
        return _openstudiomodelgeometry.FilmResistanceType___eq__(self, other)

    def __ne__(self, other):
        return _openstudiomodelgeometry.FilmResistanceType___ne__(self, other)

    def __gt__(self, other):
        return _openstudiomodelgeometry.FilmResistanceType___gt__(self, other)

    def __ge__(self, other):
        return _openstudiomodelgeometry.FilmResistanceType___ge__(self, other)

    def __lt__(self, other):
        return _openstudiomodelgeometry.FilmResistanceType___lt__(self, other)

    def __le__(self, other):
        return _openstudiomodelgeometry.FilmResistanceType___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudiomodelgeometry.FilmResistanceType_enumName()

    @staticmethod
    def getValues():
        return _openstudiomodelgeometry.FilmResistanceType_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudiomodelgeometry.FilmResistanceType_getLookupMap()

    def __str__(self):
        return _openstudiomodelgeometry.FilmResistanceType___str__(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_FilmResistanceType

# Register FilmResistanceType in _openstudiomodelgeometry:
_openstudiomodelgeometry.FilmResistanceType_swigregister(FilmResistanceType)
class PlanarSurface(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_PlanarSurface

    def __init__(self, *args):
        _openstudiomodelgeometry.PlanarSurface_swiginit(self, _openstudiomodelgeometry.new_PlanarSurface(*args))

    def construction(self):
        return _openstudiomodelgeometry.PlanarSurface_construction(self)

    def isConstructionDefaulted(self):
        return _openstudiomodelgeometry.PlanarSurface_isConstructionDefaulted(self)

    def planarSurfaceGroup(self):
        return _openstudiomodelgeometry.PlanarSurface_planarSurfaceGroup(self)

    def space(self):
        return _openstudiomodelgeometry.PlanarSurface_space(self)

    def vertices(self):
        return _openstudiomodelgeometry.PlanarSurface_vertices(self)

    def setVertices(self, vertices):
        return _openstudiomodelgeometry.PlanarSurface_setVertices(self, vertices)

    def setConstruction(self, construction):
        return _openstudiomodelgeometry.PlanarSurface_setConstruction(self, construction)

    def resetConstruction(self):
        return _openstudiomodelgeometry.PlanarSurface_resetConstruction(self)

    @staticmethod
    def findPlanarSurfaces(planarSurfaces, minDegreesFromNorth, maxDegreesFromNorth, minDegreesTilt, maxDegreesTilt, tol=1):
        return _openstudiomodelgeometry.PlanarSurface_findPlanarSurfaces(planarSurfaces, minDegreesFromNorth, maxDegreesFromNorth, minDegreesTilt, maxDegreesTilt, tol)

    @staticmethod
    def filmResistance(type):
        return _openstudiomodelgeometry.PlanarSurface_filmResistance(type)

    @staticmethod
    def stillAirFilmResistance(tilt):
        return _openstudiomodelgeometry.PlanarSurface_stillAirFilmResistance(tilt)

    def isAirWall(self):
        return _openstudiomodelgeometry.PlanarSurface_isAirWall(self)

    def grossArea(self):
        return _openstudiomodelgeometry.PlanarSurface_grossArea(self)

    def subtractFromGrossArea(self):
        return _openstudiomodelgeometry.PlanarSurface_subtractFromGrossArea(self)

    def netArea(self):
        return _openstudiomodelgeometry.PlanarSurface_netArea(self)

    def outwardNormal(self):
        return _openstudiomodelgeometry.PlanarSurface_outwardNormal(self)

    def tilt(self):
        return _openstudiomodelgeometry.PlanarSurface_tilt(self)

    def azimuth(self):
        return _openstudiomodelgeometry.PlanarSurface_azimuth(self)

    def uFactor(self):
        return _openstudiomodelgeometry.PlanarSurface_uFactor(self)

    def setUFactor(self, value):
        return _openstudiomodelgeometry.PlanarSurface_setUFactor(self, value)

    def thermalConductance(self):
        return _openstudiomodelgeometry.PlanarSurface_thermalConductance(self)

    def setThermalConductance(self, value):
        return _openstudiomodelgeometry.PlanarSurface_setThermalConductance(self, value)

    def heatCapacity(self):
        return _openstudiomodelgeometry.PlanarSurface_heatCapacity(self)

    def interiorVisibleAbsorptance(self):
        return _openstudiomodelgeometry.PlanarSurface_interiorVisibleAbsorptance(self)

    def exteriorVisibleAbsorptance(self):
        return _openstudiomodelgeometry.PlanarSurface_exteriorVisibleAbsorptance(self)

    def visibleTransmittance(self):
        return _openstudiomodelgeometry.PlanarSurface_visibleTransmittance(self)

    def equalVertices(self, other):
        return _openstudiomodelgeometry.PlanarSurface_equalVertices(self, other)

    def reverseEqualVertices(self, other):
        return _openstudiomodelgeometry.PlanarSurface_reverseEqualVertices(self, other)

    def plane(self):
        return _openstudiomodelgeometry.PlanarSurface_plane(self)

    def triangulation(self):
        return _openstudiomodelgeometry.PlanarSurface_triangulation(self)

    def centroid(self):
        return _openstudiomodelgeometry.PlanarSurface_centroid(self)

    def solarCollectors(self):
        return _openstudiomodelgeometry.PlanarSurface_solarCollectors(self)

    def generatorPhotovoltaics(self):
        return _openstudiomodelgeometry.PlanarSurface_generatorPhotovoltaics(self)

    def surfacePropertyConvectionCoefficients(self):
        return _openstudiomodelgeometry.PlanarSurface_surfacePropertyConvectionCoefficients(self)

    def isConvex(self):
        return _openstudiomodelgeometry.PlanarSurface_isConvex(self)

# Register PlanarSurface in _openstudiomodelgeometry:
_openstudiomodelgeometry.PlanarSurface_swigregister(PlanarSurface)

def toPlanarSurface(idfObject):
    return _openstudiomodelgeometry.toPlanarSurface(idfObject)

def getPlanarSurface(t_model, t_handle):
    return _openstudiomodelgeometry.getPlanarSurface(t_model, t_handle)

def getPlanarSurfaces(t_model):
    return _openstudiomodelgeometry.getPlanarSurfaces(t_model)

def getPlanarSurfaceByName(t_model, t_name):
    return _openstudiomodelgeometry.getPlanarSurfaceByName(t_model, t_name)

def getPlanarSurfacesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getPlanarSurfacesByName(t_model, t_name, t_exactMatch)

def _to_PlanarSurface(self) -> OptionalPlanarSurface:
    """Try to cast the ModelObject to a PlanarSurface.

    :return: An Optional PlanarSurface.
    """
    return toPlanarSurface(self)
openstudioutilitiesidf.IdfObject.to_PlanarSurface = _to_PlanarSurface

def _getPlanarSurface(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPlanarSurface:
    """Try to get an object of type PlanarSurface referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PlanarSurface.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPlanarSurface(self, t_handle)
Model.getPlanarSurface = _getPlanarSurface

def _getPlanarSurfaces(self) -> PlanarSurfaceVector:
    """Get a vector of all objects of type PlanarSurface in the model.

    :return: A vector of PlanarSurface.
    """
    return getPlanarSurfaces(self)
Model.getPlanarSurfaces = _getPlanarSurfaces

def _getPlanarSurfaceByName(self, t_name: str) -> OptionalPlanarSurface:
    """Try to get an object of type PlanarSurface that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PlanarSurface.
    """
    return getPlanarSurfaceByName(self, t_name)
Model.getPlanarSurfaceByName = _getPlanarSurfaceByName

def _getPlanarSurfacesByName(self, t_name: str, t_exactMatch: bool) -> PlanarSurfaceVector:
    """Returns all objects of type PlanarSurface named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPlanarSurfacesByName(self, t_name, t_exactMatch)
Model.getPlanarSurfacesByName = _getPlanarSurfacesByName

class DefaultConstructionSet(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_DefaultConstructionSet

    def __init__(self, *args):
        _openstudiomodelgeometry.DefaultConstructionSet_swiginit(self, _openstudiomodelgeometry.new_DefaultConstructionSet(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.DefaultConstructionSet_iddObjectType()

    def defaultExteriorSurfaceConstructions(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_defaultExteriorSurfaceConstructions(self)

    def defaultInteriorSurfaceConstructions(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_defaultInteriorSurfaceConstructions(self)

    def defaultGroundContactSurfaceConstructions(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_defaultGroundContactSurfaceConstructions(self)

    def defaultExteriorSubSurfaceConstructions(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_defaultExteriorSubSurfaceConstructions(self)

    def defaultInteriorSubSurfaceConstructions(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_defaultInteriorSubSurfaceConstructions(self)

    def interiorPartitionConstruction(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_interiorPartitionConstruction(self)

    def spaceShadingConstruction(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_spaceShadingConstruction(self)

    def buildingShadingConstruction(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_buildingShadingConstruction(self)

    def siteShadingConstruction(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_siteShadingConstruction(self)

    def adiabaticSurfaceConstruction(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_adiabaticSurfaceConstruction(self)

    def setDefaultExteriorSurfaceConstructions(self, defaultSurfaceConstructions):
        return _openstudiomodelgeometry.DefaultConstructionSet_setDefaultExteriorSurfaceConstructions(self, defaultSurfaceConstructions)

    def resetDefaultExteriorSurfaceConstructions(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_resetDefaultExteriorSurfaceConstructions(self)

    def setDefaultInteriorSurfaceConstructions(self, defaultSurfaceConstructions):
        return _openstudiomodelgeometry.DefaultConstructionSet_setDefaultInteriorSurfaceConstructions(self, defaultSurfaceConstructions)

    def resetDefaultInteriorSurfaceConstructions(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_resetDefaultInteriorSurfaceConstructions(self)

    def setDefaultGroundContactSurfaceConstructions(self, defaultSurfaceConstructions):
        return _openstudiomodelgeometry.DefaultConstructionSet_setDefaultGroundContactSurfaceConstructions(self, defaultSurfaceConstructions)

    def resetDefaultGroundContactSurfaceConstructions(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_resetDefaultGroundContactSurfaceConstructions(self)

    def setDefaultExteriorSubSurfaceConstructions(self, defaultSubSurfaceConstructions):
        return _openstudiomodelgeometry.DefaultConstructionSet_setDefaultExteriorSubSurfaceConstructions(self, defaultSubSurfaceConstructions)

    def resetDefaultExteriorSubSurfaceConstructions(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_resetDefaultExteriorSubSurfaceConstructions(self)

    def setDefaultInteriorSubSurfaceConstructions(self, defaultSubSurfaceConstructions):
        return _openstudiomodelgeometry.DefaultConstructionSet_setDefaultInteriorSubSurfaceConstructions(self, defaultSubSurfaceConstructions)

    def resetDefaultInteriorSubSurfaceConstructions(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_resetDefaultInteriorSubSurfaceConstructions(self)

    def setInteriorPartitionConstruction(self, construction):
        return _openstudiomodelgeometry.DefaultConstructionSet_setInteriorPartitionConstruction(self, construction)

    def resetInteriorPartitionConstruction(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_resetInteriorPartitionConstruction(self)

    def setSpaceShadingConstruction(self, construction):
        return _openstudiomodelgeometry.DefaultConstructionSet_setSpaceShadingConstruction(self, construction)

    def resetSpaceShadingConstruction(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_resetSpaceShadingConstruction(self)

    def setBuildingShadingConstruction(self, construction):
        return _openstudiomodelgeometry.DefaultConstructionSet_setBuildingShadingConstruction(self, construction)

    def resetBuildingShadingConstruction(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_resetBuildingShadingConstruction(self)

    def setSiteShadingConstruction(self, construction):
        return _openstudiomodelgeometry.DefaultConstructionSet_setSiteShadingConstruction(self, construction)

    def resetSiteShadingConstruction(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_resetSiteShadingConstruction(self)

    def setAdiabaticSurfaceConstruction(self, construction):
        return _openstudiomodelgeometry.DefaultConstructionSet_setAdiabaticSurfaceConstruction(self, construction)

    def resetAdiabaticSurfaceConstruction(self):
        return _openstudiomodelgeometry.DefaultConstructionSet_resetAdiabaticSurfaceConstruction(self)

    def getDefaultConstruction(self, planarSurface):
        return _openstudiomodelgeometry.DefaultConstructionSet_getDefaultConstruction(self, planarSurface)

    def merge(self, other):
        return _openstudiomodelgeometry.DefaultConstructionSet_merge(self, other)

# Register DefaultConstructionSet in _openstudiomodelgeometry:
_openstudiomodelgeometry.DefaultConstructionSet_swigregister(DefaultConstructionSet)

def toDefaultConstructionSet(idfObject):
    return _openstudiomodelgeometry.toDefaultConstructionSet(idfObject)

def getDefaultConstructionSet(t_model, t_handle):
    return _openstudiomodelgeometry.getDefaultConstructionSet(t_model, t_handle)

def getDefaultConstructionSets(t_model):
    return _openstudiomodelgeometry.getDefaultConstructionSets(t_model)

def getDefaultConstructionSetByName(t_model, t_name):
    return _openstudiomodelgeometry.getDefaultConstructionSetByName(t_model, t_name)

def getDefaultConstructionSetsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getDefaultConstructionSetsByName(t_model, t_name, t_exactMatch)

def _to_DefaultConstructionSet(self) -> OptionalDefaultConstructionSet:
    """Try to cast the ModelObject to a DefaultConstructionSet.

    :return: An Optional DefaultConstructionSet.
    """
    return toDefaultConstructionSet(self)
openstudioutilitiesidf.IdfObject.to_DefaultConstructionSet = _to_DefaultConstructionSet

def _getDefaultConstructionSet(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalDefaultConstructionSet:
    """Try to get an object of type DefaultConstructionSet referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional DefaultConstructionSet.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getDefaultConstructionSet(self, t_handle)
Model.getDefaultConstructionSet = _getDefaultConstructionSet

def _getDefaultConstructionSets(self) -> DefaultConstructionSetVector:
    """Get a vector of all objects of type DefaultConstructionSet in the model.

    :return: A vector of DefaultConstructionSet.
    """
    return getDefaultConstructionSets(self)
Model.getDefaultConstructionSets = _getDefaultConstructionSets

def _getDefaultConstructionSetByName(self, t_name: str) -> OptionalDefaultConstructionSet:
    """Try to get an object of type DefaultConstructionSet that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional DefaultConstructionSet.
    """
    return getDefaultConstructionSetByName(self, t_name)
Model.getDefaultConstructionSetByName = _getDefaultConstructionSetByName

def _getDefaultConstructionSetsByName(self, t_name: str, t_exactMatch: bool) -> DefaultConstructionSetVector:
    """Returns all objects of type DefaultConstructionSet named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getDefaultConstructionSetsByName(self, t_name, t_exactMatch)
Model.getDefaultConstructionSetsByName = _getDefaultConstructionSetsByName

class Surface(PlanarSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_Surface

    def __init__(self, *args):
        _openstudiomodelgeometry.Surface_swiginit(self, _openstudiomodelgeometry.new_Surface(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.Surface_iddObjectType()

    @staticmethod
    def validSurfaceTypeValues():
        return _openstudiomodelgeometry.Surface_validSurfaceTypeValues()

    @staticmethod
    def validOutsideBoundaryConditionValues():
        return _openstudiomodelgeometry.Surface_validOutsideBoundaryConditionValues()

    @staticmethod
    def validSunExposureValues():
        return _openstudiomodelgeometry.Surface_validSunExposureValues()

    @staticmethod
    def validWindExposureValues():
        return _openstudiomodelgeometry.Surface_validWindExposureValues()

    def surfaceType(self):
        return _openstudiomodelgeometry.Surface_surfaceType(self)

    def outsideBoundaryCondition(self):
        return _openstudiomodelgeometry.Surface_outsideBoundaryCondition(self)

    def isGroundSurface(self):
        return _openstudiomodelgeometry.Surface_isGroundSurface(self)

    def sunExposure(self):
        return _openstudiomodelgeometry.Surface_sunExposure(self)

    def isSunExposureDefaulted(self):
        return _openstudiomodelgeometry.Surface_isSunExposureDefaulted(self)

    def windExposure(self):
        return _openstudiomodelgeometry.Surface_windExposure(self)

    def isWindExposureDefaulted(self):
        return _openstudiomodelgeometry.Surface_isWindExposureDefaulted(self)

    def viewFactortoGround(self):
        return _openstudiomodelgeometry.Surface_viewFactortoGround(self)

    def isViewFactortoGroundDefaulted(self):
        return _openstudiomodelgeometry.Surface_isViewFactortoGroundDefaulted(self)

    def isViewFactortoGroundAutocalculated(self):
        return _openstudiomodelgeometry.Surface_isViewFactortoGroundAutocalculated(self)

    def numberofVertices(self):
        return _openstudiomodelgeometry.Surface_numberofVertices(self)

    def isNumberofVerticesDefaulted(self):
        return _openstudiomodelgeometry.Surface_isNumberofVerticesDefaulted(self)

    def isNumberofVerticesAutocalculated(self):
        return _openstudiomodelgeometry.Surface_isNumberofVerticesAutocalculated(self)

    def setSurfaceType(self, surfaceType):
        return _openstudiomodelgeometry.Surface_setSurfaceType(self, surfaceType)

    def setOutsideBoundaryCondition(self, outsideBoundaryCondition):
        return _openstudiomodelgeometry.Surface_setOutsideBoundaryCondition(self, outsideBoundaryCondition)

    def setSunExposure(self, sunExposure):
        return _openstudiomodelgeometry.Surface_setSunExposure(self, sunExposure)

    def resetSunExposure(self):
        return _openstudiomodelgeometry.Surface_resetSunExposure(self)

    def setWindExposure(self, windExposure):
        return _openstudiomodelgeometry.Surface_setWindExposure(self, windExposure)

    def resetWindExposure(self):
        return _openstudiomodelgeometry.Surface_resetWindExposure(self)

    def setViewFactortoGround(self, *args):
        return _openstudiomodelgeometry.Surface_setViewFactortoGround(self, *args)

    def resetViewFactortoGround(self):
        return _openstudiomodelgeometry.Surface_resetViewFactortoGround(self)

    def autocalculateViewFactortoGround(self):
        return _openstudiomodelgeometry.Surface_autocalculateViewFactortoGround(self)

    def setNumberofVertices(self, *args):
        return _openstudiomodelgeometry.Surface_setNumberofVertices(self, *args)

    def resetNumberofVertices(self):
        return _openstudiomodelgeometry.Surface_resetNumberofVertices(self)

    def autocalculateNumberofVertices(self):
        return _openstudiomodelgeometry.Surface_autocalculateNumberofVertices(self)

    def subSurfaces(self):
        return _openstudiomodelgeometry.Surface_subSurfaces(self)

    def setSpace(self, space):
        return _openstudiomodelgeometry.Surface_setSpace(self, space)

    def adjacentSurface(self):
        return _openstudiomodelgeometry.Surface_adjacentSurface(self)

    def setAdjacentSurface(self, surface):
        return _openstudiomodelgeometry.Surface_setAdjacentSurface(self, surface)

    def resetAdjacentSurface(self):
        return _openstudiomodelgeometry.Surface_resetAdjacentSurface(self)

    def surfaceControlMovableInsulation(self):
        return _openstudiomodelgeometry.Surface_surfaceControlMovableInsulation(self)

    def surfacePropertyConvectionCoefficients(self):
        return _openstudiomodelgeometry.Surface_surfacePropertyConvectionCoefficients(self)

    def surfacePropertyLocalEnvironment(self):
        return _openstudiomodelgeometry.Surface_surfacePropertyLocalEnvironment(self)

    def surfacePropertyOtherSideCoefficients(self):
        return _openstudiomodelgeometry.Surface_surfacePropertyOtherSideCoefficients(self)

    def setSurfacePropertyOtherSideCoefficients(self, otherSideCoefficients):
        return _openstudiomodelgeometry.Surface_setSurfacePropertyOtherSideCoefficients(self, otherSideCoefficients)

    def resetSurfacePropertyOtherSideCoefficients(self):
        return _openstudiomodelgeometry.Surface_resetSurfacePropertyOtherSideCoefficients(self)

    def surfacePropertyOtherSideConditionsModel(self):
        return _openstudiomodelgeometry.Surface_surfacePropertyOtherSideConditionsModel(self)

    def setSurfacePropertyOtherSideConditionsModel(self, otherSideModel):
        return _openstudiomodelgeometry.Surface_setSurfacePropertyOtherSideConditionsModel(self, otherSideModel)

    def resetSurfacePropertyOtherSideConditionsModel(self):
        return _openstudiomodelgeometry.Surface_resetSurfacePropertyOtherSideConditionsModel(self)

    def intersect(self, otherSurface):
        return _openstudiomodelgeometry.Surface_intersect(self, otherSurface)

    def computeIntersection(self, otherSurface):
        return _openstudiomodelgeometry.Surface_computeIntersection(self, otherSurface)

    def createAdjacentSurface(self, otherSpace):
        return _openstudiomodelgeometry.Surface_createAdjacentSurface(self, otherSpace)

    def isPartOfEnvelope(self):
        return _openstudiomodelgeometry.Surface_isPartOfEnvelope(self)

    def assignDefaultSurfaceType(self):
        return _openstudiomodelgeometry.Surface_assignDefaultSurfaceType(self)

    def assignDefaultBoundaryCondition(self):
        return _openstudiomodelgeometry.Surface_assignDefaultBoundaryCondition(self)

    def assignDefaultSunExposure(self):
        return _openstudiomodelgeometry.Surface_assignDefaultSunExposure(self)

    def assignDefaultWindExposure(self):
        return _openstudiomodelgeometry.Surface_assignDefaultWindExposure(self)

    def filmResistance(self):
        return _openstudiomodelgeometry.Surface_filmResistance(self)

    def windowToWallRatio(self):
        return _openstudiomodelgeometry.Surface_windowToWallRatio(self)

    def skylightToRoofRatio(self):
        return _openstudiomodelgeometry.Surface_skylightToRoofRatio(self)

    def skylightToProjectedFloorRatio(self):
        return _openstudiomodelgeometry.Surface_skylightToProjectedFloorRatio(self)

    def setWindowToWallRatio(self, *args):
        return _openstudiomodelgeometry.Surface_setWindowToWallRatio(self, *args)

    def applyViewAndDaylightingGlassRatios(self, viewGlassToWallRatio, daylightingGlassToWallRatio, desiredViewGlassSillHeight, desiredDaylightingGlassHeaderHeight, exteriorShadingProjectionFactor, interiorShelfProjectionFactor, viewGlassConstruction, daylightingGlassConstruction):
        return _openstudiomodelgeometry.Surface_applyViewAndDaylightingGlassRatios(self, viewGlassToWallRatio, daylightingGlassToWallRatio, desiredViewGlassSillHeight, desiredDaylightingGlassHeaderHeight, exteriorShadingProjectionFactor, interiorShelfProjectionFactor, viewGlassConstruction, daylightingGlassConstruction)

    def shadingSurfaceGroups(self):
        return _openstudiomodelgeometry.Surface_shadingSurfaceGroups(self)

    def splitSurfaceForSubSurfaces(self):
        return _openstudiomodelgeometry.Surface_splitSurfaceForSubSurfaces(self)

    def createSubSurfaces(self, faces, inset, construction):
        return _openstudiomodelgeometry.Surface_createSubSurfaces(self, faces, inset, construction)

    def getAirflowNetworkSurface(self, *args):
        return _openstudiomodelgeometry.Surface_getAirflowNetworkSurface(self, *args)

    def airflowNetworkSurface(self):
        return _openstudiomodelgeometry.Surface_airflowNetworkSurface(self)

    def setAdjacentFoundation(self, kiva):
        return _openstudiomodelgeometry.Surface_setAdjacentFoundation(self, kiva)

    def adjacentFoundation(self):
        return _openstudiomodelgeometry.Surface_adjacentFoundation(self)

    def resetAdjacentFoundation(self):
        return _openstudiomodelgeometry.Surface_resetAdjacentFoundation(self)

    def createSurfacePropertyExposedFoundationPerimeter(self, exposedPerimeterCalculationMethod, exposedPerimeter):
        return _openstudiomodelgeometry.Surface_createSurfacePropertyExposedFoundationPerimeter(self, exposedPerimeterCalculationMethod, exposedPerimeter)

    def surfacePropertyExposedFoundationPerimeter(self):
        return _openstudiomodelgeometry.Surface_surfacePropertyExposedFoundationPerimeter(self)

    def resetSurfacePropertyExposedFoundationPerimeter(self):
        return _openstudiomodelgeometry.Surface_resetSurfacePropertyExposedFoundationPerimeter(self)

    def exposedPerimeter(self, buildingPerimeter):
        return _openstudiomodelgeometry.Surface_exposedPerimeter(self, buildingPerimeter)

# Register Surface in _openstudiomodelgeometry:
_openstudiomodelgeometry.Surface_swigregister(Surface)
class SurfaceIntersection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, surface1, surface2, newSurfaces1, newSurfaces2):
        _openstudiomodelgeometry.SurfaceIntersection_swiginit(self, _openstudiomodelgeometry.new_SurfaceIntersection(surface1, surface2, newSurfaces1, newSurfaces2))

    def surface1(self):
        return _openstudiomodelgeometry.SurfaceIntersection_surface1(self)

    def surface2(self):
        return _openstudiomodelgeometry.SurfaceIntersection_surface2(self)

    def newSurfaces1(self):
        return _openstudiomodelgeometry.SurfaceIntersection_newSurfaces1(self)

    def newSurfaces2(self):
        return _openstudiomodelgeometry.SurfaceIntersection_newSurfaces2(self)

    def __str__(self):
        return _openstudiomodelgeometry.SurfaceIntersection___str__(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfaceIntersection

# Register SurfaceIntersection in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfaceIntersection_swigregister(SurfaceIntersection)

def toSurface(idfObject):
    return _openstudiomodelgeometry.toSurface(idfObject)

def getSurface(t_model, t_handle):
    return _openstudiomodelgeometry.getSurface(t_model, t_handle)

def getSurfaces(t_model):
    return _openstudiomodelgeometry.getSurfaces(t_model)

def getSurfaceByName(t_model, t_name):
    return _openstudiomodelgeometry.getSurfaceByName(t_model, t_name)

def getSurfacesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSurfacesByName(t_model, t_name, t_exactMatch)

def _to_Surface(self) -> OptionalSurface:
    """Try to cast the ModelObject to a Surface.

    :return: An Optional Surface.
    """
    return toSurface(self)
openstudioutilitiesidf.IdfObject.to_Surface = _to_Surface

def _getSurface(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSurface:
    """Try to get an object of type Surface referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Surface.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSurface(self, t_handle)
Model.getSurface = _getSurface

def _getSurfaces(self) -> SurfaceVector:
    """Get a vector of all objects of type Surface in the model.

    :return: A vector of Surface.
    """
    return getSurfaces(self)
Model.getSurfaces = _getSurfaces

def _getSurfaceByName(self, t_name: str) -> OptionalSurface:
    """Try to get an object of type Surface that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Surface.
    """
    return getSurfaceByName(self, t_name)
Model.getSurfaceByName = _getSurfaceByName

def _getSurfacesByName(self, t_name: str, t_exactMatch: bool) -> SurfaceVector:
    """Returns all objects of type Surface named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSurfacesByName(self, t_name, t_exactMatch)
Model.getSurfacesByName = _getSurfacesByName

class SubSurface(PlanarSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SubSurface

    def __init__(self, *args):
        _openstudiomodelgeometry.SubSurface_swiginit(self, _openstudiomodelgeometry.new_SubSurface(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SubSurface_iddObjectType()

    @staticmethod
    def validSubSurfaceTypeValues():
        return _openstudiomodelgeometry.SubSurface_validSubSurfaceTypeValues()

    def subSurfaceType(self):
        return _openstudiomodelgeometry.SubSurface_subSurfaceType(self)

    def isSubSurfaceTypeDefaulted(self):
        return _openstudiomodelgeometry.SubSurface_isSubSurfaceTypeDefaulted(self)

    def viewFactortoGround(self):
        return _openstudiomodelgeometry.SubSurface_viewFactortoGround(self)

    def isViewFactortoGroundDefaulted(self):
        return _openstudiomodelgeometry.SubSurface_isViewFactortoGroundDefaulted(self)

    def isViewFactortoGroundAutocalculated(self):
        return _openstudiomodelgeometry.SubSurface_isViewFactortoGroundAutocalculated(self)

    def allowShadingControl(self):
        return _openstudiomodelgeometry.SubSurface_allowShadingControl(self)

    def shadingControl(self):
        return _openstudiomodelgeometry.SubSurface_shadingControl(self)

    def shadingControls(self):
        return _openstudiomodelgeometry.SubSurface_shadingControls(self)

    def numberofShadingControls(self):
        return _openstudiomodelgeometry.SubSurface_numberofShadingControls(self)

    def allowWindowPropertyFrameAndDivider(self):
        return _openstudiomodelgeometry.SubSurface_allowWindowPropertyFrameAndDivider(self)

    def windowPropertyFrameAndDivider(self):
        return _openstudiomodelgeometry.SubSurface_windowPropertyFrameAndDivider(self)

    def multiplier(self):
        return _openstudiomodelgeometry.SubSurface_multiplier(self)

    def isMultiplierDefaulted(self):
        return _openstudiomodelgeometry.SubSurface_isMultiplierDefaulted(self)

    def numberofVertices(self):
        return _openstudiomodelgeometry.SubSurface_numberofVertices(self)

    def isNumberofVerticesDefaulted(self):
        return _openstudiomodelgeometry.SubSurface_isNumberofVerticesDefaulted(self)

    def isNumberofVerticesAutocalculated(self):
        return _openstudiomodelgeometry.SubSurface_isNumberofVerticesAutocalculated(self)

    def assemblyUFactor(self):
        return _openstudiomodelgeometry.SubSurface_assemblyUFactor(self)

    def assemblySHGC(self):
        return _openstudiomodelgeometry.SubSurface_assemblySHGC(self)

    def assemblyVisibleTransmittance(self):
        return _openstudiomodelgeometry.SubSurface_assemblyVisibleTransmittance(self)

    def setSubSurfaceType(self, subSurfaceType):
        return _openstudiomodelgeometry.SubSurface_setSubSurfaceType(self, subSurfaceType)

    def resetSubSurfaceType(self):
        return _openstudiomodelgeometry.SubSurface_resetSubSurfaceType(self)

    def setViewFactortoGround(self, *args):
        return _openstudiomodelgeometry.SubSurface_setViewFactortoGround(self, *args)

    def resetViewFactortoGround(self):
        return _openstudiomodelgeometry.SubSurface_resetViewFactortoGround(self)

    def autocalculateViewFactortoGround(self):
        return _openstudiomodelgeometry.SubSurface_autocalculateViewFactortoGround(self)

    def setShadingControl(self, shadingControl):
        return _openstudiomodelgeometry.SubSurface_setShadingControl(self, shadingControl)

    def resetShadingControl(self):
        return _openstudiomodelgeometry.SubSurface_resetShadingControl(self)

    def addShadingControl(self, shadingControl):
        return _openstudiomodelgeometry.SubSurface_addShadingControl(self, shadingControl)

    def addShadingControls(self, shadingControls):
        return _openstudiomodelgeometry.SubSurface_addShadingControls(self, shadingControls)

    def removeShadingControl(self, shadingControl):
        return _openstudiomodelgeometry.SubSurface_removeShadingControl(self, shadingControl)

    def removeAllShadingControls(self):
        return _openstudiomodelgeometry.SubSurface_removeAllShadingControls(self)

    def setWindowPropertyFrameAndDivider(self, windowPropertyFrameAndDivider):
        return _openstudiomodelgeometry.SubSurface_setWindowPropertyFrameAndDivider(self, windowPropertyFrameAndDivider)

    def resetWindowPropertyFrameAndDivider(self):
        return _openstudiomodelgeometry.SubSurface_resetWindowPropertyFrameAndDivider(self)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.SubSurface_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.SubSurface_resetMultiplier(self)

    def setNumberofVertices(self, *args):
        return _openstudiomodelgeometry.SubSurface_setNumberofVertices(self, *args)

    def resetNumberofVertices(self):
        return _openstudiomodelgeometry.SubSurface_resetNumberofVertices(self)

    def autocalculateNumberofVertices(self):
        return _openstudiomodelgeometry.SubSurface_autocalculateNumberofVertices(self)

    def surface(self):
        return _openstudiomodelgeometry.SubSurface_surface(self)

    def setSurface(self, surface):
        return _openstudiomodelgeometry.SubSurface_setSurface(self, surface)

    def adjacentSubSurface(self):
        return _openstudiomodelgeometry.SubSurface_adjacentSubSurface(self)

    def setAdjacentSubSurface(self, subSurface):
        return _openstudiomodelgeometry.SubSurface_setAdjacentSubSurface(self, subSurface)

    def resetAdjacentSubSurface(self):
        return _openstudiomodelgeometry.SubSurface_resetAdjacentSubSurface(self)

    def surfacePropertyConvectionCoefficients(self):
        return _openstudiomodelgeometry.SubSurface_surfacePropertyConvectionCoefficients(self)

    def surfacePropertyLocalEnvironment(self):
        return _openstudiomodelgeometry.SubSurface_surfacePropertyLocalEnvironment(self)

    def surfacePropertyIncidentSolarMultiplier(self):
        return _openstudiomodelgeometry.SubSurface_surfacePropertyIncidentSolarMultiplier(self)

    def surfacePropertyOtherSideCoefficients(self):
        return _openstudiomodelgeometry.SubSurface_surfacePropertyOtherSideCoefficients(self)

    def setSurfacePropertyOtherSideCoefficients(self, otherSideCoefficients):
        return _openstudiomodelgeometry.SubSurface_setSurfacePropertyOtherSideCoefficients(self, otherSideCoefficients)

    def resetSurfacePropertyOtherSideCoefficients(self):
        return _openstudiomodelgeometry.SubSurface_resetSurfacePropertyOtherSideCoefficients(self)

    def surfacePropertyOtherSideConditionsModel(self):
        return _openstudiomodelgeometry.SubSurface_surfacePropertyOtherSideConditionsModel(self)

    def setSurfacePropertyOtherSideConditionsModel(self, otherSideModel):
        return _openstudiomodelgeometry.SubSurface_setSurfacePropertyOtherSideConditionsModel(self, otherSideModel)

    def resetSurfacePropertyOtherSideConditionsModel(self):
        return _openstudiomodelgeometry.SubSurface_resetSurfacePropertyOtherSideConditionsModel(self)

    def assignDefaultSubSurfaceType(self):
        return _openstudiomodelgeometry.SubSurface_assignDefaultSubSurfaceType(self)

    def outsideBoundaryCondition(self):
        return _openstudiomodelgeometry.SubSurface_outsideBoundaryCondition(self)

    def addOverhang(self, depth, offset):
        return _openstudiomodelgeometry.SubSurface_addOverhang(self, depth, offset)

    def addOverhangByProjectionFactor(self, projectionFactor, offsetFraction):
        return _openstudiomodelgeometry.SubSurface_addOverhangByProjectionFactor(self, projectionFactor, offsetFraction)

    def shadingSurfaceGroups(self):
        return _openstudiomodelgeometry.SubSurface_shadingSurfaceGroups(self)

    def allowDaylightingDeviceShelf(self):
        return _openstudiomodelgeometry.SubSurface_allowDaylightingDeviceShelf(self)

    def daylightingDeviceShelf(self):
        return _openstudiomodelgeometry.SubSurface_daylightingDeviceShelf(self)

    def addDaylightingDeviceShelf(self):
        return _openstudiomodelgeometry.SubSurface_addDaylightingDeviceShelf(self)

    def allowDaylightingDeviceTubularDome(self):
        return _openstudiomodelgeometry.SubSurface_allowDaylightingDeviceTubularDome(self)

    def allowDaylightingDeviceTubularDiffuser(self):
        return _openstudiomodelgeometry.SubSurface_allowDaylightingDeviceTubularDiffuser(self)

    def daylightingDeviceTubular(self):
        return _openstudiomodelgeometry.SubSurface_daylightingDeviceTubular(self)

    def allowDaylightingDeviceLightWell(self):
        return _openstudiomodelgeometry.SubSurface_allowDaylightingDeviceLightWell(self)

    def daylightingDeviceLightWell(self):
        return _openstudiomodelgeometry.SubSurface_daylightingDeviceLightWell(self)

    def addDaylightingDeviceLightWell(self):
        return _openstudiomodelgeometry.SubSurface_addDaylightingDeviceLightWell(self)

    def getAirflowNetworkSurface(self, *args):
        return _openstudiomodelgeometry.SubSurface_getAirflowNetworkSurface(self, *args)

    def airflowNetworkSurface(self):
        return _openstudiomodelgeometry.SubSurface_airflowNetworkSurface(self)

    def roughOpeningArea(self):
        return _openstudiomodelgeometry.SubSurface_roughOpeningArea(self)

    def roughOpeningVertices(self):
        return _openstudiomodelgeometry.SubSurface_roughOpeningVertices(self)

    def frameArea(self):
        return _openstudiomodelgeometry.SubSurface_frameArea(self)

    def dividerArea(self):
        return _openstudiomodelgeometry.SubSurface_dividerArea(self)

# Register SubSurface in _openstudiomodelgeometry:
_openstudiomodelgeometry.SubSurface_swigregister(SubSurface)

def applySkylightPattern(pattern, spaces, construction):
    return _openstudiomodelgeometry.applySkylightPattern(pattern, spaces, construction)

def toSubSurface(idfObject):
    return _openstudiomodelgeometry.toSubSurface(idfObject)

def getSubSurface(t_model, t_handle):
    return _openstudiomodelgeometry.getSubSurface(t_model, t_handle)

def getSubSurfaces(t_model):
    return _openstudiomodelgeometry.getSubSurfaces(t_model)

def getSubSurfaceByName(t_model, t_name):
    return _openstudiomodelgeometry.getSubSurfaceByName(t_model, t_name)

def getSubSurfacesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSubSurfacesByName(t_model, t_name, t_exactMatch)

def _to_SubSurface(self) -> OptionalSubSurface:
    """Try to cast the ModelObject to a SubSurface.

    :return: An Optional SubSurface.
    """
    return toSubSurface(self)
openstudioutilitiesidf.IdfObject.to_SubSurface = _to_SubSurface

def _getSubSurface(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSubSurface:
    """Try to get an object of type SubSurface referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SubSurface.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSubSurface(self, t_handle)
Model.getSubSurface = _getSubSurface

def _getSubSurfaces(self) -> SubSurfaceVector:
    """Get a vector of all objects of type SubSurface in the model.

    :return: A vector of SubSurface.
    """
    return getSubSurfaces(self)
Model.getSubSurfaces = _getSubSurfaces

def _getSubSurfaceByName(self, t_name: str) -> OptionalSubSurface:
    """Try to get an object of type SubSurface that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SubSurface.
    """
    return getSubSurfaceByName(self, t_name)
Model.getSubSurfaceByName = _getSubSurfaceByName

def _getSubSurfacesByName(self, t_name: str, t_exactMatch: bool) -> SubSurfaceVector:
    """Returns all objects of type SubSurface named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSubSurfacesByName(self, t_name, t_exactMatch)
Model.getSubSurfacesByName = _getSubSurfacesByName

class ShadingSurfaceGroup(PlanarSurfaceGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_ShadingSurfaceGroup

    def __init__(self, *args):
        _openstudiomodelgeometry.ShadingSurfaceGroup_swiginit(self, _openstudiomodelgeometry.new_ShadingSurfaceGroup(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.ShadingSurfaceGroup_iddObjectType()

    @staticmethod
    def validShadingSurfaceTypeValues():
        return _openstudiomodelgeometry.ShadingSurfaceGroup_validShadingSurfaceTypeValues()

    def shadingSurfaceType(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroup_shadingSurfaceType(self)

    def setShadingSurfaceType(self, shadingSurfaceType):
        return _openstudiomodelgeometry.ShadingSurfaceGroup_setShadingSurfaceType(self, shadingSurfaceType)

    def space(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroup_space(self)

    def setSpace(self, space):
        return _openstudiomodelgeometry.ShadingSurfaceGroup_setSpace(self, space)

    def resetSpace(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroup_resetSpace(self)

    def shadingSurfaces(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroup_shadingSurfaces(self)

    def shadedSubSurface(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroup_shadedSubSurface(self)

    def shadedSurface(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroup_shadedSurface(self)

    def setShadedSubSurface(self, subSurface):
        return _openstudiomodelgeometry.ShadingSurfaceGroup_setShadedSubSurface(self, subSurface)

    def setShadedSurface(self, surface):
        return _openstudiomodelgeometry.ShadingSurfaceGroup_setShadedSurface(self, surface)

    def resetShadedObject(self):
        return _openstudiomodelgeometry.ShadingSurfaceGroup_resetShadedObject(self)

# Register ShadingSurfaceGroup in _openstudiomodelgeometry:
_openstudiomodelgeometry.ShadingSurfaceGroup_swigregister(ShadingSurfaceGroup)

def toShadingSurfaceGroup(idfObject):
    return _openstudiomodelgeometry.toShadingSurfaceGroup(idfObject)

def getShadingSurfaceGroup(t_model, t_handle):
    return _openstudiomodelgeometry.getShadingSurfaceGroup(t_model, t_handle)

def getShadingSurfaceGroups(t_model):
    return _openstudiomodelgeometry.getShadingSurfaceGroups(t_model)

def getShadingSurfaceGroupByName(t_model, t_name):
    return _openstudiomodelgeometry.getShadingSurfaceGroupByName(t_model, t_name)

def getShadingSurfaceGroupsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getShadingSurfaceGroupsByName(t_model, t_name, t_exactMatch)

def _to_ShadingSurfaceGroup(self) -> OptionalShadingSurfaceGroup:
    """Try to cast the ModelObject to a ShadingSurfaceGroup.

    :return: An Optional ShadingSurfaceGroup.
    """
    return toShadingSurfaceGroup(self)
openstudioutilitiesidf.IdfObject.to_ShadingSurfaceGroup = _to_ShadingSurfaceGroup

def _getShadingSurfaceGroup(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalShadingSurfaceGroup:
    """Try to get an object of type ShadingSurfaceGroup referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ShadingSurfaceGroup.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getShadingSurfaceGroup(self, t_handle)
Model.getShadingSurfaceGroup = _getShadingSurfaceGroup

def _getShadingSurfaceGroups(self) -> ShadingSurfaceGroupVector:
    """Get a vector of all objects of type ShadingSurfaceGroup in the model.

    :return: A vector of ShadingSurfaceGroup.
    """
    return getShadingSurfaceGroups(self)
Model.getShadingSurfaceGroups = _getShadingSurfaceGroups

def _getShadingSurfaceGroupByName(self, t_name: str) -> OptionalShadingSurfaceGroup:
    """Try to get an object of type ShadingSurfaceGroup that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ShadingSurfaceGroup.
    """
    return getShadingSurfaceGroupByName(self, t_name)
Model.getShadingSurfaceGroupByName = _getShadingSurfaceGroupByName

def _getShadingSurfaceGroupsByName(self, t_name: str, t_exactMatch: bool) -> ShadingSurfaceGroupVector:
    """Returns all objects of type ShadingSurfaceGroup named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getShadingSurfaceGroupsByName(self, t_name, t_exactMatch)
Model.getShadingSurfaceGroupsByName = _getShadingSurfaceGroupsByName

class ShadingSurface(PlanarSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_ShadingSurface

    def __init__(self, *args):
        _openstudiomodelgeometry.ShadingSurface_swiginit(self, _openstudiomodelgeometry.new_ShadingSurface(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.ShadingSurface_iddObjectType()

    def shadingSurfaceGroup(self):
        return _openstudiomodelgeometry.ShadingSurface_shadingSurfaceGroup(self)

    def transmittanceSchedule(self):
        return _openstudiomodelgeometry.ShadingSurface_transmittanceSchedule(self)

    def numberofVertices(self):
        return _openstudiomodelgeometry.ShadingSurface_numberofVertices(self)

    def isNumberofVerticesDefaulted(self):
        return _openstudiomodelgeometry.ShadingSurface_isNumberofVerticesDefaulted(self)

    def isNumberofVerticesAutocalculated(self):
        return _openstudiomodelgeometry.ShadingSurface_isNumberofVerticesAutocalculated(self)

    def setShadingSurfaceGroup(self, shadingSurfaceGroup):
        return _openstudiomodelgeometry.ShadingSurface_setShadingSurfaceGroup(self, shadingSurfaceGroup)

    def resetShadingSurfaceGroup(self):
        return _openstudiomodelgeometry.ShadingSurface_resetShadingSurfaceGroup(self)

    def setTransmittanceSchedule(self, transmittanceSchedule):
        return _openstudiomodelgeometry.ShadingSurface_setTransmittanceSchedule(self, transmittanceSchedule)

    def resetTransmittanceSchedule(self):
        return _openstudiomodelgeometry.ShadingSurface_resetTransmittanceSchedule(self)

    def setNumberofVertices(self, *args):
        return _openstudiomodelgeometry.ShadingSurface_setNumberofVertices(self, *args)

    def resetNumberofVertices(self):
        return _openstudiomodelgeometry.ShadingSurface_resetNumberofVertices(self)

    def autocalculateNumberofVertices(self):
        return _openstudiomodelgeometry.ShadingSurface_autocalculateNumberofVertices(self)

    def daylightingDeviceShelf(self):
        return _openstudiomodelgeometry.ShadingSurface_daylightingDeviceShelf(self)

# Register ShadingSurface in _openstudiomodelgeometry:
_openstudiomodelgeometry.ShadingSurface_swigregister(ShadingSurface)

def toShadingSurface(idfObject):
    return _openstudiomodelgeometry.toShadingSurface(idfObject)

def getShadingSurface(t_model, t_handle):
    return _openstudiomodelgeometry.getShadingSurface(t_model, t_handle)

def getShadingSurfaces(t_model):
    return _openstudiomodelgeometry.getShadingSurfaces(t_model)

def getShadingSurfaceByName(t_model, t_name):
    return _openstudiomodelgeometry.getShadingSurfaceByName(t_model, t_name)

def getShadingSurfacesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getShadingSurfacesByName(t_model, t_name, t_exactMatch)

def _to_ShadingSurface(self) -> OptionalShadingSurface:
    """Try to cast the ModelObject to a ShadingSurface.

    :return: An Optional ShadingSurface.
    """
    return toShadingSurface(self)
openstudioutilitiesidf.IdfObject.to_ShadingSurface = _to_ShadingSurface

def _getShadingSurface(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalShadingSurface:
    """Try to get an object of type ShadingSurface referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ShadingSurface.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getShadingSurface(self, t_handle)
Model.getShadingSurface = _getShadingSurface

def _getShadingSurfaces(self) -> ShadingSurfaceVector:
    """Get a vector of all objects of type ShadingSurface in the model.

    :return: A vector of ShadingSurface.
    """
    return getShadingSurfaces(self)
Model.getShadingSurfaces = _getShadingSurfaces

def _getShadingSurfaceByName(self, t_name: str) -> OptionalShadingSurface:
    """Try to get an object of type ShadingSurface that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ShadingSurface.
    """
    return getShadingSurfaceByName(self, t_name)
Model.getShadingSurfaceByName = _getShadingSurfaceByName

def _getShadingSurfacesByName(self, t_name: str, t_exactMatch: bool) -> ShadingSurfaceVector:
    """Returns all objects of type ShadingSurface named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getShadingSurfacesByName(self, t_name, t_exactMatch)
Model.getShadingSurfacesByName = _getShadingSurfacesByName

class InteriorPartitionSurfaceGroup(PlanarSurfaceGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_InteriorPartitionSurfaceGroup

    def __init__(self, *args):
        _openstudiomodelgeometry.InteriorPartitionSurfaceGroup_swiginit(self, _openstudiomodelgeometry.new_InteriorPartitionSurfaceGroup(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroup_iddObjectType()

    def multiplier(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroup_multiplier(self)

    def isMultiplierDefaulted(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroup_isMultiplierDefaulted(self)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroup_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroup_resetMultiplier(self)

    def space(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroup_space(self)

    def setSpace(self, space):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroup_setSpace(self, space)

    def resetSpace(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroup_resetSpace(self)

    def interiorPartitionSurfaces(self):
        return _openstudiomodelgeometry.InteriorPartitionSurfaceGroup_interiorPartitionSurfaces(self)

# Register InteriorPartitionSurfaceGroup in _openstudiomodelgeometry:
_openstudiomodelgeometry.InteriorPartitionSurfaceGroup_swigregister(InteriorPartitionSurfaceGroup)

def toInteriorPartitionSurfaceGroup(idfObject):
    return _openstudiomodelgeometry.toInteriorPartitionSurfaceGroup(idfObject)

def getInteriorPartitionSurfaceGroup(t_model, t_handle):
    return _openstudiomodelgeometry.getInteriorPartitionSurfaceGroup(t_model, t_handle)

def getInteriorPartitionSurfaceGroups(t_model):
    return _openstudiomodelgeometry.getInteriorPartitionSurfaceGroups(t_model)

def getInteriorPartitionSurfaceGroupByName(t_model, t_name):
    return _openstudiomodelgeometry.getInteriorPartitionSurfaceGroupByName(t_model, t_name)

def getInteriorPartitionSurfaceGroupsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getInteriorPartitionSurfaceGroupsByName(t_model, t_name, t_exactMatch)

def _to_InteriorPartitionSurfaceGroup(self) -> OptionalInteriorPartitionSurfaceGroup:
    """Try to cast the ModelObject to a InteriorPartitionSurfaceGroup.

    :return: An Optional InteriorPartitionSurfaceGroup.
    """
    return toInteriorPartitionSurfaceGroup(self)
openstudioutilitiesidf.IdfObject.to_InteriorPartitionSurfaceGroup = _to_InteriorPartitionSurfaceGroup

def _getInteriorPartitionSurfaceGroup(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalInteriorPartitionSurfaceGroup:
    """Try to get an object of type InteriorPartitionSurfaceGroup referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional InteriorPartitionSurfaceGroup.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getInteriorPartitionSurfaceGroup(self, t_handle)
Model.getInteriorPartitionSurfaceGroup = _getInteriorPartitionSurfaceGroup

def _getInteriorPartitionSurfaceGroups(self) -> InteriorPartitionSurfaceGroupVector:
    """Get a vector of all objects of type InteriorPartitionSurfaceGroup in the model.

    :return: A vector of InteriorPartitionSurfaceGroup.
    """
    return getInteriorPartitionSurfaceGroups(self)
Model.getInteriorPartitionSurfaceGroups = _getInteriorPartitionSurfaceGroups

def _getInteriorPartitionSurfaceGroupByName(self, t_name: str) -> OptionalInteriorPartitionSurfaceGroup:
    """Try to get an object of type InteriorPartitionSurfaceGroup that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional InteriorPartitionSurfaceGroup.
    """
    return getInteriorPartitionSurfaceGroupByName(self, t_name)
Model.getInteriorPartitionSurfaceGroupByName = _getInteriorPartitionSurfaceGroupByName

def _getInteriorPartitionSurfaceGroupsByName(self, t_name: str, t_exactMatch: bool) -> InteriorPartitionSurfaceGroupVector:
    """Returns all objects of type InteriorPartitionSurfaceGroup named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getInteriorPartitionSurfaceGroupsByName(self, t_name, t_exactMatch)
Model.getInteriorPartitionSurfaceGroupsByName = _getInteriorPartitionSurfaceGroupsByName

class InteriorPartitionSurface(PlanarSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_InteriorPartitionSurface

    def __init__(self, *args):
        _openstudiomodelgeometry.InteriorPartitionSurface_swiginit(self, _openstudiomodelgeometry.new_InteriorPartitionSurface(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.InteriorPartitionSurface_iddObjectType()

    def converttoInternalMass(self):
        return _openstudiomodelgeometry.InteriorPartitionSurface_converttoInternalMass(self)

    def isConverttoInternalMassDefaulted(self):
        return _openstudiomodelgeometry.InteriorPartitionSurface_isConverttoInternalMassDefaulted(self)

    def surfaceArea(self):
        return _openstudiomodelgeometry.InteriorPartitionSurface_surfaceArea(self)

    def numberofVertices(self):
        return _openstudiomodelgeometry.InteriorPartitionSurface_numberofVertices(self)

    def isNumberofVerticesDefaulted(self):
        return _openstudiomodelgeometry.InteriorPartitionSurface_isNumberofVerticesDefaulted(self)

    def isNumberofVerticesAutocalculated(self):
        return _openstudiomodelgeometry.InteriorPartitionSurface_isNumberofVerticesAutocalculated(self)

    def setConverttoInternalMass(self, converttoInternalMass):
        return _openstudiomodelgeometry.InteriorPartitionSurface_setConverttoInternalMass(self, converttoInternalMass)

    def resetConverttoInternalMass(self):
        return _openstudiomodelgeometry.InteriorPartitionSurface_resetConverttoInternalMass(self)

    def setSurfaceArea(self, *args):
        return _openstudiomodelgeometry.InteriorPartitionSurface_setSurfaceArea(self, *args)

    def resetSurfaceArea(self):
        return _openstudiomodelgeometry.InteriorPartitionSurface_resetSurfaceArea(self)

    def setNumberofVertices(self, *args):
        return _openstudiomodelgeometry.InteriorPartitionSurface_setNumberofVertices(self, *args)

    def resetNumberofVertices(self):
        return _openstudiomodelgeometry.InteriorPartitionSurface_resetNumberofVertices(self)

    def autocalculateNumberofVertices(self):
        return _openstudiomodelgeometry.InteriorPartitionSurface_autocalculateNumberofVertices(self)

    def interiorPartitionSurfaceGroup(self):
        return _openstudiomodelgeometry.InteriorPartitionSurface_interiorPartitionSurfaceGroup(self)

    def setInteriorPartitionSurfaceGroup(self, interiorPartitionSurfaceGroup):
        return _openstudiomodelgeometry.InteriorPartitionSurface_setInteriorPartitionSurfaceGroup(self, interiorPartitionSurfaceGroup)

    def resetInteriorPartitionSurfaceGroup(self):
        return _openstudiomodelgeometry.InteriorPartitionSurface_resetInteriorPartitionSurfaceGroup(self)

    def daylightingDeviceShelf(self):
        return _openstudiomodelgeometry.InteriorPartitionSurface_daylightingDeviceShelf(self)

# Register InteriorPartitionSurface in _openstudiomodelgeometry:
_openstudiomodelgeometry.InteriorPartitionSurface_swigregister(InteriorPartitionSurface)

def toInteriorPartitionSurface(idfObject):
    return _openstudiomodelgeometry.toInteriorPartitionSurface(idfObject)

def getInteriorPartitionSurface(t_model, t_handle):
    return _openstudiomodelgeometry.getInteriorPartitionSurface(t_model, t_handle)

def getInteriorPartitionSurfaces(t_model):
    return _openstudiomodelgeometry.getInteriorPartitionSurfaces(t_model)

def getInteriorPartitionSurfaceByName(t_model, t_name):
    return _openstudiomodelgeometry.getInteriorPartitionSurfaceByName(t_model, t_name)

def getInteriorPartitionSurfacesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getInteriorPartitionSurfacesByName(t_model, t_name, t_exactMatch)

def _to_InteriorPartitionSurface(self) -> OptionalInteriorPartitionSurface:
    """Try to cast the ModelObject to a InteriorPartitionSurface.

    :return: An Optional InteriorPartitionSurface.
    """
    return toInteriorPartitionSurface(self)
openstudioutilitiesidf.IdfObject.to_InteriorPartitionSurface = _to_InteriorPartitionSurface

def _getInteriorPartitionSurface(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalInteriorPartitionSurface:
    """Try to get an object of type InteriorPartitionSurface referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional InteriorPartitionSurface.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getInteriorPartitionSurface(self, t_handle)
Model.getInteriorPartitionSurface = _getInteriorPartitionSurface

def _getInteriorPartitionSurfaces(self) -> InteriorPartitionSurfaceVector:
    """Get a vector of all objects of type InteriorPartitionSurface in the model.

    :return: A vector of InteriorPartitionSurface.
    """
    return getInteriorPartitionSurfaces(self)
Model.getInteriorPartitionSurfaces = _getInteriorPartitionSurfaces

def _getInteriorPartitionSurfaceByName(self, t_name: str) -> OptionalInteriorPartitionSurface:
    """Try to get an object of type InteriorPartitionSurface that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional InteriorPartitionSurface.
    """
    return getInteriorPartitionSurfaceByName(self, t_name)
Model.getInteriorPartitionSurfaceByName = _getInteriorPartitionSurfaceByName

def _getInteriorPartitionSurfacesByName(self, t_name: str, t_exactMatch: bool) -> InteriorPartitionSurfaceVector:
    """Returns all objects of type InteriorPartitionSurface named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getInteriorPartitionSurfacesByName(self, t_name, t_exactMatch)
Model.getInteriorPartitionSurfacesByName = _getInteriorPartitionSurfacesByName

class SurfaceControlMovableInsulation(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfaceControlMovableInsulation

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfaceControlMovableInsulation_swiginit(self, _openstudiomodelgeometry.new_SurfaceControlMovableInsulation(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SurfaceControlMovableInsulation_iddObjectType()

    @staticmethod
    def insulationTypeValues():
        return _openstudiomodelgeometry.SurfaceControlMovableInsulation_insulationTypeValues()

    @staticmethod
    def validInsulationTypeValues():
        return _openstudiomodelgeometry.SurfaceControlMovableInsulation_validInsulationTypeValues()

    def insulationType(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulation_insulationType(self)

    def surface(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulation_surface(self)

    def material(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulation_material(self)

    def schedule(self):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulation_schedule(self)

    def setInsulationType(self, insulationType):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulation_setInsulationType(self, insulationType)

    def setSurface(self, surface):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulation_setSurface(self, surface)

    def setMaterial(self, material):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulation_setMaterial(self, material)

    def setSchedule(self, schedule):
        return _openstudiomodelgeometry.SurfaceControlMovableInsulation_setSchedule(self, schedule)

# Register SurfaceControlMovableInsulation in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfaceControlMovableInsulation_swigregister(SurfaceControlMovableInsulation)

def toSurfaceControlMovableInsulation(idfObject):
    return _openstudiomodelgeometry.toSurfaceControlMovableInsulation(idfObject)

def getSurfaceControlMovableInsulation(t_model, t_handle):
    return _openstudiomodelgeometry.getSurfaceControlMovableInsulation(t_model, t_handle)

def getSurfaceControlMovableInsulations(t_model):
    return _openstudiomodelgeometry.getSurfaceControlMovableInsulations(t_model)

def getSurfaceControlMovableInsulationByName(t_model, t_name):
    return _openstudiomodelgeometry.getSurfaceControlMovableInsulationByName(t_model, t_name)

def getSurfaceControlMovableInsulationsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSurfaceControlMovableInsulationsByName(t_model, t_name, t_exactMatch)

def _to_SurfaceControlMovableInsulation(self) -> OptionalSurfaceControlMovableInsulation:
    """Try to cast the ModelObject to a SurfaceControlMovableInsulation.

    :return: An Optional SurfaceControlMovableInsulation.
    """
    return toSurfaceControlMovableInsulation(self)
openstudioutilitiesidf.IdfObject.to_SurfaceControlMovableInsulation = _to_SurfaceControlMovableInsulation

def _getSurfaceControlMovableInsulation(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSurfaceControlMovableInsulation:
    """Try to get an object of type SurfaceControlMovableInsulation referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SurfaceControlMovableInsulation.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSurfaceControlMovableInsulation(self, t_handle)
Model.getSurfaceControlMovableInsulation = _getSurfaceControlMovableInsulation

def _getSurfaceControlMovableInsulations(self) -> SurfaceControlMovableInsulationVector:
    """Get a vector of all objects of type SurfaceControlMovableInsulation in the model.

    :return: A vector of SurfaceControlMovableInsulation.
    """
    return getSurfaceControlMovableInsulations(self)
Model.getSurfaceControlMovableInsulations = _getSurfaceControlMovableInsulations

def _getSurfaceControlMovableInsulationByName(self, t_name: str) -> OptionalSurfaceControlMovableInsulation:
    """Try to get an object of type SurfaceControlMovableInsulation that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SurfaceControlMovableInsulation.
    """
    return getSurfaceControlMovableInsulationByName(self, t_name)
Model.getSurfaceControlMovableInsulationByName = _getSurfaceControlMovableInsulationByName

def _getSurfaceControlMovableInsulationsByName(self, t_name: str, t_exactMatch: bool) -> SurfaceControlMovableInsulationVector:
    """Returns all objects of type SurfaceControlMovableInsulation named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSurfaceControlMovableInsulationsByName(self, t_name, t_exactMatch)
Model.getSurfaceControlMovableInsulationsByName = _getSurfaceControlMovableInsulationsByName

class SurfacePropertyOtherSideCoefficients(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertyOtherSideCoefficients

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertyOtherSideCoefficients(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_iddObjectType()

    def combinedConvectiveRadiativeFilmCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_combinedConvectiveRadiativeFilmCoefficient(self)

    def constantTemperature(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_constantTemperature(self)

    def isConstantTemperatureDefaulted(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_isConstantTemperatureDefaulted(self)

    def constantTemperatureCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_constantTemperatureCoefficient(self)

    def isConstantTemperatureCoefficientDefaulted(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_isConstantTemperatureCoefficientDefaulted(self)

    def externalDryBulbTemperatureCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_externalDryBulbTemperatureCoefficient(self)

    def isExternalDryBulbTemperatureCoefficientDefaulted(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_isExternalDryBulbTemperatureCoefficientDefaulted(self)

    def groundTemperatureCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_groundTemperatureCoefficient(self)

    def isGroundTemperatureCoefficientDefaulted(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_isGroundTemperatureCoefficientDefaulted(self)

    def windSpeedCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_windSpeedCoefficient(self)

    def isWindSpeedCoefficientDefaulted(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_isWindSpeedCoefficientDefaulted(self)

    def zoneAirTemperatureCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_zoneAirTemperatureCoefficient(self)

    def isZoneAirTemperatureCoefficientDefaulted(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_isZoneAirTemperatureCoefficientDefaulted(self)

    def constantTemperatureSchedule(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_constantTemperatureSchedule(self)

    def sinusoidalVariationofConstantTemperatureCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_sinusoidalVariationofConstantTemperatureCoefficient(self)

    def isSinusoidalVariationofConstantTemperatureCoefficientDefaulted(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_isSinusoidalVariationofConstantTemperatureCoefficientDefaulted(self)

    def periodofSinusoidalVariation(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_periodofSinusoidalVariation(self)

    def isPeriodofSinusoidalVariationDefaulted(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_isPeriodofSinusoidalVariationDefaulted(self)

    def previousOtherSideTemperatureCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_previousOtherSideTemperatureCoefficient(self)

    def isPreviousOtherSideTemperatureCoefficientDefaulted(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_isPreviousOtherSideTemperatureCoefficientDefaulted(self)

    def minimumOtherSideTemperatureLimit(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_minimumOtherSideTemperatureLimit(self)

    def maximumOtherSideTemperatureLimit(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_maximumOtherSideTemperatureLimit(self)

    def setCombinedConvectiveRadiativeFilmCoefficient(self, combinedConvectiveRadiativeFilmCoefficient):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_setCombinedConvectiveRadiativeFilmCoefficient(self, combinedConvectiveRadiativeFilmCoefficient)

    def resetCombinedConvectiveRadiativeFilmCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_resetCombinedConvectiveRadiativeFilmCoefficient(self)

    def setConstantTemperature(self, constantTemperature):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_setConstantTemperature(self, constantTemperature)

    def resetConstantTemperature(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_resetConstantTemperature(self)

    def setConstantTemperatureCoefficient(self, constantTemperatureCoefficient):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_setConstantTemperatureCoefficient(self, constantTemperatureCoefficient)

    def resetConstantTemperatureCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_resetConstantTemperatureCoefficient(self)

    def setExternalDryBulbTemperatureCoefficient(self, externalDryBulbTemperatureCoefficient):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_setExternalDryBulbTemperatureCoefficient(self, externalDryBulbTemperatureCoefficient)

    def resetExternalDryBulbTemperatureCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_resetExternalDryBulbTemperatureCoefficient(self)

    def setGroundTemperatureCoefficient(self, groundTemperatureCoefficient):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_setGroundTemperatureCoefficient(self, groundTemperatureCoefficient)

    def resetGroundTemperatureCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_resetGroundTemperatureCoefficient(self)

    def setWindSpeedCoefficient(self, windSpeedCoefficient):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_setWindSpeedCoefficient(self, windSpeedCoefficient)

    def resetWindSpeedCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_resetWindSpeedCoefficient(self)

    def setZoneAirTemperatureCoefficient(self, zoneAirTemperatureCoefficient):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_setZoneAirTemperatureCoefficient(self, zoneAirTemperatureCoefficient)

    def resetZoneAirTemperatureCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_resetZoneAirTemperatureCoefficient(self)

    def setConstantTemperatureSchedule(self, schedule):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_setConstantTemperatureSchedule(self, schedule)

    def resetConstantTemperatureSchedule(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_resetConstantTemperatureSchedule(self)

    def setSinusoidalVariationofConstantTemperatureCoefficient(self, sinusoidalVariationofConstantTemperatureCoefficient):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_setSinusoidalVariationofConstantTemperatureCoefficient(self, sinusoidalVariationofConstantTemperatureCoefficient)

    def resetSinusoidalVariationofConstantTemperatureCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_resetSinusoidalVariationofConstantTemperatureCoefficient(self)

    def setPeriodofSinusoidalVariation(self, periodofSinusoidalVariation):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_setPeriodofSinusoidalVariation(self, periodofSinusoidalVariation)

    def resetPeriodofSinusoidalVariation(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_resetPeriodofSinusoidalVariation(self)

    def setPreviousOtherSideTemperatureCoefficient(self, previousOtherSideTemperatureCoefficient):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_setPreviousOtherSideTemperatureCoefficient(self, previousOtherSideTemperatureCoefficient)

    def resetPreviousOtherSideTemperatureCoefficient(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_resetPreviousOtherSideTemperatureCoefficient(self)

    def setMinimumOtherSideTemperatureLimit(self, minimumOtherSideTemperatureLimit):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_setMinimumOtherSideTemperatureLimit(self, minimumOtherSideTemperatureLimit)

    def resetMinimumOtherSideTemperatureLimit(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_resetMinimumOtherSideTemperatureLimit(self)

    def setMaximumOtherSideTemperatureLimit(self, maximumOtherSideTemperatureLimit):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_setMaximumOtherSideTemperatureLimit(self, maximumOtherSideTemperatureLimit)

    def resetMaximumOtherSideTemperatureLimit(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_resetMaximumOtherSideTemperatureLimit(self)

# Register SurfacePropertyOtherSideCoefficients in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertyOtherSideCoefficients_swigregister(SurfacePropertyOtherSideCoefficients)

def toSurfacePropertyOtherSideCoefficients(idfObject):
    return _openstudiomodelgeometry.toSurfacePropertyOtherSideCoefficients(idfObject)

def getSurfacePropertyOtherSideCoefficients(t_model, t_handle):
    return _openstudiomodelgeometry.getSurfacePropertyOtherSideCoefficients(t_model, t_handle)

def getSurfacePropertyOtherSideCoefficientss(t_model):
    return _openstudiomodelgeometry.getSurfacePropertyOtherSideCoefficientss(t_model)

def getSurfacePropertyOtherSideCoefficientsByName(t_model, t_name):
    return _openstudiomodelgeometry.getSurfacePropertyOtherSideCoefficientsByName(t_model, t_name)

def getSurfacePropertyOtherSideCoefficientssByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSurfacePropertyOtherSideCoefficientssByName(t_model, t_name, t_exactMatch)

def _to_SurfacePropertyOtherSideCoefficients(self) -> OptionalSurfacePropertyOtherSideCoefficients:
    """Try to cast the ModelObject to a SurfacePropertyOtherSideCoefficients.

    :return: An Optional SurfacePropertyOtherSideCoefficients.
    """
    return toSurfacePropertyOtherSideCoefficients(self)
openstudioutilitiesidf.IdfObject.to_SurfacePropertyOtherSideCoefficients = _to_SurfacePropertyOtherSideCoefficients

def _getSurfacePropertyOtherSideCoefficients(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSurfacePropertyOtherSideCoefficients:
    """Try to get an object of type SurfacePropertyOtherSideCoefficients referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SurfacePropertyOtherSideCoefficients.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSurfacePropertyOtherSideCoefficients(self, t_handle)
Model.getSurfacePropertyOtherSideCoefficients = _getSurfacePropertyOtherSideCoefficients

def _getSurfacePropertyOtherSideCoefficientss(self) -> SurfacePropertyOtherSideCoefficientsVector:
    """Get a vector of all objects of type SurfacePropertyOtherSideCoefficients in the model.

    :return: A vector of SurfacePropertyOtherSideCoefficients.
    """
    return getSurfacePropertyOtherSideCoefficientss(self)
Model.getSurfacePropertyOtherSideCoefficientss = _getSurfacePropertyOtherSideCoefficientss

def _getSurfacePropertyOtherSideCoefficientsByName(self, t_name: str) -> OptionalSurfacePropertyOtherSideCoefficients:
    """Try to get an object of type SurfacePropertyOtherSideCoefficients that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SurfacePropertyOtherSideCoefficients.
    """
    return getSurfacePropertyOtherSideCoefficientsByName(self, t_name)
Model.getSurfacePropertyOtherSideCoefficientsByName = _getSurfacePropertyOtherSideCoefficientsByName

def _getSurfacePropertyOtherSideCoefficientssByName(self, t_name: str, t_exactMatch: bool) -> SurfacePropertyOtherSideCoefficientsVector:
    """Returns all objects of type SurfacePropertyOtherSideCoefficients named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSurfacePropertyOtherSideCoefficientssByName(self, t_name, t_exactMatch)
Model.getSurfacePropertyOtherSideCoefficientssByName = _getSurfacePropertyOtherSideCoefficientssByName

class SurfacePropertyOtherSideConditionsModel(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertyOtherSideConditionsModel

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModel_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertyOtherSideConditionsModel(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModel_iddObjectType()

    @staticmethod
    def typeOfModelingValues():
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModel_typeOfModelingValues()

    def typeOfModeling(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModel_typeOfModeling(self)

    def isTypeOfModelingDefaulted(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModel_isTypeOfModelingDefaulted(self)

    def setTypeOfModeling(self, typeOfModeling):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModel_setTypeOfModeling(self, typeOfModeling)

    def resetTypeOfModeling(self):
        return _openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModel_resetTypeOfModeling(self)

# Register SurfacePropertyOtherSideConditionsModel in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertyOtherSideConditionsModel_swigregister(SurfacePropertyOtherSideConditionsModel)

def toSurfacePropertyOtherSideConditionsModel(idfObject):
    return _openstudiomodelgeometry.toSurfacePropertyOtherSideConditionsModel(idfObject)

def getSurfacePropertyOtherSideConditionsModel(t_model, t_handle):
    return _openstudiomodelgeometry.getSurfacePropertyOtherSideConditionsModel(t_model, t_handle)

def getSurfacePropertyOtherSideConditionsModels(t_model):
    return _openstudiomodelgeometry.getSurfacePropertyOtherSideConditionsModels(t_model)

def getSurfacePropertyOtherSideConditionsModelByName(t_model, t_name):
    return _openstudiomodelgeometry.getSurfacePropertyOtherSideConditionsModelByName(t_model, t_name)

def getSurfacePropertyOtherSideConditionsModelsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSurfacePropertyOtherSideConditionsModelsByName(t_model, t_name, t_exactMatch)

def _to_SurfacePropertyOtherSideConditionsModel(self) -> OptionalSurfacePropertyOtherSideConditionsModel:
    """Try to cast the ModelObject to a SurfacePropertyOtherSideConditionsModel.

    :return: An Optional SurfacePropertyOtherSideConditionsModel.
    """
    return toSurfacePropertyOtherSideConditionsModel(self)
openstudioutilitiesidf.IdfObject.to_SurfacePropertyOtherSideConditionsModel = _to_SurfacePropertyOtherSideConditionsModel

def _getSurfacePropertyOtherSideConditionsModel(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSurfacePropertyOtherSideConditionsModel:
    """Try to get an object of type SurfacePropertyOtherSideConditionsModel referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SurfacePropertyOtherSideConditionsModel.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSurfacePropertyOtherSideConditionsModel(self, t_handle)
Model.getSurfacePropertyOtherSideConditionsModel = _getSurfacePropertyOtherSideConditionsModel

def _getSurfacePropertyOtherSideConditionsModels(self) -> SurfacePropertyOtherSideConditionsModelVector:
    """Get a vector of all objects of type SurfacePropertyOtherSideConditionsModel in the model.

    :return: A vector of SurfacePropertyOtherSideConditionsModel.
    """
    return getSurfacePropertyOtherSideConditionsModels(self)
Model.getSurfacePropertyOtherSideConditionsModels = _getSurfacePropertyOtherSideConditionsModels

def _getSurfacePropertyOtherSideConditionsModelByName(self, t_name: str) -> OptionalSurfacePropertyOtherSideConditionsModel:
    """Try to get an object of type SurfacePropertyOtherSideConditionsModel that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SurfacePropertyOtherSideConditionsModel.
    """
    return getSurfacePropertyOtherSideConditionsModelByName(self, t_name)
Model.getSurfacePropertyOtherSideConditionsModelByName = _getSurfacePropertyOtherSideConditionsModelByName

def _getSurfacePropertyOtherSideConditionsModelsByName(self, t_name: str, t_exactMatch: bool) -> SurfacePropertyOtherSideConditionsModelVector:
    """Returns all objects of type SurfacePropertyOtherSideConditionsModel named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSurfacePropertyOtherSideConditionsModelsByName(self, t_name, t_exactMatch)
Model.getSurfacePropertyOtherSideConditionsModelsByName = _getSurfacePropertyOtherSideConditionsModelsByName

class SurfacePropertyLocalEnvironment(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertyLocalEnvironment(*args))
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertyLocalEnvironment

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_iddObjectType()

    def exteriorSurface(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_exteriorSurface(self)

    def exteriorSurfaceAsSurface(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_exteriorSurfaceAsSurface(self)

    def exteriorSurfaceAsSubSurface(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_exteriorSurfaceAsSubSurface(self)

    def externalShadingFractionSchedule(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_externalShadingFractionSchedule(self)

    def surfacePropertySurroundingSurfaces(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_surfacePropertySurroundingSurfaces(self)

    def surfacePropertyGroundSurfaces(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_surfacePropertyGroundSurfaces(self)

    def setExteriorSurface(self, surface):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_setExteriorSurface(self, surface)

    def setExternalShadingFractionSchedule(self, schedule):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_setExternalShadingFractionSchedule(self, schedule)

    def resetExternalShadingFractionSchedule(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_resetExternalShadingFractionSchedule(self)

    def setSurfacePropertySurroundingSurfaces(self, surfacePropertySurroundingSurfaces):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_setSurfacePropertySurroundingSurfaces(self, surfacePropertySurroundingSurfaces)

    def resetSurfacePropertySurroundingSurfaces(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_resetSurfacePropertySurroundingSurfaces(self)

    def setSurfacePropertyGroundSurfaces(self, surfacePropertyGroundSurfaces):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_setSurfacePropertyGroundSurfaces(self, surfacePropertyGroundSurfaces)

    def resetSurfacePropertyGroundSurfaces(self):
        return _openstudiomodelgeometry.SurfacePropertyLocalEnvironment_resetSurfacePropertyGroundSurfaces(self)

# Register SurfacePropertyLocalEnvironment in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertyLocalEnvironment_swigregister(SurfacePropertyLocalEnvironment)

def toSurfacePropertyLocalEnvironment(idfObject):
    return _openstudiomodelgeometry.toSurfacePropertyLocalEnvironment(idfObject)

def getSurfacePropertyLocalEnvironment(t_model, t_handle):
    return _openstudiomodelgeometry.getSurfacePropertyLocalEnvironment(t_model, t_handle)

def getSurfacePropertyLocalEnvironments(t_model):
    return _openstudiomodelgeometry.getSurfacePropertyLocalEnvironments(t_model)

def getSurfacePropertyLocalEnvironmentByName(t_model, t_name):
    return _openstudiomodelgeometry.getSurfacePropertyLocalEnvironmentByName(t_model, t_name)

def getSurfacePropertyLocalEnvironmentsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSurfacePropertyLocalEnvironmentsByName(t_model, t_name, t_exactMatch)

def _to_SurfacePropertyLocalEnvironment(self) -> OptionalSurfacePropertyLocalEnvironment:
    """Try to cast the ModelObject to a SurfacePropertyLocalEnvironment.

    :return: An Optional SurfacePropertyLocalEnvironment.
    """
    return toSurfacePropertyLocalEnvironment(self)
openstudioutilitiesidf.IdfObject.to_SurfacePropertyLocalEnvironment = _to_SurfacePropertyLocalEnvironment

def _getSurfacePropertyLocalEnvironment(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSurfacePropertyLocalEnvironment:
    """Try to get an object of type SurfacePropertyLocalEnvironment referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SurfacePropertyLocalEnvironment.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSurfacePropertyLocalEnvironment(self, t_handle)
Model.getSurfacePropertyLocalEnvironment = _getSurfacePropertyLocalEnvironment

def _getSurfacePropertyLocalEnvironments(self) -> SurfacePropertyLocalEnvironmentVector:
    """Get a vector of all objects of type SurfacePropertyLocalEnvironment in the model.

    :return: A vector of SurfacePropertyLocalEnvironment.
    """
    return getSurfacePropertyLocalEnvironments(self)
Model.getSurfacePropertyLocalEnvironments = _getSurfacePropertyLocalEnvironments

def _getSurfacePropertyLocalEnvironmentByName(self, t_name: str) -> OptionalSurfacePropertyLocalEnvironment:
    """Try to get an object of type SurfacePropertyLocalEnvironment that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SurfacePropertyLocalEnvironment.
    """
    return getSurfacePropertyLocalEnvironmentByName(self, t_name)
Model.getSurfacePropertyLocalEnvironmentByName = _getSurfacePropertyLocalEnvironmentByName

def _getSurfacePropertyLocalEnvironmentsByName(self, t_name: str, t_exactMatch: bool) -> SurfacePropertyLocalEnvironmentVector:
    """Returns all objects of type SurfacePropertyLocalEnvironment named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSurfacePropertyLocalEnvironmentsByName(self, t_name, t_exactMatch)
Model.getSurfacePropertyLocalEnvironmentsByName = _getSurfacePropertyLocalEnvironmentsByName

class SurroundingSurfaceGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, surroundingSurfaceName, viewFactor, temperatureSchedule):
        _openstudiomodelgeometry.SurroundingSurfaceGroup_swiginit(self, _openstudiomodelgeometry.new_SurroundingSurfaceGroup(surroundingSurfaceName, viewFactor, temperatureSchedule))

    def surroundingSurfaceName(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroup_surroundingSurfaceName(self)

    def viewFactor(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroup_viewFactor(self)

    def temperatureSchedule(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroup_temperatureSchedule(self)

    def __str__(self):
        return _openstudiomodelgeometry.SurroundingSurfaceGroup___str__(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurroundingSurfaceGroup

# Register SurroundingSurfaceGroup in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurroundingSurfaceGroup_swigregister(SurroundingSurfaceGroup)
class SurfacePropertySurroundingSurfaces(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model):
        _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertySurroundingSurfaces(model))
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertySurroundingSurfaces

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_iddObjectType()

    def skyViewFactor(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_skyViewFactor(self)

    def isSkyViewFactorAutocalculated(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_isSkyViewFactorAutocalculated(self)

    def skyTemperatureSchedule(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_skyTemperatureSchedule(self)

    def groundViewFactor(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_groundViewFactor(self)

    def isGroundViewFactorAutocalculated(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_isGroundViewFactorAutocalculated(self)

    def groundTemperatureSchedule(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_groundTemperatureSchedule(self)

    def setSkyViewFactor(self, skyViewFactor):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_setSkyViewFactor(self, skyViewFactor)

    def autocalculateSkyViewFactor(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_autocalculateSkyViewFactor(self)

    def setSkyTemperatureSchedule(self, schedule):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_setSkyTemperatureSchedule(self, schedule)

    def resetSkyTemperatureSchedule(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_resetSkyTemperatureSchedule(self)

    def setGroundViewFactor(self, groundViewFactor):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_setGroundViewFactor(self, groundViewFactor)

    def autocalculateGroundViewFactor(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_autocalculateGroundViewFactor(self)

    def setGroundTemperatureSchedule(self, schedule):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_setGroundTemperatureSchedule(self, schedule)

    def resetGroundTemperatureSchedule(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_resetGroundTemperatureSchedule(self)

    def surfacePropertyLocalEnvironment(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_surfacePropertyLocalEnvironment(self)

    def surroundingSurfaceGroups(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_surroundingSurfaceGroups(self)

    def numberofSurroundingSurfaceGroups(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_numberofSurroundingSurfaceGroups(self)

    def surroundingSurfaceGroupIndex(self, *args):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_surroundingSurfaceGroupIndex(self, *args)

    def getSurroundingSurfaceGroup(self, groupIndex):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_getSurroundingSurfaceGroup(self, groupIndex)

    def addSurroundingSurfaceGroup(self, *args):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_addSurroundingSurfaceGroup(self, *args)

    def addSurroundingSurfaceGroups(self, surroundingSurfaceGroups):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_addSurroundingSurfaceGroups(self, surroundingSurfaceGroups)

    def removeSurroundingSurfaceGroup(self, groupIndex):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_removeSurroundingSurfaceGroup(self, groupIndex)

    def removeAllSurroundingSurfaceGroups(self):
        return _openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_removeAllSurroundingSurfaceGroups(self)

# Register SurfacePropertySurroundingSurfaces in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertySurroundingSurfaces_swigregister(SurfacePropertySurroundingSurfaces)

def toSurfacePropertySurroundingSurfaces(idfObject):
    return _openstudiomodelgeometry.toSurfacePropertySurroundingSurfaces(idfObject)

def getSurfacePropertySurroundingSurfaces(t_model, t_handle):
    return _openstudiomodelgeometry.getSurfacePropertySurroundingSurfaces(t_model, t_handle)

def getSurfacePropertySurroundingSurfacess(t_model):
    return _openstudiomodelgeometry.getSurfacePropertySurroundingSurfacess(t_model)

def getSurfacePropertySurroundingSurfacesByName(t_model, t_name):
    return _openstudiomodelgeometry.getSurfacePropertySurroundingSurfacesByName(t_model, t_name)

def getSurfacePropertySurroundingSurfacessByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSurfacePropertySurroundingSurfacessByName(t_model, t_name, t_exactMatch)

def _to_SurfacePropertySurroundingSurfaces(self) -> OptionalSurfacePropertySurroundingSurfaces:
    """Try to cast the ModelObject to a SurfacePropertySurroundingSurfaces.

    :return: An Optional SurfacePropertySurroundingSurfaces.
    """
    return toSurfacePropertySurroundingSurfaces(self)
openstudioutilitiesidf.IdfObject.to_SurfacePropertySurroundingSurfaces = _to_SurfacePropertySurroundingSurfaces

def _getSurfacePropertySurroundingSurfaces(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSurfacePropertySurroundingSurfaces:
    """Try to get an object of type SurfacePropertySurroundingSurfaces referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SurfacePropertySurroundingSurfaces.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSurfacePropertySurroundingSurfaces(self, t_handle)
Model.getSurfacePropertySurroundingSurfaces = _getSurfacePropertySurroundingSurfaces

def _getSurfacePropertySurroundingSurfacess(self) -> SurfacePropertySurroundingSurfacesVector:
    """Get a vector of all objects of type SurfacePropertySurroundingSurfaces in the model.

    :return: A vector of SurfacePropertySurroundingSurfaces.
    """
    return getSurfacePropertySurroundingSurfacess(self)
Model.getSurfacePropertySurroundingSurfacess = _getSurfacePropertySurroundingSurfacess

def _getSurfacePropertySurroundingSurfacesByName(self, t_name: str) -> OptionalSurfacePropertySurroundingSurfaces:
    """Try to get an object of type SurfacePropertySurroundingSurfaces that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SurfacePropertySurroundingSurfaces.
    """
    return getSurfacePropertySurroundingSurfacesByName(self, t_name)
Model.getSurfacePropertySurroundingSurfacesByName = _getSurfacePropertySurroundingSurfacesByName

def _getSurfacePropertySurroundingSurfacessByName(self, t_name: str, t_exactMatch: bool) -> SurfacePropertySurroundingSurfacesVector:
    """Returns all objects of type SurfacePropertySurroundingSurfaces named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSurfacePropertySurroundingSurfacessByName(self, t_name, t_exactMatch)
Model.getSurfacePropertySurroundingSurfacessByName = _getSurfacePropertySurroundingSurfacessByName

class GroundSurfaceGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelgeometry.GroundSurfaceGroup_swiginit(self, _openstudiomodelgeometry.new_GroundSurfaceGroup(*args))

    def groundSurfaceName(self):
        return _openstudiomodelgeometry.GroundSurfaceGroup_groundSurfaceName(self)

    def viewFactor(self):
        return _openstudiomodelgeometry.GroundSurfaceGroup_viewFactor(self)

    def temperatureSchedule(self):
        return _openstudiomodelgeometry.GroundSurfaceGroup_temperatureSchedule(self)

    def reflectanceSchedule(self):
        return _openstudiomodelgeometry.GroundSurfaceGroup_reflectanceSchedule(self)

    def __str__(self):
        return _openstudiomodelgeometry.GroundSurfaceGroup___str__(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_GroundSurfaceGroup

# Register GroundSurfaceGroup in _openstudiomodelgeometry:
_openstudiomodelgeometry.GroundSurfaceGroup_swigregister(GroundSurfaceGroup)
class SurfacePropertyGroundSurfaces(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertyGroundSurfaces

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertyGroundSurfaces_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertyGroundSurfaces(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfaces_iddObjectType()

    def surfacePropertyLocalEnvironment(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfaces_surfacePropertyLocalEnvironment(self)

    def groundSurfaceGroups(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfaces_groundSurfaceGroups(self)

    def numberofGroundSurfaceGroups(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfaces_numberofGroundSurfaceGroups(self)

    def groundSurfaceGroupIndex(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfaces_groundSurfaceGroupIndex(self, *args)

    def getGroundSurfaceGroup(self, groupIndex):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfaces_getGroundSurfaceGroup(self, groupIndex)

    def addGroundSurfaceGroup(self, *args):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfaces_addGroundSurfaceGroup(self, *args)

    def addGroundSurfaceGroups(self, groundSurfaceGroups):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfaces_addGroundSurfaceGroups(self, groundSurfaceGroups)

    def removeGroundSurfaceGroup(self, groupIndex):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfaces_removeGroundSurfaceGroup(self, groupIndex)

    def removeAllGroundSurfaceGroups(self):
        return _openstudiomodelgeometry.SurfacePropertyGroundSurfaces_removeAllGroundSurfaceGroups(self)

# Register SurfacePropertyGroundSurfaces in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertyGroundSurfaces_swigregister(SurfacePropertyGroundSurfaces)

def toSurfacePropertyGroundSurfaces(idfObject):
    return _openstudiomodelgeometry.toSurfacePropertyGroundSurfaces(idfObject)

def getSurfacePropertyGroundSurfaces(t_model, t_handle):
    return _openstudiomodelgeometry.getSurfacePropertyGroundSurfaces(t_model, t_handle)

def getSurfacePropertyGroundSurfacess(t_model):
    return _openstudiomodelgeometry.getSurfacePropertyGroundSurfacess(t_model)

def getSurfacePropertyGroundSurfacesByName(t_model, t_name):
    return _openstudiomodelgeometry.getSurfacePropertyGroundSurfacesByName(t_model, t_name)

def getSurfacePropertyGroundSurfacessByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSurfacePropertyGroundSurfacessByName(t_model, t_name, t_exactMatch)

def _to_SurfacePropertyGroundSurfaces(self) -> OptionalSurfacePropertyGroundSurfaces:
    """Try to cast the ModelObject to a SurfacePropertyGroundSurfaces.

    :return: An Optional SurfacePropertyGroundSurfaces.
    """
    return toSurfacePropertyGroundSurfaces(self)
openstudioutilitiesidf.IdfObject.to_SurfacePropertyGroundSurfaces = _to_SurfacePropertyGroundSurfaces

def _getSurfacePropertyGroundSurfaces(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSurfacePropertyGroundSurfaces:
    """Try to get an object of type SurfacePropertyGroundSurfaces referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SurfacePropertyGroundSurfaces.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSurfacePropertyGroundSurfaces(self, t_handle)
Model.getSurfacePropertyGroundSurfaces = _getSurfacePropertyGroundSurfaces

def _getSurfacePropertyGroundSurfacess(self) -> SurfacePropertyGroundSurfacesVector:
    """Get a vector of all objects of type SurfacePropertyGroundSurfaces in the model.

    :return: A vector of SurfacePropertyGroundSurfaces.
    """
    return getSurfacePropertyGroundSurfacess(self)
Model.getSurfacePropertyGroundSurfacess = _getSurfacePropertyGroundSurfacess

def _getSurfacePropertyGroundSurfacesByName(self, t_name: str) -> OptionalSurfacePropertyGroundSurfaces:
    """Try to get an object of type SurfacePropertyGroundSurfaces that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SurfacePropertyGroundSurfaces.
    """
    return getSurfacePropertyGroundSurfacesByName(self, t_name)
Model.getSurfacePropertyGroundSurfacesByName = _getSurfacePropertyGroundSurfacesByName

def _getSurfacePropertyGroundSurfacessByName(self, t_name: str, t_exactMatch: bool) -> SurfacePropertyGroundSurfacesVector:
    """Returns all objects of type SurfacePropertyGroundSurfaces named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSurfacePropertyGroundSurfacessByName(self, t_name, t_exactMatch)
Model.getSurfacePropertyGroundSurfacessByName = _getSurfacePropertyGroundSurfacessByName

class SurfacePropertyIncidentSolarMultiplier(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertyIncidentSolarMultiplier

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplier_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertyIncidentSolarMultiplier(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplier_iddObjectType()

    def subSurface(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplier_subSurface(self)

    def incidentSolarMultiplier(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplier_incidentSolarMultiplier(self)

    def incidentSolarMultiplierSchedule(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplier_incidentSolarMultiplierSchedule(self)

    def setSubSurface(self, subSurface):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplier_setSubSurface(self, subSurface)

    def setIncidentSolarMultiplier(self, incidentSolarMultiplier):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplier_setIncidentSolarMultiplier(self, incidentSolarMultiplier)

    def setIncidentSolarMultiplierSchedule(self, schedule):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplier_setIncidentSolarMultiplierSchedule(self, schedule)

    def resetIncidentSolarMultiplierSchedule(self):
        return _openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplier_resetIncidentSolarMultiplierSchedule(self)

# Register SurfacePropertyIncidentSolarMultiplier in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertyIncidentSolarMultiplier_swigregister(SurfacePropertyIncidentSolarMultiplier)

def toSurfacePropertyIncidentSolarMultiplier(idfObject):
    return _openstudiomodelgeometry.toSurfacePropertyIncidentSolarMultiplier(idfObject)

def getSurfacePropertyIncidentSolarMultiplier(t_model, t_handle):
    return _openstudiomodelgeometry.getSurfacePropertyIncidentSolarMultiplier(t_model, t_handle)

def getSurfacePropertyIncidentSolarMultipliers(t_model):
    return _openstudiomodelgeometry.getSurfacePropertyIncidentSolarMultipliers(t_model)

def getSurfacePropertyIncidentSolarMultiplierByName(t_model, t_name):
    return _openstudiomodelgeometry.getSurfacePropertyIncidentSolarMultiplierByName(t_model, t_name)

def getSurfacePropertyIncidentSolarMultipliersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSurfacePropertyIncidentSolarMultipliersByName(t_model, t_name, t_exactMatch)

def _to_SurfacePropertyIncidentSolarMultiplier(self) -> OptionalSurfacePropertyIncidentSolarMultiplier:
    """Try to cast the ModelObject to a SurfacePropertyIncidentSolarMultiplier.

    :return: An Optional SurfacePropertyIncidentSolarMultiplier.
    """
    return toSurfacePropertyIncidentSolarMultiplier(self)
openstudioutilitiesidf.IdfObject.to_SurfacePropertyIncidentSolarMultiplier = _to_SurfacePropertyIncidentSolarMultiplier

def _getSurfacePropertyIncidentSolarMultiplier(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSurfacePropertyIncidentSolarMultiplier:
    """Try to get an object of type SurfacePropertyIncidentSolarMultiplier referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SurfacePropertyIncidentSolarMultiplier.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSurfacePropertyIncidentSolarMultiplier(self, t_handle)
Model.getSurfacePropertyIncidentSolarMultiplier = _getSurfacePropertyIncidentSolarMultiplier

def _getSurfacePropertyIncidentSolarMultipliers(self) -> SurfacePropertyIncidentSolarMultiplierVector:
    """Get a vector of all objects of type SurfacePropertyIncidentSolarMultiplier in the model.

    :return: A vector of SurfacePropertyIncidentSolarMultiplier.
    """
    return getSurfacePropertyIncidentSolarMultipliers(self)
Model.getSurfacePropertyIncidentSolarMultipliers = _getSurfacePropertyIncidentSolarMultipliers

def _getSurfacePropertyIncidentSolarMultiplierByName(self, t_name: str) -> OptionalSurfacePropertyIncidentSolarMultiplier:
    """Try to get an object of type SurfacePropertyIncidentSolarMultiplier that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SurfacePropertyIncidentSolarMultiplier.
    """
    return getSurfacePropertyIncidentSolarMultiplierByName(self, t_name)
Model.getSurfacePropertyIncidentSolarMultiplierByName = _getSurfacePropertyIncidentSolarMultiplierByName

def _getSurfacePropertyIncidentSolarMultipliersByName(self, t_name: str, t_exactMatch: bool) -> SurfacePropertyIncidentSolarMultiplierVector:
    """Returns all objects of type SurfacePropertyIncidentSolarMultiplier named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSurfacePropertyIncidentSolarMultipliersByName(self, t_name, t_exactMatch)
Model.getSurfacePropertyIncidentSolarMultipliersByName = _getSurfacePropertyIncidentSolarMultipliersByName

class SurfacePropertyConvectionCoefficients(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertyConvectionCoefficients

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertyConvectionCoefficients(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_iddObjectType()

    @staticmethod
    def convectionCoefficient1LocationValues():
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_convectionCoefficient1LocationValues()

    @staticmethod
    def convectionCoefficient1TypeValues():
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_convectionCoefficient1TypeValues()

    @staticmethod
    def convectionCoefficient2LocationValues():
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_convectionCoefficient2LocationValues()

    @staticmethod
    def convectionCoefficient2TypeValues():
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_convectionCoefficient2TypeValues()

    def surfaceAsModelObject(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_surfaceAsModelObject(self)

    def surfaceAsSurface(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_surfaceAsSurface(self)

    def surfaceAsSubSurface(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_surfaceAsSubSurface(self)

    def surfaceAsInternalMass(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_surfaceAsInternalMass(self)

    def convectionCoefficient1Location(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_convectionCoefficient1Location(self)

    def convectionCoefficient1Type(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_convectionCoefficient1Type(self)

    def convectionCoefficient1(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_convectionCoefficient1(self)

    def convectionCoefficient1Schedule(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_convectionCoefficient1Schedule(self)

    def convectionCoefficient2Location(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_convectionCoefficient2Location(self)

    def convectionCoefficient2Type(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_convectionCoefficient2Type(self)

    def convectionCoefficient2(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_convectionCoefficient2(self)

    def convectionCoefficient2Schedule(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_convectionCoefficient2Schedule(self)

    def setSurface(self, surface):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_setSurface(self, surface)

    def setConvectionCoefficient1Location(self, convectionCoefficient1Location):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_setConvectionCoefficient1Location(self, convectionCoefficient1Location)

    def resetConvectionCoefficient1Location(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_resetConvectionCoefficient1Location(self)

    def setConvectionCoefficient1Type(self, convectionCoefficient1Type):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_setConvectionCoefficient1Type(self, convectionCoefficient1Type)

    def resetConvectionCoefficient1Type(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_resetConvectionCoefficient1Type(self)

    def setConvectionCoefficient1(self, convectionCoefficient1):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_setConvectionCoefficient1(self, convectionCoefficient1)

    def resetConvectionCoefficient1(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_resetConvectionCoefficient1(self)

    def setConvectionCoefficient1Schedule(self, schedule):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_setConvectionCoefficient1Schedule(self, schedule)

    def resetConvectionCoefficient1Schedule(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_resetConvectionCoefficient1Schedule(self)

    def setConvectionCoefficient2Location(self, convectionCoefficient2Location):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_setConvectionCoefficient2Location(self, convectionCoefficient2Location)

    def resetConvectionCoefficient2Location(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_resetConvectionCoefficient2Location(self)

    def setConvectionCoefficient2Type(self, convectionCoefficient2Type):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_setConvectionCoefficient2Type(self, convectionCoefficient2Type)

    def resetConvectionCoefficient2Type(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_resetConvectionCoefficient2Type(self)

    def setConvectionCoefficient2(self, convectionCoefficient2):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_setConvectionCoefficient2(self, convectionCoefficient2)

    def resetConvectionCoefficient2(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_resetConvectionCoefficient2(self)

    def setConvectionCoefficient2Schedule(self, schedule):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_setConvectionCoefficient2Schedule(self, schedule)

    def resetConvectionCoefficient2Schedule(self):
        return _openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_resetConvectionCoefficient2Schedule(self)

# Register SurfacePropertyConvectionCoefficients in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertyConvectionCoefficients_swigregister(SurfacePropertyConvectionCoefficients)

def toSurfacePropertyConvectionCoefficients(idfObject):
    return _openstudiomodelgeometry.toSurfacePropertyConvectionCoefficients(idfObject)

def getSurfacePropertyConvectionCoefficients(t_model, t_handle):
    return _openstudiomodelgeometry.getSurfacePropertyConvectionCoefficients(t_model, t_handle)

def getSurfacePropertyConvectionCoefficientss(t_model):
    return _openstudiomodelgeometry.getSurfacePropertyConvectionCoefficientss(t_model)

def getSurfacePropertyConvectionCoefficientsByName(t_model, t_name):
    return _openstudiomodelgeometry.getSurfacePropertyConvectionCoefficientsByName(t_model, t_name)

def getSurfacePropertyConvectionCoefficientssByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSurfacePropertyConvectionCoefficientssByName(t_model, t_name, t_exactMatch)

def _to_SurfacePropertyConvectionCoefficients(self) -> OptionalSurfacePropertyConvectionCoefficients:
    """Try to cast the ModelObject to a SurfacePropertyConvectionCoefficients.

    :return: An Optional SurfacePropertyConvectionCoefficients.
    """
    return toSurfacePropertyConvectionCoefficients(self)
openstudioutilitiesidf.IdfObject.to_SurfacePropertyConvectionCoefficients = _to_SurfacePropertyConvectionCoefficients

def _getSurfacePropertyConvectionCoefficients(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSurfacePropertyConvectionCoefficients:
    """Try to get an object of type SurfacePropertyConvectionCoefficients referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SurfacePropertyConvectionCoefficients.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSurfacePropertyConvectionCoefficients(self, t_handle)
Model.getSurfacePropertyConvectionCoefficients = _getSurfacePropertyConvectionCoefficients

def _getSurfacePropertyConvectionCoefficientss(self) -> SurfacePropertyConvectionCoefficientsVector:
    """Get a vector of all objects of type SurfacePropertyConvectionCoefficients in the model.

    :return: A vector of SurfacePropertyConvectionCoefficients.
    """
    return getSurfacePropertyConvectionCoefficientss(self)
Model.getSurfacePropertyConvectionCoefficientss = _getSurfacePropertyConvectionCoefficientss

def _getSurfacePropertyConvectionCoefficientsByName(self, t_name: str) -> OptionalSurfacePropertyConvectionCoefficients:
    """Try to get an object of type SurfacePropertyConvectionCoefficients that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SurfacePropertyConvectionCoefficients.
    """
    return getSurfacePropertyConvectionCoefficientsByName(self, t_name)
Model.getSurfacePropertyConvectionCoefficientsByName = _getSurfacePropertyConvectionCoefficientsByName

def _getSurfacePropertyConvectionCoefficientssByName(self, t_name: str, t_exactMatch: bool) -> SurfacePropertyConvectionCoefficientsVector:
    """Returns all objects of type SurfacePropertyConvectionCoefficients named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSurfacePropertyConvectionCoefficientssByName(self, t_name, t_exactMatch)
Model.getSurfacePropertyConvectionCoefficientssByName = _getSurfacePropertyConvectionCoefficientssByName

class People(SpaceLoadInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_People

    def __init__(self, *args):
        _openstudiomodelgeometry.People_swiginit(self, _openstudiomodelgeometry.new_People(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.People_iddObjectType()

    def peopleDefinition(self):
        return _openstudiomodelgeometry.People_peopleDefinition(self)

    def numberofPeopleSchedule(self):
        return _openstudiomodelgeometry.People_numberofPeopleSchedule(self)

    def isNumberofPeopleScheduleDefaulted(self):
        return _openstudiomodelgeometry.People_isNumberofPeopleScheduleDefaulted(self)

    def activityLevelSchedule(self):
        return _openstudiomodelgeometry.People_activityLevelSchedule(self)

    def isActivityLevelScheduleDefaulted(self):
        return _openstudiomodelgeometry.People_isActivityLevelScheduleDefaulted(self)

    def workEfficiencySchedule(self):
        return _openstudiomodelgeometry.People_workEfficiencySchedule(self)

    def clothingInsulationSchedule(self):
        return _openstudiomodelgeometry.People_clothingInsulationSchedule(self)

    def airVelocitySchedule(self):
        return _openstudiomodelgeometry.People_airVelocitySchedule(self)

    def ankleLevelAirVelocitySchedule(self):
        return _openstudiomodelgeometry.People_ankleLevelAirVelocitySchedule(self)

    def coldStressTemperatureThreshold(self):
        return _openstudiomodelgeometry.People_coldStressTemperatureThreshold(self)

    def isColdStressTemperatureThresholdDefaulted(self):
        return _openstudiomodelgeometry.People_isColdStressTemperatureThresholdDefaulted(self)

    def heatStressTemperatureThreshold(self):
        return _openstudiomodelgeometry.People_heatStressTemperatureThreshold(self)

    def isHeatStressTemperatureThresholdDefaulted(self):
        return _openstudiomodelgeometry.People_isHeatStressTemperatureThresholdDefaulted(self)

    def setPeopleDefinition(self, definition):
        return _openstudiomodelgeometry.People_setPeopleDefinition(self, definition)

    def setNumberofPeopleSchedule(self, schedule):
        return _openstudiomodelgeometry.People_setNumberofPeopleSchedule(self, schedule)

    def resetNumberofPeopleSchedule(self):
        return _openstudiomodelgeometry.People_resetNumberofPeopleSchedule(self)

    def setActivityLevelSchedule(self, schedule):
        return _openstudiomodelgeometry.People_setActivityLevelSchedule(self, schedule)

    def resetActivityLevelSchedule(self):
        return _openstudiomodelgeometry.People_resetActivityLevelSchedule(self)

    def setWorkEfficiencySchedule(self, schedule):
        return _openstudiomodelgeometry.People_setWorkEfficiencySchedule(self, schedule)

    def resetWorkEfficiencySchedule(self):
        return _openstudiomodelgeometry.People_resetWorkEfficiencySchedule(self)

    def setClothingInsulationSchedule(self, schedule):
        return _openstudiomodelgeometry.People_setClothingInsulationSchedule(self, schedule)

    def resetClothingInsulationSchedule(self):
        return _openstudiomodelgeometry.People_resetClothingInsulationSchedule(self)

    def setAirVelocitySchedule(self, schedule):
        return _openstudiomodelgeometry.People_setAirVelocitySchedule(self, schedule)

    def resetAirVelocitySchedule(self):
        return _openstudiomodelgeometry.People_resetAirVelocitySchedule(self)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.People_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.People_resetMultiplier(self)

    def setAnkleLevelAirVelocitySchedule(self, schedule):
        return _openstudiomodelgeometry.People_setAnkleLevelAirVelocitySchedule(self, schedule)

    def resetAnkleLevelAirVelocitySchedule(self):
        return _openstudiomodelgeometry.People_resetAnkleLevelAirVelocitySchedule(self)

    def setColdStressTemperatureThreshold(self, coldStressTemperatureThreshold):
        return _openstudiomodelgeometry.People_setColdStressTemperatureThreshold(self, coldStressTemperatureThreshold)

    def resetColdStressTemperatureThreshold(self):
        return _openstudiomodelgeometry.People_resetColdStressTemperatureThreshold(self)

    def setHeatStressTemperatureThreshold(self, heatStressTemperatureThreshold):
        return _openstudiomodelgeometry.People_setHeatStressTemperatureThreshold(self, heatStressTemperatureThreshold)

    def resetHeatStressTemperatureThreshold(self):
        return _openstudiomodelgeometry.People_resetHeatStressTemperatureThreshold(self)

    def numberOfPeople(self):
        return _openstudiomodelgeometry.People_numberOfPeople(self)

    def peoplePerFloorArea(self):
        return _openstudiomodelgeometry.People_peoplePerFloorArea(self)

    def spaceFloorAreaPerPerson(self):
        return _openstudiomodelgeometry.People_spaceFloorAreaPerPerson(self)

    def getNumberOfPeople(self, floorArea):
        return _openstudiomodelgeometry.People_getNumberOfPeople(self, floorArea)

    def getPeoplePerFloorArea(self, floorArea):
        return _openstudiomodelgeometry.People_getPeoplePerFloorArea(self, floorArea)

    def getFloorAreaPerPerson(self, floorArea):
        return _openstudiomodelgeometry.People_getFloorAreaPerPerson(self, floorArea)

# Register People in _openstudiomodelgeometry:
_openstudiomodelgeometry.People_swigregister(People)

def toPeople(idfObject):
    return _openstudiomodelgeometry.toPeople(idfObject)

def getPeople(t_model, t_handle):
    return _openstudiomodelgeometry.getPeople(t_model, t_handle)

def getPeoples(t_model):
    return _openstudiomodelgeometry.getPeoples(t_model)

def getPeopleByName(t_model, t_name):
    return _openstudiomodelgeometry.getPeopleByName(t_model, t_name)

def getPeoplesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getPeoplesByName(t_model, t_name, t_exactMatch)

def _to_People(self) -> OptionalPeople:
    """Try to cast the ModelObject to a People.

    :return: An Optional People.
    """
    return toPeople(self)
openstudioutilitiesidf.IdfObject.to_People = _to_People

def _getPeople(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPeople:
    """Try to get an object of type People referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional People.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPeople(self, t_handle)
Model.getPeople = _getPeople

def _getPeoples(self) -> PeopleVector:
    """Get a vector of all objects of type People in the model.

    :return: A vector of People.
    """
    return getPeoples(self)
Model.getPeoples = _getPeoples

def _getPeopleByName(self, t_name: str) -> OptionalPeople:
    """Try to get an object of type People that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional People.
    """
    return getPeopleByName(self, t_name)
Model.getPeopleByName = _getPeopleByName

def _getPeoplesByName(self, t_name: str, t_exactMatch: bool) -> PeopleVector:
    """Returns all objects of type People named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPeoplesByName(self, t_name, t_exactMatch)
Model.getPeoplesByName = _getPeoplesByName

class Luminaire(SpaceLoadInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_Luminaire

    def __init__(self, *args):
        _openstudiomodelgeometry.Luminaire_swiginit(self, _openstudiomodelgeometry.new_Luminaire(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.Luminaire_iddObjectType()

    def luminaireDefinition(self):
        return _openstudiomodelgeometry.Luminaire_luminaireDefinition(self)

    def schedule(self):
        return _openstudiomodelgeometry.Luminaire_schedule(self)

    def isScheduleDefaulted(self):
        return _openstudiomodelgeometry.Luminaire_isScheduleDefaulted(self)

    def positionXcoordinate(self):
        return _openstudiomodelgeometry.Luminaire_positionXcoordinate(self)

    def positionYcoordinate(self):
        return _openstudiomodelgeometry.Luminaire_positionYcoordinate(self)

    def positionZcoordinate(self):
        return _openstudiomodelgeometry.Luminaire_positionZcoordinate(self)

    def psiRotationAroundXaxis(self):
        return _openstudiomodelgeometry.Luminaire_psiRotationAroundXaxis(self)

    def isPsiRotationAroundXaxisDefaulted(self):
        return _openstudiomodelgeometry.Luminaire_isPsiRotationAroundXaxisDefaulted(self)

    def thetaRotationAroundYaxis(self):
        return _openstudiomodelgeometry.Luminaire_thetaRotationAroundYaxis(self)

    def isThetaRotationAroundYaxisDefaulted(self):
        return _openstudiomodelgeometry.Luminaire_isThetaRotationAroundYaxisDefaulted(self)

    def phiRotationAroundZaxis(self):
        return _openstudiomodelgeometry.Luminaire_phiRotationAroundZaxis(self)

    def isPhiRotationAroundZaxisDefaulted(self):
        return _openstudiomodelgeometry.Luminaire_isPhiRotationAroundZaxisDefaulted(self)

    def fractionReplaceable(self):
        return _openstudiomodelgeometry.Luminaire_fractionReplaceable(self)

    def isFractionReplaceableDefaulted(self):
        return _openstudiomodelgeometry.Luminaire_isFractionReplaceableDefaulted(self)

    def endUseSubcategory(self):
        return _openstudiomodelgeometry.Luminaire_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelgeometry.Luminaire_isEndUseSubcategoryDefaulted(self)

    def setLuminaireDefinition(self, definition):
        return _openstudiomodelgeometry.Luminaire_setLuminaireDefinition(self, definition)

    def setSchedule(self, schedule):
        return _openstudiomodelgeometry.Luminaire_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelgeometry.Luminaire_resetSchedule(self)

    def setPositionXcoordinate(self, positionXcoordinate):
        return _openstudiomodelgeometry.Luminaire_setPositionXcoordinate(self, positionXcoordinate)

    def setPositionYcoordinate(self, positionYcoordinate):
        return _openstudiomodelgeometry.Luminaire_setPositionYcoordinate(self, positionYcoordinate)

    def setPositionZcoordinate(self, positionZcoordinate):
        return _openstudiomodelgeometry.Luminaire_setPositionZcoordinate(self, positionZcoordinate)

    def setPsiRotationAroundXaxis(self, psiRotationAroundXaxis):
        return _openstudiomodelgeometry.Luminaire_setPsiRotationAroundXaxis(self, psiRotationAroundXaxis)

    def resetPsiRotationAroundXaxis(self):
        return _openstudiomodelgeometry.Luminaire_resetPsiRotationAroundXaxis(self)

    def setThetaRotationAroundYaxis(self, thetaRotationAroundYaxis):
        return _openstudiomodelgeometry.Luminaire_setThetaRotationAroundYaxis(self, thetaRotationAroundYaxis)

    def resetThetaRotationAroundYaxis(self):
        return _openstudiomodelgeometry.Luminaire_resetThetaRotationAroundYaxis(self)

    def setPhiRotationAroundZaxis(self, phiRotationAroundZaxis):
        return _openstudiomodelgeometry.Luminaire_setPhiRotationAroundZaxis(self, phiRotationAroundZaxis)

    def resetPhiRotationAroundZaxis(self):
        return _openstudiomodelgeometry.Luminaire_resetPhiRotationAroundZaxis(self)

    def setFractionReplaceable(self, fractionReplaceable):
        return _openstudiomodelgeometry.Luminaire_setFractionReplaceable(self, fractionReplaceable)

    def resetFractionReplaceable(self):
        return _openstudiomodelgeometry.Luminaire_resetFractionReplaceable(self)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.Luminaire_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.Luminaire_resetMultiplier(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelgeometry.Luminaire_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelgeometry.Luminaire_resetEndUseSubcategory(self)

    def position(self):
        return _openstudiomodelgeometry.Luminaire_position(self)

    def setPosition(self, position):
        return _openstudiomodelgeometry.Luminaire_setPosition(self, position)

    def transformation(self):
        return _openstudiomodelgeometry.Luminaire_transformation(self)

    def setTransformation(self, transformation):
        return _openstudiomodelgeometry.Luminaire_setTransformation(self, transformation)

    def lightingPower(self):
        return _openstudiomodelgeometry.Luminaire_lightingPower(self)

    def getPowerPerFloorArea(self, floorArea):
        return _openstudiomodelgeometry.Luminaire_getPowerPerFloorArea(self, floorArea)

    def getPowerPerPerson(self, numPeople):
        return _openstudiomodelgeometry.Luminaire_getPowerPerPerson(self, numPeople)

# Register Luminaire in _openstudiomodelgeometry:
_openstudiomodelgeometry.Luminaire_swigregister(Luminaire)

def toLuminaire(idfObject):
    return _openstudiomodelgeometry.toLuminaire(idfObject)

def getLuminaire(t_model, t_handle):
    return _openstudiomodelgeometry.getLuminaire(t_model, t_handle)

def getLuminaires(t_model):
    return _openstudiomodelgeometry.getLuminaires(t_model)

def getLuminaireByName(t_model, t_name):
    return _openstudiomodelgeometry.getLuminaireByName(t_model, t_name)

def getLuminairesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getLuminairesByName(t_model, t_name, t_exactMatch)

def _to_Luminaire(self) -> OptionalLuminaire:
    """Try to cast the ModelObject to a Luminaire.

    :return: An Optional Luminaire.
    """
    return toLuminaire(self)
openstudioutilitiesidf.IdfObject.to_Luminaire = _to_Luminaire

def _getLuminaire(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalLuminaire:
    """Try to get an object of type Luminaire referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Luminaire.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getLuminaire(self, t_handle)
Model.getLuminaire = _getLuminaire

def _getLuminaires(self) -> LuminaireVector:
    """Get a vector of all objects of type Luminaire in the model.

    :return: A vector of Luminaire.
    """
    return getLuminaires(self)
Model.getLuminaires = _getLuminaires

def _getLuminaireByName(self, t_name: str) -> OptionalLuminaire:
    """Try to get an object of type Luminaire that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Luminaire.
    """
    return getLuminaireByName(self, t_name)
Model.getLuminaireByName = _getLuminaireByName

def _getLuminairesByName(self, t_name: str, t_exactMatch: bool) -> LuminaireVector:
    """Returns all objects of type Luminaire named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getLuminairesByName(self, t_name, t_exactMatch)
Model.getLuminairesByName = _getLuminairesByName

class ElectricEquipment(SpaceLoadInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_ElectricEquipment

    def __init__(self, *args):
        _openstudiomodelgeometry.ElectricEquipment_swiginit(self, _openstudiomodelgeometry.new_ElectricEquipment(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.ElectricEquipment_iddObjectType()

    def electricEquipmentDefinition(self):
        return _openstudiomodelgeometry.ElectricEquipment_electricEquipmentDefinition(self)

    def schedule(self):
        return _openstudiomodelgeometry.ElectricEquipment_schedule(self)

    def isScheduleDefaulted(self):
        return _openstudiomodelgeometry.ElectricEquipment_isScheduleDefaulted(self)

    def endUseSubcategory(self):
        return _openstudiomodelgeometry.ElectricEquipment_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelgeometry.ElectricEquipment_isEndUseSubcategoryDefaulted(self)

    def setElectricEquipmentDefinition(self, definition):
        return _openstudiomodelgeometry.ElectricEquipment_setElectricEquipmentDefinition(self, definition)

    def setSchedule(self, schedule):
        return _openstudiomodelgeometry.ElectricEquipment_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelgeometry.ElectricEquipment_resetSchedule(self)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.ElectricEquipment_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.ElectricEquipment_resetMultiplier(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelgeometry.ElectricEquipment_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelgeometry.ElectricEquipment_resetEndUseSubcategory(self)

    def designLevel(self):
        return _openstudiomodelgeometry.ElectricEquipment_designLevel(self)

    def powerPerFloorArea(self):
        return _openstudiomodelgeometry.ElectricEquipment_powerPerFloorArea(self)

    def powerPerPerson(self):
        return _openstudiomodelgeometry.ElectricEquipment_powerPerPerson(self)

    def getDesignLevel(self, floorArea, numPeople):
        return _openstudiomodelgeometry.ElectricEquipment_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelgeometry.ElectricEquipment_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelgeometry.ElectricEquipment_getPowerPerPerson(self, floorArea, numPeople)

# Register ElectricEquipment in _openstudiomodelgeometry:
_openstudiomodelgeometry.ElectricEquipment_swigregister(ElectricEquipment)

def toElectricEquipment(idfObject):
    return _openstudiomodelgeometry.toElectricEquipment(idfObject)

def getElectricEquipment(t_model, t_handle):
    return _openstudiomodelgeometry.getElectricEquipment(t_model, t_handle)

def getElectricEquipments(t_model):
    return _openstudiomodelgeometry.getElectricEquipments(t_model)

def getElectricEquipmentByName(t_model, t_name):
    return _openstudiomodelgeometry.getElectricEquipmentByName(t_model, t_name)

def getElectricEquipmentsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getElectricEquipmentsByName(t_model, t_name, t_exactMatch)

def _to_ElectricEquipment(self) -> OptionalElectricEquipment:
    """Try to cast the ModelObject to a ElectricEquipment.

    :return: An Optional ElectricEquipment.
    """
    return toElectricEquipment(self)
openstudioutilitiesidf.IdfObject.to_ElectricEquipment = _to_ElectricEquipment

def _getElectricEquipment(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalElectricEquipment:
    """Try to get an object of type ElectricEquipment referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ElectricEquipment.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getElectricEquipment(self, t_handle)
Model.getElectricEquipment = _getElectricEquipment

def _getElectricEquipments(self) -> ElectricEquipmentVector:
    """Get a vector of all objects of type ElectricEquipment in the model.

    :return: A vector of ElectricEquipment.
    """
    return getElectricEquipments(self)
Model.getElectricEquipments = _getElectricEquipments

def _getElectricEquipmentByName(self, t_name: str) -> OptionalElectricEquipment:
    """Try to get an object of type ElectricEquipment that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ElectricEquipment.
    """
    return getElectricEquipmentByName(self, t_name)
Model.getElectricEquipmentByName = _getElectricEquipmentByName

def _getElectricEquipmentsByName(self, t_name: str, t_exactMatch: bool) -> ElectricEquipmentVector:
    """Returns all objects of type ElectricEquipment named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getElectricEquipmentsByName(self, t_name, t_exactMatch)
Model.getElectricEquipmentsByName = _getElectricEquipmentsByName

class ElectricEquipmentITEAirCooled(SpaceLoadInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_ElectricEquipmentITEAirCooled

    def __init__(self, *args):
        _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_swiginit(self, _openstudiomodelgeometry.new_ElectricEquipmentITEAirCooled(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_iddObjectType()

    def electricEquipmentITEAirCooledDefinition(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_electricEquipmentITEAirCooledDefinition(self)

    def designPowerInputSchedule(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_designPowerInputSchedule(self)

    def isDesignPowerInputScheduleDefaulted(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_isDesignPowerInputScheduleDefaulted(self)

    def cPULoadingSchedule(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_cPULoadingSchedule(self)

    def isCPULoadingScheduleDefaulted(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_isCPULoadingScheduleDefaulted(self)

    def cPUEndUseSubcategory(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_cPUEndUseSubcategory(self)

    def isCPUEndUseSubcategoryDefaulted(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_isCPUEndUseSubcategoryDefaulted(self)

    def fanEndUseSubcategory(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_fanEndUseSubcategory(self)

    def isFanEndUseSubcategoryDefaulted(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_isFanEndUseSubcategoryDefaulted(self)

    def electricPowerSupplyEndUseSubcategory(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_electricPowerSupplyEndUseSubcategory(self)

    def isElectricPowerSupplyEndUseSubcategoryDefaulted(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_isElectricPowerSupplyEndUseSubcategoryDefaulted(self)

    def setElectricEquipmentITEAirCooledDefinition(self, electricEquipmentITEAirCooledDefinition):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_setElectricEquipmentITEAirCooledDefinition(self, electricEquipmentITEAirCooledDefinition)

    def setDesignPowerInputSchedule(self, schedule):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_setDesignPowerInputSchedule(self, schedule)

    def resetDesignPowerInputSchedule(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_resetDesignPowerInputSchedule(self)

    def setCPULoadingSchedule(self, schedule):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_setCPULoadingSchedule(self, schedule)

    def resetCPULoadingSchedule(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_resetCPULoadingSchedule(self)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_resetMultiplier(self)

    def setCPUEndUseSubcategory(self, cPUEndUseSubcategory):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_setCPUEndUseSubcategory(self, cPUEndUseSubcategory)

    def resetCPUEndUseSubcategory(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_resetCPUEndUseSubcategory(self)

    def setFanEndUseSubcategory(self, fanEndUseSubcategory):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_setFanEndUseSubcategory(self, fanEndUseSubcategory)

    def resetFanEndUseSubcategory(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_resetFanEndUseSubcategory(self)

    def setElectricPowerSupplyEndUseSubcategory(self, electricPowerSupplyEndUseSubcategory):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_setElectricPowerSupplyEndUseSubcategory(self, electricPowerSupplyEndUseSubcategory)

    def resetElectricPowerSupplyEndUseSubcategory(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_resetElectricPowerSupplyEndUseSubcategory(self)

    def designLevel(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_designLevel(self)

    def wattsperUnit(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_wattsperUnit(self)

    def powerPerFloorArea(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_powerPerFloorArea(self)

    def wattsperZoneFloorArea(self):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_wattsperZoneFloorArea(self)

    def getDesignLevel(self, floorArea):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_getDesignLevel(self, floorArea)

    def getWattsperUnit(self, floorArea):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_getWattsperUnit(self, floorArea)

    def getPowerPerFloorArea(self, floorArea):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_getPowerPerFloorArea(self, floorArea)

    def getWattsperZoneFloorArea(self, floorArea):
        return _openstudiomodelgeometry.ElectricEquipmentITEAirCooled_getWattsperZoneFloorArea(self, floorArea)

# Register ElectricEquipmentITEAirCooled in _openstudiomodelgeometry:
_openstudiomodelgeometry.ElectricEquipmentITEAirCooled_swigregister(ElectricEquipmentITEAirCooled)

def toElectricEquipmentITEAirCooled(idfObject):
    return _openstudiomodelgeometry.toElectricEquipmentITEAirCooled(idfObject)

def getElectricEquipmentITEAirCooled(t_model, t_handle):
    return _openstudiomodelgeometry.getElectricEquipmentITEAirCooled(t_model, t_handle)

def getElectricEquipmentITEAirCooleds(t_model):
    return _openstudiomodelgeometry.getElectricEquipmentITEAirCooleds(t_model)

def getElectricEquipmentITEAirCooledByName(t_model, t_name):
    return _openstudiomodelgeometry.getElectricEquipmentITEAirCooledByName(t_model, t_name)

def getElectricEquipmentITEAirCooledsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getElectricEquipmentITEAirCooledsByName(t_model, t_name, t_exactMatch)

def _to_ElectricEquipmentITEAirCooled(self) -> OptionalElectricEquipmentITEAirCooled:
    """Try to cast the ModelObject to a ElectricEquipmentITEAirCooled.

    :return: An Optional ElectricEquipmentITEAirCooled.
    """
    return toElectricEquipmentITEAirCooled(self)
openstudioutilitiesidf.IdfObject.to_ElectricEquipmentITEAirCooled = _to_ElectricEquipmentITEAirCooled

def _getElectricEquipmentITEAirCooled(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalElectricEquipmentITEAirCooled:
    """Try to get an object of type ElectricEquipmentITEAirCooled referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ElectricEquipmentITEAirCooled.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getElectricEquipmentITEAirCooled(self, t_handle)
Model.getElectricEquipmentITEAirCooled = _getElectricEquipmentITEAirCooled

def _getElectricEquipmentITEAirCooleds(self) -> ElectricEquipmentITEAirCooledVector:
    """Get a vector of all objects of type ElectricEquipmentITEAirCooled in the model.

    :return: A vector of ElectricEquipmentITEAirCooled.
    """
    return getElectricEquipmentITEAirCooleds(self)
Model.getElectricEquipmentITEAirCooleds = _getElectricEquipmentITEAirCooleds

def _getElectricEquipmentITEAirCooledByName(self, t_name: str) -> OptionalElectricEquipmentITEAirCooled:
    """Try to get an object of type ElectricEquipmentITEAirCooled that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ElectricEquipmentITEAirCooled.
    """
    return getElectricEquipmentITEAirCooledByName(self, t_name)
Model.getElectricEquipmentITEAirCooledByName = _getElectricEquipmentITEAirCooledByName

def _getElectricEquipmentITEAirCooledsByName(self, t_name: str, t_exactMatch: bool) -> ElectricEquipmentITEAirCooledVector:
    """Returns all objects of type ElectricEquipmentITEAirCooled named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getElectricEquipmentITEAirCooledsByName(self, t_name, t_exactMatch)
Model.getElectricEquipmentITEAirCooledsByName = _getElectricEquipmentITEAirCooledsByName

class GasEquipment(SpaceLoadInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_GasEquipment

    def __init__(self, *args):
        _openstudiomodelgeometry.GasEquipment_swiginit(self, _openstudiomodelgeometry.new_GasEquipment(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.GasEquipment_iddObjectType()

    def gasEquipmentDefinition(self):
        return _openstudiomodelgeometry.GasEquipment_gasEquipmentDefinition(self)

    def schedule(self):
        return _openstudiomodelgeometry.GasEquipment_schedule(self)

    def isScheduleDefaulted(self):
        return _openstudiomodelgeometry.GasEquipment_isScheduleDefaulted(self)

    def endUseSubcategory(self):
        return _openstudiomodelgeometry.GasEquipment_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelgeometry.GasEquipment_isEndUseSubcategoryDefaulted(self)

    def setGasEquipmentDefinition(self, definition):
        return _openstudiomodelgeometry.GasEquipment_setGasEquipmentDefinition(self, definition)

    def setSchedule(self, schedule):
        return _openstudiomodelgeometry.GasEquipment_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelgeometry.GasEquipment_resetSchedule(self)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.GasEquipment_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.GasEquipment_resetMultiplier(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelgeometry.GasEquipment_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelgeometry.GasEquipment_resetEndUseSubcategory(self)

    def designLevel(self):
        return _openstudiomodelgeometry.GasEquipment_designLevel(self)

    def powerPerFloorArea(self):
        return _openstudiomodelgeometry.GasEquipment_powerPerFloorArea(self)

    def powerPerPerson(self):
        return _openstudiomodelgeometry.GasEquipment_powerPerPerson(self)

    def getDesignLevel(self, floorArea, numPeople):
        return _openstudiomodelgeometry.GasEquipment_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelgeometry.GasEquipment_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelgeometry.GasEquipment_getPowerPerPerson(self, floorArea, numPeople)

# Register GasEquipment in _openstudiomodelgeometry:
_openstudiomodelgeometry.GasEquipment_swigregister(GasEquipment)

def toGasEquipment(idfObject):
    return _openstudiomodelgeometry.toGasEquipment(idfObject)

def getGasEquipment(t_model, t_handle):
    return _openstudiomodelgeometry.getGasEquipment(t_model, t_handle)

def getGasEquipments(t_model):
    return _openstudiomodelgeometry.getGasEquipments(t_model)

def getGasEquipmentByName(t_model, t_name):
    return _openstudiomodelgeometry.getGasEquipmentByName(t_model, t_name)

def getGasEquipmentsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getGasEquipmentsByName(t_model, t_name, t_exactMatch)

def _to_GasEquipment(self) -> OptionalGasEquipment:
    """Try to cast the ModelObject to a GasEquipment.

    :return: An Optional GasEquipment.
    """
    return toGasEquipment(self)
openstudioutilitiesidf.IdfObject.to_GasEquipment = _to_GasEquipment

def _getGasEquipment(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGasEquipment:
    """Try to get an object of type GasEquipment referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GasEquipment.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGasEquipment(self, t_handle)
Model.getGasEquipment = _getGasEquipment

def _getGasEquipments(self) -> GasEquipmentVector:
    """Get a vector of all objects of type GasEquipment in the model.

    :return: A vector of GasEquipment.
    """
    return getGasEquipments(self)
Model.getGasEquipments = _getGasEquipments

def _getGasEquipmentByName(self, t_name: str) -> OptionalGasEquipment:
    """Try to get an object of type GasEquipment that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GasEquipment.
    """
    return getGasEquipmentByName(self, t_name)
Model.getGasEquipmentByName = _getGasEquipmentByName

def _getGasEquipmentsByName(self, t_name: str, t_exactMatch: bool) -> GasEquipmentVector:
    """Returns all objects of type GasEquipment named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGasEquipmentsByName(self, t_name, t_exactMatch)
Model.getGasEquipmentsByName = _getGasEquipmentsByName

class HotWaterEquipment(SpaceLoadInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_HotWaterEquipment

    def __init__(self, *args):
        _openstudiomodelgeometry.HotWaterEquipment_swiginit(self, _openstudiomodelgeometry.new_HotWaterEquipment(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.HotWaterEquipment_iddObjectType()

    def hotWaterEquipmentDefinition(self):
        return _openstudiomodelgeometry.HotWaterEquipment_hotWaterEquipmentDefinition(self)

    def schedule(self):
        return _openstudiomodelgeometry.HotWaterEquipment_schedule(self)

    def isScheduleDefaulted(self):
        return _openstudiomodelgeometry.HotWaterEquipment_isScheduleDefaulted(self)

    def endUseSubcategory(self):
        return _openstudiomodelgeometry.HotWaterEquipment_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelgeometry.HotWaterEquipment_isEndUseSubcategoryDefaulted(self)

    def setHotWaterEquipmentDefinition(self, definition):
        return _openstudiomodelgeometry.HotWaterEquipment_setHotWaterEquipmentDefinition(self, definition)

    def setSchedule(self, schedule):
        return _openstudiomodelgeometry.HotWaterEquipment_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelgeometry.HotWaterEquipment_resetSchedule(self)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.HotWaterEquipment_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.HotWaterEquipment_resetMultiplier(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelgeometry.HotWaterEquipment_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelgeometry.HotWaterEquipment_resetEndUseSubcategory(self)

    def getDesignLevel(self, floorArea, numPeople):
        return _openstudiomodelgeometry.HotWaterEquipment_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelgeometry.HotWaterEquipment_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelgeometry.HotWaterEquipment_getPowerPerPerson(self, floorArea, numPeople)

# Register HotWaterEquipment in _openstudiomodelgeometry:
_openstudiomodelgeometry.HotWaterEquipment_swigregister(HotWaterEquipment)

def toHotWaterEquipment(idfObject):
    return _openstudiomodelgeometry.toHotWaterEquipment(idfObject)

def getHotWaterEquipment(t_model, t_handle):
    return _openstudiomodelgeometry.getHotWaterEquipment(t_model, t_handle)

def getHotWaterEquipments(t_model):
    return _openstudiomodelgeometry.getHotWaterEquipments(t_model)

def getHotWaterEquipmentByName(t_model, t_name):
    return _openstudiomodelgeometry.getHotWaterEquipmentByName(t_model, t_name)

def getHotWaterEquipmentsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getHotWaterEquipmentsByName(t_model, t_name, t_exactMatch)

def _to_HotWaterEquipment(self) -> OptionalHotWaterEquipment:
    """Try to cast the ModelObject to a HotWaterEquipment.

    :return: An Optional HotWaterEquipment.
    """
    return toHotWaterEquipment(self)
openstudioutilitiesidf.IdfObject.to_HotWaterEquipment = _to_HotWaterEquipment

def _getHotWaterEquipment(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalHotWaterEquipment:
    """Try to get an object of type HotWaterEquipment referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional HotWaterEquipment.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getHotWaterEquipment(self, t_handle)
Model.getHotWaterEquipment = _getHotWaterEquipment

def _getHotWaterEquipments(self) -> HotWaterEquipmentVector:
    """Get a vector of all objects of type HotWaterEquipment in the model.

    :return: A vector of HotWaterEquipment.
    """
    return getHotWaterEquipments(self)
Model.getHotWaterEquipments = _getHotWaterEquipments

def _getHotWaterEquipmentByName(self, t_name: str) -> OptionalHotWaterEquipment:
    """Try to get an object of type HotWaterEquipment that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional HotWaterEquipment.
    """
    return getHotWaterEquipmentByName(self, t_name)
Model.getHotWaterEquipmentByName = _getHotWaterEquipmentByName

def _getHotWaterEquipmentsByName(self, t_name: str, t_exactMatch: bool) -> HotWaterEquipmentVector:
    """Returns all objects of type HotWaterEquipment named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getHotWaterEquipmentsByName(self, t_name, t_exactMatch)
Model.getHotWaterEquipmentsByName = _getHotWaterEquipmentsByName

class SteamEquipment(SpaceLoadInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SteamEquipment

    def __init__(self, *args):
        _openstudiomodelgeometry.SteamEquipment_swiginit(self, _openstudiomodelgeometry.new_SteamEquipment(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SteamEquipment_iddObjectType()

    def steamEquipmentDefinition(self):
        return _openstudiomodelgeometry.SteamEquipment_steamEquipmentDefinition(self)

    def schedule(self):
        return _openstudiomodelgeometry.SteamEquipment_schedule(self)

    def isScheduleDefaulted(self):
        return _openstudiomodelgeometry.SteamEquipment_isScheduleDefaulted(self)

    def endUseSubcategory(self):
        return _openstudiomodelgeometry.SteamEquipment_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelgeometry.SteamEquipment_isEndUseSubcategoryDefaulted(self)

    def setSteamEquipmentDefinition(self, definition):
        return _openstudiomodelgeometry.SteamEquipment_setSteamEquipmentDefinition(self, definition)

    def setSchedule(self, schedule):
        return _openstudiomodelgeometry.SteamEquipment_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelgeometry.SteamEquipment_resetSchedule(self)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.SteamEquipment_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.SteamEquipment_resetMultiplier(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelgeometry.SteamEquipment_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelgeometry.SteamEquipment_resetEndUseSubcategory(self)

    def getDesignLevel(self, floorArea, numPeople):
        return _openstudiomodelgeometry.SteamEquipment_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelgeometry.SteamEquipment_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelgeometry.SteamEquipment_getPowerPerPerson(self, floorArea, numPeople)

# Register SteamEquipment in _openstudiomodelgeometry:
_openstudiomodelgeometry.SteamEquipment_swigregister(SteamEquipment)

def toSteamEquipment(idfObject):
    return _openstudiomodelgeometry.toSteamEquipment(idfObject)

def getSteamEquipment(t_model, t_handle):
    return _openstudiomodelgeometry.getSteamEquipment(t_model, t_handle)

def getSteamEquipments(t_model):
    return _openstudiomodelgeometry.getSteamEquipments(t_model)

def getSteamEquipmentByName(t_model, t_name):
    return _openstudiomodelgeometry.getSteamEquipmentByName(t_model, t_name)

def getSteamEquipmentsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSteamEquipmentsByName(t_model, t_name, t_exactMatch)

def _to_SteamEquipment(self) -> OptionalSteamEquipment:
    """Try to cast the ModelObject to a SteamEquipment.

    :return: An Optional SteamEquipment.
    """
    return toSteamEquipment(self)
openstudioutilitiesidf.IdfObject.to_SteamEquipment = _to_SteamEquipment

def _getSteamEquipment(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSteamEquipment:
    """Try to get an object of type SteamEquipment referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SteamEquipment.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSteamEquipment(self, t_handle)
Model.getSteamEquipment = _getSteamEquipment

def _getSteamEquipments(self) -> SteamEquipmentVector:
    """Get a vector of all objects of type SteamEquipment in the model.

    :return: A vector of SteamEquipment.
    """
    return getSteamEquipments(self)
Model.getSteamEquipments = _getSteamEquipments

def _getSteamEquipmentByName(self, t_name: str) -> OptionalSteamEquipment:
    """Try to get an object of type SteamEquipment that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SteamEquipment.
    """
    return getSteamEquipmentByName(self, t_name)
Model.getSteamEquipmentByName = _getSteamEquipmentByName

def _getSteamEquipmentsByName(self, t_name: str, t_exactMatch: bool) -> SteamEquipmentVector:
    """Returns all objects of type SteamEquipment named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSteamEquipmentsByName(self, t_name, t_exactMatch)
Model.getSteamEquipmentsByName = _getSteamEquipmentsByName

class OtherEquipment(SpaceLoadInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_OtherEquipment

    def __init__(self, *args):
        _openstudiomodelgeometry.OtherEquipment_swiginit(self, _openstudiomodelgeometry.new_OtherEquipment(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.OtherEquipment_iddObjectType()

    def endUseSubcategory(self):
        return _openstudiomodelgeometry.OtherEquipment_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelgeometry.OtherEquipment_isEndUseSubcategoryDefaulted(self)

    @staticmethod
    def validFuelTypeValues():
        return _openstudiomodelgeometry.OtherEquipment_validFuelTypeValues()

    def fuelType(self):
        return _openstudiomodelgeometry.OtherEquipment_fuelType(self)

    def isFuelTypeDefaulted(self):
        return _openstudiomodelgeometry.OtherEquipment_isFuelTypeDefaulted(self)

    def otherEquipmentDefinition(self):
        return _openstudiomodelgeometry.OtherEquipment_otherEquipmentDefinition(self)

    def schedule(self):
        return _openstudiomodelgeometry.OtherEquipment_schedule(self)

    def isScheduleDefaulted(self):
        return _openstudiomodelgeometry.OtherEquipment_isScheduleDefaulted(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelgeometry.OtherEquipment_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelgeometry.OtherEquipment_resetEndUseSubcategory(self)

    def setFuelType(self, *args):
        return _openstudiomodelgeometry.OtherEquipment_setFuelType(self, *args)

    def resetFuelType(self):
        return _openstudiomodelgeometry.OtherEquipment_resetFuelType(self)

    def setOtherEquipmentDefinition(self, definition):
        return _openstudiomodelgeometry.OtherEquipment_setOtherEquipmentDefinition(self, definition)

    def setSchedule(self, schedule):
        return _openstudiomodelgeometry.OtherEquipment_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelgeometry.OtherEquipment_resetSchedule(self)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.OtherEquipment_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.OtherEquipment_resetMultiplier(self)

    def getDesignLevel(self, floorArea, numPeople):
        return _openstudiomodelgeometry.OtherEquipment_getDesignLevel(self, floorArea, numPeople)

    def getPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelgeometry.OtherEquipment_getPowerPerFloorArea(self, floorArea, numPeople)

    def getPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelgeometry.OtherEquipment_getPowerPerPerson(self, floorArea, numPeople)

# Register OtherEquipment in _openstudiomodelgeometry:
_openstudiomodelgeometry.OtherEquipment_swigregister(OtherEquipment)

def toOtherEquipment(idfObject):
    return _openstudiomodelgeometry.toOtherEquipment(idfObject)

def getOtherEquipment(t_model, t_handle):
    return _openstudiomodelgeometry.getOtherEquipment(t_model, t_handle)

def getOtherEquipments(t_model):
    return _openstudiomodelgeometry.getOtherEquipments(t_model)

def getOtherEquipmentByName(t_model, t_name):
    return _openstudiomodelgeometry.getOtherEquipmentByName(t_model, t_name)

def getOtherEquipmentsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getOtherEquipmentsByName(t_model, t_name, t_exactMatch)

def _to_OtherEquipment(self) -> OptionalOtherEquipment:
    """Try to cast the ModelObject to a OtherEquipment.

    :return: An Optional OtherEquipment.
    """
    return toOtherEquipment(self)
openstudioutilitiesidf.IdfObject.to_OtherEquipment = _to_OtherEquipment

def _getOtherEquipment(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalOtherEquipment:
    """Try to get an object of type OtherEquipment referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional OtherEquipment.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getOtherEquipment(self, t_handle)
Model.getOtherEquipment = _getOtherEquipment

def _getOtherEquipments(self) -> OtherEquipmentVector:
    """Get a vector of all objects of type OtherEquipment in the model.

    :return: A vector of OtherEquipment.
    """
    return getOtherEquipments(self)
Model.getOtherEquipments = _getOtherEquipments

def _getOtherEquipmentByName(self, t_name: str) -> OptionalOtherEquipment:
    """Try to get an object of type OtherEquipment that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional OtherEquipment.
    """
    return getOtherEquipmentByName(self, t_name)
Model.getOtherEquipmentByName = _getOtherEquipmentByName

def _getOtherEquipmentsByName(self, t_name: str, t_exactMatch: bool) -> OtherEquipmentVector:
    """Returns all objects of type OtherEquipment named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getOtherEquipmentsByName(self, t_name, t_exactMatch)
Model.getOtherEquipmentsByName = _getOtherEquipmentsByName

class InternalMass(SpaceLoadInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_InternalMass

    def __init__(self, *args):
        _openstudiomodelgeometry.InternalMass_swiginit(self, _openstudiomodelgeometry.new_InternalMass(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.InternalMass_iddObjectType()

    def internalMassDefinition(self):
        return _openstudiomodelgeometry.InternalMass_internalMassDefinition(self)

    def surfacePropertyConvectionCoefficients(self):
        return _openstudiomodelgeometry.InternalMass_surfacePropertyConvectionCoefficients(self)

    def setInternalMassDefinition(self, definition):
        return _openstudiomodelgeometry.InternalMass_setInternalMassDefinition(self, definition)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.InternalMass_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.InternalMass_resetMultiplier(self)

    def surfaceArea(self):
        return _openstudiomodelgeometry.InternalMass_surfaceArea(self)

    def surfaceAreaPerFloorArea(self):
        return _openstudiomodelgeometry.InternalMass_surfaceAreaPerFloorArea(self)

    def surfaceAreaPerPerson(self):
        return _openstudiomodelgeometry.InternalMass_surfaceAreaPerPerson(self)

    def getSurfaceArea(self, floorArea, numPeople):
        return _openstudiomodelgeometry.InternalMass_getSurfaceArea(self, floorArea, numPeople)

    def getSurfaceAreaPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelgeometry.InternalMass_getSurfaceAreaPerFloorArea(self, floorArea, numPeople)

    def getSurfaceAreaPerPerson(self, floorArea, numPeople):
        return _openstudiomodelgeometry.InternalMass_getSurfaceAreaPerPerson(self, floorArea, numPeople)

# Register InternalMass in _openstudiomodelgeometry:
_openstudiomodelgeometry.InternalMass_swigregister(InternalMass)

def toInternalMass(idfObject):
    return _openstudiomodelgeometry.toInternalMass(idfObject)

def getInternalMass(t_model, t_handle):
    return _openstudiomodelgeometry.getInternalMass(t_model, t_handle)

def getInternalMasss(t_model):
    return _openstudiomodelgeometry.getInternalMasss(t_model)

def getInternalMassByName(t_model, t_name):
    return _openstudiomodelgeometry.getInternalMassByName(t_model, t_name)

def getInternalMasssByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getInternalMasssByName(t_model, t_name, t_exactMatch)

def _to_InternalMass(self) -> OptionalInternalMass:
    """Try to cast the ModelObject to a InternalMass.

    :return: An Optional InternalMass.
    """
    return toInternalMass(self)
openstudioutilitiesidf.IdfObject.to_InternalMass = _to_InternalMass

def _getInternalMass(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalInternalMass:
    """Try to get an object of type InternalMass referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional InternalMass.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getInternalMass(self, t_handle)
Model.getInternalMass = _getInternalMass

def _getInternalMasss(self) -> InternalMassVector:
    """Get a vector of all objects of type InternalMass in the model.

    :return: A vector of InternalMass.
    """
    return getInternalMasss(self)
Model.getInternalMasss = _getInternalMasss

def _getInternalMassByName(self, t_name: str) -> OptionalInternalMass:
    """Try to get an object of type InternalMass that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional InternalMass.
    """
    return getInternalMassByName(self, t_name)
Model.getInternalMassByName = _getInternalMassByName

def _getInternalMasssByName(self, t_name: str, t_exactMatch: bool) -> InternalMassVector:
    """Returns all objects of type InternalMass named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getInternalMasssByName(self, t_name, t_exactMatch)
Model.getInternalMasssByName = _getInternalMasssByName

class SpaceInfiltrationDesignFlowRate(SpaceLoad):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceInfiltrationDesignFlowRate

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_swiginit(self, _openstudiomodelgeometry.new_SpaceInfiltrationDesignFlowRate(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_iddObjectType()

    @staticmethod
    def validDesignFlowRateCalculationMethodValues():
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_validDesignFlowRateCalculationMethodValues()

    @staticmethod
    def designFlowRateCalculationMethodValues():
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_designFlowRateCalculationMethodValues()

    def schedule(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_schedule(self)

    def isScheduleDefaulted(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_isScheduleDefaulted(self)

    def designFlowRateCalculationMethod(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_designFlowRateCalculationMethod(self)

    def designFlowRate(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_designFlowRate(self)

    def flowperSpaceFloorArea(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_flowperSpaceFloorArea(self)

    def flowperExteriorSurfaceArea(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_flowperExteriorSurfaceArea(self)

    def flowperExteriorWallArea(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_flowperExteriorWallArea(self)

    def airChangesperHour(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_airChangesperHour(self)

    def constantTermCoefficient(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_constantTermCoefficient(self)

    def isConstantTermCoefficientDefaulted(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_isConstantTermCoefficientDefaulted(self)

    def temperatureTermCoefficient(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_temperatureTermCoefficient(self)

    def isTemperatureTermCoefficientDefaulted(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_isTemperatureTermCoefficientDefaulted(self)

    def velocityTermCoefficient(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_velocityTermCoefficient(self)

    def isVelocityTermCoefficientDefaulted(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_isVelocityTermCoefficientDefaulted(self)

    def velocitySquaredTermCoefficient(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_velocitySquaredTermCoefficient(self)

    def isVelocitySquaredTermCoefficientDefaulted(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_isVelocitySquaredTermCoefficientDefaulted(self)

    def setSchedule(self, schedule):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_resetSchedule(self)

    def setDesignFlowRate(self, designFlowRate):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_setDesignFlowRate(self, designFlowRate)

    def setFlowperSpaceFloorArea(self, flowperSpaceFloorArea):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_setFlowperSpaceFloorArea(self, flowperSpaceFloorArea)

    def setFlowperExteriorSurfaceArea(self, flowperExteriorSurfaceArea):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_setFlowperExteriorSurfaceArea(self, flowperExteriorSurfaceArea)

    def setFlowperExteriorWallArea(self, flowperExteriorWallArea):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_setFlowperExteriorWallArea(self, flowperExteriorWallArea)

    def setAirChangesperHour(self, airChangesperHour):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_setAirChangesperHour(self, airChangesperHour)

    def setConstantTermCoefficient(self, constantTermCoefficient):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_setConstantTermCoefficient(self, constantTermCoefficient)

    def resetConstantTermCoefficient(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_resetConstantTermCoefficient(self)

    def setTemperatureTermCoefficient(self, temperatureTermCoefficient):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_setTemperatureTermCoefficient(self, temperatureTermCoefficient)

    def resetTemperatureTermCoefficient(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_resetTemperatureTermCoefficient(self)

    def setVelocityTermCoefficient(self, velocityTermCoefficient):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_setVelocityTermCoefficient(self, velocityTermCoefficient)

    def resetVelocityTermCoefficient(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_resetVelocityTermCoefficient(self)

    def setVelocitySquaredTermCoefficient(self, velocitySquaredTermCoefficient):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_setVelocitySquaredTermCoefficient(self, velocitySquaredTermCoefficient)

    def resetVelocitySquaredTermCoefficient(self):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_resetVelocitySquaredTermCoefficient(self)

    def getDesignFlowRate(self, floorArea, exteriorSurfaceArea, exteriorWallArea, airVolume):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_getDesignFlowRate(self, floorArea, exteriorSurfaceArea, exteriorWallArea, airVolume)

    def getFlowPerSpaceFloorArea(self, floorArea, exteriorSurfaceArea, exteriorWallArea, airVolume):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_getFlowPerSpaceFloorArea(self, floorArea, exteriorSurfaceArea, exteriorWallArea, airVolume)

    def getFlowPerExteriorSurfaceArea(self, floorArea, exteriorSurfaceArea, exteriorWallArea, airVolume):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_getFlowPerExteriorSurfaceArea(self, floorArea, exteriorSurfaceArea, exteriorWallArea, airVolume)

    def getFlowPerExteriorWallArea(self, floorArea, exteriorSurfaceArea, exteriorWallArea, airVolume):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_getFlowPerExteriorWallArea(self, floorArea, exteriorSurfaceArea, exteriorWallArea, airVolume)

    def getAirChangesPerHour(self, floorArea, exteriorSurfaceArea, exteriorWallArea, airVolume):
        return _openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_getAirChangesPerHour(self, floorArea, exteriorSurfaceArea, exteriorWallArea, airVolume)

# Register SpaceInfiltrationDesignFlowRate in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceInfiltrationDesignFlowRate_swigregister(SpaceInfiltrationDesignFlowRate)

def toSpaceInfiltrationDesignFlowRate(idfObject):
    return _openstudiomodelgeometry.toSpaceInfiltrationDesignFlowRate(idfObject)

def getSpaceInfiltrationDesignFlowRate(t_model, t_handle):
    return _openstudiomodelgeometry.getSpaceInfiltrationDesignFlowRate(t_model, t_handle)

def getSpaceInfiltrationDesignFlowRates(t_model):
    return _openstudiomodelgeometry.getSpaceInfiltrationDesignFlowRates(t_model)

def getSpaceInfiltrationDesignFlowRateByName(t_model, t_name):
    return _openstudiomodelgeometry.getSpaceInfiltrationDesignFlowRateByName(t_model, t_name)

def getSpaceInfiltrationDesignFlowRatesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSpaceInfiltrationDesignFlowRatesByName(t_model, t_name, t_exactMatch)

def _to_SpaceInfiltrationDesignFlowRate(self) -> OptionalSpaceInfiltrationDesignFlowRate:
    """Try to cast the ModelObject to a SpaceInfiltrationDesignFlowRate.

    :return: An Optional SpaceInfiltrationDesignFlowRate.
    """
    return toSpaceInfiltrationDesignFlowRate(self)
openstudioutilitiesidf.IdfObject.to_SpaceInfiltrationDesignFlowRate = _to_SpaceInfiltrationDesignFlowRate

def _getSpaceInfiltrationDesignFlowRate(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSpaceInfiltrationDesignFlowRate:
    """Try to get an object of type SpaceInfiltrationDesignFlowRate referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SpaceInfiltrationDesignFlowRate.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSpaceInfiltrationDesignFlowRate(self, t_handle)
Model.getSpaceInfiltrationDesignFlowRate = _getSpaceInfiltrationDesignFlowRate

def _getSpaceInfiltrationDesignFlowRates(self) -> SpaceInfiltrationDesignFlowRateVector:
    """Get a vector of all objects of type SpaceInfiltrationDesignFlowRate in the model.

    :return: A vector of SpaceInfiltrationDesignFlowRate.
    """
    return getSpaceInfiltrationDesignFlowRates(self)
Model.getSpaceInfiltrationDesignFlowRates = _getSpaceInfiltrationDesignFlowRates

def _getSpaceInfiltrationDesignFlowRateByName(self, t_name: str) -> OptionalSpaceInfiltrationDesignFlowRate:
    """Try to get an object of type SpaceInfiltrationDesignFlowRate that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SpaceInfiltrationDesignFlowRate.
    """
    return getSpaceInfiltrationDesignFlowRateByName(self, t_name)
Model.getSpaceInfiltrationDesignFlowRateByName = _getSpaceInfiltrationDesignFlowRateByName

def _getSpaceInfiltrationDesignFlowRatesByName(self, t_name: str, t_exactMatch: bool) -> SpaceInfiltrationDesignFlowRateVector:
    """Returns all objects of type SpaceInfiltrationDesignFlowRate named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSpaceInfiltrationDesignFlowRatesByName(self, t_name, t_exactMatch)
Model.getSpaceInfiltrationDesignFlowRatesByName = _getSpaceInfiltrationDesignFlowRatesByName

class SpaceInfiltrationEffectiveLeakageArea(SpaceLoad):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceInfiltrationEffectiveLeakageArea

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageArea_swiginit(self, _openstudiomodelgeometry.new_SpaceInfiltrationEffectiveLeakageArea(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageArea_iddObjectType()

    def schedule(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageArea_schedule(self)

    def isScheduleDefaulted(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageArea_isScheduleDefaulted(self)

    def effectiveAirLeakageArea(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageArea_effectiveAirLeakageArea(self)

    def stackCoefficient(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageArea_stackCoefficient(self)

    def windCoefficient(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageArea_windCoefficient(self)

    def setSchedule(self, schedule):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageArea_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageArea_resetSchedule(self)

    def setEffectiveAirLeakageArea(self, effectiveAirLeakageArea):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageArea_setEffectiveAirLeakageArea(self, effectiveAirLeakageArea)

    def setStackCoefficient(self, stackCoefficient):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageArea_setStackCoefficient(self, stackCoefficient)

    def setWindCoefficient(self, windCoefficient):
        return _openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageArea_setWindCoefficient(self, windCoefficient)

# Register SpaceInfiltrationEffectiveLeakageArea in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceInfiltrationEffectiveLeakageArea_swigregister(SpaceInfiltrationEffectiveLeakageArea)

def toSpaceInfiltrationEffectiveLeakageArea(idfObject):
    return _openstudiomodelgeometry.toSpaceInfiltrationEffectiveLeakageArea(idfObject)

def getSpaceInfiltrationEffectiveLeakageArea(t_model, t_handle):
    return _openstudiomodelgeometry.getSpaceInfiltrationEffectiveLeakageArea(t_model, t_handle)

def getSpaceInfiltrationEffectiveLeakageAreas(t_model):
    return _openstudiomodelgeometry.getSpaceInfiltrationEffectiveLeakageAreas(t_model)

def getSpaceInfiltrationEffectiveLeakageAreaByName(t_model, t_name):
    return _openstudiomodelgeometry.getSpaceInfiltrationEffectiveLeakageAreaByName(t_model, t_name)

def getSpaceInfiltrationEffectiveLeakageAreasByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSpaceInfiltrationEffectiveLeakageAreasByName(t_model, t_name, t_exactMatch)

def _to_SpaceInfiltrationEffectiveLeakageArea(self) -> OptionalSpaceInfiltrationEffectiveLeakageArea:
    """Try to cast the ModelObject to a SpaceInfiltrationEffectiveLeakageArea.

    :return: An Optional SpaceInfiltrationEffectiveLeakageArea.
    """
    return toSpaceInfiltrationEffectiveLeakageArea(self)
openstudioutilitiesidf.IdfObject.to_SpaceInfiltrationEffectiveLeakageArea = _to_SpaceInfiltrationEffectiveLeakageArea

def _getSpaceInfiltrationEffectiveLeakageArea(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSpaceInfiltrationEffectiveLeakageArea:
    """Try to get an object of type SpaceInfiltrationEffectiveLeakageArea referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SpaceInfiltrationEffectiveLeakageArea.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSpaceInfiltrationEffectiveLeakageArea(self, t_handle)
Model.getSpaceInfiltrationEffectiveLeakageArea = _getSpaceInfiltrationEffectiveLeakageArea

def _getSpaceInfiltrationEffectiveLeakageAreas(self) -> SpaceInfiltrationEffectiveLeakageAreaVector:
    """Get a vector of all objects of type SpaceInfiltrationEffectiveLeakageArea in the model.

    :return: A vector of SpaceInfiltrationEffectiveLeakageArea.
    """
    return getSpaceInfiltrationEffectiveLeakageAreas(self)
Model.getSpaceInfiltrationEffectiveLeakageAreas = _getSpaceInfiltrationEffectiveLeakageAreas

def _getSpaceInfiltrationEffectiveLeakageAreaByName(self, t_name: str) -> OptionalSpaceInfiltrationEffectiveLeakageArea:
    """Try to get an object of type SpaceInfiltrationEffectiveLeakageArea that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SpaceInfiltrationEffectiveLeakageArea.
    """
    return getSpaceInfiltrationEffectiveLeakageAreaByName(self, t_name)
Model.getSpaceInfiltrationEffectiveLeakageAreaByName = _getSpaceInfiltrationEffectiveLeakageAreaByName

def _getSpaceInfiltrationEffectiveLeakageAreasByName(self, t_name: str, t_exactMatch: bool) -> SpaceInfiltrationEffectiveLeakageAreaVector:
    """Returns all objects of type SpaceInfiltrationEffectiveLeakageArea named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSpaceInfiltrationEffectiveLeakageAreasByName(self, t_name, t_exactMatch)
Model.getSpaceInfiltrationEffectiveLeakageAreasByName = _getSpaceInfiltrationEffectiveLeakageAreasByName

class SpaceInfiltrationFlowCoefficient(SpaceLoad):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceInfiltrationFlowCoefficient

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_swiginit(self, _openstudiomodelgeometry.new_SpaceInfiltrationFlowCoefficient(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_iddObjectType()

    def schedule(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_schedule(self)

    def isScheduleDefaulted(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_isScheduleDefaulted(self)

    def flowCoefficient(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_flowCoefficient(self)

    def stackCoefficient(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_stackCoefficient(self)

    def pressureExponent(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_pressureExponent(self)

    def windCoefficient(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_windCoefficient(self)

    def shelterFactor(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_shelterFactor(self)

    def setSchedule(self, schedule):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_resetSchedule(self)

    def setFlowCoefficient(self, flowCoefficient):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_setFlowCoefficient(self, flowCoefficient)

    def setStackCoefficient(self, stackCoefficient):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_setStackCoefficient(self, stackCoefficient)

    def setPressureExponent(self, pressureExponent):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_setPressureExponent(self, pressureExponent)

    def setWindCoefficient(self, windCoefficient):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_setWindCoefficient(self, windCoefficient)

    def setShelterFactor(self, shelterFactor):
        return _openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_setShelterFactor(self, shelterFactor)

# Register SpaceInfiltrationFlowCoefficient in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceInfiltrationFlowCoefficient_swigregister(SpaceInfiltrationFlowCoefficient)

def toSpaceInfiltrationFlowCoefficient(idfObject):
    return _openstudiomodelgeometry.toSpaceInfiltrationFlowCoefficient(idfObject)

def getSpaceInfiltrationFlowCoefficient(t_model, t_handle):
    return _openstudiomodelgeometry.getSpaceInfiltrationFlowCoefficient(t_model, t_handle)

def getSpaceInfiltrationFlowCoefficients(t_model):
    return _openstudiomodelgeometry.getSpaceInfiltrationFlowCoefficients(t_model)

def getSpaceInfiltrationFlowCoefficientByName(t_model, t_name):
    return _openstudiomodelgeometry.getSpaceInfiltrationFlowCoefficientByName(t_model, t_name)

def getSpaceInfiltrationFlowCoefficientsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSpaceInfiltrationFlowCoefficientsByName(t_model, t_name, t_exactMatch)

def _to_SpaceInfiltrationFlowCoefficient(self) -> OptionalSpaceInfiltrationFlowCoefficient:
    """Try to cast the ModelObject to a SpaceInfiltrationFlowCoefficient.

    :return: An Optional SpaceInfiltrationFlowCoefficient.
    """
    return toSpaceInfiltrationFlowCoefficient(self)
openstudioutilitiesidf.IdfObject.to_SpaceInfiltrationFlowCoefficient = _to_SpaceInfiltrationFlowCoefficient

def _getSpaceInfiltrationFlowCoefficient(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSpaceInfiltrationFlowCoefficient:
    """Try to get an object of type SpaceInfiltrationFlowCoefficient referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SpaceInfiltrationFlowCoefficient.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSpaceInfiltrationFlowCoefficient(self, t_handle)
Model.getSpaceInfiltrationFlowCoefficient = _getSpaceInfiltrationFlowCoefficient

def _getSpaceInfiltrationFlowCoefficients(self) -> SpaceInfiltrationFlowCoefficientVector:
    """Get a vector of all objects of type SpaceInfiltrationFlowCoefficient in the model.

    :return: A vector of SpaceInfiltrationFlowCoefficient.
    """
    return getSpaceInfiltrationFlowCoefficients(self)
Model.getSpaceInfiltrationFlowCoefficients = _getSpaceInfiltrationFlowCoefficients

def _getSpaceInfiltrationFlowCoefficientByName(self, t_name: str) -> OptionalSpaceInfiltrationFlowCoefficient:
    """Try to get an object of type SpaceInfiltrationFlowCoefficient that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SpaceInfiltrationFlowCoefficient.
    """
    return getSpaceInfiltrationFlowCoefficientByName(self, t_name)
Model.getSpaceInfiltrationFlowCoefficientByName = _getSpaceInfiltrationFlowCoefficientByName

def _getSpaceInfiltrationFlowCoefficientsByName(self, t_name: str, t_exactMatch: bool) -> SpaceInfiltrationFlowCoefficientVector:
    """Returns all objects of type SpaceInfiltrationFlowCoefficient named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSpaceInfiltrationFlowCoefficientsByName(self, t_name, t_exactMatch)
Model.getSpaceInfiltrationFlowCoefficientsByName = _getSpaceInfiltrationFlowCoefficientsByName

class DaylightingControl(SpaceItem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_DaylightingControl

    def __init__(self, *args):
        _openstudiomodelgeometry.DaylightingControl_swiginit(self, _openstudiomodelgeometry.new_DaylightingControl(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.DaylightingControl_iddObjectType()

    @staticmethod
    def validLightingControlTypeValues():
        return _openstudiomodelgeometry.DaylightingControl_validLightingControlTypeValues()

    def positionXCoordinate(self):
        return _openstudiomodelgeometry.DaylightingControl_positionXCoordinate(self)

    def positionYCoordinate(self):
        return _openstudiomodelgeometry.DaylightingControl_positionYCoordinate(self)

    def positionZCoordinate(self):
        return _openstudiomodelgeometry.DaylightingControl_positionZCoordinate(self)

    def psiRotationAroundXAxis(self):
        return _openstudiomodelgeometry.DaylightingControl_psiRotationAroundXAxis(self)

    def isPsiRotationAroundXAxisDefaulted(self):
        return _openstudiomodelgeometry.DaylightingControl_isPsiRotationAroundXAxisDefaulted(self)

    def thetaRotationAroundYAxis(self):
        return _openstudiomodelgeometry.DaylightingControl_thetaRotationAroundYAxis(self)

    def isThetaRotationAroundYAxisDefaulted(self):
        return _openstudiomodelgeometry.DaylightingControl_isThetaRotationAroundYAxisDefaulted(self)

    def phiRotationAroundZAxis(self):
        return _openstudiomodelgeometry.DaylightingControl_phiRotationAroundZAxis(self)

    def isPhiRotationAroundZAxisDefaulted(self):
        return _openstudiomodelgeometry.DaylightingControl_isPhiRotationAroundZAxisDefaulted(self)

    def illuminanceSetpoint(self):
        return _openstudiomodelgeometry.DaylightingControl_illuminanceSetpoint(self)

    def isIlluminanceSetpointDefaulted(self):
        return _openstudiomodelgeometry.DaylightingControl_isIlluminanceSetpointDefaulted(self)

    def lightingControlType(self):
        return _openstudiomodelgeometry.DaylightingControl_lightingControlType(self)

    def isLightingControlTypeDefaulted(self):
        return _openstudiomodelgeometry.DaylightingControl_isLightingControlTypeDefaulted(self)

    def minimumInputPowerFractionforContinuousDimmingControl(self):
        return _openstudiomodelgeometry.DaylightingControl_minimumInputPowerFractionforContinuousDimmingControl(self)

    def isMinimumInputPowerFractionforContinuousDimmingControlDefaulted(self):
        return _openstudiomodelgeometry.DaylightingControl_isMinimumInputPowerFractionforContinuousDimmingControlDefaulted(self)

    def minimumLightOutputFractionforContinuousDimmingControl(self):
        return _openstudiomodelgeometry.DaylightingControl_minimumLightOutputFractionforContinuousDimmingControl(self)

    def isMinimumLightOutputFractionforContinuousDimmingControlDefaulted(self):
        return _openstudiomodelgeometry.DaylightingControl_isMinimumLightOutputFractionforContinuousDimmingControlDefaulted(self)

    def numberofSteppedControlSteps(self):
        return _openstudiomodelgeometry.DaylightingControl_numberofSteppedControlSteps(self)

    def isNumberofSteppedControlStepsDefaulted(self):
        return _openstudiomodelgeometry.DaylightingControl_isNumberofSteppedControlStepsDefaulted(self)

    def probabilityLightingwillbeResetWhenNeededinManualSteppedControl(self):
        return _openstudiomodelgeometry.DaylightingControl_probabilityLightingwillbeResetWhenNeededinManualSteppedControl(self)

    def isProbabilityLightingwillbeResetWhenNeededinManualSteppedControlDefaulted(self):
        return _openstudiomodelgeometry.DaylightingControl_isProbabilityLightingwillbeResetWhenNeededinManualSteppedControlDefaulted(self)

    def numberofDaylightingViews(self):
        return _openstudiomodelgeometry.DaylightingControl_numberofDaylightingViews(self)

    def isNumberofDaylightingViewsDefaulted(self):
        return _openstudiomodelgeometry.DaylightingControl_isNumberofDaylightingViewsDefaulted(self)

    def maximumAllowableDiscomfortGlareIndex(self):
        return _openstudiomodelgeometry.DaylightingControl_maximumAllowableDiscomfortGlareIndex(self)

    def setPositionXCoordinate(self, positionXCoordinate):
        return _openstudiomodelgeometry.DaylightingControl_setPositionXCoordinate(self, positionXCoordinate)

    def setPositionYCoordinate(self, positionYCoordinate):
        return _openstudiomodelgeometry.DaylightingControl_setPositionYCoordinate(self, positionYCoordinate)

    def setPositionZCoordinate(self, positionZCoordinate):
        return _openstudiomodelgeometry.DaylightingControl_setPositionZCoordinate(self, positionZCoordinate)

    def setPsiRotationAroundXAxis(self, psiRotationAroundXAxis):
        return _openstudiomodelgeometry.DaylightingControl_setPsiRotationAroundXAxis(self, psiRotationAroundXAxis)

    def resetPsiRotationAroundXAxis(self):
        return _openstudiomodelgeometry.DaylightingControl_resetPsiRotationAroundXAxis(self)

    def setThetaRotationAroundYAxis(self, thetaRotationAroundYAxis):
        return _openstudiomodelgeometry.DaylightingControl_setThetaRotationAroundYAxis(self, thetaRotationAroundYAxis)

    def resetThetaRotationAroundYAxis(self):
        return _openstudiomodelgeometry.DaylightingControl_resetThetaRotationAroundYAxis(self)

    def setPhiRotationAroundZAxis(self, phiRotationAroundZAxis):
        return _openstudiomodelgeometry.DaylightingControl_setPhiRotationAroundZAxis(self, phiRotationAroundZAxis)

    def resetPhiRotationAroundZAxis(self):
        return _openstudiomodelgeometry.DaylightingControl_resetPhiRotationAroundZAxis(self)

    def setIlluminanceSetpoint(self, illuminanceSetpoint):
        return _openstudiomodelgeometry.DaylightingControl_setIlluminanceSetpoint(self, illuminanceSetpoint)

    def resetIlluminanceSetpoint(self):
        return _openstudiomodelgeometry.DaylightingControl_resetIlluminanceSetpoint(self)

    def setLightingControlType(self, lightingControlType):
        return _openstudiomodelgeometry.DaylightingControl_setLightingControlType(self, lightingControlType)

    def resetLightingControlType(self):
        return _openstudiomodelgeometry.DaylightingControl_resetLightingControlType(self)

    def setMinimumInputPowerFractionforContinuousDimmingControl(self, minimumInputPowerFractionforContinuousDimmingControl):
        return _openstudiomodelgeometry.DaylightingControl_setMinimumInputPowerFractionforContinuousDimmingControl(self, minimumInputPowerFractionforContinuousDimmingControl)

    def resetMinimumInputPowerFractionforContinuousDimmingControl(self):
        return _openstudiomodelgeometry.DaylightingControl_resetMinimumInputPowerFractionforContinuousDimmingControl(self)

    def setMinimumLightOutputFractionforContinuousDimmingControl(self, minimumLightOutputFractionforContinuousDimmingControl):
        return _openstudiomodelgeometry.DaylightingControl_setMinimumLightOutputFractionforContinuousDimmingControl(self, minimumLightOutputFractionforContinuousDimmingControl)

    def resetMinimumLightOutputFractionforContinuousDimmingControl(self):
        return _openstudiomodelgeometry.DaylightingControl_resetMinimumLightOutputFractionforContinuousDimmingControl(self)

    def setNumberofSteppedControlSteps(self, numberofSteppedControlSteps):
        return _openstudiomodelgeometry.DaylightingControl_setNumberofSteppedControlSteps(self, numberofSteppedControlSteps)

    def resetNumberofSteppedControlSteps(self):
        return _openstudiomodelgeometry.DaylightingControl_resetNumberofSteppedControlSteps(self)

    def setProbabilityLightingwillbeResetWhenNeededinManualSteppedControl(self, probabilityLightingwillbeResetWhenNeededinManualSteppedControl):
        return _openstudiomodelgeometry.DaylightingControl_setProbabilityLightingwillbeResetWhenNeededinManualSteppedControl(self, probabilityLightingwillbeResetWhenNeededinManualSteppedControl)

    def resetProbabilityLightingwillbeResetWhenNeededinManualSteppedControl(self):
        return _openstudiomodelgeometry.DaylightingControl_resetProbabilityLightingwillbeResetWhenNeededinManualSteppedControl(self)

    def setNumberofDaylightingViews(self, numberofDaylightingViews):
        return _openstudiomodelgeometry.DaylightingControl_setNumberofDaylightingViews(self, numberofDaylightingViews)

    def resetNumberofDaylightingViews(self):
        return _openstudiomodelgeometry.DaylightingControl_resetNumberofDaylightingViews(self)

    def setMaximumAllowableDiscomfortGlareIndex(self, maximumAllowableDiscomfortGlareIndex):
        return _openstudiomodelgeometry.DaylightingControl_setMaximumAllowableDiscomfortGlareIndex(self, maximumAllowableDiscomfortGlareIndex)

    def resetMaximumAllowableDiscomfortGlareIndex(self):
        return _openstudiomodelgeometry.DaylightingControl_resetMaximumAllowableDiscomfortGlareIndex(self)

    def position(self):
        return _openstudiomodelgeometry.DaylightingControl_position(self)

    def setPosition(self, position):
        return _openstudiomodelgeometry.DaylightingControl_setPosition(self, position)

    def transformation(self):
        return _openstudiomodelgeometry.DaylightingControl_transformation(self)

    def setTransformation(self, transformation):
        return _openstudiomodelgeometry.DaylightingControl_setTransformation(self, transformation)

    def isPrimaryDaylightingControl(self):
        return _openstudiomodelgeometry.DaylightingControl_isPrimaryDaylightingControl(self)

    def isSecondaryDaylightingControl(self):
        return _openstudiomodelgeometry.DaylightingControl_isSecondaryDaylightingControl(self)

    def aimAt(self, target):
        return _openstudiomodelgeometry.DaylightingControl_aimAt(self, target)

# Register DaylightingControl in _openstudiomodelgeometry:
_openstudiomodelgeometry.DaylightingControl_swigregister(DaylightingControl)

def toDaylightingControl(idfObject):
    return _openstudiomodelgeometry.toDaylightingControl(idfObject)

def getDaylightingControl(t_model, t_handle):
    return _openstudiomodelgeometry.getDaylightingControl(t_model, t_handle)

def getDaylightingControls(t_model):
    return _openstudiomodelgeometry.getDaylightingControls(t_model)

def getDaylightingControlByName(t_model, t_name):
    return _openstudiomodelgeometry.getDaylightingControlByName(t_model, t_name)

def getDaylightingControlsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getDaylightingControlsByName(t_model, t_name, t_exactMatch)

def _to_DaylightingControl(self) -> OptionalDaylightingControl:
    """Try to cast the ModelObject to a DaylightingControl.

    :return: An Optional DaylightingControl.
    """
    return toDaylightingControl(self)
openstudioutilitiesidf.IdfObject.to_DaylightingControl = _to_DaylightingControl

def _getDaylightingControl(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalDaylightingControl:
    """Try to get an object of type DaylightingControl referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional DaylightingControl.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getDaylightingControl(self, t_handle)
Model.getDaylightingControl = _getDaylightingControl

def _getDaylightingControls(self) -> DaylightingControlVector:
    """Get a vector of all objects of type DaylightingControl in the model.

    :return: A vector of DaylightingControl.
    """
    return getDaylightingControls(self)
Model.getDaylightingControls = _getDaylightingControls

def _getDaylightingControlByName(self, t_name: str) -> OptionalDaylightingControl:
    """Try to get an object of type DaylightingControl that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional DaylightingControl.
    """
    return getDaylightingControlByName(self, t_name)
Model.getDaylightingControlByName = _getDaylightingControlByName

def _getDaylightingControlsByName(self, t_name: str, t_exactMatch: bool) -> DaylightingControlVector:
    """Returns all objects of type DaylightingControl named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getDaylightingControlsByName(self, t_name, t_exactMatch)
Model.getDaylightingControlsByName = _getDaylightingControlsByName

class GlareSensor(SpaceItem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_GlareSensor

    def __init__(self, *args):
        _openstudiomodelgeometry.GlareSensor_swiginit(self, _openstudiomodelgeometry.new_GlareSensor(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.GlareSensor_iddObjectType()

    def positionXCoordinate(self):
        return _openstudiomodelgeometry.GlareSensor_positionXCoordinate(self)

    def positionYCoordinate(self):
        return _openstudiomodelgeometry.GlareSensor_positionYCoordinate(self)

    def positionZCoordinate(self):
        return _openstudiomodelgeometry.GlareSensor_positionZCoordinate(self)

    def psiRotationAroundXAxis(self):
        return _openstudiomodelgeometry.GlareSensor_psiRotationAroundXAxis(self)

    def isPsiRotationAroundXAxisDefaulted(self):
        return _openstudiomodelgeometry.GlareSensor_isPsiRotationAroundXAxisDefaulted(self)

    def thetaRotationAroundYAxis(self):
        return _openstudiomodelgeometry.GlareSensor_thetaRotationAroundYAxis(self)

    def isThetaRotationAroundYAxisDefaulted(self):
        return _openstudiomodelgeometry.GlareSensor_isThetaRotationAroundYAxisDefaulted(self)

    def phiRotationAroundZAxis(self):
        return _openstudiomodelgeometry.GlareSensor_phiRotationAroundZAxis(self)

    def isPhiRotationAroundZAxisDefaulted(self):
        return _openstudiomodelgeometry.GlareSensor_isPhiRotationAroundZAxisDefaulted(self)

    def numberofGlareViewVectors(self):
        return _openstudiomodelgeometry.GlareSensor_numberofGlareViewVectors(self)

    def maximumAllowableDaylightGlareProbability(self):
        return _openstudiomodelgeometry.GlareSensor_maximumAllowableDaylightGlareProbability(self)

    def setPositionXCoordinate(self, positionXCoordinate):
        return _openstudiomodelgeometry.GlareSensor_setPositionXCoordinate(self, positionXCoordinate)

    def setPositionYCoordinate(self, positionYCoordinate):
        return _openstudiomodelgeometry.GlareSensor_setPositionYCoordinate(self, positionYCoordinate)

    def setPositionZCoordinate(self, positionZCoordinate):
        return _openstudiomodelgeometry.GlareSensor_setPositionZCoordinate(self, positionZCoordinate)

    def setPsiRotationAroundXAxis(self, psiRotationAroundXAxis):
        return _openstudiomodelgeometry.GlareSensor_setPsiRotationAroundXAxis(self, psiRotationAroundXAxis)

    def resetPsiRotationAroundXAxis(self):
        return _openstudiomodelgeometry.GlareSensor_resetPsiRotationAroundXAxis(self)

    def setThetaRotationAroundYAxis(self, thetaRotationAroundYAxis):
        return _openstudiomodelgeometry.GlareSensor_setThetaRotationAroundYAxis(self, thetaRotationAroundYAxis)

    def resetThetaRotationAroundYAxis(self):
        return _openstudiomodelgeometry.GlareSensor_resetThetaRotationAroundYAxis(self)

    def setPhiRotationAroundZAxis(self, phiRotationAroundZAxis):
        return _openstudiomodelgeometry.GlareSensor_setPhiRotationAroundZAxis(self, phiRotationAroundZAxis)

    def resetPhiRotationAroundZAxis(self):
        return _openstudiomodelgeometry.GlareSensor_resetPhiRotationAroundZAxis(self)

    def setNumberofGlareViewVectors(self, numberofGlareViewVectors):
        return _openstudiomodelgeometry.GlareSensor_setNumberofGlareViewVectors(self, numberofGlareViewVectors)

    def resetNumberofGlareViewVectors(self):
        return _openstudiomodelgeometry.GlareSensor_resetNumberofGlareViewVectors(self)

    def setMaximumAllowableDaylightGlareProbability(self, maximumAllowableDaylightGlareProbability):
        return _openstudiomodelgeometry.GlareSensor_setMaximumAllowableDaylightGlareProbability(self, maximumAllowableDaylightGlareProbability)

    def resetMaximumAllowableDaylightGlareProbability(self):
        return _openstudiomodelgeometry.GlareSensor_resetMaximumAllowableDaylightGlareProbability(self)

    def position(self):
        return _openstudiomodelgeometry.GlareSensor_position(self)

    def setPosition(self, position):
        return _openstudiomodelgeometry.GlareSensor_setPosition(self, position)

    def transformation(self):
        return _openstudiomodelgeometry.GlareSensor_transformation(self)

    def setTransformation(self, transformation):
        return _openstudiomodelgeometry.GlareSensor_setTransformation(self, transformation)

    def aimAt(self, target):
        return _openstudiomodelgeometry.GlareSensor_aimAt(self, target)

# Register GlareSensor in _openstudiomodelgeometry:
_openstudiomodelgeometry.GlareSensor_swigregister(GlareSensor)

def toGlareSensor(idfObject):
    return _openstudiomodelgeometry.toGlareSensor(idfObject)

def getGlareSensor(t_model, t_handle):
    return _openstudiomodelgeometry.getGlareSensor(t_model, t_handle)

def getGlareSensors(t_model):
    return _openstudiomodelgeometry.getGlareSensors(t_model)

def getGlareSensorByName(t_model, t_name):
    return _openstudiomodelgeometry.getGlareSensorByName(t_model, t_name)

def getGlareSensorsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getGlareSensorsByName(t_model, t_name, t_exactMatch)

def _to_GlareSensor(self) -> OptionalGlareSensor:
    """Try to cast the ModelObject to a GlareSensor.

    :return: An Optional GlareSensor.
    """
    return toGlareSensor(self)
openstudioutilitiesidf.IdfObject.to_GlareSensor = _to_GlareSensor

def _getGlareSensor(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGlareSensor:
    """Try to get an object of type GlareSensor referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GlareSensor.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGlareSensor(self, t_handle)
Model.getGlareSensor = _getGlareSensor

def _getGlareSensors(self) -> GlareSensorVector:
    """Get a vector of all objects of type GlareSensor in the model.

    :return: A vector of GlareSensor.
    """
    return getGlareSensors(self)
Model.getGlareSensors = _getGlareSensors

def _getGlareSensorByName(self, t_name: str) -> OptionalGlareSensor:
    """Try to get an object of type GlareSensor that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GlareSensor.
    """
    return getGlareSensorByName(self, t_name)
Model.getGlareSensorByName = _getGlareSensorByName

def _getGlareSensorsByName(self, t_name: str, t_exactMatch: bool) -> GlareSensorVector:
    """Returns all objects of type GlareSensor named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGlareSensorsByName(self, t_name, t_exactMatch)
Model.getGlareSensorsByName = _getGlareSensorsByName

class IlluminanceMap(SpaceItem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_IlluminanceMap

    def __init__(self, *args):
        _openstudiomodelgeometry.IlluminanceMap_swiginit(self, _openstudiomodelgeometry.new_IlluminanceMap(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.IlluminanceMap_iddObjectType()

    def originXCoordinate(self):
        return _openstudiomodelgeometry.IlluminanceMap_originXCoordinate(self)

    def originYCoordinate(self):
        return _openstudiomodelgeometry.IlluminanceMap_originYCoordinate(self)

    def originZCoordinate(self):
        return _openstudiomodelgeometry.IlluminanceMap_originZCoordinate(self)

    def psiRotationAroundXAxis(self):
        return _openstudiomodelgeometry.IlluminanceMap_psiRotationAroundXAxis(self)

    def isPsiRotationAroundXAxisDefaulted(self):
        return _openstudiomodelgeometry.IlluminanceMap_isPsiRotationAroundXAxisDefaulted(self)

    def thetaRotationAroundYAxis(self):
        return _openstudiomodelgeometry.IlluminanceMap_thetaRotationAroundYAxis(self)

    def isThetaRotationAroundYAxisDefaulted(self):
        return _openstudiomodelgeometry.IlluminanceMap_isThetaRotationAroundYAxisDefaulted(self)

    def phiRotationAroundZAxis(self):
        return _openstudiomodelgeometry.IlluminanceMap_phiRotationAroundZAxis(self)

    def isPhiRotationAroundZAxisDefaulted(self):
        return _openstudiomodelgeometry.IlluminanceMap_isPhiRotationAroundZAxisDefaulted(self)

    def xLength(self):
        return _openstudiomodelgeometry.IlluminanceMap_xLength(self)

    def isXLengthDefaulted(self):
        return _openstudiomodelgeometry.IlluminanceMap_isXLengthDefaulted(self)

    def numberofXGridPoints(self):
        return _openstudiomodelgeometry.IlluminanceMap_numberofXGridPoints(self)

    def isNumberofXGridPointsDefaulted(self):
        return _openstudiomodelgeometry.IlluminanceMap_isNumberofXGridPointsDefaulted(self)

    def yLength(self):
        return _openstudiomodelgeometry.IlluminanceMap_yLength(self)

    def isYLengthDefaulted(self):
        return _openstudiomodelgeometry.IlluminanceMap_isYLengthDefaulted(self)

    def numberofYGridPoints(self):
        return _openstudiomodelgeometry.IlluminanceMap_numberofYGridPoints(self)

    def isNumberofYGridPointsDefaulted(self):
        return _openstudiomodelgeometry.IlluminanceMap_isNumberofYGridPointsDefaulted(self)

    def setOriginXCoordinate(self, originXCoordinate):
        return _openstudiomodelgeometry.IlluminanceMap_setOriginXCoordinate(self, originXCoordinate)

    def setOriginYCoordinate(self, originYCoordinate):
        return _openstudiomodelgeometry.IlluminanceMap_setOriginYCoordinate(self, originYCoordinate)

    def setOriginZCoordinate(self, originZCoordinate):
        return _openstudiomodelgeometry.IlluminanceMap_setOriginZCoordinate(self, originZCoordinate)

    def setPsiRotationAroundXAxis(self, psiRotationAroundXAxis):
        return _openstudiomodelgeometry.IlluminanceMap_setPsiRotationAroundXAxis(self, psiRotationAroundXAxis)

    def resetPsiRotationAroundXAxis(self):
        return _openstudiomodelgeometry.IlluminanceMap_resetPsiRotationAroundXAxis(self)

    def setThetaRotationAroundYAxis(self, thetaRotationAroundYAxis):
        return _openstudiomodelgeometry.IlluminanceMap_setThetaRotationAroundYAxis(self, thetaRotationAroundYAxis)

    def resetThetaRotationAroundYAxis(self):
        return _openstudiomodelgeometry.IlluminanceMap_resetThetaRotationAroundYAxis(self)

    def setPhiRotationAroundZAxis(self, phiRotationAroundZAxis):
        return _openstudiomodelgeometry.IlluminanceMap_setPhiRotationAroundZAxis(self, phiRotationAroundZAxis)

    def resetPhiRotationAroundZAxis(self):
        return _openstudiomodelgeometry.IlluminanceMap_resetPhiRotationAroundZAxis(self)

    def setXLength(self, xLength):
        return _openstudiomodelgeometry.IlluminanceMap_setXLength(self, xLength)

    def resetXLength(self):
        return _openstudiomodelgeometry.IlluminanceMap_resetXLength(self)

    def setNumberofXGridPoints(self, numberofXGridPoints):
        return _openstudiomodelgeometry.IlluminanceMap_setNumberofXGridPoints(self, numberofXGridPoints)

    def resetNumberofXGridPoints(self):
        return _openstudiomodelgeometry.IlluminanceMap_resetNumberofXGridPoints(self)

    def setYLength(self, yLength):
        return _openstudiomodelgeometry.IlluminanceMap_setYLength(self, yLength)

    def resetYLength(self):
        return _openstudiomodelgeometry.IlluminanceMap_resetYLength(self)

    def setNumberofYGridPoints(self, numberofYGridPoints):
        return _openstudiomodelgeometry.IlluminanceMap_setNumberofYGridPoints(self, numberofYGridPoints)

    def resetNumberofYGridPoints(self):
        return _openstudiomodelgeometry.IlluminanceMap_resetNumberofYGridPoints(self)

    def transformation(self):
        return _openstudiomodelgeometry.IlluminanceMap_transformation(self)

    def setTransformation(self, transformation):
        return _openstudiomodelgeometry.IlluminanceMap_setTransformation(self, transformation)

    def referencePoints(self):
        return _openstudiomodelgeometry.IlluminanceMap_referencePoints(self)

    def corners(self):
        return _openstudiomodelgeometry.IlluminanceMap_corners(self)

# Register IlluminanceMap in _openstudiomodelgeometry:
_openstudiomodelgeometry.IlluminanceMap_swigregister(IlluminanceMap)

def toIlluminanceMap(idfObject):
    return _openstudiomodelgeometry.toIlluminanceMap(idfObject)

def getIlluminanceMap(t_model, t_handle):
    return _openstudiomodelgeometry.getIlluminanceMap(t_model, t_handle)

def getIlluminanceMaps(t_model):
    return _openstudiomodelgeometry.getIlluminanceMaps(t_model)

def getIlluminanceMapByName(t_model, t_name):
    return _openstudiomodelgeometry.getIlluminanceMapByName(t_model, t_name)

def getIlluminanceMapsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getIlluminanceMapsByName(t_model, t_name, t_exactMatch)

def _to_IlluminanceMap(self) -> OptionalIlluminanceMap:
    """Try to cast the ModelObject to a IlluminanceMap.

    :return: An Optional IlluminanceMap.
    """
    return toIlluminanceMap(self)
openstudioutilitiesidf.IdfObject.to_IlluminanceMap = _to_IlluminanceMap

def _getIlluminanceMap(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalIlluminanceMap:
    """Try to get an object of type IlluminanceMap referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional IlluminanceMap.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getIlluminanceMap(self, t_handle)
Model.getIlluminanceMap = _getIlluminanceMap

def _getIlluminanceMaps(self) -> IlluminanceMapVector:
    """Get a vector of all objects of type IlluminanceMap in the model.

    :return: A vector of IlluminanceMap.
    """
    return getIlluminanceMaps(self)
Model.getIlluminanceMaps = _getIlluminanceMaps

def _getIlluminanceMapByName(self, t_name: str) -> OptionalIlluminanceMap:
    """Try to get an object of type IlluminanceMap that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional IlluminanceMap.
    """
    return getIlluminanceMapByName(self, t_name)
Model.getIlluminanceMapByName = _getIlluminanceMapByName

def _getIlluminanceMapsByName(self, t_name: str, t_exactMatch: bool) -> IlluminanceMapVector:
    """Returns all objects of type IlluminanceMap named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getIlluminanceMapsByName(self, t_name, t_exactMatch)
Model.getIlluminanceMapsByName = _getIlluminanceMapsByName

class DaylightingDeviceShelf(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_DaylightingDeviceShelf

    def __init__(self, *args):
        _openstudiomodelgeometry.DaylightingDeviceShelf_swiginit(self, _openstudiomodelgeometry.new_DaylightingDeviceShelf(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.DaylightingDeviceShelf_iddObjectType()

    def insideShelf(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelf_insideShelf(self)

    def outsideShelf(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelf_outsideShelf(self)

    def viewFactortoOutsideShelf(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelf_viewFactortoOutsideShelf(self)

    def setInsideShelf(self, insideShelf):
        return _openstudiomodelgeometry.DaylightingDeviceShelf_setInsideShelf(self, insideShelf)

    def setOutsideShelf(self, outsideShelf):
        return _openstudiomodelgeometry.DaylightingDeviceShelf_setOutsideShelf(self, outsideShelf)

    def setViewFactortoOutsideShelf(self, viewFactortoOutsideShelf):
        return _openstudiomodelgeometry.DaylightingDeviceShelf_setViewFactortoOutsideShelf(self, viewFactortoOutsideShelf)

    def resetViewFactortoOutsideShelf(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelf_resetViewFactortoOutsideShelf(self)

    def subSurface(self):
        return _openstudiomodelgeometry.DaylightingDeviceShelf_subSurface(self)

# Register DaylightingDeviceShelf in _openstudiomodelgeometry:
_openstudiomodelgeometry.DaylightingDeviceShelf_swigregister(DaylightingDeviceShelf)

def toDaylightingDeviceShelf(idfObject):
    return _openstudiomodelgeometry.toDaylightingDeviceShelf(idfObject)

def getDaylightingDeviceShelf(t_model, t_handle):
    return _openstudiomodelgeometry.getDaylightingDeviceShelf(t_model, t_handle)

def getDaylightingDeviceShelfs(t_model):
    return _openstudiomodelgeometry.getDaylightingDeviceShelfs(t_model)

def getDaylightingDeviceShelfByName(t_model, t_name):
    return _openstudiomodelgeometry.getDaylightingDeviceShelfByName(t_model, t_name)

def getDaylightingDeviceShelfsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getDaylightingDeviceShelfsByName(t_model, t_name, t_exactMatch)

def _to_DaylightingDeviceShelf(self) -> OptionalDaylightingDeviceShelf:
    """Try to cast the ModelObject to a DaylightingDeviceShelf.

    :return: An Optional DaylightingDeviceShelf.
    """
    return toDaylightingDeviceShelf(self)
openstudioutilitiesidf.IdfObject.to_DaylightingDeviceShelf = _to_DaylightingDeviceShelf

def _getDaylightingDeviceShelf(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalDaylightingDeviceShelf:
    """Try to get an object of type DaylightingDeviceShelf referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional DaylightingDeviceShelf.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getDaylightingDeviceShelf(self, t_handle)
Model.getDaylightingDeviceShelf = _getDaylightingDeviceShelf

def _getDaylightingDeviceShelfs(self) -> DaylightingDeviceShelfVector:
    """Get a vector of all objects of type DaylightingDeviceShelf in the model.

    :return: A vector of DaylightingDeviceShelf.
    """
    return getDaylightingDeviceShelfs(self)
Model.getDaylightingDeviceShelfs = _getDaylightingDeviceShelfs

def _getDaylightingDeviceShelfByName(self, t_name: str) -> OptionalDaylightingDeviceShelf:
    """Try to get an object of type DaylightingDeviceShelf that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional DaylightingDeviceShelf.
    """
    return getDaylightingDeviceShelfByName(self, t_name)
Model.getDaylightingDeviceShelfByName = _getDaylightingDeviceShelfByName

def _getDaylightingDeviceShelfsByName(self, t_name: str, t_exactMatch: bool) -> DaylightingDeviceShelfVector:
    """Returns all objects of type DaylightingDeviceShelf named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getDaylightingDeviceShelfsByName(self, t_name, t_exactMatch)
Model.getDaylightingDeviceShelfsByName = _getDaylightingDeviceShelfsByName

class DaylightingDeviceTubular(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_DaylightingDeviceTubular

    def __init__(self, *args):
        _openstudiomodelgeometry.DaylightingDeviceTubular_swiginit(self, _openstudiomodelgeometry.new_DaylightingDeviceTubular(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.DaylightingDeviceTubular_iddObjectType()

    def subSurfaceDome(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_subSurfaceDome(self)

    def subSurfaceDiffuser(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_subSurfaceDiffuser(self)

    def construction(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_construction(self)

    def diameter(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_diameter(self)

    def totalLength(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_totalLength(self)

    def effectiveThermalResistance(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_effectiveThermalResistance(self)

    def transitionZones(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_transitionZones(self)

    def numberofTransitionZones(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_numberofTransitionZones(self)

    def setConstruction(self, construction):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_setConstruction(self, construction)

    def setDiameter(self, diameter):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_setDiameter(self, diameter)

    def setTotalLength(self, totalLength):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_setTotalLength(self, totalLength)

    def setEffectiveThermalResistance(self, effectiveThermalResistance):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_setEffectiveThermalResistance(self, effectiveThermalResistance)

    def addTransitionZone(self, *args):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_addTransitionZone(self, *args)

    def removeTransitionZone(self, groupIndex):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_removeTransitionZone(self, groupIndex)

    def removeAllTransitionZones(self):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_removeAllTransitionZones(self)

    def addTransitionZones(self, transitionZones):
        return _openstudiomodelgeometry.DaylightingDeviceTubular_addTransitionZones(self, transitionZones)

# Register DaylightingDeviceTubular in _openstudiomodelgeometry:
_openstudiomodelgeometry.DaylightingDeviceTubular_swigregister(DaylightingDeviceTubular)

def toDaylightingDeviceTubular(idfObject):
    return _openstudiomodelgeometry.toDaylightingDeviceTubular(idfObject)

def getDaylightingDeviceTubular(t_model, t_handle):
    return _openstudiomodelgeometry.getDaylightingDeviceTubular(t_model, t_handle)

def getDaylightingDeviceTubulars(t_model):
    return _openstudiomodelgeometry.getDaylightingDeviceTubulars(t_model)

def getDaylightingDeviceTubularByName(t_model, t_name):
    return _openstudiomodelgeometry.getDaylightingDeviceTubularByName(t_model, t_name)

def getDaylightingDeviceTubularsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getDaylightingDeviceTubularsByName(t_model, t_name, t_exactMatch)

def _to_DaylightingDeviceTubular(self) -> OptionalDaylightingDeviceTubular:
    """Try to cast the ModelObject to a DaylightingDeviceTubular.

    :return: An Optional DaylightingDeviceTubular.
    """
    return toDaylightingDeviceTubular(self)
openstudioutilitiesidf.IdfObject.to_DaylightingDeviceTubular = _to_DaylightingDeviceTubular

def _getDaylightingDeviceTubular(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalDaylightingDeviceTubular:
    """Try to get an object of type DaylightingDeviceTubular referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional DaylightingDeviceTubular.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getDaylightingDeviceTubular(self, t_handle)
Model.getDaylightingDeviceTubular = _getDaylightingDeviceTubular

def _getDaylightingDeviceTubulars(self) -> DaylightingDeviceTubularVector:
    """Get a vector of all objects of type DaylightingDeviceTubular in the model.

    :return: A vector of DaylightingDeviceTubular.
    """
    return getDaylightingDeviceTubulars(self)
Model.getDaylightingDeviceTubulars = _getDaylightingDeviceTubulars

def _getDaylightingDeviceTubularByName(self, t_name: str) -> OptionalDaylightingDeviceTubular:
    """Try to get an object of type DaylightingDeviceTubular that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional DaylightingDeviceTubular.
    """
    return getDaylightingDeviceTubularByName(self, t_name)
Model.getDaylightingDeviceTubularByName = _getDaylightingDeviceTubularByName

def _getDaylightingDeviceTubularsByName(self, t_name: str, t_exactMatch: bool) -> DaylightingDeviceTubularVector:
    """Returns all objects of type DaylightingDeviceTubular named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getDaylightingDeviceTubularsByName(self, t_name, t_exactMatch)
Model.getDaylightingDeviceTubularsByName = _getDaylightingDeviceTubularsByName

class DaylightingDeviceLightWell(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_DaylightingDeviceLightWell

    def __init__(self, *args):
        _openstudiomodelgeometry.DaylightingDeviceLightWell_swiginit(self, _openstudiomodelgeometry.new_DaylightingDeviceLightWell(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.DaylightingDeviceLightWell_iddObjectType()

    def subSurface(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWell_subSurface(self)

    def heightofWell(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWell_heightofWell(self)

    def perimeterofBottomofWell(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWell_perimeterofBottomofWell(self)

    def areaofBottomofWell(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWell_areaofBottomofWell(self)

    def visibleReflectanceofWellWalls(self):
        return _openstudiomodelgeometry.DaylightingDeviceLightWell_visibleReflectanceofWellWalls(self)

    def setHeightofWell(self, heightofWell):
        return _openstudiomodelgeometry.DaylightingDeviceLightWell_setHeightofWell(self, heightofWell)

    def setPerimeterofBottomofWell(self, perimeterofBottomofWell):
        return _openstudiomodelgeometry.DaylightingDeviceLightWell_setPerimeterofBottomofWell(self, perimeterofBottomofWell)

    def setAreaofBottomofWell(self, areaofBottomofWell):
        return _openstudiomodelgeometry.DaylightingDeviceLightWell_setAreaofBottomofWell(self, areaofBottomofWell)

    def setVisibleReflectanceofWellWalls(self, visibleReflectanceofWellWalls):
        return _openstudiomodelgeometry.DaylightingDeviceLightWell_setVisibleReflectanceofWellWalls(self, visibleReflectanceofWellWalls)

# Register DaylightingDeviceLightWell in _openstudiomodelgeometry:
_openstudiomodelgeometry.DaylightingDeviceLightWell_swigregister(DaylightingDeviceLightWell)

def toDaylightingDeviceLightWell(idfObject):
    return _openstudiomodelgeometry.toDaylightingDeviceLightWell(idfObject)

def getDaylightingDeviceLightWell(t_model, t_handle):
    return _openstudiomodelgeometry.getDaylightingDeviceLightWell(t_model, t_handle)

def getDaylightingDeviceLightWells(t_model):
    return _openstudiomodelgeometry.getDaylightingDeviceLightWells(t_model)

def getDaylightingDeviceLightWellByName(t_model, t_name):
    return _openstudiomodelgeometry.getDaylightingDeviceLightWellByName(t_model, t_name)

def getDaylightingDeviceLightWellsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getDaylightingDeviceLightWellsByName(t_model, t_name, t_exactMatch)

def _to_DaylightingDeviceLightWell(self) -> OptionalDaylightingDeviceLightWell:
    """Try to cast the ModelObject to a DaylightingDeviceLightWell.

    :return: An Optional DaylightingDeviceLightWell.
    """
    return toDaylightingDeviceLightWell(self)
openstudioutilitiesidf.IdfObject.to_DaylightingDeviceLightWell = _to_DaylightingDeviceLightWell

def _getDaylightingDeviceLightWell(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalDaylightingDeviceLightWell:
    """Try to get an object of type DaylightingDeviceLightWell referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional DaylightingDeviceLightWell.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getDaylightingDeviceLightWell(self, t_handle)
Model.getDaylightingDeviceLightWell = _getDaylightingDeviceLightWell

def _getDaylightingDeviceLightWells(self) -> DaylightingDeviceLightWellVector:
    """Get a vector of all objects of type DaylightingDeviceLightWell in the model.

    :return: A vector of DaylightingDeviceLightWell.
    """
    return getDaylightingDeviceLightWells(self)
Model.getDaylightingDeviceLightWells = _getDaylightingDeviceLightWells

def _getDaylightingDeviceLightWellByName(self, t_name: str) -> OptionalDaylightingDeviceLightWell:
    """Try to get an object of type DaylightingDeviceLightWell that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional DaylightingDeviceLightWell.
    """
    return getDaylightingDeviceLightWellByName(self, t_name)
Model.getDaylightingDeviceLightWellByName = _getDaylightingDeviceLightWellByName

def _getDaylightingDeviceLightWellsByName(self, t_name: str, t_exactMatch: bool) -> DaylightingDeviceLightWellVector:
    """Returns all objects of type DaylightingDeviceLightWell named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getDaylightingDeviceLightWellsByName(self, t_name, t_exactMatch)
Model.getDaylightingDeviceLightWellsByName = _getDaylightingDeviceLightWellsByName

class SpaceType(openstudiomodelcore.ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SpaceType

    def __init__(self, *args):
        _openstudiomodelgeometry.SpaceType_swiginit(self, _openstudiomodelgeometry.new_SpaceType(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SpaceType_iddObjectType()

    def defaultConstructionSet(self):
        return _openstudiomodelgeometry.SpaceType_defaultConstructionSet(self)

    def defaultScheduleSet(self):
        return _openstudiomodelgeometry.SpaceType_defaultScheduleSet(self)

    def renderingColor(self):
        return _openstudiomodelgeometry.SpaceType_renderingColor(self)

    def standardsTemplate(self):
        return _openstudiomodelgeometry.SpaceType_standardsTemplate(self)

    def suggestedStandardsTemplates(self):
        return _openstudiomodelgeometry.SpaceType_suggestedStandardsTemplates(self)

    def standardsBuildingType(self):
        return _openstudiomodelgeometry.SpaceType_standardsBuildingType(self)

    def suggestedStandardsBuildingTypes(self):
        return _openstudiomodelgeometry.SpaceType_suggestedStandardsBuildingTypes(self)

    def standardsSpaceType(self):
        return _openstudiomodelgeometry.SpaceType_standardsSpaceType(self)

    def suggestedStandardsSpaceTypes(self):
        return _openstudiomodelgeometry.SpaceType_suggestedStandardsSpaceTypes(self)

    def setDefaultConstructionSet(self, defaultConstructionSet):
        return _openstudiomodelgeometry.SpaceType_setDefaultConstructionSet(self, defaultConstructionSet)

    def resetDefaultConstructionSet(self):
        return _openstudiomodelgeometry.SpaceType_resetDefaultConstructionSet(self)

    def setDefaultScheduleSet(self, defaultScheduleSet):
        return _openstudiomodelgeometry.SpaceType_setDefaultScheduleSet(self, defaultScheduleSet)

    def resetDefaultScheduleSet(self):
        return _openstudiomodelgeometry.SpaceType_resetDefaultScheduleSet(self)

    def setRenderingColor(self, renderingColor):
        return _openstudiomodelgeometry.SpaceType_setRenderingColor(self, renderingColor)

    def resetRenderingColor(self):
        return _openstudiomodelgeometry.SpaceType_resetRenderingColor(self)

    def setStandardsTemplate(self, standardsTemplate):
        return _openstudiomodelgeometry.SpaceType_setStandardsTemplate(self, standardsTemplate)

    def resetStandardsTemplate(self):
        return _openstudiomodelgeometry.SpaceType_resetStandardsTemplate(self)

    def setStandardsBuildingType(self, standardsBuildingType):
        return _openstudiomodelgeometry.SpaceType_setStandardsBuildingType(self, standardsBuildingType)

    def resetStandardsBuildingType(self):
        return _openstudiomodelgeometry.SpaceType_resetStandardsBuildingType(self)

    def setStandardsSpaceType(self, standardsSpaceType):
        return _openstudiomodelgeometry.SpaceType_setStandardsSpaceType(self, standardsSpaceType)

    def resetStandardsSpaceType(self):
        return _openstudiomodelgeometry.SpaceType_resetStandardsSpaceType(self)

    def spaces(self):
        return _openstudiomodelgeometry.SpaceType_spaces(self)

    def getDefaultSchedule(self, defaultScheduleType):
        return _openstudiomodelgeometry.SpaceType_getDefaultSchedule(self, defaultScheduleType)

    def internalMass(self):
        return _openstudiomodelgeometry.SpaceType_internalMass(self)

    def people(self):
        return _openstudiomodelgeometry.SpaceType_people(self)

    def lights(self):
        return _openstudiomodelgeometry.SpaceType_lights(self)

    def luminaires(self):
        return _openstudiomodelgeometry.SpaceType_luminaires(self)

    def electricEquipment(self):
        return _openstudiomodelgeometry.SpaceType_electricEquipment(self)

    def electricEquipmentITEAirCooled(self):
        return _openstudiomodelgeometry.SpaceType_electricEquipmentITEAirCooled(self)

    def gasEquipment(self):
        return _openstudiomodelgeometry.SpaceType_gasEquipment(self)

    def hotWaterEquipment(self):
        return _openstudiomodelgeometry.SpaceType_hotWaterEquipment(self)

    def steamEquipment(self):
        return _openstudiomodelgeometry.SpaceType_steamEquipment(self)

    def otherEquipment(self):
        return _openstudiomodelgeometry.SpaceType_otherEquipment(self)

    def spaceInfiltrationDesignFlowRates(self):
        return _openstudiomodelgeometry.SpaceType_spaceInfiltrationDesignFlowRates(self)

    def spaceInfiltrationEffectiveLeakageAreas(self):
        return _openstudiomodelgeometry.SpaceType_spaceInfiltrationEffectiveLeakageAreas(self)

    def spaceInfiltrationFlowCoefficients(self):
        return _openstudiomodelgeometry.SpaceType_spaceInfiltrationFlowCoefficients(self)

    def designSpecificationOutdoorAir(self):
        return _openstudiomodelgeometry.SpaceType_designSpecificationOutdoorAir(self)

    def isDesignSpecificationOutdoorAirDefaulted(self):
        return _openstudiomodelgeometry.SpaceType_isDesignSpecificationOutdoorAirDefaulted(self)

    def setDesignSpecificationOutdoorAir(self, designSpecificationOutdoorAir):
        return _openstudiomodelgeometry.SpaceType_setDesignSpecificationOutdoorAir(self, designSpecificationOutdoorAir)

    def resetDesignSpecificationOutdoorAir(self):
        return _openstudiomodelgeometry.SpaceType_resetDesignSpecificationOutdoorAir(self)

    def hardApplySpaceLoadSchedules(self):
        return _openstudiomodelgeometry.SpaceType_hardApplySpaceLoadSchedules(self)

    def peoplePerFloorArea(self):
        return _openstudiomodelgeometry.SpaceType_peoplePerFloorArea(self)

    def setPeoplePerFloorArea(self, *args):
        return _openstudiomodelgeometry.SpaceType_setPeoplePerFloorArea(self, *args)

    def spaceFloorAreaPerPerson(self):
        return _openstudiomodelgeometry.SpaceType_spaceFloorAreaPerPerson(self)

    def setSpaceFloorAreaPerPerson(self, *args):
        return _openstudiomodelgeometry.SpaceType_setSpaceFloorAreaPerPerson(self, *args)

    def getNumberOfPeople(self, floorArea):
        return _openstudiomodelgeometry.SpaceType_getNumberOfPeople(self, floorArea)

    def getPeoplePerFloorArea(self, floorArea):
        return _openstudiomodelgeometry.SpaceType_getPeoplePerFloorArea(self, floorArea)

    def getFloorAreaPerPerson(self, floorArea):
        return _openstudiomodelgeometry.SpaceType_getFloorAreaPerPerson(self, floorArea)

    def lightingPowerPerFloorArea(self):
        return _openstudiomodelgeometry.SpaceType_lightingPowerPerFloorArea(self)

    def setLightingPowerPerFloorArea(self, *args):
        return _openstudiomodelgeometry.SpaceType_setLightingPowerPerFloorArea(self, *args)

    def lightingPowerPerPerson(self):
        return _openstudiomodelgeometry.SpaceType_lightingPowerPerPerson(self)

    def setLightingPowerPerPerson(self, *args):
        return _openstudiomodelgeometry.SpaceType_setLightingPowerPerPerson(self, *args)

    def getLightingPower(self, floorArea, numPeople):
        return _openstudiomodelgeometry.SpaceType_getLightingPower(self, floorArea, numPeople)

    def getLightingPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelgeometry.SpaceType_getLightingPowerPerFloorArea(self, floorArea, numPeople)

    def getLightingPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelgeometry.SpaceType_getLightingPowerPerPerson(self, floorArea, numPeople)

    def electricEquipmentPowerPerFloorArea(self):
        return _openstudiomodelgeometry.SpaceType_electricEquipmentPowerPerFloorArea(self)

    def setElectricEquipmentPowerPerFloorArea(self, *args):
        return _openstudiomodelgeometry.SpaceType_setElectricEquipmentPowerPerFloorArea(self, *args)

    def electricEquipmentPowerPerPerson(self):
        return _openstudiomodelgeometry.SpaceType_electricEquipmentPowerPerPerson(self)

    def setElectricEquipmentPowerPerPerson(self, *args):
        return _openstudiomodelgeometry.SpaceType_setElectricEquipmentPowerPerPerson(self, *args)

    def getElectricEquipmentDesignLevel(self, floorArea, numPeople):
        return _openstudiomodelgeometry.SpaceType_getElectricEquipmentDesignLevel(self, floorArea, numPeople)

    def getElectricEquipmentPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelgeometry.SpaceType_getElectricEquipmentPowerPerFloorArea(self, floorArea, numPeople)

    def getElectricEquipmentPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelgeometry.SpaceType_getElectricEquipmentPowerPerPerson(self, floorArea, numPeople)

    def electricEquipmentITEAirCooledPowerPerFloorArea(self):
        return _openstudiomodelgeometry.SpaceType_electricEquipmentITEAirCooledPowerPerFloorArea(self)

    def gasEquipmentPowerPerFloorArea(self):
        return _openstudiomodelgeometry.SpaceType_gasEquipmentPowerPerFloorArea(self)

    def setGasEquipmentPowerPerFloorArea(self, *args):
        return _openstudiomodelgeometry.SpaceType_setGasEquipmentPowerPerFloorArea(self, *args)

    def gasEquipmentPowerPerPerson(self):
        return _openstudiomodelgeometry.SpaceType_gasEquipmentPowerPerPerson(self)

    def setGasEquipmentPowerPerPerson(self, *args):
        return _openstudiomodelgeometry.SpaceType_setGasEquipmentPowerPerPerson(self, *args)

    def getGasEquipmentDesignLevel(self, floorArea, numPeople):
        return _openstudiomodelgeometry.SpaceType_getGasEquipmentDesignLevel(self, floorArea, numPeople)

    def getGasEquipmentPowerPerFloorArea(self, floorArea, numPeople):
        return _openstudiomodelgeometry.SpaceType_getGasEquipmentPowerPerFloorArea(self, floorArea, numPeople)

    def getGasEquipmentPowerPerPerson(self, floorArea, numPeople):
        return _openstudiomodelgeometry.SpaceType_getGasEquipmentPowerPerPerson(self, floorArea, numPeople)

    def floorArea(self):
        return _openstudiomodelgeometry.SpaceType_floorArea(self)

    def setNameProtected(self, newName):
        return _openstudiomodelgeometry.SpaceType_setNameProtected(self, newName)

# Register SpaceType in _openstudiomodelgeometry:
_openstudiomodelgeometry.SpaceType_swigregister(SpaceType)

def toSpaceType(idfObject):
    return _openstudiomodelgeometry.toSpaceType(idfObject)

def getSpaceType(t_model, t_handle):
    return _openstudiomodelgeometry.getSpaceType(t_model, t_handle)

def getSpaceTypes(t_model):
    return _openstudiomodelgeometry.getSpaceTypes(t_model)

def getSpaceTypeByName(t_model, t_name):
    return _openstudiomodelgeometry.getSpaceTypeByName(t_model, t_name)

def getSpaceTypesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSpaceTypesByName(t_model, t_name, t_exactMatch)

def _to_SpaceType(self) -> OptionalSpaceType:
    """Try to cast the ModelObject to a SpaceType.

    :return: An Optional SpaceType.
    """
    return toSpaceType(self)
openstudioutilitiesidf.IdfObject.to_SpaceType = _to_SpaceType

def _getSpaceType(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSpaceType:
    """Try to get an object of type SpaceType referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SpaceType.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSpaceType(self, t_handle)
Model.getSpaceType = _getSpaceType

def _getSpaceTypes(self) -> SpaceTypeVector:
    """Get a vector of all objects of type SpaceType in the model.

    :return: A vector of SpaceType.
    """
    return getSpaceTypes(self)
Model.getSpaceTypes = _getSpaceTypes

def _getSpaceTypeByName(self, t_name: str) -> OptionalSpaceType:
    """Try to get an object of type SpaceType that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SpaceType.
    """
    return getSpaceTypeByName(self, t_name)
Model.getSpaceTypeByName = _getSpaceTypeByName

def _getSpaceTypesByName(self, t_name: str, t_exactMatch: bool) -> SpaceTypeVector:
    """Returns all objects of type SpaceType named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSpaceTypesByName(self, t_name, t_exactMatch)
Model.getSpaceTypesByName = _getSpaceTypesByName

class LightingSimulationZone(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_LightingSimulationZone

    def __init__(self, *args):
        _openstudiomodelgeometry.LightingSimulationZone_swiginit(self, _openstudiomodelgeometry.new_LightingSimulationZone(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.LightingSimulationZone_iddObjectType()

    def renderingColor(self):
        return _openstudiomodelgeometry.LightingSimulationZone_renderingColor(self)

    def setRenderingColor(self, renderingColor):
        return _openstudiomodelgeometry.LightingSimulationZone_setRenderingColor(self, renderingColor)

    def resetRenderingColor(self):
        return _openstudiomodelgeometry.LightingSimulationZone_resetRenderingColor(self)

    def spaces(self):
        return _openstudiomodelgeometry.LightingSimulationZone_spaces(self)

    def addSpace(self, space):
        return _openstudiomodelgeometry.LightingSimulationZone_addSpace(self, space)

    def resetSpaces(self):
        return _openstudiomodelgeometry.LightingSimulationZone_resetSpaces(self)

# Register LightingSimulationZone in _openstudiomodelgeometry:
_openstudiomodelgeometry.LightingSimulationZone_swigregister(LightingSimulationZone)

def toLightingSimulationZone(idfObject):
    return _openstudiomodelgeometry.toLightingSimulationZone(idfObject)

def getLightingSimulationZone(t_model, t_handle):
    return _openstudiomodelgeometry.getLightingSimulationZone(t_model, t_handle)

def getLightingSimulationZones(t_model):
    return _openstudiomodelgeometry.getLightingSimulationZones(t_model)

def getLightingSimulationZoneByName(t_model, t_name):
    return _openstudiomodelgeometry.getLightingSimulationZoneByName(t_model, t_name)

def getLightingSimulationZonesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getLightingSimulationZonesByName(t_model, t_name, t_exactMatch)

def _to_LightingSimulationZone(self) -> OptionalLightingSimulationZone:
    """Try to cast the ModelObject to a LightingSimulationZone.

    :return: An Optional LightingSimulationZone.
    """
    return toLightingSimulationZone(self)
openstudioutilitiesidf.IdfObject.to_LightingSimulationZone = _to_LightingSimulationZone

def _getLightingSimulationZone(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalLightingSimulationZone:
    """Try to get an object of type LightingSimulationZone referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional LightingSimulationZone.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getLightingSimulationZone(self, t_handle)
Model.getLightingSimulationZone = _getLightingSimulationZone

def _getLightingSimulationZones(self) -> LightingSimulationZoneVector:
    """Get a vector of all objects of type LightingSimulationZone in the model.

    :return: A vector of LightingSimulationZone.
    """
    return getLightingSimulationZones(self)
Model.getLightingSimulationZones = _getLightingSimulationZones

def _getLightingSimulationZoneByName(self, t_name: str) -> OptionalLightingSimulationZone:
    """Try to get an object of type LightingSimulationZone that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional LightingSimulationZone.
    """
    return getLightingSimulationZoneByName(self, t_name)
Model.getLightingSimulationZoneByName = _getLightingSimulationZoneByName

def _getLightingSimulationZonesByName(self, t_name: str, t_exactMatch: bool) -> LightingSimulationZoneVector:
    """Returns all objects of type LightingSimulationZone named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getLightingSimulationZonesByName(self, t_name, t_exactMatch)
Model.getLightingSimulationZonesByName = _getLightingSimulationZonesByName

class CustomBlock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, material, depth, xPosition, zPosition):
        _openstudiomodelgeometry.CustomBlock_swiginit(self, _openstudiomodelgeometry.new_CustomBlock(material, depth, xPosition, zPosition))

    def material(self):
        return _openstudiomodelgeometry.CustomBlock_material(self)

    def depth(self):
        return _openstudiomodelgeometry.CustomBlock_depth(self)

    def xPosition(self):
        return _openstudiomodelgeometry.CustomBlock_xPosition(self)

    def zPosition(self):
        return _openstudiomodelgeometry.CustomBlock_zPosition(self)

    def __str__(self):
        return _openstudiomodelgeometry.CustomBlock___str__(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_CustomBlock

# Register CustomBlock in _openstudiomodelgeometry:
_openstudiomodelgeometry.CustomBlock_swigregister(CustomBlock)
class FoundationKiva(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_FoundationKiva

    def __init__(self, *args):
        _openstudiomodelgeometry.FoundationKiva_swiginit(self, _openstudiomodelgeometry.new_FoundationKiva(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.FoundationKiva_iddObjectType()

    def addCustomBlock(self, *args):
        return _openstudiomodelgeometry.FoundationKiva_addCustomBlock(self, *args)

    def removeCustomBlock(self, groupIndex):
        return _openstudiomodelgeometry.FoundationKiva_removeCustomBlock(self, groupIndex)

    def removeAllCustomBlocks(self):
        return _openstudiomodelgeometry.FoundationKiva_removeAllCustomBlocks(self)

    def customBlocks(self):
        return _openstudiomodelgeometry.FoundationKiva_customBlocks(self)

    def addCustomBlocks(self, customBlocks):
        return _openstudiomodelgeometry.FoundationKiva_addCustomBlocks(self, customBlocks)

    def initialIndoorAirTemperature(self):
        return _openstudiomodelgeometry.FoundationKiva_initialIndoorAirTemperature(self)

    def interiorHorizontalInsulationMaterial(self):
        return _openstudiomodelgeometry.FoundationKiva_interiorHorizontalInsulationMaterial(self)

    def interiorHorizontalInsulationDepth(self):
        return _openstudiomodelgeometry.FoundationKiva_interiorHorizontalInsulationDepth(self)

    def isInteriorHorizontalInsulationDepthDefaulted(self):
        return _openstudiomodelgeometry.FoundationKiva_isInteriorHorizontalInsulationDepthDefaulted(self)

    def interiorHorizontalInsulationWidth(self):
        return _openstudiomodelgeometry.FoundationKiva_interiorHorizontalInsulationWidth(self)

    def interiorVerticalInsulationMaterial(self):
        return _openstudiomodelgeometry.FoundationKiva_interiorVerticalInsulationMaterial(self)

    def interiorVerticalInsulationDepth(self):
        return _openstudiomodelgeometry.FoundationKiva_interiorVerticalInsulationDepth(self)

    def exteriorHorizontalInsulationMaterial(self):
        return _openstudiomodelgeometry.FoundationKiva_exteriorHorizontalInsulationMaterial(self)

    def exteriorHorizontalInsulationDepth(self):
        return _openstudiomodelgeometry.FoundationKiva_exteriorHorizontalInsulationDepth(self)

    def exteriorHorizontalInsulationWidth(self):
        return _openstudiomodelgeometry.FoundationKiva_exteriorHorizontalInsulationWidth(self)

    def isExteriorHorizontalInsulationWidthDefaulted(self):
        return _openstudiomodelgeometry.FoundationKiva_isExteriorHorizontalInsulationWidthDefaulted(self)

    def exteriorVerticalInsulationMaterial(self):
        return _openstudiomodelgeometry.FoundationKiva_exteriorVerticalInsulationMaterial(self)

    def exteriorVerticalInsulationDepth(self):
        return _openstudiomodelgeometry.FoundationKiva_exteriorVerticalInsulationDepth(self)

    def wallHeightAboveGrade(self):
        return _openstudiomodelgeometry.FoundationKiva_wallHeightAboveGrade(self)

    def isWallHeightAboveGradeDefaulted(self):
        return _openstudiomodelgeometry.FoundationKiva_isWallHeightAboveGradeDefaulted(self)

    def wallDepthBelowSlab(self):
        return _openstudiomodelgeometry.FoundationKiva_wallDepthBelowSlab(self)

    def isWallDepthBelowSlabDefaulted(self):
        return _openstudiomodelgeometry.FoundationKiva_isWallDepthBelowSlabDefaulted(self)

    def footingWallConstruction(self):
        return _openstudiomodelgeometry.FoundationKiva_footingWallConstruction(self)

    def footingMaterial(self):
        return _openstudiomodelgeometry.FoundationKiva_footingMaterial(self)

    def footingDepth(self):
        return _openstudiomodelgeometry.FoundationKiva_footingDepth(self)

    def isFootingDepthDefaulted(self):
        return _openstudiomodelgeometry.FoundationKiva_isFootingDepthDefaulted(self)

    def surfaces(self):
        return _openstudiomodelgeometry.FoundationKiva_surfaces(self)

    def numberofCustomBlocks(self):
        return _openstudiomodelgeometry.FoundationKiva_numberofCustomBlocks(self)

    def setInitialIndoorAirTemperature(self, initialIndoorAirTemperature):
        return _openstudiomodelgeometry.FoundationKiva_setInitialIndoorAirTemperature(self, initialIndoorAirTemperature)

    def setInteriorHorizontalInsulationMaterial(self, material):
        return _openstudiomodelgeometry.FoundationKiva_setInteriorHorizontalInsulationMaterial(self, material)

    def resetInteriorHorizontalInsulationMaterial(self):
        return _openstudiomodelgeometry.FoundationKiva_resetInteriorHorizontalInsulationMaterial(self)

    def setInteriorHorizontalInsulationDepth(self, interiorHorizontalInsulationDepth):
        return _openstudiomodelgeometry.FoundationKiva_setInteriorHorizontalInsulationDepth(self, interiorHorizontalInsulationDepth)

    def resetInteriorHorizontalInsulationDepth(self):
        return _openstudiomodelgeometry.FoundationKiva_resetInteriorHorizontalInsulationDepth(self)

    def setInteriorHorizontalInsulationWidth(self, interiorHorizontalInsulationWidth):
        return _openstudiomodelgeometry.FoundationKiva_setInteriorHorizontalInsulationWidth(self, interiorHorizontalInsulationWidth)

    def setInteriorVerticalInsulationMaterial(self, material):
        return _openstudiomodelgeometry.FoundationKiva_setInteriorVerticalInsulationMaterial(self, material)

    def resetInteriorVerticalInsulationMaterial(self):
        return _openstudiomodelgeometry.FoundationKiva_resetInteriorVerticalInsulationMaterial(self)

    def setInteriorVerticalInsulationDepth(self, interiorVerticalInsulationDepth):
        return _openstudiomodelgeometry.FoundationKiva_setInteriorVerticalInsulationDepth(self, interiorVerticalInsulationDepth)

    def setExteriorHorizontalInsulationMaterial(self, material):
        return _openstudiomodelgeometry.FoundationKiva_setExteriorHorizontalInsulationMaterial(self, material)

    def resetExteriorHorizontalInsulationMaterial(self):
        return _openstudiomodelgeometry.FoundationKiva_resetExteriorHorizontalInsulationMaterial(self)

    def setExteriorHorizontalInsulationDepth(self, exteriorHorizontalInsulationDepth):
        return _openstudiomodelgeometry.FoundationKiva_setExteriorHorizontalInsulationDepth(self, exteriorHorizontalInsulationDepth)

    def setExteriorHorizontalInsulationWidth(self, exteriorHorizontalInsulationWidth):
        return _openstudiomodelgeometry.FoundationKiva_setExteriorHorizontalInsulationWidth(self, exteriorHorizontalInsulationWidth)

    def resetExteriorHorizontalInsulationWidth(self):
        return _openstudiomodelgeometry.FoundationKiva_resetExteriorHorizontalInsulationWidth(self)

    def setExteriorVerticalInsulationMaterial(self, material):
        return _openstudiomodelgeometry.FoundationKiva_setExteriorVerticalInsulationMaterial(self, material)

    def resetExteriorVerticalInsulationMaterial(self):
        return _openstudiomodelgeometry.FoundationKiva_resetExteriorVerticalInsulationMaterial(self)

    def setExteriorVerticalInsulationDepth(self, exteriorVerticalInsulationDepth):
        return _openstudiomodelgeometry.FoundationKiva_setExteriorVerticalInsulationDepth(self, exteriorVerticalInsulationDepth)

    def setWallHeightAboveGrade(self, wallHeightAboveGrade):
        return _openstudiomodelgeometry.FoundationKiva_setWallHeightAboveGrade(self, wallHeightAboveGrade)

    def resetWallHeightAboveGrade(self):
        return _openstudiomodelgeometry.FoundationKiva_resetWallHeightAboveGrade(self)

    def setWallDepthBelowSlab(self, wallDepthBelowSlab):
        return _openstudiomodelgeometry.FoundationKiva_setWallDepthBelowSlab(self, wallDepthBelowSlab)

    def resetWallDepthBelowSlab(self):
        return _openstudiomodelgeometry.FoundationKiva_resetWallDepthBelowSlab(self)

    def setFootingWallConstruction(self, construction):
        return _openstudiomodelgeometry.FoundationKiva_setFootingWallConstruction(self, construction)

    def resetFootingWallConstruction(self):
        return _openstudiomodelgeometry.FoundationKiva_resetFootingWallConstruction(self)

    def setFootingMaterial(self, material):
        return _openstudiomodelgeometry.FoundationKiva_setFootingMaterial(self, material)

    def resetFootingMaterial(self):
        return _openstudiomodelgeometry.FoundationKiva_resetFootingMaterial(self)

    def setFootingDepth(self, footingDepth):
        return _openstudiomodelgeometry.FoundationKiva_setFootingDepth(self, footingDepth)

    def resetFootingDepth(self):
        return _openstudiomodelgeometry.FoundationKiva_resetFootingDepth(self)

# Register FoundationKiva in _openstudiomodelgeometry:
_openstudiomodelgeometry.FoundationKiva_swigregister(FoundationKiva)

def toFoundationKiva(idfObject):
    return _openstudiomodelgeometry.toFoundationKiva(idfObject)

def getFoundationKiva(t_model, t_handle):
    return _openstudiomodelgeometry.getFoundationKiva(t_model, t_handle)

def getFoundationKivas(t_model):
    return _openstudiomodelgeometry.getFoundationKivas(t_model)

def getFoundationKivaByName(t_model, t_name):
    return _openstudiomodelgeometry.getFoundationKivaByName(t_model, t_name)

def getFoundationKivasByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getFoundationKivasByName(t_model, t_name, t_exactMatch)

def _to_FoundationKiva(self) -> OptionalFoundationKiva:
    """Try to cast the ModelObject to a FoundationKiva.

    :return: An Optional FoundationKiva.
    """
    return toFoundationKiva(self)
openstudioutilitiesidf.IdfObject.to_FoundationKiva = _to_FoundationKiva

def _getFoundationKiva(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalFoundationKiva:
    """Try to get an object of type FoundationKiva referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional FoundationKiva.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getFoundationKiva(self, t_handle)
Model.getFoundationKiva = _getFoundationKiva

def _getFoundationKivas(self) -> FoundationKivaVector:
    """Get a vector of all objects of type FoundationKiva in the model.

    :return: A vector of FoundationKiva.
    """
    return getFoundationKivas(self)
Model.getFoundationKivas = _getFoundationKivas

def _getFoundationKivaByName(self, t_name: str) -> OptionalFoundationKiva:
    """Try to get an object of type FoundationKiva that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional FoundationKiva.
    """
    return getFoundationKivaByName(self, t_name)
Model.getFoundationKivaByName = _getFoundationKivaByName

def _getFoundationKivasByName(self, t_name: str, t_exactMatch: bool) -> FoundationKivaVector:
    """Returns all objects of type FoundationKiva named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getFoundationKivasByName(self, t_name, t_exactMatch)
Model.getFoundationKivasByName = _getFoundationKivasByName

class SurfacePropertyExposedFoundationPerimeter(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_SurfacePropertyExposedFoundationPerimeter

    def __init__(self, *args):
        _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeter_swiginit(self, _openstudiomodelgeometry.new_SurfacePropertyExposedFoundationPerimeter(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeter_iddObjectType()

    def surfaceName(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeter_surfaceName(self)

    def surface(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeter_surface(self)

    def exposedPerimeterCalculationMethod(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeter_exposedPerimeterCalculationMethod(self)

    def totalExposedPerimeter(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeter_totalExposedPerimeter(self)

    def exposedPerimeterFraction(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeter_exposedPerimeterFraction(self)

    def isExposedPerimeterFractionDefaulted(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeter_isExposedPerimeterFractionDefaulted(self)

    def setExposedPerimeterCalculationMethod(self, exposedPerimeterCalculationMethod):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeter_setExposedPerimeterCalculationMethod(self, exposedPerimeterCalculationMethod)

    def setTotalExposedPerimeter(self, totalExposedPerimeter):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeter_setTotalExposedPerimeter(self, totalExposedPerimeter)

    def setExposedPerimeterFraction(self, exposedPerimeterFraction):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeter_setExposedPerimeterFraction(self, exposedPerimeterFraction)

    def resetExposedPerimeterFraction(self):
        return _openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeter_resetExposedPerimeterFraction(self)

# Register SurfacePropertyExposedFoundationPerimeter in _openstudiomodelgeometry:
_openstudiomodelgeometry.SurfacePropertyExposedFoundationPerimeter_swigregister(SurfacePropertyExposedFoundationPerimeter)

def toSurfacePropertyExposedFoundationPerimeter(idfObject):
    return _openstudiomodelgeometry.toSurfacePropertyExposedFoundationPerimeter(idfObject)

def getSurfacePropertyExposedFoundationPerimeter(t_model, t_handle):
    return _openstudiomodelgeometry.getSurfacePropertyExposedFoundationPerimeter(t_model, t_handle)

def getSurfacePropertyExposedFoundationPerimeters(t_model):
    return _openstudiomodelgeometry.getSurfacePropertyExposedFoundationPerimeters(t_model)

def getSurfacePropertyExposedFoundationPerimeterByName(t_model, t_name):
    return _openstudiomodelgeometry.getSurfacePropertyExposedFoundationPerimeterByName(t_model, t_name)

def getSurfacePropertyExposedFoundationPerimetersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getSurfacePropertyExposedFoundationPerimetersByName(t_model, t_name, t_exactMatch)

def _to_SurfacePropertyExposedFoundationPerimeter(self) -> OptionalSurfacePropertyExposedFoundationPerimeter:
    """Try to cast the ModelObject to a SurfacePropertyExposedFoundationPerimeter.

    :return: An Optional SurfacePropertyExposedFoundationPerimeter.
    """
    return toSurfacePropertyExposedFoundationPerimeter(self)
openstudioutilitiesidf.IdfObject.to_SurfacePropertyExposedFoundationPerimeter = _to_SurfacePropertyExposedFoundationPerimeter

def _getSurfacePropertyExposedFoundationPerimeter(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSurfacePropertyExposedFoundationPerimeter:
    """Try to get an object of type SurfacePropertyExposedFoundationPerimeter referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional SurfacePropertyExposedFoundationPerimeter.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSurfacePropertyExposedFoundationPerimeter(self, t_handle)
Model.getSurfacePropertyExposedFoundationPerimeter = _getSurfacePropertyExposedFoundationPerimeter

def _getSurfacePropertyExposedFoundationPerimeters(self) -> SurfacePropertyExposedFoundationPerimeterVector:
    """Get a vector of all objects of type SurfacePropertyExposedFoundationPerimeter in the model.

    :return: A vector of SurfacePropertyExposedFoundationPerimeter.
    """
    return getSurfacePropertyExposedFoundationPerimeters(self)
Model.getSurfacePropertyExposedFoundationPerimeters = _getSurfacePropertyExposedFoundationPerimeters

def _getSurfacePropertyExposedFoundationPerimeterByName(self, t_name: str) -> OptionalSurfacePropertyExposedFoundationPerimeter:
    """Try to get an object of type SurfacePropertyExposedFoundationPerimeter that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional SurfacePropertyExposedFoundationPerimeter.
    """
    return getSurfacePropertyExposedFoundationPerimeterByName(self, t_name)
Model.getSurfacePropertyExposedFoundationPerimeterByName = _getSurfacePropertyExposedFoundationPerimeterByName

def _getSurfacePropertyExposedFoundationPerimetersByName(self, t_name: str, t_exactMatch: bool) -> SurfacePropertyExposedFoundationPerimeterVector:
    """Returns all objects of type SurfacePropertyExposedFoundationPerimeter named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSurfacePropertyExposedFoundationPerimetersByName(self, t_name, t_exactMatch)
Model.getSurfacePropertyExposedFoundationPerimetersByName = _getSurfacePropertyExposedFoundationPerimetersByName

class ViewFactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fromSurface, toSurface, viewFactor):
        _openstudiomodelgeometry.ViewFactor_swiginit(self, _openstudiomodelgeometry.new_ViewFactor(fromSurface, toSurface, viewFactor))

    def fromSurface(self):
        return _openstudiomodelgeometry.ViewFactor_fromSurface(self)

    def toSurface(self):
        return _openstudiomodelgeometry.ViewFactor_toSurface(self)

    def viewFactor(self):
        return _openstudiomodelgeometry.ViewFactor_viewFactor(self)

    def __str__(self):
        return _openstudiomodelgeometry.ViewFactor___str__(self)
    __swig_destroy__ = _openstudiomodelgeometry.delete_ViewFactor

# Register ViewFactor in _openstudiomodelgeometry:
_openstudiomodelgeometry.ViewFactor_swigregister(ViewFactor)

def __lshift__(*args):
    return _openstudiomodelgeometry.__lshift__(*args)
class ZonePropertyUserViewFactorsBySurfaceName(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_ZonePropertyUserViewFactorsBySurfaceName

    def __init__(self, *args):
        _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceName_swiginit(self, _openstudiomodelgeometry.new_ZonePropertyUserViewFactorsBySurfaceName(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceName_iddObjectType()

    def thermalZone(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceName_thermalZone(self)

    def viewFactors(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceName_viewFactors(self)

    def numberofViewFactors(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceName_numberofViewFactors(self)

    def viewFactorIndex(self, viewFactor):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceName_viewFactorIndex(self, viewFactor)

    def getViewFactor(self, groupIndex):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceName_getViewFactor(self, groupIndex)

    def addViewFactor(self, *args):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceName_addViewFactor(self, *args)

    def addViewFactors(self, viewFactors):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceName_addViewFactors(self, viewFactors)

    def removeViewFactor(self, groupIndex):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceName_removeViewFactor(self, groupIndex)

    def removeAllViewFactors(self):
        return _openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceName_removeAllViewFactors(self)

# Register ZonePropertyUserViewFactorsBySurfaceName in _openstudiomodelgeometry:
_openstudiomodelgeometry.ZonePropertyUserViewFactorsBySurfaceName_swigregister(ZonePropertyUserViewFactorsBySurfaceName)

def toZonePropertyUserViewFactorsBySurfaceName(idfObject):
    return _openstudiomodelgeometry.toZonePropertyUserViewFactorsBySurfaceName(idfObject)

def getZonePropertyUserViewFactorsBySurfaceName(t_model, t_handle):
    return _openstudiomodelgeometry.getZonePropertyUserViewFactorsBySurfaceName(t_model, t_handle)

def getZonePropertyUserViewFactorsBySurfaceNames(t_model):
    return _openstudiomodelgeometry.getZonePropertyUserViewFactorsBySurfaceNames(t_model)

def getZonePropertyUserViewFactorsBySurfaceNameByName(t_model, t_name):
    return _openstudiomodelgeometry.getZonePropertyUserViewFactorsBySurfaceNameByName(t_model, t_name)

def getZonePropertyUserViewFactorsBySurfaceNamesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getZonePropertyUserViewFactorsBySurfaceNamesByName(t_model, t_name, t_exactMatch)

def _to_ZonePropertyUserViewFactorsBySurfaceName(self) -> OptionalZonePropertyUserViewFactorsBySurfaceName:
    """Try to cast the ModelObject to a ZonePropertyUserViewFactorsBySurfaceName.

    :return: An Optional ZonePropertyUserViewFactorsBySurfaceName.
    """
    return toZonePropertyUserViewFactorsBySurfaceName(self)
openstudioutilitiesidf.IdfObject.to_ZonePropertyUserViewFactorsBySurfaceName = _to_ZonePropertyUserViewFactorsBySurfaceName

def _getZonePropertyUserViewFactorsBySurfaceName(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalZonePropertyUserViewFactorsBySurfaceName:
    """Try to get an object of type ZonePropertyUserViewFactorsBySurfaceName referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ZonePropertyUserViewFactorsBySurfaceName.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getZonePropertyUserViewFactorsBySurfaceName(self, t_handle)
Model.getZonePropertyUserViewFactorsBySurfaceName = _getZonePropertyUserViewFactorsBySurfaceName

def _getZonePropertyUserViewFactorsBySurfaceNames(self) -> ZonePropertyUserViewFactorsBySurfaceNameVector:
    """Get a vector of all objects of type ZonePropertyUserViewFactorsBySurfaceName in the model.

    :return: A vector of ZonePropertyUserViewFactorsBySurfaceName.
    """
    return getZonePropertyUserViewFactorsBySurfaceNames(self)
Model.getZonePropertyUserViewFactorsBySurfaceNames = _getZonePropertyUserViewFactorsBySurfaceNames

def _getZonePropertyUserViewFactorsBySurfaceNameByName(self, t_name: str) -> OptionalZonePropertyUserViewFactorsBySurfaceName:
    """Try to get an object of type ZonePropertyUserViewFactorsBySurfaceName that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ZonePropertyUserViewFactorsBySurfaceName.
    """
    return getZonePropertyUserViewFactorsBySurfaceNameByName(self, t_name)
Model.getZonePropertyUserViewFactorsBySurfaceNameByName = _getZonePropertyUserViewFactorsBySurfaceNameByName

def _getZonePropertyUserViewFactorsBySurfaceNamesByName(self, t_name: str, t_exactMatch: bool) -> ZonePropertyUserViewFactorsBySurfaceNameVector:
    """Returns all objects of type ZonePropertyUserViewFactorsBySurfaceName named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getZonePropertyUserViewFactorsBySurfaceNamesByName(self, t_name, t_exactMatch)
Model.getZonePropertyUserViewFactorsBySurfaceNamesByName = _getZonePropertyUserViewFactorsBySurfaceNamesByName

class ExteriorLoadInstance(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_ExteriorLoadInstance

    def __init__(self, *args):
        _openstudiomodelgeometry.ExteriorLoadInstance_swiginit(self, _openstudiomodelgeometry.new_ExteriorLoadInstance(*args))

    def definition(self):
        return _openstudiomodelgeometry.ExteriorLoadInstance_definition(self)

    def setDefinition(self, definition):
        return _openstudiomodelgeometry.ExteriorLoadInstance_setDefinition(self, definition)

    def makeUnique(self):
        return _openstudiomodelgeometry.ExteriorLoadInstance_makeUnique(self)

    def multiplier(self):
        return _openstudiomodelgeometry.ExteriorLoadInstance_multiplier(self)

    def isMultiplierDefaulted(self):
        return _openstudiomodelgeometry.ExteriorLoadInstance_isMultiplierDefaulted(self)

    def quantity(self):
        return _openstudiomodelgeometry.ExteriorLoadInstance_quantity(self)

# Register ExteriorLoadInstance in _openstudiomodelgeometry:
_openstudiomodelgeometry.ExteriorLoadInstance_swigregister(ExteriorLoadInstance)

def toExteriorLoadInstance(idfObject):
    return _openstudiomodelgeometry.toExteriorLoadInstance(idfObject)

def getExteriorLoadInstance(t_model, t_handle):
    return _openstudiomodelgeometry.getExteriorLoadInstance(t_model, t_handle)

def getExteriorLoadInstances(t_model):
    return _openstudiomodelgeometry.getExteriorLoadInstances(t_model)

def getExteriorLoadInstanceByName(t_model, t_name):
    return _openstudiomodelgeometry.getExteriorLoadInstanceByName(t_model, t_name)

def getExteriorLoadInstancesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getExteriorLoadInstancesByName(t_model, t_name, t_exactMatch)

def _to_ExteriorLoadInstance(self) -> OptionalExteriorLoadInstance:
    """Try to cast the ModelObject to a ExteriorLoadInstance.

    :return: An Optional ExteriorLoadInstance.
    """
    return toExteriorLoadInstance(self)
openstudioutilitiesidf.IdfObject.to_ExteriorLoadInstance = _to_ExteriorLoadInstance

def _getExteriorLoadInstance(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExteriorLoadInstance:
    """Try to get an object of type ExteriorLoadInstance referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExteriorLoadInstance.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExteriorLoadInstance(self, t_handle)
Model.getExteriorLoadInstance = _getExteriorLoadInstance

def _getExteriorLoadInstances(self) -> ExteriorLoadInstanceVector:
    """Get a vector of all objects of type ExteriorLoadInstance in the model.

    :return: A vector of ExteriorLoadInstance.
    """
    return getExteriorLoadInstances(self)
Model.getExteriorLoadInstances = _getExteriorLoadInstances

def _getExteriorLoadInstanceByName(self, t_name: str) -> OptionalExteriorLoadInstance:
    """Try to get an object of type ExteriorLoadInstance that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExteriorLoadInstance.
    """
    return getExteriorLoadInstanceByName(self, t_name)
Model.getExteriorLoadInstanceByName = _getExteriorLoadInstanceByName

def _getExteriorLoadInstancesByName(self, t_name: str, t_exactMatch: bool) -> ExteriorLoadInstanceVector:
    """Returns all objects of type ExteriorLoadInstance named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExteriorLoadInstancesByName(self, t_name, t_exactMatch)
Model.getExteriorLoadInstancesByName = _getExteriorLoadInstancesByName

class ExteriorLights(ExteriorLoadInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_ExteriorLights

    def __init__(self, *args):
        _openstudiomodelgeometry.ExteriorLights_swiginit(self, _openstudiomodelgeometry.new_ExteriorLights(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.ExteriorLights_iddObjectType()

    @staticmethod
    def controlOptionValues():
        return _openstudiomodelgeometry.ExteriorLights_controlOptionValues()

    @staticmethod
    def validControlOptionValues():
        return _openstudiomodelgeometry.ExteriorLights_validControlOptionValues()

    def exteriorLightsDefinition(self):
        return _openstudiomodelgeometry.ExteriorLights_exteriorLightsDefinition(self)

    def schedule(self):
        return _openstudiomodelgeometry.ExteriorLights_schedule(self)

    def controlOption(self):
        return _openstudiomodelgeometry.ExteriorLights_controlOption(self)

    def isControlOptionDefaulted(self):
        return _openstudiomodelgeometry.ExteriorLights_isControlOptionDefaulted(self)

    def multiplier(self):
        return _openstudiomodelgeometry.ExteriorLights_multiplier(self)

    def isMultiplierDefaulted(self):
        return _openstudiomodelgeometry.ExteriorLights_isMultiplierDefaulted(self)

    def endUseSubcategory(self):
        return _openstudiomodelgeometry.ExteriorLights_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelgeometry.ExteriorLights_isEndUseSubcategoryDefaulted(self)

    def setExteriorLightsDefinition(self, exteriorLightsDefinition):
        return _openstudiomodelgeometry.ExteriorLights_setExteriorLightsDefinition(self, exteriorLightsDefinition)

    def setSchedule(self, schedule):
        return _openstudiomodelgeometry.ExteriorLights_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelgeometry.ExteriorLights_resetSchedule(self)

    def setControlOption(self, controlOption):
        return _openstudiomodelgeometry.ExteriorLights_setControlOption(self, controlOption)

    def resetControlOption(self):
        return _openstudiomodelgeometry.ExteriorLights_resetControlOption(self)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.ExteriorLights_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.ExteriorLights_resetMultiplier(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelgeometry.ExteriorLights_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelgeometry.ExteriorLights_resetEndUseSubcategory(self)

    def facility(self):
        return _openstudiomodelgeometry.ExteriorLights_facility(self)

# Register ExteriorLights in _openstudiomodelgeometry:
_openstudiomodelgeometry.ExteriorLights_swigregister(ExteriorLights)

def toExteriorLights(idfObject):
    return _openstudiomodelgeometry.toExteriorLights(idfObject)

def getExteriorLights(t_model, t_handle):
    return _openstudiomodelgeometry.getExteriorLights(t_model, t_handle)

def getExteriorLightss(t_model):
    return _openstudiomodelgeometry.getExteriorLightss(t_model)

def getExteriorLightsByName(t_model, t_name):
    return _openstudiomodelgeometry.getExteriorLightsByName(t_model, t_name)

def getExteriorLightssByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getExteriorLightssByName(t_model, t_name, t_exactMatch)

def _to_ExteriorLights(self) -> OptionalExteriorLights:
    """Try to cast the ModelObject to a ExteriorLights.

    :return: An Optional ExteriorLights.
    """
    return toExteriorLights(self)
openstudioutilitiesidf.IdfObject.to_ExteriorLights = _to_ExteriorLights

def _getExteriorLights(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExteriorLights:
    """Try to get an object of type ExteriorLights referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExteriorLights.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExteriorLights(self, t_handle)
Model.getExteriorLights = _getExteriorLights

def _getExteriorLightss(self) -> ExteriorLightsVector:
    """Get a vector of all objects of type ExteriorLights in the model.

    :return: A vector of ExteriorLights.
    """
    return getExteriorLightss(self)
Model.getExteriorLightss = _getExteriorLightss

def _getExteriorLightsByName(self, t_name: str) -> OptionalExteriorLights:
    """Try to get an object of type ExteriorLights that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExteriorLights.
    """
    return getExteriorLightsByName(self, t_name)
Model.getExteriorLightsByName = _getExteriorLightsByName

def _getExteriorLightssByName(self, t_name: str, t_exactMatch: bool) -> ExteriorLightsVector:
    """Returns all objects of type ExteriorLights named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExteriorLightssByName(self, t_name, t_exactMatch)
Model.getExteriorLightssByName = _getExteriorLightssByName

class ExteriorFuelEquipment(ExteriorLoadInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_ExteriorFuelEquipment

    def __init__(self, *args):
        _openstudiomodelgeometry.ExteriorFuelEquipment_swiginit(self, _openstudiomodelgeometry.new_ExteriorFuelEquipment(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.ExteriorFuelEquipment_iddObjectType()

    @staticmethod
    def fuelTypeValues():
        return _openstudiomodelgeometry.ExteriorFuelEquipment_fuelTypeValues()

    @staticmethod
    def validFuelTypeValues():
        return _openstudiomodelgeometry.ExteriorFuelEquipment_validFuelTypeValues()

    def exteriorFuelEquipmentDefinition(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_exteriorFuelEquipmentDefinition(self)

    def schedule(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_schedule(self)

    def fuelType(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_fuelType(self)

    def multiplier(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_multiplier(self)

    def isMultiplierDefaulted(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_isMultiplierDefaulted(self)

    def endUseSubcategory(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_isEndUseSubcategoryDefaulted(self)

    def setExteriorFuelEquipmentDefinition(self, exteriorFuelEquipmentDefinition):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_setExteriorFuelEquipmentDefinition(self, exteriorFuelEquipmentDefinition)

    def setSchedule(self, schedule):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_resetSchedule(self)

    def setFuelType(self, *args):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_setFuelType(self, *args)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_resetMultiplier(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_resetEndUseSubcategory(self)

    def facility(self):
        return _openstudiomodelgeometry.ExteriorFuelEquipment_facility(self)

# Register ExteriorFuelEquipment in _openstudiomodelgeometry:
_openstudiomodelgeometry.ExteriorFuelEquipment_swigregister(ExteriorFuelEquipment)

def toExteriorFuelEquipment(idfObject):
    return _openstudiomodelgeometry.toExteriorFuelEquipment(idfObject)

def getExteriorFuelEquipment(t_model, t_handle):
    return _openstudiomodelgeometry.getExteriorFuelEquipment(t_model, t_handle)

def getExteriorFuelEquipments(t_model):
    return _openstudiomodelgeometry.getExteriorFuelEquipments(t_model)

def getExteriorFuelEquipmentByName(t_model, t_name):
    return _openstudiomodelgeometry.getExteriorFuelEquipmentByName(t_model, t_name)

def getExteriorFuelEquipmentsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getExteriorFuelEquipmentsByName(t_model, t_name, t_exactMatch)

def _to_ExteriorFuelEquipment(self) -> OptionalExteriorFuelEquipment:
    """Try to cast the ModelObject to a ExteriorFuelEquipment.

    :return: An Optional ExteriorFuelEquipment.
    """
    return toExteriorFuelEquipment(self)
openstudioutilitiesidf.IdfObject.to_ExteriorFuelEquipment = _to_ExteriorFuelEquipment

def _getExteriorFuelEquipment(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExteriorFuelEquipment:
    """Try to get an object of type ExteriorFuelEquipment referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExteriorFuelEquipment.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExteriorFuelEquipment(self, t_handle)
Model.getExteriorFuelEquipment = _getExteriorFuelEquipment

def _getExteriorFuelEquipments(self) -> ExteriorFuelEquipmentVector:
    """Get a vector of all objects of type ExteriorFuelEquipment in the model.

    :return: A vector of ExteriorFuelEquipment.
    """
    return getExteriorFuelEquipments(self)
Model.getExteriorFuelEquipments = _getExteriorFuelEquipments

def _getExteriorFuelEquipmentByName(self, t_name: str) -> OptionalExteriorFuelEquipment:
    """Try to get an object of type ExteriorFuelEquipment that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExteriorFuelEquipment.
    """
    return getExteriorFuelEquipmentByName(self, t_name)
Model.getExteriorFuelEquipmentByName = _getExteriorFuelEquipmentByName

def _getExteriorFuelEquipmentsByName(self, t_name: str, t_exactMatch: bool) -> ExteriorFuelEquipmentVector:
    """Returns all objects of type ExteriorFuelEquipment named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExteriorFuelEquipmentsByName(self, t_name, t_exactMatch)
Model.getExteriorFuelEquipmentsByName = _getExteriorFuelEquipmentsByName

class ExteriorWaterEquipment(ExteriorLoadInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelgeometry.delete_ExteriorWaterEquipment

    def __init__(self, *args):
        _openstudiomodelgeometry.ExteriorWaterEquipment_swiginit(self, _openstudiomodelgeometry.new_ExteriorWaterEquipment(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelgeometry.ExteriorWaterEquipment_iddObjectType()

    def exteriorWaterEquipmentDefinition(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipment_exteriorWaterEquipmentDefinition(self)

    def schedule(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipment_schedule(self)

    def multiplier(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipment_multiplier(self)

    def isMultiplierDefaulted(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipment_isMultiplierDefaulted(self)

    def endUseSubcategory(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipment_endUseSubcategory(self)

    def isEndUseSubcategoryDefaulted(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipment_isEndUseSubcategoryDefaulted(self)

    def setExteriorWaterEquipmentDefinition(self, exteriorWaterEquipmentDefinition):
        return _openstudiomodelgeometry.ExteriorWaterEquipment_setExteriorWaterEquipmentDefinition(self, exteriorWaterEquipmentDefinition)

    def setSchedule(self, schedule):
        return _openstudiomodelgeometry.ExteriorWaterEquipment_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipment_resetSchedule(self)

    def setMultiplier(self, multiplier):
        return _openstudiomodelgeometry.ExteriorWaterEquipment_setMultiplier(self, multiplier)

    def resetMultiplier(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipment_resetMultiplier(self)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelgeometry.ExteriorWaterEquipment_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipment_resetEndUseSubcategory(self)

    def facility(self):
        return _openstudiomodelgeometry.ExteriorWaterEquipment_facility(self)

# Register ExteriorWaterEquipment in _openstudiomodelgeometry:
_openstudiomodelgeometry.ExteriorWaterEquipment_swigregister(ExteriorWaterEquipment)

def toExteriorWaterEquipment(idfObject):
    return _openstudiomodelgeometry.toExteriorWaterEquipment(idfObject)

def getExteriorWaterEquipment(t_model, t_handle):
    return _openstudiomodelgeometry.getExteriorWaterEquipment(t_model, t_handle)

def getExteriorWaterEquipments(t_model):
    return _openstudiomodelgeometry.getExteriorWaterEquipments(t_model)

def getExteriorWaterEquipmentByName(t_model, t_name):
    return _openstudiomodelgeometry.getExteriorWaterEquipmentByName(t_model, t_name)

def getExteriorWaterEquipmentsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelgeometry.getExteriorWaterEquipmentsByName(t_model, t_name, t_exactMatch)

def _to_ExteriorWaterEquipment(self) -> OptionalExteriorWaterEquipment:
    """Try to cast the ModelObject to a ExteriorWaterEquipment.

    :return: An Optional ExteriorWaterEquipment.
    """
    return toExteriorWaterEquipment(self)
openstudioutilitiesidf.IdfObject.to_ExteriorWaterEquipment = _to_ExteriorWaterEquipment

def _getExteriorWaterEquipment(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExteriorWaterEquipment:
    """Try to get an object of type ExteriorWaterEquipment referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExteriorWaterEquipment.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExteriorWaterEquipment(self, t_handle)
Model.getExteriorWaterEquipment = _getExteriorWaterEquipment

def _getExteriorWaterEquipments(self) -> ExteriorWaterEquipmentVector:
    """Get a vector of all objects of type ExteriorWaterEquipment in the model.

    :return: A vector of ExteriorWaterEquipment.
    """
    return getExteriorWaterEquipments(self)
Model.getExteriorWaterEquipments = _getExteriorWaterEquipments

def _getExteriorWaterEquipmentByName(self, t_name: str) -> OptionalExteriorWaterEquipment:
    """Try to get an object of type ExteriorWaterEquipment that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExteriorWaterEquipment.
    """
    return getExteriorWaterEquipmentByName(self, t_name)
Model.getExteriorWaterEquipmentByName = _getExteriorWaterEquipmentByName

def _getExteriorWaterEquipmentsByName(self, t_name: str, t_exactMatch: bool) -> ExteriorWaterEquipmentVector:
    """Returns all objects of type ExteriorWaterEquipment named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExteriorWaterEquipmentsByName(self, t_name, t_exactMatch)
Model.getExteriorWaterEquipmentsByName = _getExteriorWaterEquipmentsByName


