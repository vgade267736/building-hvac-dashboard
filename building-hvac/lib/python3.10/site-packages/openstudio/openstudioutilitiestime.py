# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudioutilitiestime
else:
    import _openstudioutilitiestime

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioutilitiestime.delete_SwigPyIterator

    def value(self):
        return _openstudioutilitiestime.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudioutilitiestime.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudioutilitiestime.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudioutilitiestime.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudioutilitiestime.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudioutilitiestime.SwigPyIterator_copy(self)

    def next(self):
        return _openstudioutilitiestime.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudioutilitiestime.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudioutilitiestime.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudioutilitiestime.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudioutilitiestime.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudioutilitiestime.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudioutilitiestime.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudioutilitiestime.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudioutilitiestime.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudioutilitiestime.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudioutilitiestime:
_openstudioutilitiestime.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudioutilitiestime.SHARED_PTR_DISOWN
from .import openstudioutilitiescore
class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiestime.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiestime.TimeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiestime.TimeVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiestime.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiestime.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiestime.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiestime.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiestime.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiestime.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiestime.TimeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiestime.TimeVector_pop(self)

    def append(self, x):
        return _openstudioutilitiestime.TimeVector_append(self, x)

    def empty(self):
        return _openstudioutilitiestime.TimeVector_empty(self)

    def size(self):
        return _openstudioutilitiestime.TimeVector_size(self)

    def swap(self, v):
        return _openstudioutilitiestime.TimeVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiestime.TimeVector_begin(self)

    def end(self):
        return _openstudioutilitiestime.TimeVector_end(self)

    def rbegin(self):
        return _openstudioutilitiestime.TimeVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiestime.TimeVector_rend(self)

    def clear(self):
        return _openstudioutilitiestime.TimeVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiestime.TimeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiestime.TimeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiestime.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiestime.TimeVector_swiginit(self, _openstudioutilitiestime.new_TimeVector(*args))

    def push_back(self, x):
        return _openstudioutilitiestime.TimeVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiestime.TimeVector_front(self)

    def back(self):
        return _openstudioutilitiestime.TimeVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiestime.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiestime.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiestime.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiestime.TimeVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiestime.TimeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiestime.delete_TimeVector

# Register TimeVector in _openstudioutilitiestime:
_openstudioutilitiestime.TimeVector_swigregister(TimeVector)
class OptionalTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiestime.OptionalTime_swiginit(self, _openstudioutilitiestime.new_OptionalTime(*args))

    def reset(self):
        return _openstudioutilitiestime.OptionalTime_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiestime.OptionalTime___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiestime.OptionalTime___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiestime.OptionalTime_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiestime.OptionalTime_isNull(self)

    def empty(self):
        return _openstudioutilitiestime.OptionalTime_empty(self)

    def get(self):
        return _openstudioutilitiestime.OptionalTime_get(self)

    def set(self, t):
        return _openstudioutilitiestime.OptionalTime_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiestime.OptionalTime_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiestime.delete_OptionalTime

# Register OptionalTime in _openstudioutilitiestime:
_openstudioutilitiestime.OptionalTime_swigregister(OptionalTime)

def floor0(value):
    return _openstudioutilitiestime.floor0(value)
class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def currentTime():
        return _openstudioutilitiestime.Time_currentTime()

    @staticmethod
    def currentTimeUTC():
        return _openstudioutilitiestime.Time_currentTimeUTC()

    def __init__(self, *args):
        _openstudioutilitiestime.Time_swiginit(self, _openstudioutilitiestime.new_Time(*args))

    def __add__(self, time):
        return _openstudioutilitiestime.Time___add__(self, time)

    def __iadd__(self, time):
        return _openstudioutilitiestime.Time___iadd__(self, time)

    def __sub__(self, time):
        return _openstudioutilitiestime.Time___sub__(self, time)

    def __isub__(self, time):
        return _openstudioutilitiestime.Time___isub__(self, time)

    def __mul__(self, mult):
        return _openstudioutilitiestime.Time___mul__(self, mult)

    def __truediv__(self, *args):
        return _openstudioutilitiestime.Time___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, other):
        return _openstudioutilitiestime.Time___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiestime.Time___ne__(self, other)

    def __lt__(self, rhs):
        return _openstudioutilitiestime.Time___lt__(self, rhs)

    def __le__(self, rhs):
        return _openstudioutilitiestime.Time___le__(self, rhs)

    def __gt__(self, rhs):
        return _openstudioutilitiestime.Time___gt__(self, rhs)

    def __ge__(self, rhs):
        return _openstudioutilitiestime.Time___ge__(self, rhs)

    def days(self):
        return _openstudioutilitiestime.Time_days(self)

    def hours(self):
        return _openstudioutilitiestime.Time_hours(self)

    def minutes(self):
        return _openstudioutilitiestime.Time_minutes(self)

    def seconds(self):
        return _openstudioutilitiestime.Time_seconds(self)

    def totalDays(self):
        return _openstudioutilitiestime.Time_totalDays(self)

    def totalHours(self):
        return _openstudioutilitiestime.Time_totalHours(self)

    def totalMinutes(self):
        return _openstudioutilitiestime.Time_totalMinutes(self)

    def totalSeconds(self):
        return _openstudioutilitiestime.Time_totalSeconds(self)

    def toString(self):
        return _openstudioutilitiestime.Time_toString(self)

    def __str__(self):
        return _openstudioutilitiestime.Time___str__(self)

    def __hash__(self):
        return _openstudioutilitiestime.Time___hash__(self)

    def __cmp__(self, other):
        return _openstudioutilitiestime.Time___cmp__(self, other)
    __swig_destroy__ = _openstudioutilitiestime.delete_Time

# Register Time in _openstudioutilitiestime:
_openstudioutilitiestime.Time_swigregister(Time)
cvar = _openstudioutilitiestime.cvar
HOURS_PER_DAY = cvar.HOURS_PER_DAY
MINUTES_PER_HOUR = cvar.MINUTES_PER_HOUR
SECONDS_PER_MINUTE = cvar.SECONDS_PER_MINUTE
MINUTES_PER_SECOND = cvar.MINUTES_PER_SECOND
HOURS_PER_SECOND = cvar.HOURS_PER_SECOND
DAYS_PER_SECOND = cvar.DAYS_PER_SECOND

class TimeCompare(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, lhs, rhs):
        return _openstudioutilitiestime.TimeCompare___call__(self, lhs, rhs)

    def __init__(self):
        _openstudioutilitiestime.TimeCompare_swiginit(self, _openstudioutilitiestime.new_TimeCompare())
    __swig_destroy__ = _openstudioutilitiestime.delete_TimeCompare

# Register TimeCompare in _openstudioutilitiestime:
_openstudioutilitiestime.TimeCompare_swigregister(TimeCompare)
class DateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiestime.DateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiestime.DateVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiestime.DateVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiestime.DateVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiestime.DateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiestime.DateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiestime.DateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiestime.DateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiestime.DateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiestime.DateVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiestime.DateVector_pop(self)

    def append(self, x):
        return _openstudioutilitiestime.DateVector_append(self, x)

    def empty(self):
        return _openstudioutilitiestime.DateVector_empty(self)

    def size(self):
        return _openstudioutilitiestime.DateVector_size(self)

    def swap(self, v):
        return _openstudioutilitiestime.DateVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiestime.DateVector_begin(self)

    def end(self):
        return _openstudioutilitiestime.DateVector_end(self)

    def rbegin(self):
        return _openstudioutilitiestime.DateVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiestime.DateVector_rend(self)

    def clear(self):
        return _openstudioutilitiestime.DateVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiestime.DateVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiestime.DateVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiestime.DateVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiestime.DateVector_swiginit(self, _openstudioutilitiestime.new_DateVector(*args))

    def push_back(self, x):
        return _openstudioutilitiestime.DateVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiestime.DateVector_front(self)

    def back(self):
        return _openstudioutilitiestime.DateVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiestime.DateVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiestime.DateVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiestime.DateVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiestime.DateVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiestime.DateVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiestime.delete_DateVector

# Register DateVector in _openstudioutilitiestime:
_openstudioutilitiestime.DateVector_swigregister(DateVector)
class OptionalDate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiestime.OptionalDate_swiginit(self, _openstudioutilitiestime.new_OptionalDate(*args))

    def reset(self):
        return _openstudioutilitiestime.OptionalDate_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiestime.OptionalDate___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiestime.OptionalDate___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiestime.OptionalDate_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiestime.OptionalDate_isNull(self)

    def empty(self):
        return _openstudioutilitiestime.OptionalDate_empty(self)

    def get(self):
        return _openstudioutilitiestime.OptionalDate_get(self)

    def set(self, t):
        return _openstudioutilitiestime.OptionalDate_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiestime.OptionalDate_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiestime.delete_OptionalDate

# Register OptionalDate in _openstudioutilitiestime:
_openstudioutilitiestime.OptionalDate_swigregister(OptionalDate)
class OptionalDayOfWeek(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiestime.OptionalDayOfWeek_swiginit(self, _openstudioutilitiestime.new_OptionalDayOfWeek(*args))

    def reset(self):
        return _openstudioutilitiestime.OptionalDayOfWeek_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiestime.OptionalDayOfWeek___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiestime.OptionalDayOfWeek___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiestime.OptionalDayOfWeek_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiestime.OptionalDayOfWeek_isNull(self)

    def empty(self):
        return _openstudioutilitiestime.OptionalDayOfWeek_empty(self)

    def get(self):
        return _openstudioutilitiestime.OptionalDayOfWeek_get(self)

    def set(self, t):
        return _openstudioutilitiestime.OptionalDayOfWeek_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiestime.OptionalDayOfWeek_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiestime.delete_OptionalDayOfWeek

# Register OptionalDayOfWeek in _openstudioutilitiestime:
_openstudioutilitiestime.OptionalDayOfWeek_swigregister(OptionalDayOfWeek)
class OptionalMonthOfYear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiestime.OptionalMonthOfYear_swiginit(self, _openstudioutilitiestime.new_OptionalMonthOfYear(*args))

    def reset(self):
        return _openstudioutilitiestime.OptionalMonthOfYear_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiestime.OptionalMonthOfYear___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiestime.OptionalMonthOfYear___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiestime.OptionalMonthOfYear_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiestime.OptionalMonthOfYear_isNull(self)

    def empty(self):
        return _openstudioutilitiestime.OptionalMonthOfYear_empty(self)

    def get(self):
        return _openstudioutilitiestime.OptionalMonthOfYear_get(self)

    def set(self, t):
        return _openstudioutilitiestime.OptionalMonthOfYear_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiestime.OptionalMonthOfYear_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiestime.delete_OptionalMonthOfYear

# Register OptionalMonthOfYear in _openstudioutilitiestime:
_openstudioutilitiestime.OptionalMonthOfYear_swigregister(OptionalMonthOfYear)
class OptionalNthDayOfWeekInMonth(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiestime.OptionalNthDayOfWeekInMonth_swiginit(self, _openstudioutilitiestime.new_OptionalNthDayOfWeekInMonth(*args))

    def reset(self):
        return _openstudioutilitiestime.OptionalNthDayOfWeekInMonth_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiestime.OptionalNthDayOfWeekInMonth___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiestime.OptionalNthDayOfWeekInMonth___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiestime.OptionalNthDayOfWeekInMonth_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiestime.OptionalNthDayOfWeekInMonth_isNull(self)

    def empty(self):
        return _openstudioutilitiestime.OptionalNthDayOfWeekInMonth_empty(self)

    def get(self):
        return _openstudioutilitiestime.OptionalNthDayOfWeekInMonth_get(self)

    def set(self, t):
        return _openstudioutilitiestime.OptionalNthDayOfWeekInMonth_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiestime.OptionalNthDayOfWeekInMonth_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiestime.delete_OptionalNthDayOfWeekInMonth

# Register OptionalNthDayOfWeekInMonth in _openstudioutilitiestime:
_openstudioutilitiestime.OptionalNthDayOfWeekInMonth_swigregister(OptionalNthDayOfWeekInMonth)
class DayOfWeek(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiestime.DayOfWeek_swiginit(self, _openstudioutilitiestime.new_DayOfWeek(*args))

    def valueName(self):
        return _openstudioutilitiestime.DayOfWeek_valueName(self)

    def value(self):
        return _openstudioutilitiestime.DayOfWeek_value(self)

    def valueDescription(self):
        return _openstudioutilitiestime.DayOfWeek_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiestime.DayOfWeek___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiestime.DayOfWeek___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiestime.DayOfWeek___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiestime.DayOfWeek___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiestime.DayOfWeek___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiestime.DayOfWeek___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiestime.DayOfWeek_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiestime.DayOfWeek_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiestime.DayOfWeek_getLookupMap()

    def __str__(self):
        return _openstudioutilitiestime.DayOfWeek___str__(self)
    __swig_destroy__ = _openstudioutilitiestime.delete_DayOfWeek

# Register DayOfWeek in _openstudioutilitiestime:
_openstudioutilitiestime.DayOfWeek_swigregister(DayOfWeek)

def dayOfWeek(day):
    return _openstudioutilitiestime.dayOfWeek(day)
class MonthOfYear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiestime.MonthOfYear_swiginit(self, _openstudioutilitiestime.new_MonthOfYear(*args))

    def valueName(self):
        return _openstudioutilitiestime.MonthOfYear_valueName(self)

    def value(self):
        return _openstudioutilitiestime.MonthOfYear_value(self)

    def valueDescription(self):
        return _openstudioutilitiestime.MonthOfYear_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiestime.MonthOfYear___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiestime.MonthOfYear___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiestime.MonthOfYear___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiestime.MonthOfYear___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiestime.MonthOfYear___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiestime.MonthOfYear___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiestime.MonthOfYear_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiestime.MonthOfYear_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiestime.MonthOfYear_getLookupMap()

    def __str__(self):
        return _openstudioutilitiestime.MonthOfYear___str__(self)
    __swig_destroy__ = _openstudioutilitiestime.delete_MonthOfYear

# Register MonthOfYear in _openstudioutilitiestime:
_openstudioutilitiestime.MonthOfYear_swigregister(MonthOfYear)

def monthOfYear(*args):
    return _openstudioutilitiestime.monthOfYear(*args)

def month(monthOfYear):
    return _openstudioutilitiestime.month(monthOfYear)
class NthDayOfWeekInMonth(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiestime.NthDayOfWeekInMonth_swiginit(self, _openstudioutilitiestime.new_NthDayOfWeekInMonth(*args))

    def valueName(self):
        return _openstudioutilitiestime.NthDayOfWeekInMonth_valueName(self)

    def value(self):
        return _openstudioutilitiestime.NthDayOfWeekInMonth_value(self)

    def valueDescription(self):
        return _openstudioutilitiestime.NthDayOfWeekInMonth_valueDescription(self)

    def __eq__(self, other):
        return _openstudioutilitiestime.NthDayOfWeekInMonth___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiestime.NthDayOfWeekInMonth___ne__(self, other)

    def __gt__(self, other):
        return _openstudioutilitiestime.NthDayOfWeekInMonth___gt__(self, other)

    def __ge__(self, other):
        return _openstudioutilitiestime.NthDayOfWeekInMonth___ge__(self, other)

    def __lt__(self, other):
        return _openstudioutilitiestime.NthDayOfWeekInMonth___lt__(self, other)

    def __le__(self, other):
        return _openstudioutilitiestime.NthDayOfWeekInMonth___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioutilitiestime.NthDayOfWeekInMonth_enumName()

    @staticmethod
    def getValues():
        return _openstudioutilitiestime.NthDayOfWeekInMonth_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioutilitiestime.NthDayOfWeekInMonth_getLookupMap()

    def __str__(self):
        return _openstudioutilitiestime.NthDayOfWeekInMonth___str__(self)
    __swig_destroy__ = _openstudioutilitiestime.delete_NthDayOfWeekInMonth

# Register NthDayOfWeekInMonth in _openstudioutilitiestime:
_openstudioutilitiestime.NthDayOfWeekInMonth_swigregister(NthDayOfWeekInMonth)
class YearDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioutilitiestime.YearDescription_swiginit(self, _openstudioutilitiestime.new_YearDescription())

    def assumedYear(self):
        return _openstudioutilitiestime.YearDescription_assumedYear(self)
    isLeapYear = property(_openstudioutilitiestime.YearDescription_isLeapYear_get, _openstudioutilitiestime.YearDescription_isLeapYear_set)
    yearStartsOnDayOfWeek = property(_openstudioutilitiestime.YearDescription_yearStartsOnDayOfWeek_get, _openstudioutilitiestime.YearDescription_yearStartsOnDayOfWeek_set)
    lookInFuture = property(_openstudioutilitiestime.YearDescription_lookInFuture_get, _openstudioutilitiestime.YearDescription_lookInFuture_set)
    __swig_destroy__ = _openstudioutilitiestime.delete_YearDescription

# Register YearDescription in _openstudioutilitiestime:
_openstudioutilitiestime.YearDescription_swigregister(YearDescription)
class Date(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def logChannel():
        return _openstudioutilitiestime.Date_logChannel()

    @staticmethod
    def fromNthDayOfMonth(*args):
        return _openstudioutilitiestime.Date_fromNthDayOfMonth(*args)

    @staticmethod
    def fromDayOfYear(*args):
        return _openstudioutilitiestime.Date_fromDayOfYear(*args)

    @staticmethod
    def currentDate():
        return _openstudioutilitiestime.Date_currentDate()
    __swig_destroy__ = _openstudioutilitiestime.delete_Date

    def __init__(self, *args):
        _openstudioutilitiestime.Date_swiginit(self, _openstudioutilitiestime.new_Date(*args))

    def __add__(self, time):
        return _openstudioutilitiestime.Date___add__(self, time)

    def __iadd__(self, time):
        return _openstudioutilitiestime.Date___iadd__(self, time)

    def __isub__(self, time):
        return _openstudioutilitiestime.Date___isub__(self, time)

    def __sub__(self, *args):
        return _openstudioutilitiestime.Date___sub__(self, *args)

    def __eq__(self, other):
        return _openstudioutilitiestime.Date___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiestime.Date___ne__(self, other)

    def __lt__(self, rhs):
        return _openstudioutilitiestime.Date___lt__(self, rhs)

    def __le__(self, rhs):
        return _openstudioutilitiestime.Date___le__(self, rhs)

    def __gt__(self, rhs):
        return _openstudioutilitiestime.Date___gt__(self, rhs)

    def __ge__(self, rhs):
        return _openstudioutilitiestime.Date___ge__(self, rhs)

    def baseYear(self, *args):
        return _openstudioutilitiestime.Date_baseYear(self, *args)

    def assumedBaseYear(self):
        return _openstudioutilitiestime.Date_assumedBaseYear(self)

    def year(self):
        return _openstudioutilitiestime.Date_year(self)

    def monthOfYear(self):
        return _openstudioutilitiestime.Date_monthOfYear(self)

    def dayOfMonth(self):
        return _openstudioutilitiestime.Date_dayOfMonth(self)

    def dayOfYear(self):
        return _openstudioutilitiestime.Date_dayOfYear(self)

    def isLeapYear(self, *args):
        return _openstudioutilitiestime.Date_isLeapYear(self, *args)

    def dayOfWeek(self):
        return _openstudioutilitiestime.Date_dayOfWeek(self)

    def __str__(self):
        return _openstudioutilitiestime.Date___str__(self)

    def __hash__(self):
        return _openstudioutilitiestime.Date___hash__(self)

    def __cmp__(self, other):
        return _openstudioutilitiestime.Date___cmp__(self, other)

# Register Date in _openstudioutilitiestime:
_openstudioutilitiestime.Date_swigregister(Date)
class DateCompare(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, lhs, rhs):
        return _openstudioutilitiestime.DateCompare___call__(self, lhs, rhs)

    def __init__(self):
        _openstudioutilitiestime.DateCompare_swiginit(self, _openstudioutilitiestime.new_DateCompare())
    __swig_destroy__ = _openstudioutilitiestime.delete_DateCompare

# Register DateCompare in _openstudioutilitiestime:
_openstudioutilitiestime.DateCompare_swigregister(DateCompare)

def nthDayOfWeekInMonth(*args):
    return _openstudioutilitiestime.nthDayOfWeekInMonth(*args)
class DateTimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiestime.DateTimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiestime.DateTimeVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiestime.DateTimeVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiestime.DateTimeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiestime.DateTimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiestime.DateTimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiestime.DateTimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiestime.DateTimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiestime.DateTimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiestime.DateTimeVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiestime.DateTimeVector_pop(self)

    def append(self, x):
        return _openstudioutilitiestime.DateTimeVector_append(self, x)

    def empty(self):
        return _openstudioutilitiestime.DateTimeVector_empty(self)

    def size(self):
        return _openstudioutilitiestime.DateTimeVector_size(self)

    def swap(self, v):
        return _openstudioutilitiestime.DateTimeVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiestime.DateTimeVector_begin(self)

    def end(self):
        return _openstudioutilitiestime.DateTimeVector_end(self)

    def rbegin(self):
        return _openstudioutilitiestime.DateTimeVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiestime.DateTimeVector_rend(self)

    def clear(self):
        return _openstudioutilitiestime.DateTimeVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiestime.DateTimeVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiestime.DateTimeVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiestime.DateTimeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiestime.DateTimeVector_swiginit(self, _openstudioutilitiestime.new_DateTimeVector(*args))

    def push_back(self, x):
        return _openstudioutilitiestime.DateTimeVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiestime.DateTimeVector_front(self)

    def back(self):
        return _openstudioutilitiestime.DateTimeVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiestime.DateTimeVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiestime.DateTimeVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiestime.DateTimeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiestime.DateTimeVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiestime.DateTimeVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiestime.delete_DateTimeVector

# Register DateTimeVector in _openstudioutilitiestime:
_openstudioutilitiestime.DateTimeVector_swigregister(DateTimeVector)
class DateTimePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiestime.DateTimePair_swiginit(self, _openstudioutilitiestime.new_DateTimePair(*args))
    first = property(_openstudioutilitiestime.DateTimePair_first_get, _openstudioutilitiestime.DateTimePair_first_set)
    second = property(_openstudioutilitiestime.DateTimePair_second_get, _openstudioutilitiestime.DateTimePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _openstudioutilitiestime.delete_DateTimePair

# Register DateTimePair in _openstudioutilitiestime:
_openstudioutilitiestime.DateTimePair_swigregister(DateTimePair)
class OptionalDateTimePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiestime.OptionalDateTimePair_swiginit(self, _openstudioutilitiestime.new_OptionalDateTimePair(*args))

    def reset(self):
        return _openstudioutilitiestime.OptionalDateTimePair_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiestime.OptionalDateTimePair___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiestime.OptionalDateTimePair___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiestime.OptionalDateTimePair_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiestime.OptionalDateTimePair_isNull(self)

    def empty(self):
        return _openstudioutilitiestime.OptionalDateTimePair_empty(self)

    def get(self):
        return _openstudioutilitiestime.OptionalDateTimePair_get(self)

    def set(self, t):
        return _openstudioutilitiestime.OptionalDateTimePair_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiestime.OptionalDateTimePair_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiestime.delete_OptionalDateTimePair

# Register OptionalDateTimePair in _openstudioutilitiestime:
_openstudioutilitiestime.OptionalDateTimePair_swigregister(OptionalDateTimePair)
class OptionalDateTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiestime.OptionalDateTime_swiginit(self, _openstudioutilitiestime.new_OptionalDateTime(*args))

    def reset(self):
        return _openstudioutilitiestime.OptionalDateTime_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiestime.OptionalDateTime___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiestime.OptionalDateTime___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiestime.OptionalDateTime_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiestime.OptionalDateTime_isNull(self)

    def empty(self):
        return _openstudioutilitiestime.OptionalDateTime_empty(self)

    def get(self):
        return _openstudioutilitiestime.OptionalDateTime_get(self)

    def set(self, t):
        return _openstudioutilitiestime.OptionalDateTime_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiestime.OptionalDateTime_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiestime.delete_OptionalDateTime

# Register OptionalDateTime in _openstudioutilitiestime:
_openstudioutilitiestime.OptionalDateTime_swigregister(OptionalDateTime)
class DateTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def logChannel():
        return _openstudioutilitiestime.DateTime_logChannel()

    @staticmethod
    def now():
        return _openstudioutilitiestime.DateTime_now()

    @staticmethod
    def nowUTC():
        return _openstudioutilitiestime.DateTime_nowUTC()

    @staticmethod
    def localOffsetUTC():
        return _openstudioutilitiestime.DateTime_localOffsetUTC()

    def __init__(self, *args):
        _openstudioutilitiestime.DateTime_swiginit(self, _openstudioutilitiestime.new_DateTime(*args))

    def __add__(self, time):
        return _openstudioutilitiestime.DateTime___add__(self, time)

    def __iadd__(self, time):
        return _openstudioutilitiestime.DateTime___iadd__(self, time)

    def __isub__(self, time):
        return _openstudioutilitiestime.DateTime___isub__(self, time)

    def __sub__(self, *args):
        return _openstudioutilitiestime.DateTime___sub__(self, *args)

    def __eq__(self, other):
        return _openstudioutilitiestime.DateTime___eq__(self, other)

    def __ne__(self, other):
        return _openstudioutilitiestime.DateTime___ne__(self, other)

    def __lt__(self, rhs):
        return _openstudioutilitiestime.DateTime___lt__(self, rhs)

    def __le__(self, rhs):
        return _openstudioutilitiestime.DateTime___le__(self, rhs)

    def __gt__(self, rhs):
        return _openstudioutilitiestime.DateTime___gt__(self, rhs)

    def __ge__(self, rhs):
        return _openstudioutilitiestime.DateTime___ge__(self, rhs)

    def date(self):
        return _openstudioutilitiestime.DateTime_date(self)

    def time(self):
        return _openstudioutilitiestime.DateTime_time(self)

    def utcOffset(self):
        return _openstudioutilitiestime.DateTime_utcOffset(self)

    def toString(self):
        return _openstudioutilitiestime.DateTime_toString(self)

    def toISO8601(self):
        return _openstudioutilitiestime.DateTime_toISO8601(self)

    def toXsdDateTime(self):
        return _openstudioutilitiestime.DateTime_toXsdDateTime(self)

    def toEpoch(self):
        return _openstudioutilitiestime.DateTime_toEpoch(self)

    @staticmethod
    def fromISO8601(str):
        return _openstudioutilitiestime.DateTime_fromISO8601(str)

    @staticmethod
    def fromXsdDateTime(str):
        return _openstudioutilitiestime.DateTime_fromXsdDateTime(str)

    @staticmethod
    def fromEpoch(time):
        return _openstudioutilitiestime.DateTime_fromEpoch(time)

    def __str__(self):
        return _openstudioutilitiestime.DateTime___str__(self)

    def __hash__(self):
        return _openstudioutilitiestime.DateTime___hash__(self)

    def __cmp__(self, other):
        return _openstudioutilitiestime.DateTime___cmp__(self, other)
    __swig_destroy__ = _openstudioutilitiestime.delete_DateTime

# Register DateTime in _openstudioutilitiestime:
_openstudioutilitiestime.DateTime_swigregister(DateTime)

def __lshift__(*args):
    return _openstudioutilitiestime.__lshift__(*args)
class CalendarVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioutilitiestime.CalendarVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioutilitiestime.CalendarVector___nonzero__(self)

    def __bool__(self):
        return _openstudioutilitiestime.CalendarVector___bool__(self)

    def __len__(self):
        return _openstudioutilitiestime.CalendarVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioutilitiestime.CalendarVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioutilitiestime.CalendarVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioutilitiestime.CalendarVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioutilitiestime.CalendarVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioutilitiestime.CalendarVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioutilitiestime.CalendarVector___setitem__(self, *args)

    def pop(self):
        return _openstudioutilitiestime.CalendarVector_pop(self)

    def append(self, x):
        return _openstudioutilitiestime.CalendarVector_append(self, x)

    def empty(self):
        return _openstudioutilitiestime.CalendarVector_empty(self)

    def size(self):
        return _openstudioutilitiestime.CalendarVector_size(self)

    def swap(self, v):
        return _openstudioutilitiestime.CalendarVector_swap(self, v)

    def begin(self):
        return _openstudioutilitiestime.CalendarVector_begin(self)

    def end(self):
        return _openstudioutilitiestime.CalendarVector_end(self)

    def rbegin(self):
        return _openstudioutilitiestime.CalendarVector_rbegin(self)

    def rend(self):
        return _openstudioutilitiestime.CalendarVector_rend(self)

    def clear(self):
        return _openstudioutilitiestime.CalendarVector_clear(self)

    def get_allocator(self):
        return _openstudioutilitiestime.CalendarVector_get_allocator(self)

    def pop_back(self):
        return _openstudioutilitiestime.CalendarVector_pop_back(self)

    def erase(self, *args):
        return _openstudioutilitiestime.CalendarVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioutilitiestime.CalendarVector_swiginit(self, _openstudioutilitiestime.new_CalendarVector(*args))

    def push_back(self, x):
        return _openstudioutilitiestime.CalendarVector_push_back(self, x)

    def front(self):
        return _openstudioutilitiestime.CalendarVector_front(self)

    def back(self):
        return _openstudioutilitiestime.CalendarVector_back(self)

    def assign(self, n, x):
        return _openstudioutilitiestime.CalendarVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudioutilitiestime.CalendarVector_resize(self, *args)

    def insert(self, *args):
        return _openstudioutilitiestime.CalendarVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioutilitiestime.CalendarVector_reserve(self, n)

    def capacity(self):
        return _openstudioutilitiestime.CalendarVector_capacity(self)
    __swig_destroy__ = _openstudioutilitiestime.delete_CalendarVector

# Register CalendarVector in _openstudioutilitiestime:
_openstudioutilitiestime.CalendarVector_swigregister(CalendarVector)
class OptionalCalendar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioutilitiestime.OptionalCalendar_swiginit(self, _openstudioutilitiestime.new_OptionalCalendar(*args))

    def reset(self):
        return _openstudioutilitiestime.OptionalCalendar_reset(self)

    def __nonzero__(self):
        return _openstudioutilitiestime.OptionalCalendar___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioutilitiestime.OptionalCalendar___ref__(self)

    def is_initialized(self):
        return _openstudioutilitiestime.OptionalCalendar_is_initialized(self)

    def isNull(self):
        return _openstudioutilitiestime.OptionalCalendar_isNull(self)

    def empty(self):
        return _openstudioutilitiestime.OptionalCalendar_empty(self)

    def get(self):
        return _openstudioutilitiestime.OptionalCalendar_get(self)

    def set(self, t):
        return _openstudioutilitiestime.OptionalCalendar_set(self, t)

    def value_or(self, default_value):
        return _openstudioutilitiestime.OptionalCalendar_value_or(self, default_value)
    __swig_destroy__ = _openstudioutilitiestime.delete_OptionalCalendar

# Register OptionalCalendar in _openstudioutilitiestime:
_openstudioutilitiestime.OptionalCalendar_swigregister(OptionalCalendar)
class Calendar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def logChannel():
        return _openstudioutilitiestime.Calendar_logChannel()

    def __init__(self, *args):
        _openstudioutilitiestime.Calendar_swiginit(self, _openstudioutilitiestime.new_Calendar(*args))

    def standardDaylightSavings(self):
        return _openstudioutilitiestime.Calendar_standardDaylightSavings(self)

    def standardHolidays(self):
        return _openstudioutilitiestime.Calendar_standardHolidays(self)

    def daylightSavings(self, daylightSavingsStart, daylightSavingsEnd):
        return _openstudioutilitiestime.Calendar_daylightSavings(self, daylightSavingsStart, daylightSavingsEnd)

    def addHoliday(self, date, name):
        return _openstudioutilitiestime.Calendar_addHoliday(self, date, name)

    def addNamedDay(self, date, name):
        return _openstudioutilitiestime.Calendar_addNamedDay(self, date, name)

    def includesDate(self, date):
        return _openstudioutilitiestime.Calendar_includesDate(self, date)

    def isDaylightSavings(self, date):
        return _openstudioutilitiestime.Calendar_isDaylightSavings(self, date)

    def isHoliday(self, date):
        return _openstudioutilitiestime.Calendar_isHoliday(self, date)

    def isNamedDay(self, date):
        return _openstudioutilitiestime.Calendar_isNamedDay(self, date)

    def getName(self, date):
        return _openstudioutilitiestime.Calendar_getName(self, date)

    def startDate(self):
        return _openstudioutilitiestime.Calendar_startDate(self)

    def endDate(self):
        return _openstudioutilitiestime.Calendar_endDate(self)
    __swig_destroy__ = _openstudioutilitiestime.delete_Calendar

# Register Calendar in _openstudioutilitiestime:
_openstudioutilitiestime.Calendar_swigregister(Calendar)

