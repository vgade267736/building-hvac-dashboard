# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelairflow
else:
    import _openstudiomodelairflow

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_SwigPyIterator

    def value(self):
        return _openstudiomodelairflow.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudiomodelairflow.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudiomodelairflow.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudiomodelairflow.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudiomodelairflow.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudiomodelairflow.SwigPyIterator_copy(self)

    def next(self):
        return _openstudiomodelairflow.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudiomodelairflow.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudiomodelairflow.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudiomodelairflow.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudiomodelairflow.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudiomodelairflow.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudiomodelairflow.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudiomodelairflow.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudiomodelairflow.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudiomodelairflow.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelairflow:
_openstudiomodelairflow.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudiomodelairflow.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudioutilitiesxml

# Import common modules
import typing
import warnings

from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources
from .import openstudiomodelgeometry
from .import openstudiomodelhvac
from .import openstudiomodelstraightcomponent
from .import openstudiomodelzonehvac

Model = openstudiomodelcore.Model

class AirflowNetworkComponentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkComponentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkComponentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkComponentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkComponentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkComponentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkComponentVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkComponentVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkComponentVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkComponentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkComponentVector

# Register AirflowNetworkComponentVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkComponentVector_swigregister(AirflowNetworkComponentVector)
class OptionalAirflowNetworkComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkComponent_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkComponent(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkComponent_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkComponent___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkComponent___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkComponent_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkComponent_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkComponent_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkComponent_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkComponent_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkComponent_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkComponent

# Register OptionalAirflowNetworkComponent in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkComponent_swigregister(OptionalAirflowNetworkComponent)
class AirflowNetworkNodeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkNodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkNodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkNodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkNodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkNodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkNodeVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkNodeVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkNodeVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkNodeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkNodeVector

# Register AirflowNetworkNodeVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkNodeVector_swigregister(AirflowNetworkNodeVector)
class OptionalAirflowNetworkNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkNode_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkNode(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkNode_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkNode___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkNode___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkNode_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkNode_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkNode_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkNode_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkNode_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkNode_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkNode

# Register OptionalAirflowNetworkNode in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkNode_swigregister(OptionalAirflowNetworkNode)
class AirflowNetworkLinkageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkLinkageVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkLinkageVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkLinkageVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkLinkageVector

# Register AirflowNetworkLinkageVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkLinkageVector_swigregister(AirflowNetworkLinkageVector)
class OptionalAirflowNetworkLinkage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkLinkage_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkLinkage(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkLinkage_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkLinkage___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkLinkage___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkLinkage_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkLinkage_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkLinkage_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkLinkage_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkLinkage_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkLinkage_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkLinkage

# Register OptionalAirflowNetworkLinkage in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkLinkage_swigregister(OptionalAirflowNetworkLinkage)
class AirflowNetworkComponent(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkComponent

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkComponent_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkComponent(*args))

    def componentModelObject(self):
        return _openstudiomodelairflow.AirflowNetworkComponent_componentModelObject(self)

# Register AirflowNetworkComponent in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkComponent_swigregister(AirflowNetworkComponent)

def toAirflowNetworkComponent(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkComponent(idfObject)

def getAirflowNetworkComponent(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkComponent(t_model, t_handle)

def getAirflowNetworkComponents(t_model):
    return _openstudiomodelairflow.getAirflowNetworkComponents(t_model)

def getAirflowNetworkComponentByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkComponentByName(t_model, t_name)

def getAirflowNetworkComponentsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkComponentsByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkComponent(self) -> OptionalAirflowNetworkComponent:
    """Try to cast the ModelObject to a AirflowNetworkComponent.

    :return: An Optional AirflowNetworkComponent.
    """
    return toAirflowNetworkComponent(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkComponent = _to_AirflowNetworkComponent

def _getAirflowNetworkComponent(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkComponent:
    """Try to get an object of type AirflowNetworkComponent referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkComponent.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkComponent(self, t_handle)
Model.getAirflowNetworkComponent = _getAirflowNetworkComponent

def _getAirflowNetworkComponents(self) -> AirflowNetworkComponentVector:
    """Get a vector of all objects of type AirflowNetworkComponent in the model.

    :return: A vector of AirflowNetworkComponent.
    """
    return getAirflowNetworkComponents(self)
Model.getAirflowNetworkComponents = _getAirflowNetworkComponents

def _getAirflowNetworkComponentByName(self, t_name: str) -> OptionalAirflowNetworkComponent:
    """Try to get an object of type AirflowNetworkComponent that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkComponent.
    """
    return getAirflowNetworkComponentByName(self, t_name)
Model.getAirflowNetworkComponentByName = _getAirflowNetworkComponentByName

def _getAirflowNetworkComponentsByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkComponentVector:
    """Returns all objects of type AirflowNetworkComponent named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkComponentsByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkComponentsByName = _getAirflowNetworkComponentsByName

class AirflowNetworkNode(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkNode

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkNode_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkNode(*args))

# Register AirflowNetworkNode in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkNode_swigregister(AirflowNetworkNode)

def toAirflowNetworkNode(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkNode(idfObject)

def getAirflowNetworkNode(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkNode(t_model, t_handle)

def getAirflowNetworkNodes(t_model):
    return _openstudiomodelairflow.getAirflowNetworkNodes(t_model)

def getAirflowNetworkNodeByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkNodeByName(t_model, t_name)

def getAirflowNetworkNodesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkNodesByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkNode(self) -> OptionalAirflowNetworkNode:
    """Try to cast the ModelObject to a AirflowNetworkNode.

    :return: An Optional AirflowNetworkNode.
    """
    return toAirflowNetworkNode(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkNode = _to_AirflowNetworkNode

def _getAirflowNetworkNode(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkNode:
    """Try to get an object of type AirflowNetworkNode referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkNode.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkNode(self, t_handle)
Model.getAirflowNetworkNode = _getAirflowNetworkNode

def _getAirflowNetworkNodes(self) -> AirflowNetworkNodeVector:
    """Get a vector of all objects of type AirflowNetworkNode in the model.

    :return: A vector of AirflowNetworkNode.
    """
    return getAirflowNetworkNodes(self)
Model.getAirflowNetworkNodes = _getAirflowNetworkNodes

def _getAirflowNetworkNodeByName(self, t_name: str) -> OptionalAirflowNetworkNode:
    """Try to get an object of type AirflowNetworkNode that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkNode.
    """
    return getAirflowNetworkNodeByName(self, t_name)
Model.getAirflowNetworkNodeByName = _getAirflowNetworkNodeByName

def _getAirflowNetworkNodesByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkNodeVector:
    """Returns all objects of type AirflowNetworkNode named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkNodesByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkNodesByName = _getAirflowNetworkNodesByName

class AirflowNetworkLinkage(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkLinkage

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkLinkage_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkLinkage(*args))

# Register AirflowNetworkLinkage in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkLinkage_swigregister(AirflowNetworkLinkage)

def toAirflowNetworkLinkage(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkLinkage(idfObject)

def getAirflowNetworkLinkage(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkLinkage(t_model, t_handle)

def getAirflowNetworkLinkages(t_model):
    return _openstudiomodelairflow.getAirflowNetworkLinkages(t_model)

def getAirflowNetworkLinkageByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkLinkageByName(t_model, t_name)

def getAirflowNetworkLinkagesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkLinkagesByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkLinkage(self) -> OptionalAirflowNetworkLinkage:
    """Try to cast the ModelObject to a AirflowNetworkLinkage.

    :return: An Optional AirflowNetworkLinkage.
    """
    return toAirflowNetworkLinkage(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkLinkage = _to_AirflowNetworkLinkage

def _getAirflowNetworkLinkage(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkLinkage:
    """Try to get an object of type AirflowNetworkLinkage referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkLinkage.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkLinkage(self, t_handle)
Model.getAirflowNetworkLinkage = _getAirflowNetworkLinkage

def _getAirflowNetworkLinkages(self) -> AirflowNetworkLinkageVector:
    """Get a vector of all objects of type AirflowNetworkLinkage in the model.

    :return: A vector of AirflowNetworkLinkage.
    """
    return getAirflowNetworkLinkages(self)
Model.getAirflowNetworkLinkages = _getAirflowNetworkLinkages

def _getAirflowNetworkLinkageByName(self, t_name: str) -> OptionalAirflowNetworkLinkage:
    """Try to get an object of type AirflowNetworkLinkage that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkLinkage.
    """
    return getAirflowNetworkLinkageByName(self, t_name)
Model.getAirflowNetworkLinkageByName = _getAirflowNetworkLinkageByName

def _getAirflowNetworkLinkagesByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkLinkageVector:
    """Returns all objects of type AirflowNetworkLinkage named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkLinkagesByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkLinkagesByName = _getAirflowNetworkLinkagesByName

class AirflowNetworkConstantPressureDropVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkConstantPressureDropVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkConstantPressureDropVector

# Register AirflowNetworkConstantPressureDropVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkConstantPressureDropVector_swigregister(AirflowNetworkConstantPressureDropVector)
class OptionalAirflowNetworkConstantPressureDrop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkConstantPressureDrop_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkConstantPressureDrop(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkConstantPressureDrop_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkConstantPressureDrop___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkConstantPressureDrop___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkConstantPressureDrop_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkConstantPressureDrop_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkConstantPressureDrop_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkConstantPressureDrop_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkConstantPressureDrop_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkConstantPressureDrop_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkConstantPressureDrop

# Register OptionalAirflowNetworkConstantPressureDrop in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkConstantPressureDrop_swigregister(OptionalAirflowNetworkConstantPressureDrop)
class AirflowNetworkCrackVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkCrackVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkCrackVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkCrackVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkCrackVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkCrackVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkCrackVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkCrackVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkCrackVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkCrackVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkCrackVector

# Register AirflowNetworkCrackVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkCrackVector_swigregister(AirflowNetworkCrackVector)
class OptionalAirflowNetworkCrack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkCrack_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkCrack(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkCrack_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkCrack___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkCrack___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkCrack_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkCrack_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkCrack_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkCrack_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkCrack_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkCrack_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkCrack

# Register OptionalAirflowNetworkCrack in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkCrack_swigregister(OptionalAirflowNetworkCrack)
class DetailedOpeningFactorDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.DetailedOpeningFactorDataVector_swiginit(self, _openstudiomodelairflow.new_DetailedOpeningFactorDataVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_front(self)

    def back(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.DetailedOpeningFactorDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_DetailedOpeningFactorDataVector

# Register DetailedOpeningFactorDataVector in _openstudiomodelairflow:
_openstudiomodelairflow.DetailedOpeningFactorDataVector_swigregister(DetailedOpeningFactorDataVector)
class OptionalDetailedOpeningFactorData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalDetailedOpeningFactorData_swiginit(self, _openstudiomodelairflow.new_OptionalDetailedOpeningFactorData(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalDetailedOpeningFactorData_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalDetailedOpeningFactorData___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalDetailedOpeningFactorData___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalDetailedOpeningFactorData_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalDetailedOpeningFactorData_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalDetailedOpeningFactorData_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalDetailedOpeningFactorData_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalDetailedOpeningFactorData_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalDetailedOpeningFactorData_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalDetailedOpeningFactorData

# Register OptionalDetailedOpeningFactorData in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalDetailedOpeningFactorData_swigregister(OptionalDetailedOpeningFactorData)
class AirflowNetworkDetailedOpeningVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkDetailedOpeningVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkDetailedOpeningVector

# Register AirflowNetworkDetailedOpeningVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkDetailedOpeningVector_swigregister(AirflowNetworkDetailedOpeningVector)
class OptionalAirflowNetworkDetailedOpening(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkDetailedOpening_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkDetailedOpening(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDetailedOpening_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDetailedOpening___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDetailedOpening___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDetailedOpening_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDetailedOpening_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDetailedOpening_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDetailedOpening_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkDetailedOpening_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkDetailedOpening_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkDetailedOpening

# Register OptionalAirflowNetworkDetailedOpening in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkDetailedOpening_swigregister(OptionalAirflowNetworkDetailedOpening)
class AirflowNetworkDistributionLinkageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkDistributionLinkageVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkDistributionLinkageVector

# Register AirflowNetworkDistributionLinkageVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkDistributionLinkageVector_swigregister(AirflowNetworkDistributionLinkageVector)
class OptionalAirflowNetworkDistributionLinkage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkDistributionLinkage_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkDistributionLinkage(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionLinkage_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionLinkage___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionLinkage___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionLinkage_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionLinkage_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionLinkage_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionLinkage_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionLinkage_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionLinkage_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkDistributionLinkage

# Register OptionalAirflowNetworkDistributionLinkage in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkDistributionLinkage_swigregister(OptionalAirflowNetworkDistributionLinkage)
class AirflowNetworkDistributionNodeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkDistributionNodeVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNodeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkDistributionNodeVector

# Register AirflowNetworkDistributionNodeVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkDistributionNodeVector_swigregister(AirflowNetworkDistributionNodeVector)
class OptionalAirflowNetworkDistributionNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkDistributionNode_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkDistributionNode(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionNode_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionNode___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionNode___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionNode_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionNode_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionNode_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionNode_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionNode_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkDistributionNode_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkDistributionNode

# Register OptionalAirflowNetworkDistributionNode in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkDistributionNode_swigregister(OptionalAirflowNetworkDistributionNode)
class AirflowNetworkDuctVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkDuctVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDuctVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkDuctVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDuctVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDuctVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDuctVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkDuctVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkDuctVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkDuctVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkDuctVector

# Register AirflowNetworkDuctVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkDuctVector_swigregister(AirflowNetworkDuctVector)
class OptionalAirflowNetworkDuct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkDuct_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkDuct(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuct_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuct___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuct___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuct_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuct_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuct_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuct_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuct_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuct_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkDuct

# Register OptionalAirflowNetworkDuct in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkDuct_swigregister(OptionalAirflowNetworkDuct)
class ViewFactorDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.ViewFactorDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.ViewFactorDataVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.ViewFactorDataVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.ViewFactorDataVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.ViewFactorDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.ViewFactorDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.ViewFactorDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.ViewFactorDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.ViewFactorDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.ViewFactorDataVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.ViewFactorDataVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.ViewFactorDataVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.ViewFactorDataVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.ViewFactorDataVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.ViewFactorDataVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.ViewFactorDataVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.ViewFactorDataVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.ViewFactorDataVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.ViewFactorDataVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.ViewFactorDataVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.ViewFactorDataVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.ViewFactorDataVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.ViewFactorDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.ViewFactorDataVector_swiginit(self, _openstudiomodelairflow.new_ViewFactorDataVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.ViewFactorDataVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.ViewFactorDataVector_front(self)

    def back(self):
        return _openstudiomodelairflow.ViewFactorDataVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.ViewFactorDataVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.ViewFactorDataVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.ViewFactorDataVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.ViewFactorDataVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.ViewFactorDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_ViewFactorDataVector

# Register ViewFactorDataVector in _openstudiomodelairflow:
_openstudiomodelairflow.ViewFactorDataVector_swigregister(ViewFactorDataVector)
class OptionalViewFactorData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalViewFactorData_swiginit(self, _openstudiomodelairflow.new_OptionalViewFactorData(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalViewFactorData_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalViewFactorData___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalViewFactorData___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalViewFactorData_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalViewFactorData_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalViewFactorData_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalViewFactorData_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalViewFactorData_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalViewFactorData_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalViewFactorData

# Register OptionalViewFactorData in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalViewFactorData_swigregister(OptionalViewFactorData)
class AirflowNetworkDuctViewFactorsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkDuctViewFactorsVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkDuctViewFactorsVector

# Register AirflowNetworkDuctViewFactorsVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkDuctViewFactorsVector_swigregister(AirflowNetworkDuctViewFactorsVector)
class OptionalAirflowNetworkDuctViewFactors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkDuctViewFactors_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkDuctViewFactors(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuctViewFactors_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuctViewFactors___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuctViewFactors___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuctViewFactors_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuctViewFactors_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuctViewFactors_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuctViewFactors_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuctViewFactors_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkDuctViewFactors_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkDuctViewFactors

# Register OptionalAirflowNetworkDuctViewFactors in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkDuctViewFactors_swigregister(OptionalAirflowNetworkDuctViewFactors)
class AirflowNetworkEffectiveLeakageAreaVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkEffectiveLeakageAreaVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkEffectiveLeakageAreaVector

# Register AirflowNetworkEffectiveLeakageAreaVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkEffectiveLeakageAreaVector_swigregister(AirflowNetworkEffectiveLeakageAreaVector)
class OptionalAirflowNetworkEffectiveLeakageArea(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkEffectiveLeakageArea_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkEffectiveLeakageArea(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkEffectiveLeakageArea_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkEffectiveLeakageArea___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkEffectiveLeakageArea___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkEffectiveLeakageArea_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkEffectiveLeakageArea_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkEffectiveLeakageArea_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkEffectiveLeakageArea_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkEffectiveLeakageArea_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkEffectiveLeakageArea_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkEffectiveLeakageArea

# Register OptionalAirflowNetworkEffectiveLeakageArea in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkEffectiveLeakageArea_swigregister(OptionalAirflowNetworkEffectiveLeakageArea)
class AirflowNetworkEquivalentDuctVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkEquivalentDuctVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkEquivalentDuctVector

# Register AirflowNetworkEquivalentDuctVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkEquivalentDuctVector_swigregister(AirflowNetworkEquivalentDuctVector)
class OptionalAirflowNetworkEquivalentDuct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkEquivalentDuct_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkEquivalentDuct(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkEquivalentDuct_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkEquivalentDuct___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkEquivalentDuct___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkEquivalentDuct_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkEquivalentDuct_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkEquivalentDuct_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkEquivalentDuct_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkEquivalentDuct_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkEquivalentDuct_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkEquivalentDuct

# Register OptionalAirflowNetworkEquivalentDuct in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkEquivalentDuct_swigregister(OptionalAirflowNetworkEquivalentDuct)
class AirflowNetworkExternalNodeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkExternalNodeVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkExternalNodeVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNodeVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkExternalNodeVector

# Register AirflowNetworkExternalNodeVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkExternalNodeVector_swigregister(AirflowNetworkExternalNodeVector)
class OptionalAirflowNetworkExternalNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkExternalNode_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkExternalNode(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkExternalNode_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkExternalNode___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkExternalNode___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkExternalNode_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkExternalNode_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkExternalNode_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkExternalNode_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkExternalNode_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkExternalNode_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkExternalNode

# Register OptionalAirflowNetworkExternalNode in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkExternalNode_swigregister(OptionalAirflowNetworkExternalNode)
class AirflowNetworkFanVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkFanVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkFanVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkFanVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkFanVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkFanVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkFanVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkFanVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkFanVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkFanVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkFanVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkFanVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkFanVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkFanVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkFanVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkFanVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkFanVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkFanVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkFanVector

# Register AirflowNetworkFanVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkFanVector_swigregister(AirflowNetworkFanVector)
class OptionalAirflowNetworkFan(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkFan_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkFan(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkFan_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkFan___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkFan___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkFan_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkFan_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkFan_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkFan_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkFan_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkFan_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkFan

# Register OptionalAirflowNetworkFan in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkFan_swigregister(OptionalAirflowNetworkFan)
class AirflowNetworkHorizontalOpeningVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkHorizontalOpeningVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkHorizontalOpeningVector

# Register AirflowNetworkHorizontalOpeningVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkHorizontalOpeningVector_swigregister(AirflowNetworkHorizontalOpeningVector)
class OptionalAirflowNetworkHorizontalOpening(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkHorizontalOpening_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkHorizontalOpening(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkHorizontalOpening_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkHorizontalOpening___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkHorizontalOpening___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkHorizontalOpening_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkHorizontalOpening_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkHorizontalOpening_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkHorizontalOpening_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkHorizontalOpening_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkHorizontalOpening_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkHorizontalOpening

# Register OptionalAirflowNetworkHorizontalOpening in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkHorizontalOpening_swigregister(OptionalAirflowNetworkHorizontalOpening)
class AirflowNetworkLeakageRatioVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkLeakageRatioVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatioVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkLeakageRatioVector

# Register AirflowNetworkLeakageRatioVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkLeakageRatioVector_swigregister(AirflowNetworkLeakageRatioVector)
class OptionalAirflowNetworkLeakageRatio(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkLeakageRatio_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkLeakageRatio(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkLeakageRatio_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkLeakageRatio___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkLeakageRatio___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkLeakageRatio_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkLeakageRatio_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkLeakageRatio_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkLeakageRatio_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkLeakageRatio_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkLeakageRatio_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkLeakageRatio

# Register OptionalAirflowNetworkLeakageRatio in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkLeakageRatio_swigregister(OptionalAirflowNetworkLeakageRatio)
class AirflowNetworkOccupantVentilationControlVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkOccupantVentilationControlVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkOccupantVentilationControlVector

# Register AirflowNetworkOccupantVentilationControlVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkOccupantVentilationControlVector_swigregister(AirflowNetworkOccupantVentilationControlVector)
class OptionalAirflowNetworkOccupantVentilationControl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkOccupantVentilationControl_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkOccupantVentilationControl(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkOccupantVentilationControl_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkOccupantVentilationControl___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkOccupantVentilationControl___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkOccupantVentilationControl_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkOccupantVentilationControl_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkOccupantVentilationControl_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkOccupantVentilationControl_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkOccupantVentilationControl_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkOccupantVentilationControl_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkOccupantVentilationControl

# Register OptionalAirflowNetworkOccupantVentilationControl in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkOccupantVentilationControl_swigregister(OptionalAirflowNetworkOccupantVentilationControl)
class AirflowNetworkOutdoorAirflowVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkOutdoorAirflowVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkOutdoorAirflowVector

# Register AirflowNetworkOutdoorAirflowVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkOutdoorAirflowVector_swigregister(AirflowNetworkOutdoorAirflowVector)
class OptionalAirflowNetworkOutdoorAirflow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkOutdoorAirflow_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkOutdoorAirflow(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkOutdoorAirflow_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkOutdoorAirflow___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkOutdoorAirflow___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkOutdoorAirflow_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkOutdoorAirflow_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkOutdoorAirflow_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkOutdoorAirflow_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkOutdoorAirflow_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkOutdoorAirflow_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkOutdoorAirflow

# Register OptionalAirflowNetworkOutdoorAirflow in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkOutdoorAirflow_swigregister(OptionalAirflowNetworkOutdoorAirflow)
class AirflowNetworkReferenceCrackConditionsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkReferenceCrackConditionsVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkReferenceCrackConditionsVector

# Register AirflowNetworkReferenceCrackConditionsVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkReferenceCrackConditionsVector_swigregister(AirflowNetworkReferenceCrackConditionsVector)
class OptionalAirflowNetworkReferenceCrackConditions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkReferenceCrackConditions_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkReferenceCrackConditions(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkReferenceCrackConditions_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkReferenceCrackConditions___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkReferenceCrackConditions___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkReferenceCrackConditions_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkReferenceCrackConditions_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkReferenceCrackConditions_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkReferenceCrackConditions_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkReferenceCrackConditions_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkReferenceCrackConditions_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkReferenceCrackConditions

# Register OptionalAirflowNetworkReferenceCrackConditions in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkReferenceCrackConditions_swigregister(OptionalAirflowNetworkReferenceCrackConditions)
class AirflowNetworkSimpleOpeningVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkSimpleOpeningVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkSimpleOpeningVector

# Register AirflowNetworkSimpleOpeningVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkSimpleOpeningVector_swigregister(AirflowNetworkSimpleOpeningVector)
class OptionalAirflowNetworkSimpleOpening(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkSimpleOpening_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkSimpleOpening(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimpleOpening_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimpleOpening___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimpleOpening___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimpleOpening_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimpleOpening_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimpleOpening_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimpleOpening_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimpleOpening_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimpleOpening_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkSimpleOpening

# Register OptionalAirflowNetworkSimpleOpening in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkSimpleOpening_swigregister(OptionalAirflowNetworkSimpleOpening)
class OptionalAirflowNetworkSimulationControl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkSimulationControl_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkSimulationControl(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimulationControl_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimulationControl___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimulationControl___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimulationControl_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimulationControl_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimulationControl_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimulationControl_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimulationControl_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkSimulationControl_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkSimulationControl

# Register OptionalAirflowNetworkSimulationControl in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkSimulationControl_swigregister(OptionalAirflowNetworkSimulationControl)
class AirflowNetworkSpecifiedFlowRateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkSpecifiedFlowRateVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkSpecifiedFlowRateVector

# Register AirflowNetworkSpecifiedFlowRateVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkSpecifiedFlowRateVector_swigregister(AirflowNetworkSpecifiedFlowRateVector)
class OptionalAirflowNetworkSpecifiedFlowRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkSpecifiedFlowRate_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkSpecifiedFlowRate(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSpecifiedFlowRate_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSpecifiedFlowRate___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSpecifiedFlowRate___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSpecifiedFlowRate_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSpecifiedFlowRate_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSpecifiedFlowRate_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSpecifiedFlowRate_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkSpecifiedFlowRate_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkSpecifiedFlowRate_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkSpecifiedFlowRate

# Register OptionalAirflowNetworkSpecifiedFlowRate in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkSpecifiedFlowRate_swigregister(OptionalAirflowNetworkSpecifiedFlowRate)
class AirflowNetworkSurfaceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkSurfaceVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkSurfaceVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkSurfaceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkSurfaceVector

# Register AirflowNetworkSurfaceVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkSurfaceVector_swigregister(AirflowNetworkSurfaceVector)
class OptionalAirflowNetworkSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkSurface_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkSurface(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSurface_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSurface___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSurface___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSurface_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSurface_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSurface_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkSurface_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkSurface_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkSurface_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkSurface

# Register OptionalAirflowNetworkSurface in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkSurface_swigregister(OptionalAirflowNetworkSurface)
class AirflowNetworkZoneVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkZoneVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkZoneVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkZoneVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkZoneVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkZoneVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkZoneVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkZoneVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkZoneVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkZoneVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkZoneVector

# Register AirflowNetworkZoneVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkZoneVector_swigregister(AirflowNetworkZoneVector)
class OptionalAirflowNetworkZone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkZone_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkZone(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkZone_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkZone___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkZone___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkZone_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkZone_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkZone_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkZone_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkZone_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkZone_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkZone

# Register OptionalAirflowNetworkZone in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkZone_swigregister(OptionalAirflowNetworkZone)
class AirflowNetworkZoneExhaustFanVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector___bool__(self)

    def __len__(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_pop(self)

    def append(self, x):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_append(self, x)

    def empty(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_empty(self)

    def size(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_size(self)

    def swap(self, v):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_swap(self, v)

    def begin(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_begin(self)

    def end(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_end(self)

    def rbegin(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_rbegin(self)

    def rend(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_rend(self)

    def clear(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkZoneExhaustFanVector(*args))

    def push_back(self, x):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_push_back(self, x)

    def front(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_front(self)

    def back(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_capacity(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkZoneExhaustFanVector

# Register AirflowNetworkZoneExhaustFanVector in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkZoneExhaustFanVector_swigregister(AirflowNetworkZoneExhaustFanVector)
class OptionalAirflowNetworkZoneExhaustFan(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelairflow.OptionalAirflowNetworkZoneExhaustFan_swiginit(self, _openstudiomodelairflow.new_OptionalAirflowNetworkZoneExhaustFan(*args))

    def reset(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkZoneExhaustFan_reset(self)

    def __nonzero__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkZoneExhaustFan___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkZoneExhaustFan___ref__(self)

    def is_initialized(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkZoneExhaustFan_is_initialized(self)

    def isNull(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkZoneExhaustFan_isNull(self)

    def empty(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkZoneExhaustFan_empty(self)

    def get(self):
        return _openstudiomodelairflow.OptionalAirflowNetworkZoneExhaustFan_get(self)

    def set(self, t):
        return _openstudiomodelairflow.OptionalAirflowNetworkZoneExhaustFan_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelairflow.OptionalAirflowNetworkZoneExhaustFan_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelairflow.delete_OptionalAirflowNetworkZoneExhaustFan

# Register OptionalAirflowNetworkZoneExhaustFan in _openstudiomodelairflow:
_openstudiomodelairflow.OptionalAirflowNetworkZoneExhaustFan_swigregister(OptionalAirflowNetworkZoneExhaustFan)
class AirflowNetworkConstantPressureDrop(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkConstantPressureDrop

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkConstantPressureDrop_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkConstantPressureDrop(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDrop_iddObjectType()

    def pressureDrop(self):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDrop_pressureDrop(self)

    def setPressureDrop(self, pressureDrop):
        return _openstudiomodelairflow.AirflowNetworkConstantPressureDrop_setPressureDrop(self, pressureDrop)

# Register AirflowNetworkConstantPressureDrop in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkConstantPressureDrop_swigregister(AirflowNetworkConstantPressureDrop)

def toAirflowNetworkConstantPressureDrop(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkConstantPressureDrop(idfObject)

def getAirflowNetworkConstantPressureDrop(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkConstantPressureDrop(t_model, t_handle)

def getAirflowNetworkConstantPressureDrops(t_model):
    return _openstudiomodelairflow.getAirflowNetworkConstantPressureDrops(t_model)

def getAirflowNetworkConstantPressureDropByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkConstantPressureDropByName(t_model, t_name)

def getAirflowNetworkConstantPressureDropsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkConstantPressureDropsByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkConstantPressureDrop(self) -> OptionalAirflowNetworkConstantPressureDrop:
    """Try to cast the ModelObject to a AirflowNetworkConstantPressureDrop.

    :return: An Optional AirflowNetworkConstantPressureDrop.
    """
    return toAirflowNetworkConstantPressureDrop(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkConstantPressureDrop = _to_AirflowNetworkConstantPressureDrop

def _getAirflowNetworkConstantPressureDrop(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkConstantPressureDrop:
    """Try to get an object of type AirflowNetworkConstantPressureDrop referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkConstantPressureDrop.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkConstantPressureDrop(self, t_handle)
Model.getAirflowNetworkConstantPressureDrop = _getAirflowNetworkConstantPressureDrop

def _getAirflowNetworkConstantPressureDrops(self) -> AirflowNetworkConstantPressureDropVector:
    """Get a vector of all objects of type AirflowNetworkConstantPressureDrop in the model.

    :return: A vector of AirflowNetworkConstantPressureDrop.
    """
    return getAirflowNetworkConstantPressureDrops(self)
Model.getAirflowNetworkConstantPressureDrops = _getAirflowNetworkConstantPressureDrops

def _getAirflowNetworkConstantPressureDropByName(self, t_name: str) -> OptionalAirflowNetworkConstantPressureDrop:
    """Try to get an object of type AirflowNetworkConstantPressureDrop that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkConstantPressureDrop.
    """
    return getAirflowNetworkConstantPressureDropByName(self, t_name)
Model.getAirflowNetworkConstantPressureDropByName = _getAirflowNetworkConstantPressureDropByName

def _getAirflowNetworkConstantPressureDropsByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkConstantPressureDropVector:
    """Returns all objects of type AirflowNetworkConstantPressureDrop named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkConstantPressureDropsByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkConstantPressureDropsByName = _getAirflowNetworkConstantPressureDropsByName

class AirflowNetworkCrack(AirflowNetworkComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkCrack

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkCrack_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkCrack(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkCrack_iddObjectType()

    def airMassFlowCoefficient(self):
        return _openstudiomodelairflow.AirflowNetworkCrack_airMassFlowCoefficient(self)

    def airMassFlowExponent(self):
        return _openstudiomodelairflow.AirflowNetworkCrack_airMassFlowExponent(self)

    def isAirMassFlowExponentDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkCrack_isAirMassFlowExponentDefaulted(self)

    def referenceCrackConditions(self):
        return _openstudiomodelairflow.AirflowNetworkCrack_referenceCrackConditions(self)

    def setAirMassFlowCoefficient(self, airMassFlowCoefficientatReferenceConditions):
        return _openstudiomodelairflow.AirflowNetworkCrack_setAirMassFlowCoefficient(self, airMassFlowCoefficientatReferenceConditions)

    def setAirMassFlowExponent(self, airMassFlowExponent):
        return _openstudiomodelairflow.AirflowNetworkCrack_setAirMassFlowExponent(self, airMassFlowExponent)

    def resetAirMassFlowExponent(self):
        return _openstudiomodelairflow.AirflowNetworkCrack_resetAirMassFlowExponent(self)

    def setReferenceCrackConditions(self, referenceCrackConditions):
        return _openstudiomodelairflow.AirflowNetworkCrack_setReferenceCrackConditions(self, referenceCrackConditions)

    def resetReferenceCrackConditions(self):
        return _openstudiomodelairflow.AirflowNetworkCrack_resetReferenceCrackConditions(self)

# Register AirflowNetworkCrack in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkCrack_swigregister(AirflowNetworkCrack)

def toAirflowNetworkCrack(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkCrack(idfObject)

def getAirflowNetworkCrack(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkCrack(t_model, t_handle)

def getAirflowNetworkCracks(t_model):
    return _openstudiomodelairflow.getAirflowNetworkCracks(t_model)

def getAirflowNetworkCrackByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkCrackByName(t_model, t_name)

def getAirflowNetworkCracksByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkCracksByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkCrack(self) -> OptionalAirflowNetworkCrack:
    """Try to cast the ModelObject to a AirflowNetworkCrack.

    :return: An Optional AirflowNetworkCrack.
    """
    return toAirflowNetworkCrack(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkCrack = _to_AirflowNetworkCrack

def _getAirflowNetworkCrack(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkCrack:
    """Try to get an object of type AirflowNetworkCrack referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkCrack.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkCrack(self, t_handle)
Model.getAirflowNetworkCrack = _getAirflowNetworkCrack

def _getAirflowNetworkCracks(self) -> AirflowNetworkCrackVector:
    """Get a vector of all objects of type AirflowNetworkCrack in the model.

    :return: A vector of AirflowNetworkCrack.
    """
    return getAirflowNetworkCracks(self)
Model.getAirflowNetworkCracks = _getAirflowNetworkCracks

def _getAirflowNetworkCrackByName(self, t_name: str) -> OptionalAirflowNetworkCrack:
    """Try to get an object of type AirflowNetworkCrack that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkCrack.
    """
    return getAirflowNetworkCrackByName(self, t_name)
Model.getAirflowNetworkCrackByName = _getAirflowNetworkCrackByName

def _getAirflowNetworkCracksByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkCrackVector:
    """Returns all objects of type AirflowNetworkCrack named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkCracksByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkCracksByName = _getAirflowNetworkCracksByName

class DetailedOpeningFactorData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, openingFactor, dischargeCoefficient, widthFactor, heightFactor, startHeightFactor):
        _openstudiomodelairflow.DetailedOpeningFactorData_swiginit(self, _openstudiomodelairflow.new_DetailedOpeningFactorData(openingFactor, dischargeCoefficient, widthFactor, heightFactor, startHeightFactor))

    def openingFactor(self):
        return _openstudiomodelairflow.DetailedOpeningFactorData_openingFactor(self)

    def dischargeCoefficient(self):
        return _openstudiomodelairflow.DetailedOpeningFactorData_dischargeCoefficient(self)

    def widthFactor(self):
        return _openstudiomodelairflow.DetailedOpeningFactorData_widthFactor(self)

    def heightFactor(self):
        return _openstudiomodelairflow.DetailedOpeningFactorData_heightFactor(self)

    def startHeightFactor(self):
        return _openstudiomodelairflow.DetailedOpeningFactorData_startHeightFactor(self)

    def setOpeningFactor(self, openingFactor):
        return _openstudiomodelairflow.DetailedOpeningFactorData_setOpeningFactor(self, openingFactor)

    def setDischargeCoefficient(self, dischargeCoefficient):
        return _openstudiomodelairflow.DetailedOpeningFactorData_setDischargeCoefficient(self, dischargeCoefficient)

    def setWidthFactor(self, widthFactor):
        return _openstudiomodelairflow.DetailedOpeningFactorData_setWidthFactor(self, widthFactor)

    def setHeightFactor(self, heightFactor):
        return _openstudiomodelairflow.DetailedOpeningFactorData_setHeightFactor(self, heightFactor)

    def setStartHeightFactor(self, startHeightFactor):
        return _openstudiomodelairflow.DetailedOpeningFactorData_setStartHeightFactor(self, startHeightFactor)
    __swig_destroy__ = _openstudiomodelairflow.delete_DetailedOpeningFactorData

# Register DetailedOpeningFactorData in _openstudiomodelairflow:
_openstudiomodelairflow.DetailedOpeningFactorData_swigregister(DetailedOpeningFactorData)
class AirflowNetworkDetailedOpening(AirflowNetworkComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkDetailedOpening

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkDetailedOpening_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkDetailedOpening(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_iddObjectType()

    @staticmethod
    def typeofRectangularLargeVerticalOpeningValues():
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_typeofRectangularLargeVerticalOpeningValues()

    def airMassFlowCoefficientWhenOpeningisClosed(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_airMassFlowCoefficientWhenOpeningisClosed(self)

    def airMassFlowExponentWhenOpeningisClosed(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_airMassFlowExponentWhenOpeningisClosed(self)

    def isAirMassFlowExponentWhenOpeningisClosedDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_isAirMassFlowExponentWhenOpeningisClosedDefaulted(self)

    def typeofRectangularLargeVerticalOpening(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_typeofRectangularLargeVerticalOpening(self)

    def isTypeofRectangularLargeVerticalOpeningDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_isTypeofRectangularLargeVerticalOpeningDefaulted(self)

    def extraCrackLengthorHeightofPivotingAxis(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_extraCrackLengthorHeightofPivotingAxis(self)

    def isExtraCrackLengthorHeightofPivotingAxisDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_isExtraCrackLengthorHeightofPivotingAxisDefaulted(self)

    def openingFactors(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_openingFactors(self)

    def setAirMassFlowCoefficientWhenOpeningisClosed(self, airMassFlowCoefficientWhenOpeningisClosed):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_setAirMassFlowCoefficientWhenOpeningisClosed(self, airMassFlowCoefficientWhenOpeningisClosed)

    def setAirMassFlowExponentWhenOpeningisClosed(self, airMassFlowExponentWhenOpeningisClosed):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_setAirMassFlowExponentWhenOpeningisClosed(self, airMassFlowExponentWhenOpeningisClosed)

    def resetAirMassFlowExponentWhenOpeningisClosed(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_resetAirMassFlowExponentWhenOpeningisClosed(self)

    def setTypeofRectangularLargeVerticalOpening(self, typeofRectangularLargeVerticalOpening):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_setTypeofRectangularLargeVerticalOpening(self, typeofRectangularLargeVerticalOpening)

    def resetTypeofRectangularLargeVerticalOpening(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_resetTypeofRectangularLargeVerticalOpening(self)

    def setExtraCrackLengthorHeightofPivotingAxis(self, extraCrackLengthorHeightofPivotingAxis):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_setExtraCrackLengthorHeightofPivotingAxis(self, extraCrackLengthorHeightofPivotingAxis)

    def resetExtraCrackLengthorHeightofPivotingAxis(self):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_resetExtraCrackLengthorHeightofPivotingAxis(self)

    def setOpeningFactors(self, factors):
        return _openstudiomodelairflow.AirflowNetworkDetailedOpening_setOpeningFactors(self, factors)

# Register AirflowNetworkDetailedOpening in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkDetailedOpening_swigregister(AirflowNetworkDetailedOpening)

def toAirflowNetworkDetailedOpening(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkDetailedOpening(idfObject)

def getAirflowNetworkDetailedOpening(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkDetailedOpening(t_model, t_handle)

def getAirflowNetworkDetailedOpenings(t_model):
    return _openstudiomodelairflow.getAirflowNetworkDetailedOpenings(t_model)

def getAirflowNetworkDetailedOpeningByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkDetailedOpeningByName(t_model, t_name)

def getAirflowNetworkDetailedOpeningsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkDetailedOpeningsByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkDetailedOpening(self) -> OptionalAirflowNetworkDetailedOpening:
    """Try to cast the ModelObject to a AirflowNetworkDetailedOpening.

    :return: An Optional AirflowNetworkDetailedOpening.
    """
    return toAirflowNetworkDetailedOpening(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkDetailedOpening = _to_AirflowNetworkDetailedOpening

def _getAirflowNetworkDetailedOpening(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkDetailedOpening:
    """Try to get an object of type AirflowNetworkDetailedOpening referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkDetailedOpening.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkDetailedOpening(self, t_handle)
Model.getAirflowNetworkDetailedOpening = _getAirflowNetworkDetailedOpening

def _getAirflowNetworkDetailedOpenings(self) -> AirflowNetworkDetailedOpeningVector:
    """Get a vector of all objects of type AirflowNetworkDetailedOpening in the model.

    :return: A vector of AirflowNetworkDetailedOpening.
    """
    return getAirflowNetworkDetailedOpenings(self)
Model.getAirflowNetworkDetailedOpenings = _getAirflowNetworkDetailedOpenings

def _getAirflowNetworkDetailedOpeningByName(self, t_name: str) -> OptionalAirflowNetworkDetailedOpening:
    """Try to get an object of type AirflowNetworkDetailedOpening that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkDetailedOpening.
    """
    return getAirflowNetworkDetailedOpeningByName(self, t_name)
Model.getAirflowNetworkDetailedOpeningByName = _getAirflowNetworkDetailedOpeningByName

def _getAirflowNetworkDetailedOpeningsByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkDetailedOpeningVector:
    """Returns all objects of type AirflowNetworkDetailedOpening named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkDetailedOpeningsByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkDetailedOpeningsByName = _getAirflowNetworkDetailedOpeningsByName

class AirflowNetworkDistributionLinkage(AirflowNetworkLinkage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkDistributionLinkage

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkDistributionLinkage_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkDistributionLinkage(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkage_iddObjectType()

    def node1(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkage_node1(self)

    def node2(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkage_node2(self)

    def component(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkage_component(self)

    def thermalZone(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkage_thermalZone(self)

    def setNode1(self, airflowNetworkNode):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkage_setNode1(self, airflowNetworkNode)

    def setNode2(self, airflowNetworkNode):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkage_setNode2(self, airflowNetworkNode)

    def setComponent(self, airflowNetworkComponent):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkage_setComponent(self, airflowNetworkComponent)

    def setThermalZone(self, zone):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkage_setThermalZone(self, zone)

    def resetThermalZone(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionLinkage_resetThermalZone(self)

# Register AirflowNetworkDistributionLinkage in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkDistributionLinkage_swigregister(AirflowNetworkDistributionLinkage)

def toAirflowNetworkDistributionLinkage(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkDistributionLinkage(idfObject)

def getAirflowNetworkDistributionLinkage(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkDistributionLinkage(t_model, t_handle)

def getAirflowNetworkDistributionLinkages(t_model):
    return _openstudiomodelairflow.getAirflowNetworkDistributionLinkages(t_model)

def getAirflowNetworkDistributionLinkageByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkDistributionLinkageByName(t_model, t_name)

def getAirflowNetworkDistributionLinkagesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkDistributionLinkagesByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkDistributionLinkage(self) -> OptionalAirflowNetworkDistributionLinkage:
    """Try to cast the ModelObject to a AirflowNetworkDistributionLinkage.

    :return: An Optional AirflowNetworkDistributionLinkage.
    """
    return toAirflowNetworkDistributionLinkage(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkDistributionLinkage = _to_AirflowNetworkDistributionLinkage

def _getAirflowNetworkDistributionLinkage(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkDistributionLinkage:
    """Try to get an object of type AirflowNetworkDistributionLinkage referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkDistributionLinkage.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkDistributionLinkage(self, t_handle)
Model.getAirflowNetworkDistributionLinkage = _getAirflowNetworkDistributionLinkage

def _getAirflowNetworkDistributionLinkages(self) -> AirflowNetworkDistributionLinkageVector:
    """Get a vector of all objects of type AirflowNetworkDistributionLinkage in the model.

    :return: A vector of AirflowNetworkDistributionLinkage.
    """
    return getAirflowNetworkDistributionLinkages(self)
Model.getAirflowNetworkDistributionLinkages = _getAirflowNetworkDistributionLinkages

def _getAirflowNetworkDistributionLinkageByName(self, t_name: str) -> OptionalAirflowNetworkDistributionLinkage:
    """Try to get an object of type AirflowNetworkDistributionLinkage that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkDistributionLinkage.
    """
    return getAirflowNetworkDistributionLinkageByName(self, t_name)
Model.getAirflowNetworkDistributionLinkageByName = _getAirflowNetworkDistributionLinkageByName

def _getAirflowNetworkDistributionLinkagesByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkDistributionLinkageVector:
    """Returns all objects of type AirflowNetworkDistributionLinkage named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkDistributionLinkagesByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkDistributionLinkagesByName = _getAirflowNetworkDistributionLinkagesByName

class AirflowNetworkDistributionNode(AirflowNetworkNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkDistributionNode

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkDistributionNode_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkDistributionNode(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkDistributionNode_iddObjectType()

    def node(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNode_node(self)

    def airLoopHVACZoneMixer(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNode_airLoopHVACZoneMixer(self)

    def airLoopHVACZoneSplitter(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNode_airLoopHVACZoneSplitter(self)

    def airLoopHVACOutdoorAirSystem(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNode_airLoopHVACOutdoorAirSystem(self)

    def nodeHeight(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNode_nodeHeight(self)

    def isNodeHeightDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNode_isNodeHeightDefaulted(self)

    def setNodeHeight(self, nodeHeight):
        return _openstudiomodelairflow.AirflowNetworkDistributionNode_setNodeHeight(self, nodeHeight)

    def resetNodeHeight(self):
        return _openstudiomodelairflow.AirflowNetworkDistributionNode_resetNodeHeight(self)

# Register AirflowNetworkDistributionNode in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkDistributionNode_swigregister(AirflowNetworkDistributionNode)

def toAirflowNetworkDistributionNode(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkDistributionNode(idfObject)

def getAirflowNetworkDistributionNode(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkDistributionNode(t_model, t_handle)

def getAirflowNetworkDistributionNodes(t_model):
    return _openstudiomodelairflow.getAirflowNetworkDistributionNodes(t_model)

def getAirflowNetworkDistributionNodeByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkDistributionNodeByName(t_model, t_name)

def getAirflowNetworkDistributionNodesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkDistributionNodesByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkDistributionNode(self) -> OptionalAirflowNetworkDistributionNode:
    """Try to cast the ModelObject to a AirflowNetworkDistributionNode.

    :return: An Optional AirflowNetworkDistributionNode.
    """
    return toAirflowNetworkDistributionNode(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkDistributionNode = _to_AirflowNetworkDistributionNode

def _getAirflowNetworkDistributionNode(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkDistributionNode:
    """Try to get an object of type AirflowNetworkDistributionNode referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkDistributionNode.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkDistributionNode(self, t_handle)
Model.getAirflowNetworkDistributionNode = _getAirflowNetworkDistributionNode

def _getAirflowNetworkDistributionNodes(self) -> AirflowNetworkDistributionNodeVector:
    """Get a vector of all objects of type AirflowNetworkDistributionNode in the model.

    :return: A vector of AirflowNetworkDistributionNode.
    """
    return getAirflowNetworkDistributionNodes(self)
Model.getAirflowNetworkDistributionNodes = _getAirflowNetworkDistributionNodes

def _getAirflowNetworkDistributionNodeByName(self, t_name: str) -> OptionalAirflowNetworkDistributionNode:
    """Try to get an object of type AirflowNetworkDistributionNode that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkDistributionNode.
    """
    return getAirflowNetworkDistributionNodeByName(self, t_name)
Model.getAirflowNetworkDistributionNodeByName = _getAirflowNetworkDistributionNodeByName

def _getAirflowNetworkDistributionNodesByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkDistributionNodeVector:
    """Returns all objects of type AirflowNetworkDistributionNode named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkDistributionNodesByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkDistributionNodesByName = _getAirflowNetworkDistributionNodesByName

class AirflowNetworkDuct(AirflowNetworkComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkDuct

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkDuct_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkDuct(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkDuct_iddObjectType()

    def ductLength(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_ductLength(self)

    def hydraulicDiameter(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_hydraulicDiameter(self)

    def crossSectionArea(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_crossSectionArea(self)

    def surfaceRoughness(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_surfaceRoughness(self)

    def isSurfaceRoughnessDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_isSurfaceRoughnessDefaulted(self)

    def coefficientforLocalDynamicLossDuetoFitting(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_coefficientforLocalDynamicLossDuetoFitting(self)

    def isCoefficientforLocalDynamicLossDuetoFittingDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_isCoefficientforLocalDynamicLossDuetoFittingDefaulted(self)

    def ductWallHeatTransmittanceCoefficient(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_ductWallHeatTransmittanceCoefficient(self)

    def isDuctWallHeatTransmittanceCoefficientDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_isDuctWallHeatTransmittanceCoefficientDefaulted(self)

    def insideConvectionCoefficient(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_insideConvectionCoefficient(self)

    def isInsideConvectionCoefficientDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_isInsideConvectionCoefficientDefaulted(self)

    def outsideConvectionCoefficient(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_outsideConvectionCoefficient(self)

    def isOutsideConvectionCoefficientDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_isOutsideConvectionCoefficientDefaulted(self)

    def overallMoistureTransmittanceCoefficientfromAirtoAir(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_overallMoistureTransmittanceCoefficientfromAirtoAir(self)

    def isOverallMoistureTransmittanceCoefficientfromAirtoAirDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_isOverallMoistureTransmittanceCoefficientfromAirtoAirDefaulted(self)

    def setDuctLength(self, ductLength):
        return _openstudiomodelairflow.AirflowNetworkDuct_setDuctLength(self, ductLength)

    def setHydraulicDiameter(self, hydraulicDiameter):
        return _openstudiomodelairflow.AirflowNetworkDuct_setHydraulicDiameter(self, hydraulicDiameter)

    def setCrossSectionArea(self, crossSectionArea):
        return _openstudiomodelairflow.AirflowNetworkDuct_setCrossSectionArea(self, crossSectionArea)

    def setSurfaceRoughness(self, surfaceRoughness):
        return _openstudiomodelairflow.AirflowNetworkDuct_setSurfaceRoughness(self, surfaceRoughness)

    def resetSurfaceRoughness(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_resetSurfaceRoughness(self)

    def setCoefficientforLocalDynamicLossDuetoFitting(self, coefficientforLocalDynamicLossDuetoFitting):
        return _openstudiomodelairflow.AirflowNetworkDuct_setCoefficientforLocalDynamicLossDuetoFitting(self, coefficientforLocalDynamicLossDuetoFitting)

    def resetCoefficientforLocalDynamicLossDuetoFitting(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_resetCoefficientforLocalDynamicLossDuetoFitting(self)

    def setDuctWallHeatTransmittanceCoefficient(self, coefficient):
        return _openstudiomodelairflow.AirflowNetworkDuct_setDuctWallHeatTransmittanceCoefficient(self, coefficient)

    def resetDuctWallHeatTransmittanceCoefficient(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_resetDuctWallHeatTransmittanceCoefficient(self)

    def setInsideConvectionCoefficient(self, coefficient):
        return _openstudiomodelairflow.AirflowNetworkDuct_setInsideConvectionCoefficient(self, coefficient)

    def resetInsideConvectionCoefficient(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_resetInsideConvectionCoefficient(self)

    def setOutsideConvectionCoefficient(self, coefficient):
        return _openstudiomodelairflow.AirflowNetworkDuct_setOutsideConvectionCoefficient(self, coefficient)

    def resetOutsideConvectionCoefficient(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_resetOutsideConvectionCoefficient(self)

    def setOverallMoistureTransmittanceCoefficientfromAirtoAir(self, overallMoistureTransmittanceCoefficientfromAirtoAir):
        return _openstudiomodelairflow.AirflowNetworkDuct_setOverallMoistureTransmittanceCoefficientfromAirtoAir(self, overallMoistureTransmittanceCoefficientfromAirtoAir)

    def resetOverallMoistureTransmittanceCoefficientfromAirtoAir(self):
        return _openstudiomodelairflow.AirflowNetworkDuct_resetOverallMoistureTransmittanceCoefficientfromAirtoAir(self)

# Register AirflowNetworkDuct in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkDuct_swigregister(AirflowNetworkDuct)

def toAirflowNetworkDuct(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkDuct(idfObject)

def getAirflowNetworkDuct(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkDuct(t_model, t_handle)

def getAirflowNetworkDucts(t_model):
    return _openstudiomodelairflow.getAirflowNetworkDucts(t_model)

def getAirflowNetworkDuctByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkDuctByName(t_model, t_name)

def getAirflowNetworkDuctsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkDuctsByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkDuct(self) -> OptionalAirflowNetworkDuct:
    """Try to cast the ModelObject to a AirflowNetworkDuct.

    :return: An Optional AirflowNetworkDuct.
    """
    return toAirflowNetworkDuct(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkDuct = _to_AirflowNetworkDuct

def _getAirflowNetworkDuct(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkDuct:
    """Try to get an object of type AirflowNetworkDuct referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkDuct.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkDuct(self, t_handle)
Model.getAirflowNetworkDuct = _getAirflowNetworkDuct

def _getAirflowNetworkDucts(self) -> AirflowNetworkDuctVector:
    """Get a vector of all objects of type AirflowNetworkDuct in the model.

    :return: A vector of AirflowNetworkDuct.
    """
    return getAirflowNetworkDucts(self)
Model.getAirflowNetworkDucts = _getAirflowNetworkDucts

def _getAirflowNetworkDuctByName(self, t_name: str) -> OptionalAirflowNetworkDuct:
    """Try to get an object of type AirflowNetworkDuct that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkDuct.
    """
    return getAirflowNetworkDuctByName(self, t_name)
Model.getAirflowNetworkDuctByName = _getAirflowNetworkDuctByName

def _getAirflowNetworkDuctsByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkDuctVector:
    """Returns all objects of type AirflowNetworkDuct named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkDuctsByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkDuctsByName = _getAirflowNetworkDuctsByName

class ViewFactorData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s, y):
        _openstudiomodelairflow.ViewFactorData_swiginit(self, _openstudiomodelairflow.new_ViewFactorData(s, y))

    def planarSurface(self):
        return _openstudiomodelairflow.ViewFactorData_planarSurface(self)

    def viewFactor(self):
        return _openstudiomodelairflow.ViewFactorData_viewFactor(self)

    def __str__(self):
        return _openstudiomodelairflow.ViewFactorData___str__(self)
    __swig_destroy__ = _openstudiomodelairflow.delete_ViewFactorData

# Register ViewFactorData in _openstudiomodelairflow:
_openstudiomodelairflow.ViewFactorData_swigregister(ViewFactorData)

def __lshift__(*args):
    return _openstudiomodelairflow.__lshift__(*args)
class AirflowNetworkDuctViewFactors(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkDuctViewFactors

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkDuctViewFactors_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkDuctViewFactors(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_iddObjectType()

    def linkage(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_linkage(self)

    def ductSurfaceExposureFraction(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_ductSurfaceExposureFraction(self)

    def isDuctSurfaceExposureFractionDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_isDuctSurfaceExposureFractionDefaulted(self)

    def ductSurfaceEmittance(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_ductSurfaceEmittance(self)

    def isDuctSurfaceEmittanceDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_isDuctSurfaceEmittanceDefaulted(self)

    def getViewFactor(self, surf):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_getViewFactor(self, surf)

    def viewFactors(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_viewFactors(self)

    def setLinkage(self, linkage):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_setLinkage(self, linkage)

    def setDuctSurfaceExposureFraction(self, ductSurfaceExposureFraction):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_setDuctSurfaceExposureFraction(self, ductSurfaceExposureFraction)

    def resetDuctSurfaceExposureFraction(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_resetDuctSurfaceExposureFraction(self)

    def setDuctSurfaceEmittance(self, ductSurfaceEmittance):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_setDuctSurfaceEmittance(self, ductSurfaceEmittance)

    def resetDuctSurfaceEmittance(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_resetDuctSurfaceEmittance(self)

    def setViewFactor(self, surf, F):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_setViewFactor(self, surf, F)

    def removeViewFactor(self, surf):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_removeViewFactor(self, surf)

    def resetViewFactors(self):
        return _openstudiomodelairflow.AirflowNetworkDuctViewFactors_resetViewFactors(self)

# Register AirflowNetworkDuctViewFactors in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkDuctViewFactors_swigregister(AirflowNetworkDuctViewFactors)

def toAirflowNetworkDuctViewFactors(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkDuctViewFactors(idfObject)

def getAirflowNetworkDuctViewFactors(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkDuctViewFactors(t_model, t_handle)

def getAirflowNetworkDuctViewFactorss(t_model):
    return _openstudiomodelairflow.getAirflowNetworkDuctViewFactorss(t_model)

def getAirflowNetworkDuctViewFactorsByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkDuctViewFactorsByName(t_model, t_name)

def getAirflowNetworkDuctViewFactorssByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkDuctViewFactorssByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkDuctViewFactors(self) -> OptionalAirflowNetworkDuctViewFactors:
    """Try to cast the ModelObject to a AirflowNetworkDuctViewFactors.

    :return: An Optional AirflowNetworkDuctViewFactors.
    """
    return toAirflowNetworkDuctViewFactors(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkDuctViewFactors = _to_AirflowNetworkDuctViewFactors

def _getAirflowNetworkDuctViewFactors(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkDuctViewFactors:
    """Try to get an object of type AirflowNetworkDuctViewFactors referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkDuctViewFactors.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkDuctViewFactors(self, t_handle)
Model.getAirflowNetworkDuctViewFactors = _getAirflowNetworkDuctViewFactors

def _getAirflowNetworkDuctViewFactorss(self) -> AirflowNetworkDuctViewFactorsVector:
    """Get a vector of all objects of type AirflowNetworkDuctViewFactors in the model.

    :return: A vector of AirflowNetworkDuctViewFactors.
    """
    return getAirflowNetworkDuctViewFactorss(self)
Model.getAirflowNetworkDuctViewFactorss = _getAirflowNetworkDuctViewFactorss

def _getAirflowNetworkDuctViewFactorsByName(self, t_name: str) -> OptionalAirflowNetworkDuctViewFactors:
    """Try to get an object of type AirflowNetworkDuctViewFactors that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkDuctViewFactors.
    """
    return getAirflowNetworkDuctViewFactorsByName(self, t_name)
Model.getAirflowNetworkDuctViewFactorsByName = _getAirflowNetworkDuctViewFactorsByName

def _getAirflowNetworkDuctViewFactorssByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkDuctViewFactorsVector:
    """Returns all objects of type AirflowNetworkDuctViewFactors named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkDuctViewFactorssByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkDuctViewFactorssByName = _getAirflowNetworkDuctViewFactorssByName

class AirflowNetworkEffectiveLeakageArea(AirflowNetworkComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkEffectiveLeakageArea

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkEffectiveLeakageArea(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_iddObjectType()

    def effectiveLeakageArea(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_effectiveLeakageArea(self)

    def dischargeCoefficient(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_dischargeCoefficient(self)

    def isDischargeCoefficientDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_isDischargeCoefficientDefaulted(self)

    def referencePressureDifference(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_referencePressureDifference(self)

    def isReferencePressureDifferenceDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_isReferencePressureDifferenceDefaulted(self)

    def airMassFlowExponent(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_airMassFlowExponent(self)

    def isAirMassFlowExponentDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_isAirMassFlowExponentDefaulted(self)

    def setEffectiveLeakageArea(self, effectiveLeakageArea):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_setEffectiveLeakageArea(self, effectiveLeakageArea)

    def setDischargeCoefficient(self, dischargeCoefficient):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_setDischargeCoefficient(self, dischargeCoefficient)

    def resetDischargeCoefficient(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_resetDischargeCoefficient(self)

    def setReferencePressureDifference(self, referencePressureDifference):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_setReferencePressureDifference(self, referencePressureDifference)

    def resetReferencePressureDifference(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_resetReferencePressureDifference(self)

    def setAirMassFlowExponent(self, airMassFlowExponent):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_setAirMassFlowExponent(self, airMassFlowExponent)

    def resetAirMassFlowExponent(self):
        return _openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_resetAirMassFlowExponent(self)

# Register AirflowNetworkEffectiveLeakageArea in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkEffectiveLeakageArea_swigregister(AirflowNetworkEffectiveLeakageArea)

def toAirflowNetworkEffectiveLeakageArea(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkEffectiveLeakageArea(idfObject)

def getAirflowNetworkEffectiveLeakageArea(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkEffectiveLeakageArea(t_model, t_handle)

def getAirflowNetworkEffectiveLeakageAreas(t_model):
    return _openstudiomodelairflow.getAirflowNetworkEffectiveLeakageAreas(t_model)

def getAirflowNetworkEffectiveLeakageAreaByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkEffectiveLeakageAreaByName(t_model, t_name)

def getAirflowNetworkEffectiveLeakageAreasByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkEffectiveLeakageAreasByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkEffectiveLeakageArea(self) -> OptionalAirflowNetworkEffectiveLeakageArea:
    """Try to cast the ModelObject to a AirflowNetworkEffectiveLeakageArea.

    :return: An Optional AirflowNetworkEffectiveLeakageArea.
    """
    return toAirflowNetworkEffectiveLeakageArea(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkEffectiveLeakageArea = _to_AirflowNetworkEffectiveLeakageArea

def _getAirflowNetworkEffectiveLeakageArea(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkEffectiveLeakageArea:
    """Try to get an object of type AirflowNetworkEffectiveLeakageArea referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkEffectiveLeakageArea.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkEffectiveLeakageArea(self, t_handle)
Model.getAirflowNetworkEffectiveLeakageArea = _getAirflowNetworkEffectiveLeakageArea

def _getAirflowNetworkEffectiveLeakageAreas(self) -> AirflowNetworkEffectiveLeakageAreaVector:
    """Get a vector of all objects of type AirflowNetworkEffectiveLeakageArea in the model.

    :return: A vector of AirflowNetworkEffectiveLeakageArea.
    """
    return getAirflowNetworkEffectiveLeakageAreas(self)
Model.getAirflowNetworkEffectiveLeakageAreas = _getAirflowNetworkEffectiveLeakageAreas

def _getAirflowNetworkEffectiveLeakageAreaByName(self, t_name: str) -> OptionalAirflowNetworkEffectiveLeakageArea:
    """Try to get an object of type AirflowNetworkEffectiveLeakageArea that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkEffectiveLeakageArea.
    """
    return getAirflowNetworkEffectiveLeakageAreaByName(self, t_name)
Model.getAirflowNetworkEffectiveLeakageAreaByName = _getAirflowNetworkEffectiveLeakageAreaByName

def _getAirflowNetworkEffectiveLeakageAreasByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkEffectiveLeakageAreaVector:
    """Returns all objects of type AirflowNetworkEffectiveLeakageArea named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkEffectiveLeakageAreasByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkEffectiveLeakageAreasByName = _getAirflowNetworkEffectiveLeakageAreasByName

class AirflowNetworkEquivalentDuct(AirflowNetworkComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkEquivalentDuct

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkEquivalentDuct_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkEquivalentDuct(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuct_iddObjectType()

    def straightComponent(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuct_straightComponent(self)

    def coilObjectType(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuct_coilObjectType(self)

    def heatExchangerObjectType(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuct_heatExchangerObjectType(self)

    def terminalUnitObjectType(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuct_terminalUnitObjectType(self)

    def airPathLength(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuct_airPathLength(self)

    def airPathHydraulicDiameter(self):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuct_airPathHydraulicDiameter(self)

    def setAirPathLength(self, airPathLength):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuct_setAirPathLength(self, airPathLength)

    def setAirPathHydraulicDiameter(self, airPathHydraulicDiameter):
        return _openstudiomodelairflow.AirflowNetworkEquivalentDuct_setAirPathHydraulicDiameter(self, airPathHydraulicDiameter)

# Register AirflowNetworkEquivalentDuct in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkEquivalentDuct_swigregister(AirflowNetworkEquivalentDuct)

def toAirflowNetworkEquivalentDuct(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkEquivalentDuct(idfObject)

def getAirflowNetworkEquivalentDuct(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkEquivalentDuct(t_model, t_handle)

def getAirflowNetworkEquivalentDucts(t_model):
    return _openstudiomodelairflow.getAirflowNetworkEquivalentDucts(t_model)

def getAirflowNetworkEquivalentDuctByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkEquivalentDuctByName(t_model, t_name)

def getAirflowNetworkEquivalentDuctsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkEquivalentDuctsByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkEquivalentDuct(self) -> OptionalAirflowNetworkEquivalentDuct:
    """Try to cast the ModelObject to a AirflowNetworkEquivalentDuct.

    :return: An Optional AirflowNetworkEquivalentDuct.
    """
    return toAirflowNetworkEquivalentDuct(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkEquivalentDuct = _to_AirflowNetworkEquivalentDuct

def _getAirflowNetworkEquivalentDuct(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkEquivalentDuct:
    """Try to get an object of type AirflowNetworkEquivalentDuct referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkEquivalentDuct.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkEquivalentDuct(self, t_handle)
Model.getAirflowNetworkEquivalentDuct = _getAirflowNetworkEquivalentDuct

def _getAirflowNetworkEquivalentDucts(self) -> AirflowNetworkEquivalentDuctVector:
    """Get a vector of all objects of type AirflowNetworkEquivalentDuct in the model.

    :return: A vector of AirflowNetworkEquivalentDuct.
    """
    return getAirflowNetworkEquivalentDucts(self)
Model.getAirflowNetworkEquivalentDucts = _getAirflowNetworkEquivalentDucts

def _getAirflowNetworkEquivalentDuctByName(self, t_name: str) -> OptionalAirflowNetworkEquivalentDuct:
    """Try to get an object of type AirflowNetworkEquivalentDuct that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkEquivalentDuct.
    """
    return getAirflowNetworkEquivalentDuctByName(self, t_name)
Model.getAirflowNetworkEquivalentDuctByName = _getAirflowNetworkEquivalentDuctByName

def _getAirflowNetworkEquivalentDuctsByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkEquivalentDuctVector:
    """Returns all objects of type AirflowNetworkEquivalentDuct named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkEquivalentDuctsByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkEquivalentDuctsByName = _getAirflowNetworkEquivalentDuctsByName

class AirflowNetworkExternalNode(AirflowNetworkNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkExternalNode

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkExternalNode_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkExternalNode(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkExternalNode_iddObjectType()

    @staticmethod
    def windAngleTypeValues():
        return _openstudiomodelairflow.AirflowNetworkExternalNode_windAngleTypeValues()

    def externalNodeHeight(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNode_externalNodeHeight(self)

    def isExternalNodeHeightDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNode_isExternalNodeHeightDefaulted(self)

    def windPressureCoefficientCurve(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNode_windPressureCoefficientCurve(self)

    def symmetricWindPressureCoefficientCurve(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNode_symmetricWindPressureCoefficientCurve(self)

    def isSymmetricWindPressureCoefficientCurveDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNode_isSymmetricWindPressureCoefficientCurveDefaulted(self)

    def windAngleType(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNode_windAngleType(self)

    def isWindAngleTypeDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNode_isWindAngleTypeDefaulted(self)

    def setExternalNodeHeight(self, externalNodeHeight):
        return _openstudiomodelairflow.AirflowNetworkExternalNode_setExternalNodeHeight(self, externalNodeHeight)

    def resetExternalNodeHeight(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNode_resetExternalNodeHeight(self)

    def setWindPressureCoefficientCurve(self, wPCValue):
        return _openstudiomodelairflow.AirflowNetworkExternalNode_setWindPressureCoefficientCurve(self, wPCValue)

    def setSymmetricWindPressureCoefficientCurve(self, symmetricWindPressureCoefficientCurve):
        return _openstudiomodelairflow.AirflowNetworkExternalNode_setSymmetricWindPressureCoefficientCurve(self, symmetricWindPressureCoefficientCurve)

    def resetSymmetricWindPressureCoefficientCurve(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNode_resetSymmetricWindPressureCoefficientCurve(self)

    def setWindAngleType(self, windAngleType):
        return _openstudiomodelairflow.AirflowNetworkExternalNode_setWindAngleType(self, windAngleType)

    def resetWindAngleType(self):
        return _openstudiomodelairflow.AirflowNetworkExternalNode_resetWindAngleType(self)

# Register AirflowNetworkExternalNode in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkExternalNode_swigregister(AirflowNetworkExternalNode)

def toAirflowNetworkExternalNode(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkExternalNode(idfObject)

def getAirflowNetworkExternalNode(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkExternalNode(t_model, t_handle)

def getAirflowNetworkExternalNodes(t_model):
    return _openstudiomodelairflow.getAirflowNetworkExternalNodes(t_model)

def getAirflowNetworkExternalNodeByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkExternalNodeByName(t_model, t_name)

def getAirflowNetworkExternalNodesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkExternalNodesByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkExternalNode(self) -> OptionalAirflowNetworkExternalNode:
    """Try to cast the ModelObject to a AirflowNetworkExternalNode.

    :return: An Optional AirflowNetworkExternalNode.
    """
    return toAirflowNetworkExternalNode(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkExternalNode = _to_AirflowNetworkExternalNode

def _getAirflowNetworkExternalNode(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkExternalNode:
    """Try to get an object of type AirflowNetworkExternalNode referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkExternalNode.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkExternalNode(self, t_handle)
Model.getAirflowNetworkExternalNode = _getAirflowNetworkExternalNode

def _getAirflowNetworkExternalNodes(self) -> AirflowNetworkExternalNodeVector:
    """Get a vector of all objects of type AirflowNetworkExternalNode in the model.

    :return: A vector of AirflowNetworkExternalNode.
    """
    return getAirflowNetworkExternalNodes(self)
Model.getAirflowNetworkExternalNodes = _getAirflowNetworkExternalNodes

def _getAirflowNetworkExternalNodeByName(self, t_name: str) -> OptionalAirflowNetworkExternalNode:
    """Try to get an object of type AirflowNetworkExternalNode that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkExternalNode.
    """
    return getAirflowNetworkExternalNodeByName(self, t_name)
Model.getAirflowNetworkExternalNodeByName = _getAirflowNetworkExternalNodeByName

def _getAirflowNetworkExternalNodesByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkExternalNodeVector:
    """Returns all objects of type AirflowNetworkExternalNode named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkExternalNodesByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkExternalNodesByName = _getAirflowNetworkExternalNodesByName

class AirflowNetworkFan(AirflowNetworkComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkFan

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkFan_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkFan(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkFan_iddObjectType()

    def fanConstantVolume(self):
        return _openstudiomodelairflow.AirflowNetworkFan_fanConstantVolume(self)

    def fanVariableVolume(self):
        return _openstudiomodelairflow.AirflowNetworkFan_fanVariableVolume(self)

    def fanOnOff(self):
        return _openstudiomodelairflow.AirflowNetworkFan_fanOnOff(self)

    def fanSystemModel(self):
        return _openstudiomodelairflow.AirflowNetworkFan_fanSystemModel(self)

# Register AirflowNetworkFan in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkFan_swigregister(AirflowNetworkFan)

def toAirflowNetworkFan(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkFan(idfObject)

def getAirflowNetworkFan(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkFan(t_model, t_handle)

def getAirflowNetworkFans(t_model):
    return _openstudiomodelairflow.getAirflowNetworkFans(t_model)

def getAirflowNetworkFanByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkFanByName(t_model, t_name)

def getAirflowNetworkFansByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkFansByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkFan(self) -> OptionalAirflowNetworkFan:
    """Try to cast the ModelObject to a AirflowNetworkFan.

    :return: An Optional AirflowNetworkFan.
    """
    return toAirflowNetworkFan(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkFan = _to_AirflowNetworkFan

def _getAirflowNetworkFan(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkFan:
    """Try to get an object of type AirflowNetworkFan referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkFan.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkFan(self, t_handle)
Model.getAirflowNetworkFan = _getAirflowNetworkFan

def _getAirflowNetworkFans(self) -> AirflowNetworkFanVector:
    """Get a vector of all objects of type AirflowNetworkFan in the model.

    :return: A vector of AirflowNetworkFan.
    """
    return getAirflowNetworkFans(self)
Model.getAirflowNetworkFans = _getAirflowNetworkFans

def _getAirflowNetworkFanByName(self, t_name: str) -> OptionalAirflowNetworkFan:
    """Try to get an object of type AirflowNetworkFan that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkFan.
    """
    return getAirflowNetworkFanByName(self, t_name)
Model.getAirflowNetworkFanByName = _getAirflowNetworkFanByName

def _getAirflowNetworkFansByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkFanVector:
    """Returns all objects of type AirflowNetworkFan named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkFansByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkFansByName = _getAirflowNetworkFansByName

class AirflowNetworkHorizontalOpening(AirflowNetworkComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkHorizontalOpening

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkHorizontalOpening_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkHorizontalOpening(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpening_iddObjectType()

    def airMassFlowCoefficientWhenOpeningisClosed(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpening_airMassFlowCoefficientWhenOpeningisClosed(self)

    def airMassFlowExponentWhenOpeningisClosed(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpening_airMassFlowExponentWhenOpeningisClosed(self)

    def isAirMassFlowExponentWhenOpeningisClosedDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpening_isAirMassFlowExponentWhenOpeningisClosedDefaulted(self)

    def slopingPlaneAngle(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpening_slopingPlaneAngle(self)

    def isSlopingPlaneAngleDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpening_isSlopingPlaneAngleDefaulted(self)

    def dischargeCoefficient(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpening_dischargeCoefficient(self)

    def setAirMassFlowCoefficientWhenOpeningisClosed(self, airMassFlowCoefficientWhenOpeningisClosed):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpening_setAirMassFlowCoefficientWhenOpeningisClosed(self, airMassFlowCoefficientWhenOpeningisClosed)

    def setAirMassFlowExponentWhenOpeningisClosed(self, airMassFlowExponentWhenOpeningisClosed):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpening_setAirMassFlowExponentWhenOpeningisClosed(self, airMassFlowExponentWhenOpeningisClosed)

    def resetAirMassFlowExponentWhenOpeningisClosed(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpening_resetAirMassFlowExponentWhenOpeningisClosed(self)

    def setSlopingPlaneAngle(self, slopingPlaneAngle):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpening_setSlopingPlaneAngle(self, slopingPlaneAngle)

    def resetSlopingPlaneAngle(self):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpening_resetSlopingPlaneAngle(self)

    def setDischargeCoefficient(self, dischargeCoefficient):
        return _openstudiomodelairflow.AirflowNetworkHorizontalOpening_setDischargeCoefficient(self, dischargeCoefficient)

# Register AirflowNetworkHorizontalOpening in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkHorizontalOpening_swigregister(AirflowNetworkHorizontalOpening)

def toAirflowNetworkHorizontalOpening(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkHorizontalOpening(idfObject)

def getAirflowNetworkHorizontalOpening(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkHorizontalOpening(t_model, t_handle)

def getAirflowNetworkHorizontalOpenings(t_model):
    return _openstudiomodelairflow.getAirflowNetworkHorizontalOpenings(t_model)

def getAirflowNetworkHorizontalOpeningByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkHorizontalOpeningByName(t_model, t_name)

def getAirflowNetworkHorizontalOpeningsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkHorizontalOpeningsByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkHorizontalOpening(self) -> OptionalAirflowNetworkHorizontalOpening:
    """Try to cast the ModelObject to a AirflowNetworkHorizontalOpening.

    :return: An Optional AirflowNetworkHorizontalOpening.
    """
    return toAirflowNetworkHorizontalOpening(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkHorizontalOpening = _to_AirflowNetworkHorizontalOpening

def _getAirflowNetworkHorizontalOpening(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkHorizontalOpening:
    """Try to get an object of type AirflowNetworkHorizontalOpening referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkHorizontalOpening.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkHorizontalOpening(self, t_handle)
Model.getAirflowNetworkHorizontalOpening = _getAirflowNetworkHorizontalOpening

def _getAirflowNetworkHorizontalOpenings(self) -> AirflowNetworkHorizontalOpeningVector:
    """Get a vector of all objects of type AirflowNetworkHorizontalOpening in the model.

    :return: A vector of AirflowNetworkHorizontalOpening.
    """
    return getAirflowNetworkHorizontalOpenings(self)
Model.getAirflowNetworkHorizontalOpenings = _getAirflowNetworkHorizontalOpenings

def _getAirflowNetworkHorizontalOpeningByName(self, t_name: str) -> OptionalAirflowNetworkHorizontalOpening:
    """Try to get an object of type AirflowNetworkHorizontalOpening that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkHorizontalOpening.
    """
    return getAirflowNetworkHorizontalOpeningByName(self, t_name)
Model.getAirflowNetworkHorizontalOpeningByName = _getAirflowNetworkHorizontalOpeningByName

def _getAirflowNetworkHorizontalOpeningsByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkHorizontalOpeningVector:
    """Returns all objects of type AirflowNetworkHorizontalOpening named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkHorizontalOpeningsByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkHorizontalOpeningsByName = _getAirflowNetworkHorizontalOpeningsByName

class AirflowNetworkLeakageRatio(AirflowNetworkComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkLeakageRatio

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkLeakageRatio_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkLeakageRatio(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkLeakageRatio_iddObjectType()

    def effectiveLeakageRatio(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatio_effectiveLeakageRatio(self)

    def maximumFlowRate(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatio_maximumFlowRate(self)

    def referencePressureDifference(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatio_referencePressureDifference(self)

    def airMassFlowExponent(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatio_airMassFlowExponent(self)

    def isAirMassFlowExponentDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatio_isAirMassFlowExponentDefaulted(self)

    def setEffectiveLeakageRatio(self, effectiveLeakageRatio):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatio_setEffectiveLeakageRatio(self, effectiveLeakageRatio)

    def resetEffectiveLeakageRatio(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatio_resetEffectiveLeakageRatio(self)

    def setMaximumFlowRate(self, maximumFlowRate):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatio_setMaximumFlowRate(self, maximumFlowRate)

    def setReferencePressureDifference(self, referencePressureDifference):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatio_setReferencePressureDifference(self, referencePressureDifference)

    def setAirMassFlowExponent(self, airMassFlowExponent):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatio_setAirMassFlowExponent(self, airMassFlowExponent)

    def resetAirMassFlowExponent(self):
        return _openstudiomodelairflow.AirflowNetworkLeakageRatio_resetAirMassFlowExponent(self)

# Register AirflowNetworkLeakageRatio in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkLeakageRatio_swigregister(AirflowNetworkLeakageRatio)

def toAirflowNetworkLeakageRatio(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkLeakageRatio(idfObject)

def getAirflowNetworkLeakageRatio(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkLeakageRatio(t_model, t_handle)

def getAirflowNetworkLeakageRatios(t_model):
    return _openstudiomodelairflow.getAirflowNetworkLeakageRatios(t_model)

def getAirflowNetworkLeakageRatioByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkLeakageRatioByName(t_model, t_name)

def getAirflowNetworkLeakageRatiosByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkLeakageRatiosByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkLeakageRatio(self) -> OptionalAirflowNetworkLeakageRatio:
    """Try to cast the ModelObject to a AirflowNetworkLeakageRatio.

    :return: An Optional AirflowNetworkLeakageRatio.
    """
    return toAirflowNetworkLeakageRatio(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkLeakageRatio = _to_AirflowNetworkLeakageRatio

def _getAirflowNetworkLeakageRatio(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkLeakageRatio:
    """Try to get an object of type AirflowNetworkLeakageRatio referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkLeakageRatio.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkLeakageRatio(self, t_handle)
Model.getAirflowNetworkLeakageRatio = _getAirflowNetworkLeakageRatio

def _getAirflowNetworkLeakageRatios(self) -> AirflowNetworkLeakageRatioVector:
    """Get a vector of all objects of type AirflowNetworkLeakageRatio in the model.

    :return: A vector of AirflowNetworkLeakageRatio.
    """
    return getAirflowNetworkLeakageRatios(self)
Model.getAirflowNetworkLeakageRatios = _getAirflowNetworkLeakageRatios

def _getAirflowNetworkLeakageRatioByName(self, t_name: str) -> OptionalAirflowNetworkLeakageRatio:
    """Try to get an object of type AirflowNetworkLeakageRatio that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkLeakageRatio.
    """
    return getAirflowNetworkLeakageRatioByName(self, t_name)
Model.getAirflowNetworkLeakageRatioByName = _getAirflowNetworkLeakageRatioByName

def _getAirflowNetworkLeakageRatiosByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkLeakageRatioVector:
    """Returns all objects of type AirflowNetworkLeakageRatio named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkLeakageRatiosByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkLeakageRatiosByName = _getAirflowNetworkLeakageRatiosByName

class AirflowNetworkOccupantVentilationControl(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkOccupantVentilationControl

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkOccupantVentilationControl(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_iddObjectType()

    def minimumOpeningTime(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_minimumOpeningTime(self)

    def isMinimumOpeningTimeDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_isMinimumOpeningTimeDefaulted(self)

    def minimumClosingTime(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_minimumClosingTime(self)

    def isMinimumClosingTimeDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_isMinimumClosingTimeDefaulted(self)

    def thermalComfortLowTemperatureCurve(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_thermalComfortLowTemperatureCurve(self)

    def thermalComfortTemperatureBoundaryPoint(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_thermalComfortTemperatureBoundaryPoint(self)

    def isThermalComfortTemperatureBoundaryPointDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_isThermalComfortTemperatureBoundaryPointDefaulted(self)

    def thermalComfortHighTemperatureCurve(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_thermalComfortHighTemperatureCurve(self)

    def maximumPredictedPercentageofDissatisfiedThreshold(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_maximumPredictedPercentageofDissatisfiedThreshold(self)

    def isMaximumPredictedPercentageofDissatisfiedThresholdDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_isMaximumPredictedPercentageofDissatisfiedThresholdDefaulted(self)

    def occupancyCheck(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_occupancyCheck(self)

    def isOccupancyCheckDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_isOccupancyCheckDefaulted(self)

    def openingProbabilitySchedule(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_openingProbabilitySchedule(self)

    def closingProbabilitySchedule(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_closingProbabilitySchedule(self)

    def setMinimumOpeningTime(self, minimumOpeningTime):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_setMinimumOpeningTime(self, minimumOpeningTime)

    def resetMinimumOpeningTime(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_resetMinimumOpeningTime(self)

    def setMinimumClosingTime(self, minimumClosingTime):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_setMinimumClosingTime(self, minimumClosingTime)

    def resetMinimumClosingTime(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_resetMinimumClosingTime(self)

    def setThermalComfortLowTemperatureCurve(self, curve):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_setThermalComfortLowTemperatureCurve(self, curve)

    def setThermalComfortTemperatureBoundaryPoint(self, thermalComfortTemperatureBoundaryPoint):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_setThermalComfortTemperatureBoundaryPoint(self, thermalComfortTemperatureBoundaryPoint)

    def resetThermalComfortTemperatureBoundaryPoint(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_resetThermalComfortTemperatureBoundaryPoint(self)

    def setThermalComfortHighTemperatureCurve(self, curve):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_setThermalComfortHighTemperatureCurve(self, curve)

    def resetThermalComfortHighTemperatureCurve(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_resetThermalComfortHighTemperatureCurve(self)

    def setMaximumPredictedPercentageofDissatisfiedThreshold(self, maximumPredictedPercentageofDissatisfiedThreshold):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_setMaximumPredictedPercentageofDissatisfiedThreshold(self, maximumPredictedPercentageofDissatisfiedThreshold)

    def resetMaximumPredictedPercentageofDissatisfiedThreshold(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_resetMaximumPredictedPercentageofDissatisfiedThreshold(self)

    def setOccupancyCheck(self, occupancyCheck):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_setOccupancyCheck(self, occupancyCheck)

    def resetOccupancyCheck(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_resetOccupancyCheck(self)

    def setOpeningProbabilitySchedule(self, schedule):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_setOpeningProbabilitySchedule(self, schedule)

    def resetOpeningProbabilitySchedule(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_resetOpeningProbabilitySchedule(self)

    def setClosingProbabilitySchedule(self, schedule):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_setClosingProbabilitySchedule(self, schedule)

    def resetClosingProbabilitySchedule(self):
        return _openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_resetClosingProbabilitySchedule(self)

# Register AirflowNetworkOccupantVentilationControl in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkOccupantVentilationControl_swigregister(AirflowNetworkOccupantVentilationControl)

def toAirflowNetworkOccupantVentilationControl(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkOccupantVentilationControl(idfObject)

def getAirflowNetworkOccupantVentilationControl(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkOccupantVentilationControl(t_model, t_handle)

def getAirflowNetworkOccupantVentilationControls(t_model):
    return _openstudiomodelairflow.getAirflowNetworkOccupantVentilationControls(t_model)

def getAirflowNetworkOccupantVentilationControlByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkOccupantVentilationControlByName(t_model, t_name)

def getAirflowNetworkOccupantVentilationControlsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkOccupantVentilationControlsByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkOccupantVentilationControl(self) -> OptionalAirflowNetworkOccupantVentilationControl:
    """Try to cast the ModelObject to a AirflowNetworkOccupantVentilationControl.

    :return: An Optional AirflowNetworkOccupantVentilationControl.
    """
    return toAirflowNetworkOccupantVentilationControl(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkOccupantVentilationControl = _to_AirflowNetworkOccupantVentilationControl

def _getAirflowNetworkOccupantVentilationControl(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkOccupantVentilationControl:
    """Try to get an object of type AirflowNetworkOccupantVentilationControl referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkOccupantVentilationControl.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkOccupantVentilationControl(self, t_handle)
Model.getAirflowNetworkOccupantVentilationControl = _getAirflowNetworkOccupantVentilationControl

def _getAirflowNetworkOccupantVentilationControls(self) -> AirflowNetworkOccupantVentilationControlVector:
    """Get a vector of all objects of type AirflowNetworkOccupantVentilationControl in the model.

    :return: A vector of AirflowNetworkOccupantVentilationControl.
    """
    return getAirflowNetworkOccupantVentilationControls(self)
Model.getAirflowNetworkOccupantVentilationControls = _getAirflowNetworkOccupantVentilationControls

def _getAirflowNetworkOccupantVentilationControlByName(self, t_name: str) -> OptionalAirflowNetworkOccupantVentilationControl:
    """Try to get an object of type AirflowNetworkOccupantVentilationControl that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkOccupantVentilationControl.
    """
    return getAirflowNetworkOccupantVentilationControlByName(self, t_name)
Model.getAirflowNetworkOccupantVentilationControlByName = _getAirflowNetworkOccupantVentilationControlByName

def _getAirflowNetworkOccupantVentilationControlsByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkOccupantVentilationControlVector:
    """Returns all objects of type AirflowNetworkOccupantVentilationControl named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkOccupantVentilationControlsByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkOccupantVentilationControlsByName = _getAirflowNetworkOccupantVentilationControlsByName

class AirflowNetworkOutdoorAirflow(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkOutdoorAirflow

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkOutdoorAirflow_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkOutdoorAirflow(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflow_iddObjectType()

    def controllerOutdoorAir(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflow_controllerOutdoorAir(self)

    def crack(self):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflow_crack(self)

    def setCrack(self, crack):
        return _openstudiomodelairflow.AirflowNetworkOutdoorAirflow_setCrack(self, crack)

# Register AirflowNetworkOutdoorAirflow in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkOutdoorAirflow_swigregister(AirflowNetworkOutdoorAirflow)

def toAirflowNetworkOutdoorAirflow(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkOutdoorAirflow(idfObject)

def getAirflowNetworkOutdoorAirflow(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkOutdoorAirflow(t_model, t_handle)

def getAirflowNetworkOutdoorAirflows(t_model):
    return _openstudiomodelairflow.getAirflowNetworkOutdoorAirflows(t_model)

def getAirflowNetworkOutdoorAirflowByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkOutdoorAirflowByName(t_model, t_name)

def getAirflowNetworkOutdoorAirflowsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkOutdoorAirflowsByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkOutdoorAirflow(self) -> OptionalAirflowNetworkOutdoorAirflow:
    """Try to cast the ModelObject to a AirflowNetworkOutdoorAirflow.

    :return: An Optional AirflowNetworkOutdoorAirflow.
    """
    return toAirflowNetworkOutdoorAirflow(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkOutdoorAirflow = _to_AirflowNetworkOutdoorAirflow

def _getAirflowNetworkOutdoorAirflow(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkOutdoorAirflow:
    """Try to get an object of type AirflowNetworkOutdoorAirflow referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkOutdoorAirflow.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkOutdoorAirflow(self, t_handle)
Model.getAirflowNetworkOutdoorAirflow = _getAirflowNetworkOutdoorAirflow

def _getAirflowNetworkOutdoorAirflows(self) -> AirflowNetworkOutdoorAirflowVector:
    """Get a vector of all objects of type AirflowNetworkOutdoorAirflow in the model.

    :return: A vector of AirflowNetworkOutdoorAirflow.
    """
    return getAirflowNetworkOutdoorAirflows(self)
Model.getAirflowNetworkOutdoorAirflows = _getAirflowNetworkOutdoorAirflows

def _getAirflowNetworkOutdoorAirflowByName(self, t_name: str) -> OptionalAirflowNetworkOutdoorAirflow:
    """Try to get an object of type AirflowNetworkOutdoorAirflow that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkOutdoorAirflow.
    """
    return getAirflowNetworkOutdoorAirflowByName(self, t_name)
Model.getAirflowNetworkOutdoorAirflowByName = _getAirflowNetworkOutdoorAirflowByName

def _getAirflowNetworkOutdoorAirflowsByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkOutdoorAirflowVector:
    """Returns all objects of type AirflowNetworkOutdoorAirflow named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkOutdoorAirflowsByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkOutdoorAirflowsByName = _getAirflowNetworkOutdoorAirflowsByName

class AirflowNetworkReferenceCrackConditions(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkReferenceCrackConditions

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkReferenceCrackConditions(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_iddObjectType()

    def temperature(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_temperature(self)

    def isTemperatureDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_isTemperatureDefaulted(self)

    def barometricPressure(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_barometricPressure(self)

    def isBarometricPressureDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_isBarometricPressureDefaulted(self)

    def humidityRatio(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_humidityRatio(self)

    def isHumidityRatioDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_isHumidityRatioDefaulted(self)

    def setTemperature(self, referenceTemperature):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_setTemperature(self, referenceTemperature)

    def resetTemperature(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_resetTemperature(self)

    def setBarometricPressure(self, referenceBarometricPressure):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_setBarometricPressure(self, referenceBarometricPressure)

    def resetBarometricPressure(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_resetBarometricPressure(self)

    def setHumidityRatio(self, referenceHumidityRatio):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_setHumidityRatio(self, referenceHumidityRatio)

    def resetHumidityRatio(self):
        return _openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_resetHumidityRatio(self)

# Register AirflowNetworkReferenceCrackConditions in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkReferenceCrackConditions_swigregister(AirflowNetworkReferenceCrackConditions)

def toAirflowNetworkReferenceCrackConditions(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkReferenceCrackConditions(idfObject)

def getAirflowNetworkReferenceCrackConditions(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkReferenceCrackConditions(t_model, t_handle)

def getAirflowNetworkReferenceCrackConditionss(t_model):
    return _openstudiomodelairflow.getAirflowNetworkReferenceCrackConditionss(t_model)

def getAirflowNetworkReferenceCrackConditionsByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkReferenceCrackConditionsByName(t_model, t_name)

def getAirflowNetworkReferenceCrackConditionssByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkReferenceCrackConditionssByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkReferenceCrackConditions(self) -> OptionalAirflowNetworkReferenceCrackConditions:
    """Try to cast the ModelObject to a AirflowNetworkReferenceCrackConditions.

    :return: An Optional AirflowNetworkReferenceCrackConditions.
    """
    return toAirflowNetworkReferenceCrackConditions(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkReferenceCrackConditions = _to_AirflowNetworkReferenceCrackConditions

def _getAirflowNetworkReferenceCrackConditions(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkReferenceCrackConditions:
    """Try to get an object of type AirflowNetworkReferenceCrackConditions referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkReferenceCrackConditions.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkReferenceCrackConditions(self, t_handle)
Model.getAirflowNetworkReferenceCrackConditions = _getAirflowNetworkReferenceCrackConditions

def _getAirflowNetworkReferenceCrackConditionss(self) -> AirflowNetworkReferenceCrackConditionsVector:
    """Get a vector of all objects of type AirflowNetworkReferenceCrackConditions in the model.

    :return: A vector of AirflowNetworkReferenceCrackConditions.
    """
    return getAirflowNetworkReferenceCrackConditionss(self)
Model.getAirflowNetworkReferenceCrackConditionss = _getAirflowNetworkReferenceCrackConditionss

def _getAirflowNetworkReferenceCrackConditionsByName(self, t_name: str) -> OptionalAirflowNetworkReferenceCrackConditions:
    """Try to get an object of type AirflowNetworkReferenceCrackConditions that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkReferenceCrackConditions.
    """
    return getAirflowNetworkReferenceCrackConditionsByName(self, t_name)
Model.getAirflowNetworkReferenceCrackConditionsByName = _getAirflowNetworkReferenceCrackConditionsByName

def _getAirflowNetworkReferenceCrackConditionssByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkReferenceCrackConditionsVector:
    """Returns all objects of type AirflowNetworkReferenceCrackConditions named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkReferenceCrackConditionssByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkReferenceCrackConditionssByName = _getAirflowNetworkReferenceCrackConditionssByName

class AirflowNetworkSimpleOpening(AirflowNetworkComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkSimpleOpening

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkSimpleOpening_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkSimpleOpening(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkSimpleOpening_iddObjectType()

    def airMassFlowCoefficientWhenOpeningisClosed(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpening_airMassFlowCoefficientWhenOpeningisClosed(self)

    def airMassFlowExponentWhenOpeningisClosed(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpening_airMassFlowExponentWhenOpeningisClosed(self)

    def isAirMassFlowExponentWhenOpeningisClosedDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpening_isAirMassFlowExponentWhenOpeningisClosedDefaulted(self)

    def minimumDensityDifferenceforTwoWayFlow(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpening_minimumDensityDifferenceforTwoWayFlow(self)

    def dischargeCoefficient(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpening_dischargeCoefficient(self)

    def setAirMassFlowCoefficientWhenOpeningisClosed(self, airMassFlowCoefficientWhenOpeningisClosed):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpening_setAirMassFlowCoefficientWhenOpeningisClosed(self, airMassFlowCoefficientWhenOpeningisClosed)

    def setAirMassFlowExponentWhenOpeningisClosed(self, airMassFlowExponentWhenOpeningisClosed):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpening_setAirMassFlowExponentWhenOpeningisClosed(self, airMassFlowExponentWhenOpeningisClosed)

    def resetAirMassFlowExponentWhenOpeningisClosed(self):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpening_resetAirMassFlowExponentWhenOpeningisClosed(self)

    def setMinimumDensityDifferenceforTwoWayFlow(self, minimumDensityDifferenceforTwoWayFlow):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpening_setMinimumDensityDifferenceforTwoWayFlow(self, minimumDensityDifferenceforTwoWayFlow)

    def setDischargeCoefficient(self, dischargeCoefficient):
        return _openstudiomodelairflow.AirflowNetworkSimpleOpening_setDischargeCoefficient(self, dischargeCoefficient)

# Register AirflowNetworkSimpleOpening in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkSimpleOpening_swigregister(AirflowNetworkSimpleOpening)

def toAirflowNetworkSimpleOpening(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkSimpleOpening(idfObject)

def getAirflowNetworkSimpleOpening(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkSimpleOpening(t_model, t_handle)

def getAirflowNetworkSimpleOpenings(t_model):
    return _openstudiomodelairflow.getAirflowNetworkSimpleOpenings(t_model)

def getAirflowNetworkSimpleOpeningByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkSimpleOpeningByName(t_model, t_name)

def getAirflowNetworkSimpleOpeningsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkSimpleOpeningsByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkSimpleOpening(self) -> OptionalAirflowNetworkSimpleOpening:
    """Try to cast the ModelObject to a AirflowNetworkSimpleOpening.

    :return: An Optional AirflowNetworkSimpleOpening.
    """
    return toAirflowNetworkSimpleOpening(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkSimpleOpening = _to_AirflowNetworkSimpleOpening

def _getAirflowNetworkSimpleOpening(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkSimpleOpening:
    """Try to get an object of type AirflowNetworkSimpleOpening referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkSimpleOpening.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkSimpleOpening(self, t_handle)
Model.getAirflowNetworkSimpleOpening = _getAirflowNetworkSimpleOpening

def _getAirflowNetworkSimpleOpenings(self) -> AirflowNetworkSimpleOpeningVector:
    """Get a vector of all objects of type AirflowNetworkSimpleOpening in the model.

    :return: A vector of AirflowNetworkSimpleOpening.
    """
    return getAirflowNetworkSimpleOpenings(self)
Model.getAirflowNetworkSimpleOpenings = _getAirflowNetworkSimpleOpenings

def _getAirflowNetworkSimpleOpeningByName(self, t_name: str) -> OptionalAirflowNetworkSimpleOpening:
    """Try to get an object of type AirflowNetworkSimpleOpening that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkSimpleOpening.
    """
    return getAirflowNetworkSimpleOpeningByName(self, t_name)
Model.getAirflowNetworkSimpleOpeningByName = _getAirflowNetworkSimpleOpeningByName

def _getAirflowNetworkSimpleOpeningsByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkSimpleOpeningVector:
    """Returns all objects of type AirflowNetworkSimpleOpening named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkSimpleOpeningsByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkSimpleOpeningsByName = _getAirflowNetworkSimpleOpeningsByName

class AirflowNetworkSimulationControl(openstudiomodelcore.ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkSimulationControl

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkSimulationControl_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkSimulationControl(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_iddObjectType()

    @staticmethod
    def solverValues():
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_solverValues()

    def airflowNetworkControl(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_airflowNetworkControl(self)

    def isAirflowNetworkControlDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_isAirflowNetworkControlDefaulted(self)

    def windPressureCoefficientType(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_windPressureCoefficientType(self)

    def isWindPressureCoefficientTypeDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_isWindPressureCoefficientTypeDefaulted(self)

    def heightSelectionforLocalWindPressureCalculation(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_heightSelectionforLocalWindPressureCalculation(self)

    def isHeightSelectionforLocalWindPressureCalculationDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_isHeightSelectionforLocalWindPressureCalculationDefaulted(self)

    def buildingType(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_buildingType(self)

    def isBuildingTypeDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_isBuildingTypeDefaulted(self)

    def maximumNumberofIterations(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_maximumNumberofIterations(self)

    def isMaximumNumberofIterationsDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_isMaximumNumberofIterationsDefaulted(self)

    def initializationType(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_initializationType(self)

    def isInitializationTypeDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_isInitializationTypeDefaulted(self)

    def relativeAirflowConvergenceTolerance(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_relativeAirflowConvergenceTolerance(self)

    def isRelativeAirflowConvergenceToleranceDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_isRelativeAirflowConvergenceToleranceDefaulted(self)

    def absoluteAirflowConvergenceTolerance(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_absoluteAirflowConvergenceTolerance(self)

    def isAbsoluteAirflowConvergenceToleranceDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_isAbsoluteAirflowConvergenceToleranceDefaulted(self)

    def convergenceAccelerationLimit(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_convergenceAccelerationLimit(self)

    def isConvergenceAccelerationLimitDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_isConvergenceAccelerationLimitDefaulted(self)

    def azimuthAngleofLongAxisofBuilding(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_azimuthAngleofLongAxisofBuilding(self)

    def isAzimuthAngleofLongAxisofBuildingDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_isAzimuthAngleofLongAxisofBuildingDefaulted(self)

    def buildingAspectRatio(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_buildingAspectRatio(self)

    def isBuildingAspectRatioDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_isBuildingAspectRatioDefaulted(self)

    def heightDependenceofExternalNodeTemperature(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_heightDependenceofExternalNodeTemperature(self)

    def isHeightDependenceofExternalNodeTemperatureDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_isHeightDependenceofExternalNodeTemperatureDefaulted(self)

    def solver(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_solver(self)

    def isSolverDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_isSolverDefaulted(self)

    def allowUnsupportedZoneEquipment(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_allowUnsupportedZoneEquipment(self)

    def isAllowUnsupportedZoneEquipmentDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_isAllowUnsupportedZoneEquipmentDefaulted(self)

    def setAirflowNetworkControl(self, airflowNetworkControl):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_setAirflowNetworkControl(self, airflowNetworkControl)

    def resetAirflowNetworkControl(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_resetAirflowNetworkControl(self)

    def setWindPressureCoefficientType(self, type):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_setWindPressureCoefficientType(self, type)

    def resetWindPressureCoefficientType(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_resetWindPressureCoefficientType(self)

    def setHeightSelectionforLocalWindPressureCalculation(self, height):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_setHeightSelectionforLocalWindPressureCalculation(self, height)

    def resetHeightSelectionforLocalWindPressureCalculation(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_resetHeightSelectionforLocalWindPressureCalculation(self)

    def setBuildingType(self, type):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_setBuildingType(self, type)

    def resetBuildingType(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_resetBuildingType(self)

    def setMaximumNumberofIterations(self, number):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_setMaximumNumberofIterations(self, number)

    def resetMaximumNumberofIterations(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_resetMaximumNumberofIterations(self)

    def setInitializationType(self, type):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_setInitializationType(self, type)

    def resetInitializationType(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_resetInitializationType(self)

    def setRelativeAirflowConvergenceTolerance(self, tolerance):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_setRelativeAirflowConvergenceTolerance(self, tolerance)

    def resetRelativeAirflowConvergenceTolerance(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_resetRelativeAirflowConvergenceTolerance(self)

    def setAbsoluteAirflowConvergenceTolerance(self, tolerance):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_setAbsoluteAirflowConvergenceTolerance(self, tolerance)

    def resetAbsoluteAirflowConvergenceTolerance(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_resetAbsoluteAirflowConvergenceTolerance(self)

    def setConvergenceAccelerationLimit(self, limit):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_setConvergenceAccelerationLimit(self, limit)

    def resetConvergenceAccelerationLimit(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_resetConvergenceAccelerationLimit(self)

    def setAzimuthAngleofLongAxisofBuilding(self, angle):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_setAzimuthAngleofLongAxisofBuilding(self, angle)

    def resetAzimuthAngleofLongAxisofBuilding(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_resetAzimuthAngleofLongAxisofBuilding(self)

    def setBuildingAspectRatio(self, ratio):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_setBuildingAspectRatio(self, ratio)

    def resetBuildingAspectRatio(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_resetBuildingAspectRatio(self)

    def setHeightDependenceofExternalNodeTemperature(self, tf):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_setHeightDependenceofExternalNodeTemperature(self, tf)

    def resetHeightDependenceofExternalNodeTemperature(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_resetHeightDependenceofExternalNodeTemperature(self)

    def setSolver(self, solver):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_setSolver(self, solver)

    def resetSolver(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_resetSolver(self)

    def setAllowUnsupportedZoneEquipment(self, allowUnsupportedZoneEquipment):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_setAllowUnsupportedZoneEquipment(self, allowUnsupportedZoneEquipment)

    def resetAllowUnsupportedZoneEquipment(self):
        return _openstudiomodelairflow.AirflowNetworkSimulationControl_resetAllowUnsupportedZoneEquipment(self)

# Register AirflowNetworkSimulationControl in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkSimulationControl_swigregister(AirflowNetworkSimulationControl)

def toAirflowNetworkSimulationControl(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkSimulationControl(idfObject)

def getAirflowNetworkSimulationControl(t_model):
    return _openstudiomodelairflow.getAirflowNetworkSimulationControl(t_model)

def getOptionalAirflowNetworkSimulationControl(t_model):
    return _openstudiomodelairflow.getOptionalAirflowNetworkSimulationControl(t_model)

def _to_AirflowNetworkSimulationControl(self) -> OptionalAirflowNetworkSimulationControl:
    """Try to cast the ModelObject to a AirflowNetworkSimulationControl.

    :return: An Optional AirflowNetworkSimulationControl.
    """
    return toAirflowNetworkSimulationControl(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkSimulationControl = _to_AirflowNetworkSimulationControl

def _getAirflowNetworkSimulationControl(self) -> AirflowNetworkSimulationControl:
    """Get or instantiate a UniqueModelObject of type AirflowNetworkSimulationControl.

    :return: An existing AirflowNetworkSimulationControl or a newly instantiated one.
    """
    return getAirflowNetworkSimulationControl(self)
Model.getAirflowNetworkSimulationControl = _getAirflowNetworkSimulationControl

def _getOptionalAirflowNetworkSimulationControl(self) -> OptionalAirflowNetworkSimulationControl:
    """Return a UniqueModelObject of type AirflowNetworkSimulationControl only if it's already present in the Model.

    :return: An Optional AirflowNetworkSimulationControl.
    """
    return getOptionalAirflowNetworkSimulationControl(self)
Model.getOptionalAirflowNetworkSimulationControl = _getOptionalAirflowNetworkSimulationControl

class AirflowNetworkSpecifiedFlowRate(AirflowNetworkComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkSpecifiedFlowRate

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRate_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkSpecifiedFlowRate(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRate_iddObjectType()

    @staticmethod
    def airFlowUnitsValues():
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRate_airFlowUnitsValues()

    @staticmethod
    def validAirFlowUnitsValues():
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRate_validAirFlowUnitsValues()

    def airFlowValue(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRate_airFlowValue(self)

    def airFlowUnits(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRate_airFlowUnits(self)

    def isAirFlowUnitsDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRate_isAirFlowUnitsDefaulted(self)

    def setAirFlowValue(self, airFlowValue):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRate_setAirFlowValue(self, airFlowValue)

    def setAirFlowUnits(self, airFlowUnits):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRate_setAirFlowUnits(self, airFlowUnits)

    def resetAirFlowUnits(self):
        return _openstudiomodelairflow.AirflowNetworkSpecifiedFlowRate_resetAirFlowUnits(self)

# Register AirflowNetworkSpecifiedFlowRate in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkSpecifiedFlowRate_swigregister(AirflowNetworkSpecifiedFlowRate)

def toAirflowNetworkSpecifiedFlowRate(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkSpecifiedFlowRate(idfObject)

def getAirflowNetworkSpecifiedFlowRate(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkSpecifiedFlowRate(t_model, t_handle)

def getAirflowNetworkSpecifiedFlowRates(t_model):
    return _openstudiomodelairflow.getAirflowNetworkSpecifiedFlowRates(t_model)

def getAirflowNetworkSpecifiedFlowRateByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkSpecifiedFlowRateByName(t_model, t_name)

def getAirflowNetworkSpecifiedFlowRatesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkSpecifiedFlowRatesByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkSpecifiedFlowRate(self) -> OptionalAirflowNetworkSpecifiedFlowRate:
    """Try to cast the ModelObject to a AirflowNetworkSpecifiedFlowRate.

    :return: An Optional AirflowNetworkSpecifiedFlowRate.
    """
    return toAirflowNetworkSpecifiedFlowRate(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkSpecifiedFlowRate = _to_AirflowNetworkSpecifiedFlowRate

def _getAirflowNetworkSpecifiedFlowRate(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkSpecifiedFlowRate:
    """Try to get an object of type AirflowNetworkSpecifiedFlowRate referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkSpecifiedFlowRate.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkSpecifiedFlowRate(self, t_handle)
Model.getAirflowNetworkSpecifiedFlowRate = _getAirflowNetworkSpecifiedFlowRate

def _getAirflowNetworkSpecifiedFlowRates(self) -> AirflowNetworkSpecifiedFlowRateVector:
    """Get a vector of all objects of type AirflowNetworkSpecifiedFlowRate in the model.

    :return: A vector of AirflowNetworkSpecifiedFlowRate.
    """
    return getAirflowNetworkSpecifiedFlowRates(self)
Model.getAirflowNetworkSpecifiedFlowRates = _getAirflowNetworkSpecifiedFlowRates

def _getAirflowNetworkSpecifiedFlowRateByName(self, t_name: str) -> OptionalAirflowNetworkSpecifiedFlowRate:
    """Try to get an object of type AirflowNetworkSpecifiedFlowRate that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkSpecifiedFlowRate.
    """
    return getAirflowNetworkSpecifiedFlowRateByName(self, t_name)
Model.getAirflowNetworkSpecifiedFlowRateByName = _getAirflowNetworkSpecifiedFlowRateByName

def _getAirflowNetworkSpecifiedFlowRatesByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkSpecifiedFlowRateVector:
    """Returns all objects of type AirflowNetworkSpecifiedFlowRate named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkSpecifiedFlowRatesByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkSpecifiedFlowRatesByName = _getAirflowNetworkSpecifiedFlowRatesByName

class AirflowNetworkSurface(AirflowNetworkLinkage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkSurface

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkSurface_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkSurface(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkSurface_iddObjectType()

    @staticmethod
    def ventilationControlModeValues():
        return _openstudiomodelairflow.AirflowNetworkSurface_ventilationControlModeValues()

    def surface(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_surface(self)

    def leakageComponent(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_leakageComponent(self)

    def externalNode(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_externalNode(self)

    def windowDoorOpeningFactorOrCrackFactor(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_windowDoorOpeningFactorOrCrackFactor(self)

    def isWindowDoorOpeningFactorOrCrackFactorDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_isWindowDoorOpeningFactorOrCrackFactorDefaulted(self)

    def ventilationControlMode(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_ventilationControlMode(self)

    def isVentilationControlModeDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_isVentilationControlModeDefaulted(self)

    def ventilationControlZoneTemperatureSetpointSchedule(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_ventilationControlZoneTemperatureSetpointSchedule(self)

    def minimumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_minimumVentingOpenFactor(self)

    def isMinimumVentingOpenFactorDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_isMinimumVentingOpenFactorDefaulted(self)

    def indoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_indoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor(self)

    def isIndoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactorDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_isIndoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactorDefaulted(self)

    def indoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_indoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor(self)

    def isIndoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactorDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_isIndoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactorDefaulted(self)

    def indoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_indoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor(self)

    def isIndoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactorDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_isIndoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactorDefaulted(self)

    def indoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_indoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor(self)

    def isIndoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactorDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_isIndoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactorDefaulted(self)

    def ventingAvailabilitySchedule(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_ventingAvailabilitySchedule(self)

    def occupantVentilationControl(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_occupantVentilationControl(self)

    def setLeakageComponent(self, surfaceAirflowLeakage):
        return _openstudiomodelairflow.AirflowNetworkSurface_setLeakageComponent(self, surfaceAirflowLeakage)

    def setExternalNode(self, externalNode):
        return _openstudiomodelairflow.AirflowNetworkSurface_setExternalNode(self, externalNode)

    def resetExternalNode(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_resetExternalNode(self)

    def setWindowDoorOpeningFactorOrCrackFactor(self, windowDoorOpeningFactorOrCrackFactor):
        return _openstudiomodelairflow.AirflowNetworkSurface_setWindowDoorOpeningFactorOrCrackFactor(self, windowDoorOpeningFactorOrCrackFactor)

    def resetWindowDoorOpeningFactorOrCrackFactor(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_resetWindowDoorOpeningFactorOrCrackFactor(self)

    def setVentilationControlMode(self, ventilationControlMode):
        return _openstudiomodelairflow.AirflowNetworkSurface_setVentilationControlMode(self, ventilationControlMode)

    def resetVentilationControlMode(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_resetVentilationControlMode(self)

    def setVentilationControlZoneTemperatureSetpointSchedule(self, schedule):
        return _openstudiomodelairflow.AirflowNetworkSurface_setVentilationControlZoneTemperatureSetpointSchedule(self, schedule)

    def resetVentilationControlZoneTemperatureSetpointSchedule(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_resetVentilationControlZoneTemperatureSetpointSchedule(self)

    def setMinimumVentingOpenFactor(self, minimumVentingOpenFactor):
        return _openstudiomodelairflow.AirflowNetworkSurface_setMinimumVentingOpenFactor(self, minimumVentingOpenFactor)

    def resetMinimumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_resetMinimumVentingOpenFactor(self)

    def setIndoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor(self, indoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor):
        return _openstudiomodelairflow.AirflowNetworkSurface_setIndoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor(self, indoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor)

    def resetIndoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_resetIndoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor(self)

    def setIndoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor(self, indoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor):
        return _openstudiomodelairflow.AirflowNetworkSurface_setIndoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor(self, indoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor)

    def resetIndoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_resetIndoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor(self)

    def setIndoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor(self, indoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor):
        return _openstudiomodelairflow.AirflowNetworkSurface_setIndoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor(self, indoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor)

    def resetIndoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_resetIndoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor(self)

    def setIndoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor(self, indoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor):
        return _openstudiomodelairflow.AirflowNetworkSurface_setIndoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor(self, indoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor)

    def resetIndoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_resetIndoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor(self)

    def setVentingAvailabilitySchedule(self, schedule):
        return _openstudiomodelairflow.AirflowNetworkSurface_setVentingAvailabilitySchedule(self, schedule)

    def resetVentingAvailabilitySchedule(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_resetVentingAvailabilitySchedule(self)

    def setOccupantVentilationControl(self, airflowNetworkOccupantVentilationControl):
        return _openstudiomodelairflow.AirflowNetworkSurface_setOccupantVentilationControl(self, airflowNetworkOccupantVentilationControl)

    def resetOccupantVentilationControl(self):
        return _openstudiomodelairflow.AirflowNetworkSurface_resetOccupantVentilationControl(self)

# Register AirflowNetworkSurface in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkSurface_swigregister(AirflowNetworkSurface)

def toAirflowNetworkSurface(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkSurface(idfObject)

def getAirflowNetworkSurface(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkSurface(t_model, t_handle)

def getAirflowNetworkSurfaces(t_model):
    return _openstudiomodelairflow.getAirflowNetworkSurfaces(t_model)

def getAirflowNetworkSurfaceByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkSurfaceByName(t_model, t_name)

def getAirflowNetworkSurfacesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkSurfacesByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkSurface(self) -> OptionalAirflowNetworkSurface:
    """Try to cast the ModelObject to a AirflowNetworkSurface.

    :return: An Optional AirflowNetworkSurface.
    """
    return toAirflowNetworkSurface(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkSurface = _to_AirflowNetworkSurface

def _getAirflowNetworkSurface(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkSurface:
    """Try to get an object of type AirflowNetworkSurface referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkSurface.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkSurface(self, t_handle)
Model.getAirflowNetworkSurface = _getAirflowNetworkSurface

def _getAirflowNetworkSurfaces(self) -> AirflowNetworkSurfaceVector:
    """Get a vector of all objects of type AirflowNetworkSurface in the model.

    :return: A vector of AirflowNetworkSurface.
    """
    return getAirflowNetworkSurfaces(self)
Model.getAirflowNetworkSurfaces = _getAirflowNetworkSurfaces

def _getAirflowNetworkSurfaceByName(self, t_name: str) -> OptionalAirflowNetworkSurface:
    """Try to get an object of type AirflowNetworkSurface that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkSurface.
    """
    return getAirflowNetworkSurfaceByName(self, t_name)
Model.getAirflowNetworkSurfaceByName = _getAirflowNetworkSurfaceByName

def _getAirflowNetworkSurfacesByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkSurfaceVector:
    """Returns all objects of type AirflowNetworkSurface named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkSurfacesByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkSurfacesByName = _getAirflowNetworkSurfacesByName

class AirflowNetworkZone(AirflowNetworkNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkZone

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkZone_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkZone(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkZone_iddObjectType()

    @staticmethod
    def ventilationControlModeValues():
        return _openstudiomodelairflow.AirflowNetworkZone_ventilationControlModeValues()

    @staticmethod
    def singleSidedWindPressureCoefficientAlgorithmValues():
        return _openstudiomodelairflow.AirflowNetworkZone_singleSidedWindPressureCoefficientAlgorithmValues()

    def thermalZone(self):
        return _openstudiomodelairflow.AirflowNetworkZone_thermalZone(self)

    def ventilationControlMode(self):
        return _openstudiomodelairflow.AirflowNetworkZone_ventilationControlMode(self)

    def isVentilationControlModeDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkZone_isVentilationControlModeDefaulted(self)

    def ventilationControlZoneTemperatureSetpointSchedule(self):
        return _openstudiomodelairflow.AirflowNetworkZone_ventilationControlZoneTemperatureSetpointSchedule(self)

    def minimumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkZone_minimumVentingOpenFactor(self)

    def isMinimumVentingOpenFactorDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkZone_isMinimumVentingOpenFactorDefaulted(self)

    def indoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkZone_indoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor(self)

    def isIndoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactorDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkZone_isIndoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactorDefaulted(self)

    def indoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkZone_indoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor(self)

    def isIndoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactorDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkZone_isIndoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactorDefaulted(self)

    def indoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkZone_indoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor(self)

    def isIndoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactorDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkZone_isIndoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactorDefaulted(self)

    def indoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkZone_indoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor(self)

    def isIndoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactorDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkZone_isIndoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactorDefaulted(self)

    def ventingAvailabilitySchedule(self):
        return _openstudiomodelairflow.AirflowNetworkZone_ventingAvailabilitySchedule(self)

    def singleSidedWindPressureCoefficientAlgorithm(self):
        return _openstudiomodelairflow.AirflowNetworkZone_singleSidedWindPressureCoefficientAlgorithm(self)

    def isSingleSidedWindPressureCoefficientAlgorithmDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkZone_isSingleSidedWindPressureCoefficientAlgorithmDefaulted(self)

    def facadeWidth(self):
        return _openstudiomodelairflow.AirflowNetworkZone_facadeWidth(self)

    def isFacadeWidthDefaulted(self):
        return _openstudiomodelairflow.AirflowNetworkZone_isFacadeWidthDefaulted(self)

    def occupantVentilationControl(self):
        return _openstudiomodelairflow.AirflowNetworkZone_occupantVentilationControl(self)

    def setVentilationControlMode(self, ventilationControlMode):
        return _openstudiomodelairflow.AirflowNetworkZone_setVentilationControlMode(self, ventilationControlMode)

    def resetVentilationControlMode(self):
        return _openstudiomodelairflow.AirflowNetworkZone_resetVentilationControlMode(self)

    def setVentilationControlZoneTemperatureSetpointSchedule(self, schedule):
        return _openstudiomodelairflow.AirflowNetworkZone_setVentilationControlZoneTemperatureSetpointSchedule(self, schedule)

    def resetVentilationControlZoneTemperatureSetpointSchedule(self):
        return _openstudiomodelairflow.AirflowNetworkZone_resetVentilationControlZoneTemperatureSetpointSchedule(self)

    def setMinimumVentingOpenFactor(self, minimumVentingOpenFactor):
        return _openstudiomodelairflow.AirflowNetworkZone_setMinimumVentingOpenFactor(self, minimumVentingOpenFactor)

    def resetMinimumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkZone_resetMinimumVentingOpenFactor(self)

    def setIndoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor(self, indoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor):
        return _openstudiomodelairflow.AirflowNetworkZone_setIndoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor(self, indoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor)

    def resetIndoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkZone_resetIndoorandOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor(self)

    def setIndoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor(self, indoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor):
        return _openstudiomodelairflow.AirflowNetworkZone_setIndoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor(self, indoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor)

    def resetIndoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkZone_resetIndoorandOutdoorTemperatureDifferenceUpperLimitforMinimumVentingOpenFactor(self)

    def setIndoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor(self, indoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor):
        return _openstudiomodelairflow.AirflowNetworkZone_setIndoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor(self, indoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor)

    def resetIndoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkZone_resetIndoorandOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor(self)

    def setIndoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor(self, indoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor):
        return _openstudiomodelairflow.AirflowNetworkZone_setIndoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor(self, indoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor)

    def resetIndoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor(self):
        return _openstudiomodelairflow.AirflowNetworkZone_resetIndoorandOutdoorEnthalpyDifferenceUpperLimitforMinimumVentingOpenFactor(self)

    def setVentingAvailabilitySchedule(self, schedule):
        return _openstudiomodelairflow.AirflowNetworkZone_setVentingAvailabilitySchedule(self, schedule)

    def resetVentingAvailabilitySchedule(self):
        return _openstudiomodelairflow.AirflowNetworkZone_resetVentingAvailabilitySchedule(self)

    def setSingleSidedWindPressureCoefficientAlgorithm(self, singleSidedWindPressureCoefficientAlgorithm):
        return _openstudiomodelairflow.AirflowNetworkZone_setSingleSidedWindPressureCoefficientAlgorithm(self, singleSidedWindPressureCoefficientAlgorithm)

    def resetSingleSidedWindPressureCoefficientAlgorithm(self):
        return _openstudiomodelairflow.AirflowNetworkZone_resetSingleSidedWindPressureCoefficientAlgorithm(self)

    def setFacadeWidth(self, facadeWidth):
        return _openstudiomodelairflow.AirflowNetworkZone_setFacadeWidth(self, facadeWidth)

    def resetFacadeWidth(self):
        return _openstudiomodelairflow.AirflowNetworkZone_resetFacadeWidth(self)

    def setOccupantVentilationControl(self, airflowNetworkOccupantVentilationControl):
        return _openstudiomodelairflow.AirflowNetworkZone_setOccupantVentilationControl(self, airflowNetworkOccupantVentilationControl)

    def resetOccupantVentilationControl(self):
        return _openstudiomodelairflow.AirflowNetworkZone_resetOccupantVentilationControl(self)

# Register AirflowNetworkZone in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkZone_swigregister(AirflowNetworkZone)

def toAirflowNetworkZone(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkZone(idfObject)

def getAirflowNetworkZone(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkZone(t_model, t_handle)

def getAirflowNetworkZones(t_model):
    return _openstudiomodelairflow.getAirflowNetworkZones(t_model)

def getAirflowNetworkZoneByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkZoneByName(t_model, t_name)

def getAirflowNetworkZonesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkZonesByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkZone(self) -> OptionalAirflowNetworkZone:
    """Try to cast the ModelObject to a AirflowNetworkZone.

    :return: An Optional AirflowNetworkZone.
    """
    return toAirflowNetworkZone(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkZone = _to_AirflowNetworkZone

def _getAirflowNetworkZone(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkZone:
    """Try to get an object of type AirflowNetworkZone referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkZone.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkZone(self, t_handle)
Model.getAirflowNetworkZone = _getAirflowNetworkZone

def _getAirflowNetworkZones(self) -> AirflowNetworkZoneVector:
    """Get a vector of all objects of type AirflowNetworkZone in the model.

    :return: A vector of AirflowNetworkZone.
    """
    return getAirflowNetworkZones(self)
Model.getAirflowNetworkZones = _getAirflowNetworkZones

def _getAirflowNetworkZoneByName(self, t_name: str) -> OptionalAirflowNetworkZone:
    """Try to get an object of type AirflowNetworkZone that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkZone.
    """
    return getAirflowNetworkZoneByName(self, t_name)
Model.getAirflowNetworkZoneByName = _getAirflowNetworkZoneByName

def _getAirflowNetworkZonesByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkZoneVector:
    """Returns all objects of type AirflowNetworkZone named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkZonesByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkZonesByName = _getAirflowNetworkZonesByName

class AirflowNetworkZoneExhaustFan(openstudiomodelcore.ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelairflow.delete_AirflowNetworkZoneExhaustFan

    def __init__(self, *args):
        _openstudiomodelairflow.AirflowNetworkZoneExhaustFan_swiginit(self, _openstudiomodelairflow.new_AirflowNetworkZoneExhaustFan(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFan_iddObjectType()

    def fanZoneExhaust(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFan_fanZoneExhaust(self)

    def crack(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFan_crack(self)

    def setCrack(self, crack):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFan_setCrack(self, crack)

    def resetCrack(self):
        return _openstudiomodelairflow.AirflowNetworkZoneExhaustFan_resetCrack(self)

# Register AirflowNetworkZoneExhaustFan in _openstudiomodelairflow:
_openstudiomodelairflow.AirflowNetworkZoneExhaustFan_swigregister(AirflowNetworkZoneExhaustFan)

def toAirflowNetworkZoneExhaustFan(idfObject):
    return _openstudiomodelairflow.toAirflowNetworkZoneExhaustFan(idfObject)

def getAirflowNetworkZoneExhaustFan(t_model, t_handle):
    return _openstudiomodelairflow.getAirflowNetworkZoneExhaustFan(t_model, t_handle)

def getAirflowNetworkZoneExhaustFans(t_model):
    return _openstudiomodelairflow.getAirflowNetworkZoneExhaustFans(t_model)

def getAirflowNetworkZoneExhaustFanByName(t_model, t_name):
    return _openstudiomodelairflow.getAirflowNetworkZoneExhaustFanByName(t_model, t_name)

def getAirflowNetworkZoneExhaustFansByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelairflow.getAirflowNetworkZoneExhaustFansByName(t_model, t_name, t_exactMatch)

def _to_AirflowNetworkZoneExhaustFan(self) -> OptionalAirflowNetworkZoneExhaustFan:
    """Try to cast the ModelObject to a AirflowNetworkZoneExhaustFan.

    :return: An Optional AirflowNetworkZoneExhaustFan.
    """
    return toAirflowNetworkZoneExhaustFan(self)
openstudioutilitiesidf.IdfObject.to_AirflowNetworkZoneExhaustFan = _to_AirflowNetworkZoneExhaustFan

def _getAirflowNetworkZoneExhaustFan(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAirflowNetworkZoneExhaustFan:
    """Try to get an object of type AirflowNetworkZoneExhaustFan referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AirflowNetworkZoneExhaustFan.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAirflowNetworkZoneExhaustFan(self, t_handle)
Model.getAirflowNetworkZoneExhaustFan = _getAirflowNetworkZoneExhaustFan

def _getAirflowNetworkZoneExhaustFans(self) -> AirflowNetworkZoneExhaustFanVector:
    """Get a vector of all objects of type AirflowNetworkZoneExhaustFan in the model.

    :return: A vector of AirflowNetworkZoneExhaustFan.
    """
    return getAirflowNetworkZoneExhaustFans(self)
Model.getAirflowNetworkZoneExhaustFans = _getAirflowNetworkZoneExhaustFans

def _getAirflowNetworkZoneExhaustFanByName(self, t_name: str) -> OptionalAirflowNetworkZoneExhaustFan:
    """Try to get an object of type AirflowNetworkZoneExhaustFan that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AirflowNetworkZoneExhaustFan.
    """
    return getAirflowNetworkZoneExhaustFanByName(self, t_name)
Model.getAirflowNetworkZoneExhaustFanByName = _getAirflowNetworkZoneExhaustFanByName

def _getAirflowNetworkZoneExhaustFansByName(self, t_name: str, t_exactMatch: bool) -> AirflowNetworkZoneExhaustFanVector:
    """Returns all objects of type AirflowNetworkZoneExhaustFan named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAirflowNetworkZoneExhaustFansByName(self, t_name, t_exactMatch)
Model.getAirflowNetworkZoneExhaustFansByName = _getAirflowNetworkZoneExhaustFansByName


