# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudioalfalfa
else:
    import _openstudioalfalfa

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioalfalfa.delete_SwigPyIterator

    def value(self):
        return _openstudioalfalfa.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudioalfalfa.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudioalfalfa.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudioalfalfa.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudioalfalfa.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudioalfalfa.SwigPyIterator_copy(self)

    def next(self):
        return _openstudioalfalfa.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudioalfalfa.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudioalfalfa.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudioalfalfa.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudioalfalfa.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudioalfalfa.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudioalfalfa.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudioalfalfa.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudioalfalfa.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudioalfalfa.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudioalfalfa:
_openstudioalfalfa.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudioalfalfa.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudioutilitiesxml
class AlfalfaComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioalfalfa.AlfalfaComponent_swiginit(self, _openstudioalfalfa.new_AlfalfaComponent(*args))
    __swig_destroy__ = _openstudioalfalfa.delete_AlfalfaComponent

    def toJSON(self):
        return _openstudioalfalfa.AlfalfaComponent_toJSON(self)

    def capability(self):
        return _openstudioalfalfa.AlfalfaComponent_capability(self)

    def type(self):
        return _openstudioalfalfa.AlfalfaComponent_type(self)

    def typeName(self):
        return _openstudioalfalfa.AlfalfaComponent_typeName(self)

    def deriveName(self):
        return _openstudioalfalfa.AlfalfaComponent_deriveName(self)

    def canInput(self):
        return _openstudioalfalfa.AlfalfaComponent_canInput(self)

    def canOutput(self):
        return _openstudioalfalfa.AlfalfaComponent_canOutput(self)

# Register AlfalfaComponent in _openstudioalfalfa:
_openstudioalfalfa.AlfalfaComponent_swigregister(AlfalfaComponent)

def __eq__(lhs, rhs):
    return _openstudioalfalfa.__eq__(lhs, rhs)
class AlfalfaActuator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioalfalfa.AlfalfaActuator_swiginit(self, _openstudioalfalfa.new_AlfalfaActuator(*args))

    def deriveName(self):
        return _openstudioalfalfa.AlfalfaActuator_deriveName(self)

    def toJSON(self):
        return _openstudioalfalfa.AlfalfaActuator_toJSON(self)

    def capability(self):
        return _openstudioalfalfa.AlfalfaActuator_capability(self)

    def type(self):
        return _openstudioalfalfa.AlfalfaActuator_type(self)

    def componentName(self):
        return _openstudioalfalfa.AlfalfaActuator_componentName(self)

    def componentType(self):
        return _openstudioalfalfa.AlfalfaActuator_componentType(self)

    def controlType(self):
        return _openstudioalfalfa.AlfalfaActuator_controlType(self)

    @staticmethod
    def acceptsObjectType(idd_type):
        return _openstudioalfalfa.AlfalfaActuator_acceptsObjectType(idd_type)
    __swig_destroy__ = _openstudioalfalfa.delete_AlfalfaActuator

# Register AlfalfaActuator in _openstudioalfalfa:
_openstudioalfalfa.AlfalfaActuator_swigregister(AlfalfaActuator)
class AlfalfaConstant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value):
        _openstudioalfalfa.AlfalfaConstant_swiginit(self, _openstudioalfalfa.new_AlfalfaConstant(value))

    def deriveName(self):
        return _openstudioalfalfa.AlfalfaConstant_deriveName(self)

    def toJSON(self):
        return _openstudioalfalfa.AlfalfaConstant_toJSON(self)

    def capability(self):
        return _openstudioalfalfa.AlfalfaConstant_capability(self)

    def type(self):
        return _openstudioalfalfa.AlfalfaConstant_type(self)

    def value(self):
        return _openstudioalfalfa.AlfalfaConstant_value(self)
    __swig_destroy__ = _openstudioalfalfa.delete_AlfalfaConstant

# Register AlfalfaConstant in _openstudioalfalfa:
_openstudioalfalfa.AlfalfaConstant_swigregister(AlfalfaConstant)
class AlfalfaGlobalVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioalfalfa.AlfalfaGlobalVariable_swiginit(self, _openstudioalfalfa.new_AlfalfaGlobalVariable(*args))

    def deriveName(self):
        return _openstudioalfalfa.AlfalfaGlobalVariable_deriveName(self)

    def toJSON(self):
        return _openstudioalfalfa.AlfalfaGlobalVariable_toJSON(self)

    def capability(self):
        return _openstudioalfalfa.AlfalfaGlobalVariable_capability(self)

    def type(self):
        return _openstudioalfalfa.AlfalfaGlobalVariable_type(self)

    def variableName(self):
        return _openstudioalfalfa.AlfalfaGlobalVariable_variableName(self)

    @staticmethod
    def acceptsObjectType(idd_type):
        return _openstudioalfalfa.AlfalfaGlobalVariable_acceptsObjectType(idd_type)
    __swig_destroy__ = _openstudioalfalfa.delete_AlfalfaGlobalVariable

# Register AlfalfaGlobalVariable in _openstudioalfalfa:
_openstudioalfalfa.AlfalfaGlobalVariable_swigregister(AlfalfaGlobalVariable)
class AlfalfaMeter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioalfalfa.AlfalfaMeter_swiginit(self, _openstudioalfalfa.new_AlfalfaMeter(*args))

    def deriveName(self):
        return _openstudioalfalfa.AlfalfaMeter_deriveName(self)

    def toJSON(self):
        return _openstudioalfalfa.AlfalfaMeter_toJSON(self)

    def capability(self):
        return _openstudioalfalfa.AlfalfaMeter_capability(self)

    def type(self):
        return _openstudioalfalfa.AlfalfaMeter_type(self)

    def meterName(self):
        return _openstudioalfalfa.AlfalfaMeter_meterName(self)

    @staticmethod
    def acceptsObjectType(idd_type):
        return _openstudioalfalfa.AlfalfaMeter_acceptsObjectType(idd_type)
    __swig_destroy__ = _openstudioalfalfa.delete_AlfalfaMeter

# Register AlfalfaMeter in _openstudioalfalfa:
_openstudioalfalfa.AlfalfaMeter_swigregister(AlfalfaMeter)
class AlfalfaOutputVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioalfalfa.AlfalfaOutputVariable_swiginit(self, _openstudioalfalfa.new_AlfalfaOutputVariable(*args))

    def deriveName(self):
        return _openstudioalfalfa.AlfalfaOutputVariable_deriveName(self)

    def toJSON(self):
        return _openstudioalfalfa.AlfalfaOutputVariable_toJSON(self)

    def capability(self):
        return _openstudioalfalfa.AlfalfaOutputVariable_capability(self)

    def type(self):
        return _openstudioalfalfa.AlfalfaOutputVariable_type(self)

    def variableKey(self):
        return _openstudioalfalfa.AlfalfaOutputVariable_variableKey(self)

    def variableName(self):
        return _openstudioalfalfa.AlfalfaOutputVariable_variableName(self)

    @staticmethod
    def acceptsObjectType(idd_type):
        return _openstudioalfalfa.AlfalfaOutputVariable_acceptsObjectType(idd_type)
    __swig_destroy__ = _openstudioalfalfa.delete_AlfalfaOutputVariable

# Register AlfalfaOutputVariable in _openstudioalfalfa:
_openstudioalfalfa.AlfalfaOutputVariable_swigregister(AlfalfaOutputVariable)
class AlfalfaPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioalfalfa.delete_AlfalfaPoint

    def __init__(self, *args):
        _openstudioalfalfa.AlfalfaPoint_swiginit(self, _openstudioalfalfa.new_AlfalfaPoint(*args))

    def input(self):
        return _openstudioalfalfa.AlfalfaPoint_input(self)

    def output(self):
        return _openstudioalfalfa.AlfalfaPoint_output(self)

    def setUnits(self, units):
        return _openstudioalfalfa.AlfalfaPoint_setUnits(self, units)

    def units(self):
        return _openstudioalfalfa.AlfalfaPoint_units(self)

    def toJSON(self):
        return _openstudioalfalfa.AlfalfaPoint_toJSON(self)

    def id(self):
        return _openstudioalfalfa.AlfalfaPoint_id(self)

    def setId(self, id):
        return _openstudioalfalfa.AlfalfaPoint_setId(self, id)

    def displayName(self):
        return _openstudioalfalfa.AlfalfaPoint_displayName(self)

    def setDisplayName(self, display_name):
        return _openstudioalfalfa.AlfalfaPoint_setDisplayName(self, display_name)

    def isOptional(self):
        return _openstudioalfalfa.AlfalfaPoint_isOptional(self)

    def setOptional(self, optional):
        return _openstudioalfalfa.AlfalfaPoint_setOptional(self, optional)

    def __eq__(self, rhs):
        return _openstudioalfalfa.AlfalfaPoint___eq__(self, rhs)

    def setOutput(self, *args):
        return _openstudioalfalfa.AlfalfaPoint_setOutput(self, *args)

    def setInput(self, *args):
        return _openstudioalfalfa.AlfalfaPoint_setInput(self, *args)

# Register AlfalfaPoint in _openstudioalfalfa:
_openstudioalfalfa.AlfalfaPoint_swigregister(AlfalfaPoint)
class AlfalfaJSON(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioalfalfa.AlfalfaJSON_swiginit(self, _openstudioalfalfa.new_AlfalfaJSON(*args))

    def save(self):
        return _openstudioalfalfa.AlfalfaJSON_save(self)

    def saveAs(self, p):
        return _openstudioalfalfa.AlfalfaJSON_saveAs(self, p)

    def toJSON(self):
        return _openstudioalfalfa.AlfalfaJSON_toJSON(self)

    def exposeConstant(self, value, display_name):
        return _openstudioalfalfa.AlfalfaJSON_exposeConstant(self, value, display_name)

    def exposeMeter(self, *args):
        return _openstudioalfalfa.AlfalfaJSON_exposeMeter(self, *args)

    def exposeActuator(self, *args):
        return _openstudioalfalfa.AlfalfaJSON_exposeActuator(self, *args)

    def exposeOutputVariable(self, *args):
        return _openstudioalfalfa.AlfalfaJSON_exposeOutputVariable(self, *args)

    def exposeGlobalVariable(self, *args):
        return _openstudioalfalfa.AlfalfaJSON_exposeGlobalVariable(self, *args)

    def exposePoint(self, point):
        return _openstudioalfalfa.AlfalfaJSON_exposePoint(self, point)

    def exposeFromObject(self, *args):
        return _openstudioalfalfa.AlfalfaJSON_exposeFromObject(self, *args)

    def points(self):
        return _openstudioalfalfa.AlfalfaJSON_points(self)

    def exposeFromComponent(self, *args):
        return _openstudioalfalfa.AlfalfaJSON_exposeFromComponent(self, *args)
    __swig_destroy__ = _openstudioalfalfa.delete_AlfalfaJSON

# Register AlfalfaJSON in _openstudioalfalfa:
_openstudioalfalfa.AlfalfaJSON_swigregister(AlfalfaJSON)
class AlfalfaPointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudioalfalfa.AlfalfaPointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudioalfalfa.AlfalfaPointVector___nonzero__(self)

    def __bool__(self):
        return _openstudioalfalfa.AlfalfaPointVector___bool__(self)

    def __len__(self):
        return _openstudioalfalfa.AlfalfaPointVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudioalfalfa.AlfalfaPointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudioalfalfa.AlfalfaPointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudioalfalfa.AlfalfaPointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudioalfalfa.AlfalfaPointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudioalfalfa.AlfalfaPointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudioalfalfa.AlfalfaPointVector___setitem__(self, *args)

    def pop(self):
        return _openstudioalfalfa.AlfalfaPointVector_pop(self)

    def append(self, x):
        return _openstudioalfalfa.AlfalfaPointVector_append(self, x)

    def empty(self):
        return _openstudioalfalfa.AlfalfaPointVector_empty(self)

    def size(self):
        return _openstudioalfalfa.AlfalfaPointVector_size(self)

    def swap(self, v):
        return _openstudioalfalfa.AlfalfaPointVector_swap(self, v)

    def begin(self):
        return _openstudioalfalfa.AlfalfaPointVector_begin(self)

    def end(self):
        return _openstudioalfalfa.AlfalfaPointVector_end(self)

    def rbegin(self):
        return _openstudioalfalfa.AlfalfaPointVector_rbegin(self)

    def rend(self):
        return _openstudioalfalfa.AlfalfaPointVector_rend(self)

    def clear(self):
        return _openstudioalfalfa.AlfalfaPointVector_clear(self)

    def get_allocator(self):
        return _openstudioalfalfa.AlfalfaPointVector_get_allocator(self)

    def pop_back(self):
        return _openstudioalfalfa.AlfalfaPointVector_pop_back(self)

    def erase(self, *args):
        return _openstudioalfalfa.AlfalfaPointVector_erase(self, *args)

    def __init__(self, *args):
        _openstudioalfalfa.AlfalfaPointVector_swiginit(self, _openstudioalfalfa.new_AlfalfaPointVector(*args))

    def push_back(self, x):
        return _openstudioalfalfa.AlfalfaPointVector_push_back(self, x)

    def front(self):
        return _openstudioalfalfa.AlfalfaPointVector_front(self)

    def back(self):
        return _openstudioalfalfa.AlfalfaPointVector_back(self)

    def assign(self, n, x):
        return _openstudioalfalfa.AlfalfaPointVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudioalfalfa.AlfalfaPointVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudioalfalfa.AlfalfaPointVector_insert(self, *args)

    def reserve(self, n):
        return _openstudioalfalfa.AlfalfaPointVector_reserve(self, n)

    def capacity(self):
        return _openstudioalfalfa.AlfalfaPointVector_capacity(self)
    __swig_destroy__ = _openstudioalfalfa.delete_AlfalfaPointVector

# Register AlfalfaPointVector in _openstudioalfalfa:
_openstudioalfalfa.AlfalfaPointVector_swigregister(AlfalfaPointVector)
class OptionalAlfalfaPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioalfalfa.OptionalAlfalfaPoint_swiginit(self, _openstudioalfalfa.new_OptionalAlfalfaPoint(*args))

    def reset(self):
        return _openstudioalfalfa.OptionalAlfalfaPoint_reset(self)

    def __nonzero__(self):
        return _openstudioalfalfa.OptionalAlfalfaPoint___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioalfalfa.OptionalAlfalfaPoint___ref__(self)

    def is_initialized(self):
        return _openstudioalfalfa.OptionalAlfalfaPoint_is_initialized(self)

    def isNull(self):
        return _openstudioalfalfa.OptionalAlfalfaPoint_isNull(self)

    def empty(self):
        return _openstudioalfalfa.OptionalAlfalfaPoint_empty(self)

    def get(self):
        return _openstudioalfalfa.OptionalAlfalfaPoint_get(self)

    def set(self, t):
        return _openstudioalfalfa.OptionalAlfalfaPoint_set(self, t)

    def value_or(self, default_value):
        return _openstudioalfalfa.OptionalAlfalfaPoint_value_or(self, default_value)
    __swig_destroy__ = _openstudioalfalfa.delete_OptionalAlfalfaPoint

# Register OptionalAlfalfaPoint in _openstudioalfalfa:
_openstudioalfalfa.OptionalAlfalfaPoint_swigregister(OptionalAlfalfaPoint)
class OptionalAlfalfaComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioalfalfa.OptionalAlfalfaComponent_swiginit(self, _openstudioalfalfa.new_OptionalAlfalfaComponent(*args))

    def reset(self):
        return _openstudioalfalfa.OptionalAlfalfaComponent_reset(self)

    def __nonzero__(self):
        return _openstudioalfalfa.OptionalAlfalfaComponent___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudioalfalfa.OptionalAlfalfaComponent___ref__(self)

    def is_initialized(self):
        return _openstudioalfalfa.OptionalAlfalfaComponent_is_initialized(self)

    def isNull(self):
        return _openstudioalfalfa.OptionalAlfalfaComponent_isNull(self)

    def empty(self):
        return _openstudioalfalfa.OptionalAlfalfaComponent_empty(self)

    def get(self):
        return _openstudioalfalfa.OptionalAlfalfaComponent_get(self)

    def set(self, t):
        return _openstudioalfalfa.OptionalAlfalfaComponent_set(self, t)

    def value_or(self, default_value):
        return _openstudioalfalfa.OptionalAlfalfaComponent_value_or(self, default_value)
    __swig_destroy__ = _openstudioalfalfa.delete_OptionalAlfalfaComponent

# Register OptionalAlfalfaComponent in _openstudioalfalfa:
_openstudioalfalfa.OptionalAlfalfaComponent_swigregister(OptionalAlfalfaComponent)

