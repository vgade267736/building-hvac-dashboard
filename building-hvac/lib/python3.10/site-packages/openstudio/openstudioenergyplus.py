# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudioenergyplus
else:
    import _openstudioenergyplus

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudioenergyplus.delete_SwigPyIterator

    def value(self):
        return _openstudioenergyplus.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudioenergyplus.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudioenergyplus.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudioenergyplus.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudioenergyplus.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudioenergyplus.SwigPyIterator_copy(self)

    def next(self):
        return _openstudioenergyplus.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudioenergyplus.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudioenergyplus.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudioenergyplus.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudioenergyplus.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudioenergyplus.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudioenergyplus.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudioenergyplus.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudioenergyplus.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudioenergyplus.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudioenergyplus:
_openstudioenergyplus.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudioenergyplus.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudioutilitiesxml
from .import openstudiomodel
class ErrorLevel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudioenergyplus.ErrorLevel_swiginit(self, _openstudioenergyplus.new_ErrorLevel(*args))

    def valueName(self):
        return _openstudioenergyplus.ErrorLevel_valueName(self)

    def value(self):
        return _openstudioenergyplus.ErrorLevel_value(self)

    def valueDescription(self):
        return _openstudioenergyplus.ErrorLevel_valueDescription(self)

    def __eq__(self, other):
        return _openstudioenergyplus.ErrorLevel___eq__(self, other)

    def __ne__(self, other):
        return _openstudioenergyplus.ErrorLevel___ne__(self, other)

    def __gt__(self, other):
        return _openstudioenergyplus.ErrorLevel___gt__(self, other)

    def __ge__(self, other):
        return _openstudioenergyplus.ErrorLevel___ge__(self, other)

    def __lt__(self, other):
        return _openstudioenergyplus.ErrorLevel___lt__(self, other)

    def __le__(self, other):
        return _openstudioenergyplus.ErrorLevel___le__(self, other)

    @staticmethod
    def enumName():
        return _openstudioenergyplus.ErrorLevel_enumName()

    @staticmethod
    def getValues():
        return _openstudioenergyplus.ErrorLevel_getValues()

    @staticmethod
    def getLookupMap():
        return _openstudioenergyplus.ErrorLevel_getLookupMap()

    def __str__(self):
        return _openstudioenergyplus.ErrorLevel___str__(self)
    __swig_destroy__ = _openstudioenergyplus.delete_ErrorLevel

# Register ErrorLevel in _openstudioenergyplus:
_openstudioenergyplus.ErrorLevel_swigregister(ErrorLevel)

def __lshift__(os, e):
    return _openstudioenergyplus.__lshift__(os, e)
class ErrorFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, errPath):
        _openstudioenergyplus.ErrorFile_swiginit(self, _openstudioenergyplus.new_ErrorFile(errPath))

    def warnings(self):
        return _openstudioenergyplus.ErrorFile_warnings(self)

    def severeErrors(self):
        return _openstudioenergyplus.ErrorFile_severeErrors(self)

    def fatalErrors(self):
        return _openstudioenergyplus.ErrorFile_fatalErrors(self)

    def completed(self):
        return _openstudioenergyplus.ErrorFile_completed(self)

    def completedSuccessfully(self):
        return _openstudioenergyplus.ErrorFile_completedSuccessfully(self)
    __swig_destroy__ = _openstudioenergyplus.delete_ErrorFile

# Register ErrorFile in _openstudioenergyplus:
_openstudioenergyplus.ErrorFile_swigregister(ErrorFile)
ENERGYPLUS_VERSION = _openstudioenergyplus.ENERGYPLUS_VERSION
class ForwardTranslator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioenergyplus.ForwardTranslator_swiginit(self, _openstudioenergyplus.new_ForwardTranslator())

    def translateModel(self, model, progressBar=None):
        return _openstudioenergyplus.ForwardTranslator_translateModel(self, model, progressBar)

    def translateModelObject(self, modelObject):
        return _openstudioenergyplus.ForwardTranslator_translateModelObject(self, modelObject)

    def warnings(self):
        return _openstudioenergyplus.ForwardTranslator_warnings(self)

    def errors(self):
        return _openstudioenergyplus.ForwardTranslator_errors(self)

    def forwardTranslatorOptions(self):
        return _openstudioenergyplus.ForwardTranslator_forwardTranslatorOptions(self)

    def setForwardTranslatorOptions(self, forwardTranslatorOptions):
        return _openstudioenergyplus.ForwardTranslator_setForwardTranslatorOptions(self, forwardTranslatorOptions)

    def setKeepRunControlSpecialDays(self, keepRunControlSpecialDays):
        return _openstudioenergyplus.ForwardTranslator_setKeepRunControlSpecialDays(self, keepRunControlSpecialDays)

    def setIPTabularOutput(self, isIP):
        return _openstudioenergyplus.ForwardTranslator_setIPTabularOutput(self, isIP)

    def setExcludeLCCObjects(self, excludeLCCObjects):
        return _openstudioenergyplus.ForwardTranslator_setExcludeLCCObjects(self, excludeLCCObjects)

    def setExcludeSQliteOutputReport(self, excludeSQliteOutputReport):
        return _openstudioenergyplus.ForwardTranslator_setExcludeSQliteOutputReport(self, excludeSQliteOutputReport)

    def setExcludeHTMLOutputReport(self, excludeHTMLOutputReport):
        return _openstudioenergyplus.ForwardTranslator_setExcludeHTMLOutputReport(self, excludeHTMLOutputReport)

    def setExcludeVariableDictionary(self, excludeVariableDictionary):
        return _openstudioenergyplus.ForwardTranslator_setExcludeVariableDictionary(self, excludeVariableDictionary)

    def setExcludeSpaceTranslation(self, excludeSpaceTranslation):
        return _openstudioenergyplus.ForwardTranslator_setExcludeSpaceTranslation(self, excludeSpaceTranslation)
    __swig_destroy__ = _openstudioenergyplus.delete_ForwardTranslator

# Register ForwardTranslator in _openstudioenergyplus:
_openstudioenergyplus.ForwardTranslator_swigregister(ForwardTranslator)
class ReverseTranslator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _openstudioenergyplus.ReverseTranslator_swiginit(self, _openstudioenergyplus.new_ReverseTranslator())

    def loadModel(self, path, progressBar=None):
        return _openstudioenergyplus.ReverseTranslator_loadModel(self, path, progressBar)

    def translateWorkspace(self, workspace, progressBar=None, clearLogSink=True):
        return _openstudioenergyplus.ReverseTranslator_translateWorkspace(self, workspace, progressBar, clearLogSink)

    def warnings(self):
        return _openstudioenergyplus.ReverseTranslator_warnings(self)

    def errors(self):
        return _openstudioenergyplus.ReverseTranslator_errors(self)

    def untranslatedIdfObjects(self):
        return _openstudioenergyplus.ReverseTranslator_untranslatedIdfObjects(self)
    __swig_destroy__ = _openstudioenergyplus.delete_ReverseTranslator

# Register ReverseTranslator in _openstudioenergyplus:
_openstudioenergyplus.ReverseTranslator_swigregister(ReverseTranslator)

def loadAndTranslateIdf(path):
    return _openstudioenergyplus.loadAndTranslateIdf(path)

