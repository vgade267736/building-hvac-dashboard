# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelavailabilitymanager
else:
    import _openstudiomodelavailabilitymanager

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_SwigPyIterator

    def value(self):
        return _openstudiomodelavailabilitymanager.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudiomodelavailabilitymanager.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudiomodelavailabilitymanager.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudiomodelavailabilitymanager.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudiomodelavailabilitymanager.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudiomodelavailabilitymanager.SwigPyIterator_copy(self)

    def next(self):
        return _openstudiomodelavailabilitymanager.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudiomodelavailabilitymanager.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudiomodelavailabilitymanager.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudiomodelavailabilitymanager.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudiomodelavailabilitymanager.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudiomodelavailabilitymanager.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudiomodelavailabilitymanager.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudiomodelavailabilitymanager.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudiomodelavailabilitymanager.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudiomodelavailabilitymanager.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudiomodelavailabilitymanager.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudioutilitiesxml

# Import common modules
import typing
import warnings

from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources
from .import openstudiomodelgeometry
from .import openstudiomodelhvac

Model = openstudiomodelcore.Model

class AvailabilityManagerNightCycleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector___bool__(self)

    def __len__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_pop(self)

    def append(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_append(self, x)

    def empty(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_empty(self)

    def size(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_size(self)

    def swap(self, v):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_swap(self, v)

    def begin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_begin(self)

    def end(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_end(self)

    def rbegin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_rbegin(self)

    def rend(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_rend(self)

    def clear(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerNightCycleVector(*args))

    def push_back(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_push_back(self, x)

    def front(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_front(self)

    def back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerNightCycleVector

# Register AvailabilityManagerNightCycleVector in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerNightCycleVector_swigregister(AvailabilityManagerNightCycleVector)
class OptionalAvailabilityManagerNightCycle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightCycle_swiginit(self, _openstudiomodelavailabilitymanager.new_OptionalAvailabilityManagerNightCycle(*args))

    def reset(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightCycle_reset(self)

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightCycle___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightCycle___ref__(self)

    def is_initialized(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightCycle_is_initialized(self)

    def isNull(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightCycle_isNull(self)

    def empty(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightCycle_empty(self)

    def get(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightCycle_get(self)

    def set(self, t):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightCycle_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightCycle_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_OptionalAvailabilityManagerNightCycle

# Register OptionalAvailabilityManagerNightCycle in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightCycle_swigregister(OptionalAvailabilityManagerNightCycle)
class AvailabilityManagerHybridVentilationVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector___bool__(self)

    def __len__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_pop(self)

    def append(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_append(self, x)

    def empty(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_empty(self)

    def size(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_size(self)

    def swap(self, v):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_swap(self, v)

    def begin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_begin(self)

    def end(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_end(self)

    def rbegin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_rbegin(self)

    def rend(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_rend(self)

    def clear(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerHybridVentilationVector(*args))

    def push_back(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_push_back(self, x)

    def front(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_front(self)

    def back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_capacity(self)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerHybridVentilationVector

# Register AvailabilityManagerHybridVentilationVector in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilationVector_swigregister(AvailabilityManagerHybridVentilationVector)
class OptionalAvailabilityManagerHybridVentilation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHybridVentilation_swiginit(self, _openstudiomodelavailabilitymanager.new_OptionalAvailabilityManagerHybridVentilation(*args))

    def reset(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHybridVentilation_reset(self)

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHybridVentilation___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHybridVentilation___ref__(self)

    def is_initialized(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHybridVentilation_is_initialized(self)

    def isNull(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHybridVentilation_isNull(self)

    def empty(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHybridVentilation_empty(self)

    def get(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHybridVentilation_get(self)

    def set(self, t):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHybridVentilation_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHybridVentilation_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_OptionalAvailabilityManagerHybridVentilation

# Register OptionalAvailabilityManagerHybridVentilation in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHybridVentilation_swigregister(OptionalAvailabilityManagerHybridVentilation)
class AvailabilityManagerOptimumStartVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector___bool__(self)

    def __len__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_pop(self)

    def append(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_append(self, x)

    def empty(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_empty(self)

    def size(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_size(self)

    def swap(self, v):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_swap(self, v)

    def begin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_begin(self)

    def end(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_end(self)

    def rbegin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_rbegin(self)

    def rend(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_rend(self)

    def clear(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerOptimumStartVector(*args))

    def push_back(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_push_back(self, x)

    def front(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_front(self)

    def back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_capacity(self)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerOptimumStartVector

# Register AvailabilityManagerOptimumStartVector in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStartVector_swigregister(AvailabilityManagerOptimumStartVector)
class OptionalAvailabilityManagerOptimumStart(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerOptimumStart_swiginit(self, _openstudiomodelavailabilitymanager.new_OptionalAvailabilityManagerOptimumStart(*args))

    def reset(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerOptimumStart_reset(self)

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerOptimumStart___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerOptimumStart___ref__(self)

    def is_initialized(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerOptimumStart_is_initialized(self)

    def isNull(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerOptimumStart_isNull(self)

    def empty(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerOptimumStart_empty(self)

    def get(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerOptimumStart_get(self)

    def set(self, t):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerOptimumStart_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerOptimumStart_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_OptionalAvailabilityManagerOptimumStart

# Register OptionalAvailabilityManagerOptimumStart in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.OptionalAvailabilityManagerOptimumStart_swigregister(OptionalAvailabilityManagerOptimumStart)
class AvailabilityManagerDifferentialThermostatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector___bool__(self)

    def __len__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_pop(self)

    def append(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_append(self, x)

    def empty(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_empty(self)

    def size(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_size(self)

    def swap(self, v):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_swap(self, v)

    def begin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_begin(self)

    def end(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_end(self)

    def rbegin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_rbegin(self)

    def rend(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_rend(self)

    def clear(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerDifferentialThermostatVector(*args))

    def push_back(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_push_back(self, x)

    def front(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_front(self)

    def back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_capacity(self)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerDifferentialThermostatVector

# Register AvailabilityManagerDifferentialThermostatVector in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostatVector_swigregister(AvailabilityManagerDifferentialThermostatVector)
class OptionalAvailabilityManagerDifferentialThermostat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerDifferentialThermostat_swiginit(self, _openstudiomodelavailabilitymanager.new_OptionalAvailabilityManagerDifferentialThermostat(*args))

    def reset(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerDifferentialThermostat_reset(self)

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerDifferentialThermostat___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerDifferentialThermostat___ref__(self)

    def is_initialized(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerDifferentialThermostat_is_initialized(self)

    def isNull(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerDifferentialThermostat_isNull(self)

    def empty(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerDifferentialThermostat_empty(self)

    def get(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerDifferentialThermostat_get(self)

    def set(self, t):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerDifferentialThermostat_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerDifferentialThermostat_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_OptionalAvailabilityManagerDifferentialThermostat

# Register OptionalAvailabilityManagerDifferentialThermostat in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.OptionalAvailabilityManagerDifferentialThermostat_swigregister(OptionalAvailabilityManagerDifferentialThermostat)
class AvailabilityManagerNightVentilationVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector___bool__(self)

    def __len__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_pop(self)

    def append(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_append(self, x)

    def empty(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_empty(self)

    def size(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_size(self)

    def swap(self, v):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_swap(self, v)

    def begin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_begin(self)

    def end(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_end(self)

    def rbegin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_rbegin(self)

    def rend(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_rend(self)

    def clear(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerNightVentilationVector(*args))

    def push_back(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_push_back(self, x)

    def front(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_front(self)

    def back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_capacity(self)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerNightVentilationVector

# Register AvailabilityManagerNightVentilationVector in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilationVector_swigregister(AvailabilityManagerNightVentilationVector)
class OptionalAvailabilityManagerNightVentilation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightVentilation_swiginit(self, _openstudiomodelavailabilitymanager.new_OptionalAvailabilityManagerNightVentilation(*args))

    def reset(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightVentilation_reset(self)

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightVentilation___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightVentilation___ref__(self)

    def is_initialized(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightVentilation_is_initialized(self)

    def isNull(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightVentilation_isNull(self)

    def empty(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightVentilation_empty(self)

    def get(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightVentilation_get(self)

    def set(self, t):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightVentilation_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightVentilation_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_OptionalAvailabilityManagerNightVentilation

# Register OptionalAvailabilityManagerNightVentilation in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.OptionalAvailabilityManagerNightVentilation_swigregister(OptionalAvailabilityManagerNightVentilation)
class AvailabilityManagerHighTemperatureTurnOnVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector___bool__(self)

    def __len__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_pop(self)

    def append(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_append(self, x)

    def empty(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_empty(self)

    def size(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_size(self)

    def swap(self, v):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_swap(self, v)

    def begin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_begin(self)

    def end(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_end(self)

    def rbegin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_rbegin(self)

    def rend(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_rend(self)

    def clear(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerHighTemperatureTurnOnVector(*args))

    def push_back(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_push_back(self, x)

    def front(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_front(self)

    def back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_capacity(self)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerHighTemperatureTurnOnVector

# Register AvailabilityManagerHighTemperatureTurnOnVector in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOnVector_swigregister(AvailabilityManagerHighTemperatureTurnOnVector)
class OptionalAvailabilityManagerHighTemperatureTurnOn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOn_swiginit(self, _openstudiomodelavailabilitymanager.new_OptionalAvailabilityManagerHighTemperatureTurnOn(*args))

    def reset(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOn_reset(self)

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOn___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOn___ref__(self)

    def is_initialized(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOn_is_initialized(self)

    def isNull(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOn_isNull(self)

    def empty(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOn_empty(self)

    def get(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOn_get(self)

    def set(self, t):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOn_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOn_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_OptionalAvailabilityManagerHighTemperatureTurnOn

# Register OptionalAvailabilityManagerHighTemperatureTurnOn in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOn_swigregister(OptionalAvailabilityManagerHighTemperatureTurnOn)
class AvailabilityManagerHighTemperatureTurnOffVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector___bool__(self)

    def __len__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_pop(self)

    def append(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_append(self, x)

    def empty(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_empty(self)

    def size(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_size(self)

    def swap(self, v):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_swap(self, v)

    def begin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_begin(self)

    def end(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_end(self)

    def rbegin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_rbegin(self)

    def rend(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_rend(self)

    def clear(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerHighTemperatureTurnOffVector(*args))

    def push_back(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_push_back(self, x)

    def front(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_front(self)

    def back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_capacity(self)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerHighTemperatureTurnOffVector

# Register AvailabilityManagerHighTemperatureTurnOffVector in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOffVector_swigregister(AvailabilityManagerHighTemperatureTurnOffVector)
class OptionalAvailabilityManagerHighTemperatureTurnOff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOff_swiginit(self, _openstudiomodelavailabilitymanager.new_OptionalAvailabilityManagerHighTemperatureTurnOff(*args))

    def reset(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOff_reset(self)

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOff___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOff___ref__(self)

    def is_initialized(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOff_is_initialized(self)

    def isNull(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOff_isNull(self)

    def empty(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOff_empty(self)

    def get(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOff_get(self)

    def set(self, t):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOff_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOff_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_OptionalAvailabilityManagerHighTemperatureTurnOff

# Register OptionalAvailabilityManagerHighTemperatureTurnOff in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.OptionalAvailabilityManagerHighTemperatureTurnOff_swigregister(OptionalAvailabilityManagerHighTemperatureTurnOff)
class AvailabilityManagerLowTemperatureTurnOnVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector___bool__(self)

    def __len__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_pop(self)

    def append(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_append(self, x)

    def empty(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_empty(self)

    def size(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_size(self)

    def swap(self, v):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_swap(self, v)

    def begin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_begin(self)

    def end(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_end(self)

    def rbegin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_rbegin(self)

    def rend(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_rend(self)

    def clear(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerLowTemperatureTurnOnVector(*args))

    def push_back(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_push_back(self, x)

    def front(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_front(self)

    def back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_capacity(self)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerLowTemperatureTurnOnVector

# Register AvailabilityManagerLowTemperatureTurnOnVector in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOnVector_swigregister(AvailabilityManagerLowTemperatureTurnOnVector)
class OptionalAvailabilityManagerLowTemperatureTurnOn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOn_swiginit(self, _openstudiomodelavailabilitymanager.new_OptionalAvailabilityManagerLowTemperatureTurnOn(*args))

    def reset(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOn_reset(self)

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOn___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOn___ref__(self)

    def is_initialized(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOn_is_initialized(self)

    def isNull(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOn_isNull(self)

    def empty(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOn_empty(self)

    def get(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOn_get(self)

    def set(self, t):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOn_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOn_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_OptionalAvailabilityManagerLowTemperatureTurnOn

# Register OptionalAvailabilityManagerLowTemperatureTurnOn in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOn_swigregister(OptionalAvailabilityManagerLowTemperatureTurnOn)
class AvailabilityManagerLowTemperatureTurnOffVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector___bool__(self)

    def __len__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_pop(self)

    def append(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_append(self, x)

    def empty(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_empty(self)

    def size(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_size(self)

    def swap(self, v):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_swap(self, v)

    def begin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_begin(self)

    def end(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_end(self)

    def rbegin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_rbegin(self)

    def rend(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_rend(self)

    def clear(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerLowTemperatureTurnOffVector(*args))

    def push_back(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_push_back(self, x)

    def front(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_front(self)

    def back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_capacity(self)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerLowTemperatureTurnOffVector

# Register AvailabilityManagerLowTemperatureTurnOffVector in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOffVector_swigregister(AvailabilityManagerLowTemperatureTurnOffVector)
class OptionalAvailabilityManagerLowTemperatureTurnOff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOff_swiginit(self, _openstudiomodelavailabilitymanager.new_OptionalAvailabilityManagerLowTemperatureTurnOff(*args))

    def reset(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOff_reset(self)

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOff___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOff___ref__(self)

    def is_initialized(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOff_is_initialized(self)

    def isNull(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOff_isNull(self)

    def empty(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOff_empty(self)

    def get(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOff_get(self)

    def set(self, t):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOff_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOff_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_OptionalAvailabilityManagerLowTemperatureTurnOff

# Register OptionalAvailabilityManagerLowTemperatureTurnOff in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.OptionalAvailabilityManagerLowTemperatureTurnOff_swigregister(OptionalAvailabilityManagerLowTemperatureTurnOff)
class AvailabilityManagerScheduledVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector___bool__(self)

    def __len__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_pop(self)

    def append(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_append(self, x)

    def empty(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_empty(self)

    def size(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_size(self)

    def swap(self, v):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_swap(self, v)

    def begin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_begin(self)

    def end(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_end(self)

    def rbegin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_rbegin(self)

    def rend(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_rend(self)

    def clear(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerScheduledVector(*args))

    def push_back(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_push_back(self, x)

    def front(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_front(self)

    def back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_capacity(self)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerScheduledVector

# Register AvailabilityManagerScheduledVector in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerScheduledVector_swigregister(AvailabilityManagerScheduledVector)
class OptionalAvailabilityManagerScheduled(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduled_swiginit(self, _openstudiomodelavailabilitymanager.new_OptionalAvailabilityManagerScheduled(*args))

    def reset(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduled_reset(self)

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduled___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduled___ref__(self)

    def is_initialized(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduled_is_initialized(self)

    def isNull(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduled_isNull(self)

    def empty(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduled_empty(self)

    def get(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduled_get(self)

    def set(self, t):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduled_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduled_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_OptionalAvailabilityManagerScheduled

# Register OptionalAvailabilityManagerScheduled in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduled_swigregister(OptionalAvailabilityManagerScheduled)
class AvailabilityManagerScheduledOnVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector___bool__(self)

    def __len__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_pop(self)

    def append(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_append(self, x)

    def empty(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_empty(self)

    def size(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_size(self)

    def swap(self, v):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_swap(self, v)

    def begin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_begin(self)

    def end(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_end(self)

    def rbegin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_rbegin(self)

    def rend(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_rend(self)

    def clear(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerScheduledOnVector(*args))

    def push_back(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_push_back(self, x)

    def front(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_front(self)

    def back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_capacity(self)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerScheduledOnVector

# Register AvailabilityManagerScheduledOnVector in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOnVector_swigregister(AvailabilityManagerScheduledOnVector)
class OptionalAvailabilityManagerScheduledOn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOn_swiginit(self, _openstudiomodelavailabilitymanager.new_OptionalAvailabilityManagerScheduledOn(*args))

    def reset(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOn_reset(self)

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOn___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOn___ref__(self)

    def is_initialized(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOn_is_initialized(self)

    def isNull(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOn_isNull(self)

    def empty(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOn_empty(self)

    def get(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOn_get(self)

    def set(self, t):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOn_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOn_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_OptionalAvailabilityManagerScheduledOn

# Register OptionalAvailabilityManagerScheduledOn in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOn_swigregister(OptionalAvailabilityManagerScheduledOn)
class AvailabilityManagerScheduledOffVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector___bool__(self)

    def __len__(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_pop(self)

    def append(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_append(self, x)

    def empty(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_empty(self)

    def size(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_size(self)

    def swap(self, v):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_swap(self, v)

    def begin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_begin(self)

    def end(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_end(self)

    def rbegin(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_rbegin(self)

    def rend(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_rend(self)

    def clear(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerScheduledOffVector(*args))

    def push_back(self, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_push_back(self, x)

    def front(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_front(self)

    def back(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_capacity(self)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerScheduledOffVector

# Register AvailabilityManagerScheduledOffVector in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOffVector_swigregister(AvailabilityManagerScheduledOffVector)
class OptionalAvailabilityManagerScheduledOff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOff_swiginit(self, _openstudiomodelavailabilitymanager.new_OptionalAvailabilityManagerScheduledOff(*args))

    def reset(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOff_reset(self)

    def __nonzero__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOff___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOff___ref__(self)

    def is_initialized(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOff_is_initialized(self)

    def isNull(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOff_isNull(self)

    def empty(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOff_empty(self)

    def get(self):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOff_get(self)

    def set(self, t):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOff_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOff_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_OptionalAvailabilityManagerScheduledOff

# Register OptionalAvailabilityManagerScheduledOff in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.OptionalAvailabilityManagerScheduledOff_swigregister(OptionalAvailabilityManagerScheduledOff)
class AvailabilityManagerNightCycle(openstudiomodelhvac.AvailabilityManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerNightCycle

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerNightCycle(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_iddObjectType()

    @staticmethod
    def controlTypeValues():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_controlTypeValues()

    def airLoopHVAC(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_airLoopHVAC(self)

    def applicabilitySchedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_applicabilitySchedule(self)

    def setApplicabilitySchedule(self, schedule):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_setApplicabilitySchedule(self, schedule)

    def fanSchedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_fanSchedule(self)

    def controlType(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_controlType(self)

    def setControlType(self, controlType):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_setControlType(self, controlType)

    def resetControlType(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_resetControlType(self)

    def isControlTypeDefaulted(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_isControlTypeDefaulted(self)

    def thermostatTolerance(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_thermostatTolerance(self)

    def setThermostatTolerance(self, thermostatTolerance):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_setThermostatTolerance(self, thermostatTolerance)

    def isThermostatToleranceDefaulted(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_isThermostatToleranceDefaulted(self)

    def resetThermostatTolerance(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_resetThermostatTolerance(self)

    def cyclingRunTime(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_cyclingRunTime(self)

    def setCyclingRunTime(self, cyclingRunTime):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_setCyclingRunTime(self, cyclingRunTime)

    def resetCyclingRunTime(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_resetCyclingRunTime(self)

    def isCyclingRunTimeDefaulted(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_isCyclingRunTimeDefaulted(self)

    @staticmethod
    def cyclingRunTimeControlTypeValues():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_cyclingRunTimeControlTypeValues()

    def cyclingRunTimeControlType(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_cyclingRunTimeControlType(self)

    def isCyclingRunTimeControlTypeDefaulted(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_isCyclingRunTimeControlTypeDefaulted(self)

    def setCyclingRunTimeControlType(self, cyclingRunTimeControlType):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_setCyclingRunTimeControlType(self, cyclingRunTimeControlType)

    def resetCyclingRunTimeControlType(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_resetCyclingRunTimeControlType(self)

    def controlThermalZones(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_controlThermalZones(self)

    def setControlThermalZones(self, thermalZones):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_setControlThermalZones(self, thermalZones)

    def resetControlThermalZones(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_resetControlThermalZones(self)

    def coolingControlThermalZones(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_coolingControlThermalZones(self)

    def setCoolingControlThermalZones(self, thermalZones):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_setCoolingControlThermalZones(self, thermalZones)

    def resetCoolingControlThermalZones(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_resetCoolingControlThermalZones(self)

    def heatingControlThermalZones(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_heatingControlThermalZones(self)

    def setHeatingControlThermalZones(self, thermalZones):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_setHeatingControlThermalZones(self, thermalZones)

    def resetHeatingControlThermalZones(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_resetHeatingControlThermalZones(self)

    def heatingZoneFansOnlyThermalZones(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_heatingZoneFansOnlyThermalZones(self)

    def setHeatingZoneFansOnlyThermalZones(self, thermalZones):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_setHeatingZoneFansOnlyThermalZones(self, thermalZones)

    def resetHeatingZoneFansOnlyThermalZones(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_resetHeatingZoneFansOnlyThermalZones(self)

# Register AvailabilityManagerNightCycle in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerNightCycle_swigregister(AvailabilityManagerNightCycle)

def toAvailabilityManagerNightCycle(idfObject):
    return _openstudiomodelavailabilitymanager.toAvailabilityManagerNightCycle(idfObject)

def getAvailabilityManagerNightCycle(t_model, t_handle):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerNightCycle(t_model, t_handle)

def getAvailabilityManagerNightCycles(t_model):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerNightCycles(t_model)

def getAvailabilityManagerNightCycleByName(t_model, t_name):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerNightCycleByName(t_model, t_name)

def getAvailabilityManagerNightCyclesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerNightCyclesByName(t_model, t_name, t_exactMatch)

def _to_AvailabilityManagerNightCycle(self) -> OptionalAvailabilityManagerNightCycle:
    """Try to cast the ModelObject to a AvailabilityManagerNightCycle.

    :return: An Optional AvailabilityManagerNightCycle.
    """
    return toAvailabilityManagerNightCycle(self)
openstudioutilitiesidf.IdfObject.to_AvailabilityManagerNightCycle = _to_AvailabilityManagerNightCycle

def _getAvailabilityManagerNightCycle(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAvailabilityManagerNightCycle:
    """Try to get an object of type AvailabilityManagerNightCycle referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AvailabilityManagerNightCycle.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAvailabilityManagerNightCycle(self, t_handle)
Model.getAvailabilityManagerNightCycle = _getAvailabilityManagerNightCycle

def _getAvailabilityManagerNightCycles(self) -> AvailabilityManagerNightCycleVector:
    """Get a vector of all objects of type AvailabilityManagerNightCycle in the model.

    :return: A vector of AvailabilityManagerNightCycle.
    """
    return getAvailabilityManagerNightCycles(self)
Model.getAvailabilityManagerNightCycles = _getAvailabilityManagerNightCycles

def _getAvailabilityManagerNightCycleByName(self, t_name: str) -> OptionalAvailabilityManagerNightCycle:
    """Try to get an object of type AvailabilityManagerNightCycle that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AvailabilityManagerNightCycle.
    """
    return getAvailabilityManagerNightCycleByName(self, t_name)
Model.getAvailabilityManagerNightCycleByName = _getAvailabilityManagerNightCycleByName

def _getAvailabilityManagerNightCyclesByName(self, t_name: str, t_exactMatch: bool) -> AvailabilityManagerNightCycleVector:
    """Returns all objects of type AvailabilityManagerNightCycle named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAvailabilityManagerNightCyclesByName(self, t_name, t_exactMatch)
Model.getAvailabilityManagerNightCyclesByName = _getAvailabilityManagerNightCyclesByName

class AvailabilityManagerHybridVentilation(openstudiomodelhvac.AvailabilityManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerHybridVentilation

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerHybridVentilation(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_iddObjectType()

    def controlledZone(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_controlledZone(self)

    def ventilationControlModeSchedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_ventilationControlModeSchedule(self)

    def useWeatherFileRainIndicators(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_useWeatherFileRainIndicators(self)

    def maximumWindSpeed(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_maximumWindSpeed(self)

    def minimumOutdoorTemperature(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_minimumOutdoorTemperature(self)

    def maximumOutdoorTemperature(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_maximumOutdoorTemperature(self)

    def minimumOutdoorEnthalpy(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_minimumOutdoorEnthalpy(self)

    def maximumOutdoorEnthalpy(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_maximumOutdoorEnthalpy(self)

    def minimumOutdoorDewpoint(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_minimumOutdoorDewpoint(self)

    def maximumOutdoorDewpoint(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_maximumOutdoorDewpoint(self)

    def minimumHVACOperationTime(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_minimumHVACOperationTime(self)

    def minimumVentilationTime(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_minimumVentilationTime(self)

    def minimumOutdoorVentilationAirSchedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_minimumOutdoorVentilationAirSchedule(self)

    def openingFactorFunctionofWindSpeedCurve(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_openingFactorFunctionofWindSpeedCurve(self)

    def airflowNetworkControlTypeSchedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_airflowNetworkControlTypeSchedule(self)

    def simpleAirflowControlTypeSchedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_simpleAirflowControlTypeSchedule(self)

    def zoneVentilationObject(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_zoneVentilationObject(self)

    def setControlledZone(self, thermalZone):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setControlledZone(self, thermalZone)

    def resetControlledZone(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_resetControlledZone(self)

    def setVentilationControlModeSchedule(self, schedule):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setVentilationControlModeSchedule(self, schedule)

    def setUseWeatherFileRainIndicators(self, useWeatherFileRainIndicators):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setUseWeatherFileRainIndicators(self, useWeatherFileRainIndicators)

    def setMaximumWindSpeed(self, maximumWindSpeed):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setMaximumWindSpeed(self, maximumWindSpeed)

    def setMinimumOutdoorTemperature(self, minimumOutdoorTemperature):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setMinimumOutdoorTemperature(self, minimumOutdoorTemperature)

    def setMaximumOutdoorTemperature(self, maximumOutdoorTemperature):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setMaximumOutdoorTemperature(self, maximumOutdoorTemperature)

    def setMinimumOutdoorEnthalpy(self, minimumOutdoorEnthalpy):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setMinimumOutdoorEnthalpy(self, minimumOutdoorEnthalpy)

    def setMaximumOutdoorEnthalpy(self, maximumOutdoorEnthalpy):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setMaximumOutdoorEnthalpy(self, maximumOutdoorEnthalpy)

    def setMinimumOutdoorDewpoint(self, minimumOutdoorDewpoint):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setMinimumOutdoorDewpoint(self, minimumOutdoorDewpoint)

    def setMaximumOutdoorDewpoint(self, maximumOutdoorDewpoint):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setMaximumOutdoorDewpoint(self, maximumOutdoorDewpoint)

    def setMinimumOutdoorVentilationAirSchedule(self, schedule):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setMinimumOutdoorVentilationAirSchedule(self, schedule)

    def setOpeningFactorFunctionofWindSpeedCurve(self, curve):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setOpeningFactorFunctionofWindSpeedCurve(self, curve)

    def resetOpeningFactorFunctionofWindSpeedCurve(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_resetOpeningFactorFunctionofWindSpeedCurve(self)

    def setMinimumHVACOperationTime(self, minimumHVACOperationTime):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setMinimumHVACOperationTime(self, minimumHVACOperationTime)

    def setMinimumVentilationTime(self, minimumVentilationTime):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setMinimumVentilationTime(self, minimumVentilationTime)

    def setAirflowNetworkControlTypeSchedule(self, schedule):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setAirflowNetworkControlTypeSchedule(self, schedule)

    def resetAirflowNetworkControlTypeSchedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_resetAirflowNetworkControlTypeSchedule(self)

    def setSimpleAirflowControlTypeSchedule(self, schedule):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setSimpleAirflowControlTypeSchedule(self, schedule)

    def resetSimpleAirflowControlTypeSchedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_resetSimpleAirflowControlTypeSchedule(self)

    def setZoneVentilationObject(self, zv):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_setZoneVentilationObject(self, zv)

    def resetZoneVentilationObject(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_resetZoneVentilationObject(self)

# Register AvailabilityManagerHybridVentilation in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerHybridVentilation_swigregister(AvailabilityManagerHybridVentilation)

def toAvailabilityManagerHybridVentilation(idfObject):
    return _openstudiomodelavailabilitymanager.toAvailabilityManagerHybridVentilation(idfObject)

def getAvailabilityManagerHybridVentilation(t_model, t_handle):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerHybridVentilation(t_model, t_handle)

def getAvailabilityManagerHybridVentilations(t_model):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerHybridVentilations(t_model)

def getAvailabilityManagerHybridVentilationByName(t_model, t_name):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerHybridVentilationByName(t_model, t_name)

def getAvailabilityManagerHybridVentilationsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerHybridVentilationsByName(t_model, t_name, t_exactMatch)

def _to_AvailabilityManagerHybridVentilation(self) -> OptionalAvailabilityManagerHybridVentilation:
    """Try to cast the ModelObject to a AvailabilityManagerHybridVentilation.

    :return: An Optional AvailabilityManagerHybridVentilation.
    """
    return toAvailabilityManagerHybridVentilation(self)
openstudioutilitiesidf.IdfObject.to_AvailabilityManagerHybridVentilation = _to_AvailabilityManagerHybridVentilation

def _getAvailabilityManagerHybridVentilation(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAvailabilityManagerHybridVentilation:
    """Try to get an object of type AvailabilityManagerHybridVentilation referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AvailabilityManagerHybridVentilation.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAvailabilityManagerHybridVentilation(self, t_handle)
Model.getAvailabilityManagerHybridVentilation = _getAvailabilityManagerHybridVentilation

def _getAvailabilityManagerHybridVentilations(self) -> AvailabilityManagerHybridVentilationVector:
    """Get a vector of all objects of type AvailabilityManagerHybridVentilation in the model.

    :return: A vector of AvailabilityManagerHybridVentilation.
    """
    return getAvailabilityManagerHybridVentilations(self)
Model.getAvailabilityManagerHybridVentilations = _getAvailabilityManagerHybridVentilations

def _getAvailabilityManagerHybridVentilationByName(self, t_name: str) -> OptionalAvailabilityManagerHybridVentilation:
    """Try to get an object of type AvailabilityManagerHybridVentilation that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AvailabilityManagerHybridVentilation.
    """
    return getAvailabilityManagerHybridVentilationByName(self, t_name)
Model.getAvailabilityManagerHybridVentilationByName = _getAvailabilityManagerHybridVentilationByName

def _getAvailabilityManagerHybridVentilationsByName(self, t_name: str, t_exactMatch: bool) -> AvailabilityManagerHybridVentilationVector:
    """Returns all objects of type AvailabilityManagerHybridVentilation named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAvailabilityManagerHybridVentilationsByName(self, t_name, t_exactMatch)
Model.getAvailabilityManagerHybridVentilationsByName = _getAvailabilityManagerHybridVentilationsByName

class AvailabilityManagerOptimumStart(openstudiomodelhvac.AvailabilityManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerOptimumStart

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerOptimumStart(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_iddObjectType()

    @staticmethod
    def controlTypeValues():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_controlTypeValues()

    @staticmethod
    def controlAlgorithmValues():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_controlAlgorithmValues()

    def applicabilitySchedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_applicabilitySchedule(self)

    def controlType(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_controlType(self)

    def controlZone(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_controlZone(self)

    def maximumValueforOptimumStartTime(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_maximumValueforOptimumStartTime(self)

    def controlAlgorithm(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_controlAlgorithm(self)

    def constantTemperatureGradientduringCooling(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_constantTemperatureGradientduringCooling(self)

    def constantTemperatureGradientduringHeating(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_constantTemperatureGradientduringHeating(self)

    def initialTemperatureGradientduringCooling(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_initialTemperatureGradientduringCooling(self)

    def initialTemperatureGradientduringHeating(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_initialTemperatureGradientduringHeating(self)

    def constantStartTime(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_constantStartTime(self)

    def numberofPreviousDays(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_numberofPreviousDays(self)

    def setApplicabilitySchedule(self, schedule):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_setApplicabilitySchedule(self, schedule)

    def setControlType(self, controlType):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_setControlType(self, controlType)

    def setControlZone(self, thermalZone):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_setControlZone(self, thermalZone)

    def resetControlZone(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_resetControlZone(self)

    def setMaximumValueforOptimumStartTime(self, maximumValueforOptimumStartTime):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_setMaximumValueforOptimumStartTime(self, maximumValueforOptimumStartTime)

    def setControlAlgorithm(self, controlAlgorithm):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_setControlAlgorithm(self, controlAlgorithm)

    def setConstantTemperatureGradientduringCooling(self, constantTemperatureGradientduringCooling):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_setConstantTemperatureGradientduringCooling(self, constantTemperatureGradientduringCooling)

    def setConstantTemperatureGradientduringHeating(self, constantTemperatureGradientduringHeating):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_setConstantTemperatureGradientduringHeating(self, constantTemperatureGradientduringHeating)

    def setInitialTemperatureGradientduringCooling(self, initialTemperatureGradientduringCooling):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_setInitialTemperatureGradientduringCooling(self, initialTemperatureGradientduringCooling)

    def setInitialTemperatureGradientduringHeating(self, initialTemperatureGradientduringHeating):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_setInitialTemperatureGradientduringHeating(self, initialTemperatureGradientduringHeating)

    def setConstantStartTime(self, constantStartTime):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_setConstantStartTime(self, constantStartTime)

    def setNumberofPreviousDays(self, numberofPreviousDays):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_setNumberofPreviousDays(self, numberofPreviousDays)

# Register AvailabilityManagerOptimumStart in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerOptimumStart_swigregister(AvailabilityManagerOptimumStart)

def toAvailabilityManagerOptimumStart(idfObject):
    return _openstudiomodelavailabilitymanager.toAvailabilityManagerOptimumStart(idfObject)

def getAvailabilityManagerOptimumStart(t_model, t_handle):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerOptimumStart(t_model, t_handle)

def getAvailabilityManagerOptimumStarts(t_model):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerOptimumStarts(t_model)

def getAvailabilityManagerOptimumStartByName(t_model, t_name):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerOptimumStartByName(t_model, t_name)

def getAvailabilityManagerOptimumStartsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerOptimumStartsByName(t_model, t_name, t_exactMatch)

def _to_AvailabilityManagerOptimumStart(self) -> OptionalAvailabilityManagerOptimumStart:
    """Try to cast the ModelObject to a AvailabilityManagerOptimumStart.

    :return: An Optional AvailabilityManagerOptimumStart.
    """
    return toAvailabilityManagerOptimumStart(self)
openstudioutilitiesidf.IdfObject.to_AvailabilityManagerOptimumStart = _to_AvailabilityManagerOptimumStart

def _getAvailabilityManagerOptimumStart(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAvailabilityManagerOptimumStart:
    """Try to get an object of type AvailabilityManagerOptimumStart referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AvailabilityManagerOptimumStart.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAvailabilityManagerOptimumStart(self, t_handle)
Model.getAvailabilityManagerOptimumStart = _getAvailabilityManagerOptimumStart

def _getAvailabilityManagerOptimumStarts(self) -> AvailabilityManagerOptimumStartVector:
    """Get a vector of all objects of type AvailabilityManagerOptimumStart in the model.

    :return: A vector of AvailabilityManagerOptimumStart.
    """
    return getAvailabilityManagerOptimumStarts(self)
Model.getAvailabilityManagerOptimumStarts = _getAvailabilityManagerOptimumStarts

def _getAvailabilityManagerOptimumStartByName(self, t_name: str) -> OptionalAvailabilityManagerOptimumStart:
    """Try to get an object of type AvailabilityManagerOptimumStart that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AvailabilityManagerOptimumStart.
    """
    return getAvailabilityManagerOptimumStartByName(self, t_name)
Model.getAvailabilityManagerOptimumStartByName = _getAvailabilityManagerOptimumStartByName

def _getAvailabilityManagerOptimumStartsByName(self, t_name: str, t_exactMatch: bool) -> AvailabilityManagerOptimumStartVector:
    """Returns all objects of type AvailabilityManagerOptimumStart named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAvailabilityManagerOptimumStartsByName(self, t_name, t_exactMatch)
Model.getAvailabilityManagerOptimumStartsByName = _getAvailabilityManagerOptimumStartsByName

class AvailabilityManagerDifferentialThermostat(openstudiomodelhvac.AvailabilityManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerDifferentialThermostat

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostat_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerDifferentialThermostat(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostat_iddObjectType()

    def hotNode(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostat_hotNode(self)

    def coldNode(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostat_coldNode(self)

    def temperatureDifferenceOnLimit(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostat_temperatureDifferenceOnLimit(self)

    def temperatureDifferenceOffLimit(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostat_temperatureDifferenceOffLimit(self)

    def setHotNode(self, node):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostat_setHotNode(self, node)

    def resetHotNode(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostat_resetHotNode(self)

    def setColdNode(self, node):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostat_setColdNode(self, node)

    def resetColdNode(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostat_resetColdNode(self)

    def setTemperatureDifferenceOnLimit(self, temperatureDifferenceOnLimit):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostat_setTemperatureDifferenceOnLimit(self, temperatureDifferenceOnLimit)

    def setTemperatureDifferenceOffLimit(self, temperatureDifferenceOffLimit):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostat_setTemperatureDifferenceOffLimit(self, temperatureDifferenceOffLimit)

# Register AvailabilityManagerDifferentialThermostat in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerDifferentialThermostat_swigregister(AvailabilityManagerDifferentialThermostat)

def toAvailabilityManagerDifferentialThermostat(idfObject):
    return _openstudiomodelavailabilitymanager.toAvailabilityManagerDifferentialThermostat(idfObject)

def getAvailabilityManagerDifferentialThermostat(t_model, t_handle):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerDifferentialThermostat(t_model, t_handle)

def getAvailabilityManagerDifferentialThermostats(t_model):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerDifferentialThermostats(t_model)

def getAvailabilityManagerDifferentialThermostatByName(t_model, t_name):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerDifferentialThermostatByName(t_model, t_name)

def getAvailabilityManagerDifferentialThermostatsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerDifferentialThermostatsByName(t_model, t_name, t_exactMatch)

def _to_AvailabilityManagerDifferentialThermostat(self) -> OptionalAvailabilityManagerDifferentialThermostat:
    """Try to cast the ModelObject to a AvailabilityManagerDifferentialThermostat.

    :return: An Optional AvailabilityManagerDifferentialThermostat.
    """
    return toAvailabilityManagerDifferentialThermostat(self)
openstudioutilitiesidf.IdfObject.to_AvailabilityManagerDifferentialThermostat = _to_AvailabilityManagerDifferentialThermostat

def _getAvailabilityManagerDifferentialThermostat(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAvailabilityManagerDifferentialThermostat:
    """Try to get an object of type AvailabilityManagerDifferentialThermostat referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AvailabilityManagerDifferentialThermostat.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAvailabilityManagerDifferentialThermostat(self, t_handle)
Model.getAvailabilityManagerDifferentialThermostat = _getAvailabilityManagerDifferentialThermostat

def _getAvailabilityManagerDifferentialThermostats(self) -> AvailabilityManagerDifferentialThermostatVector:
    """Get a vector of all objects of type AvailabilityManagerDifferentialThermostat in the model.

    :return: A vector of AvailabilityManagerDifferentialThermostat.
    """
    return getAvailabilityManagerDifferentialThermostats(self)
Model.getAvailabilityManagerDifferentialThermostats = _getAvailabilityManagerDifferentialThermostats

def _getAvailabilityManagerDifferentialThermostatByName(self, t_name: str) -> OptionalAvailabilityManagerDifferentialThermostat:
    """Try to get an object of type AvailabilityManagerDifferentialThermostat that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AvailabilityManagerDifferentialThermostat.
    """
    return getAvailabilityManagerDifferentialThermostatByName(self, t_name)
Model.getAvailabilityManagerDifferentialThermostatByName = _getAvailabilityManagerDifferentialThermostatByName

def _getAvailabilityManagerDifferentialThermostatsByName(self, t_name: str, t_exactMatch: bool) -> AvailabilityManagerDifferentialThermostatVector:
    """Returns all objects of type AvailabilityManagerDifferentialThermostat named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAvailabilityManagerDifferentialThermostatsByName(self, t_name, t_exactMatch)
Model.getAvailabilityManagerDifferentialThermostatsByName = _getAvailabilityManagerDifferentialThermostatsByName

class AvailabilityManagerNightVentilation(openstudiomodelhvac.AvailabilityManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerNightVentilation

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerNightVentilation(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_iddObjectType()

    def applicabilitySchedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_applicabilitySchedule(self)

    def ventilationTemperatureSchedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_ventilationTemperatureSchedule(self)

    def ventilationTemperatureDifference(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_ventilationTemperatureDifference(self)

    def ventilationTemperatureLowLimit(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_ventilationTemperatureLowLimit(self)

    def nightVentingFlowFraction(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_nightVentingFlowFraction(self)

    def controlZone(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_controlZone(self)

    def setApplicabilitySchedule(self, schedule):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_setApplicabilitySchedule(self, schedule)

    def setVentilationTemperatureSchedule(self, schedule):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_setVentilationTemperatureSchedule(self, schedule)

    def resetVentilationTemperatureSchedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_resetVentilationTemperatureSchedule(self)

    def setVentilationTemperatureDifference(self, ventilationTemperatureDifference):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_setVentilationTemperatureDifference(self, ventilationTemperatureDifference)

    def setVentilationTemperatureLowLimit(self, ventilationTemperatureLowLimit):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_setVentilationTemperatureLowLimit(self, ventilationTemperatureLowLimit)

    def setNightVentingFlowFraction(self, nightVentingFlowFraction):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_setNightVentingFlowFraction(self, nightVentingFlowFraction)

    def setControlZone(self, thermalZone):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_setControlZone(self, thermalZone)

    def resetControlZone(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_resetControlZone(self)

# Register AvailabilityManagerNightVentilation in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerNightVentilation_swigregister(AvailabilityManagerNightVentilation)

def toAvailabilityManagerNightVentilation(idfObject):
    return _openstudiomodelavailabilitymanager.toAvailabilityManagerNightVentilation(idfObject)

def getAvailabilityManagerNightVentilation(t_model, t_handle):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerNightVentilation(t_model, t_handle)

def getAvailabilityManagerNightVentilations(t_model):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerNightVentilations(t_model)

def getAvailabilityManagerNightVentilationByName(t_model, t_name):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerNightVentilationByName(t_model, t_name)

def getAvailabilityManagerNightVentilationsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerNightVentilationsByName(t_model, t_name, t_exactMatch)

def _to_AvailabilityManagerNightVentilation(self) -> OptionalAvailabilityManagerNightVentilation:
    """Try to cast the ModelObject to a AvailabilityManagerNightVentilation.

    :return: An Optional AvailabilityManagerNightVentilation.
    """
    return toAvailabilityManagerNightVentilation(self)
openstudioutilitiesidf.IdfObject.to_AvailabilityManagerNightVentilation = _to_AvailabilityManagerNightVentilation

def _getAvailabilityManagerNightVentilation(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAvailabilityManagerNightVentilation:
    """Try to get an object of type AvailabilityManagerNightVentilation referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AvailabilityManagerNightVentilation.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAvailabilityManagerNightVentilation(self, t_handle)
Model.getAvailabilityManagerNightVentilation = _getAvailabilityManagerNightVentilation

def _getAvailabilityManagerNightVentilations(self) -> AvailabilityManagerNightVentilationVector:
    """Get a vector of all objects of type AvailabilityManagerNightVentilation in the model.

    :return: A vector of AvailabilityManagerNightVentilation.
    """
    return getAvailabilityManagerNightVentilations(self)
Model.getAvailabilityManagerNightVentilations = _getAvailabilityManagerNightVentilations

def _getAvailabilityManagerNightVentilationByName(self, t_name: str) -> OptionalAvailabilityManagerNightVentilation:
    """Try to get an object of type AvailabilityManagerNightVentilation that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AvailabilityManagerNightVentilation.
    """
    return getAvailabilityManagerNightVentilationByName(self, t_name)
Model.getAvailabilityManagerNightVentilationByName = _getAvailabilityManagerNightVentilationByName

def _getAvailabilityManagerNightVentilationsByName(self, t_name: str, t_exactMatch: bool) -> AvailabilityManagerNightVentilationVector:
    """Returns all objects of type AvailabilityManagerNightVentilation named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAvailabilityManagerNightVentilationsByName(self, t_name, t_exactMatch)
Model.getAvailabilityManagerNightVentilationsByName = _getAvailabilityManagerNightVentilationsByName

class AvailabilityManagerHighTemperatureTurnOn(openstudiomodelhvac.AvailabilityManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerHighTemperatureTurnOn

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOn_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerHighTemperatureTurnOn(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOn_iddObjectType()

    def sensorNode(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOn_sensorNode(self)

    def temperature(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOn_temperature(self)

    def setSensorNode(self, node):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOn_setSensorNode(self, node)

    def resetSensorNode(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOn_resetSensorNode(self)

    def setTemperature(self, temperature):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOn_setTemperature(self, temperature)

# Register AvailabilityManagerHighTemperatureTurnOn in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOn_swigregister(AvailabilityManagerHighTemperatureTurnOn)

def toAvailabilityManagerHighTemperatureTurnOn(idfObject):
    return _openstudiomodelavailabilitymanager.toAvailabilityManagerHighTemperatureTurnOn(idfObject)

def getAvailabilityManagerHighTemperatureTurnOn(t_model, t_handle):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerHighTemperatureTurnOn(t_model, t_handle)

def getAvailabilityManagerHighTemperatureTurnOns(t_model):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerHighTemperatureTurnOns(t_model)

def getAvailabilityManagerHighTemperatureTurnOnByName(t_model, t_name):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerHighTemperatureTurnOnByName(t_model, t_name)

def getAvailabilityManagerHighTemperatureTurnOnsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerHighTemperatureTurnOnsByName(t_model, t_name, t_exactMatch)

def _to_AvailabilityManagerHighTemperatureTurnOn(self) -> OptionalAvailabilityManagerHighTemperatureTurnOn:
    """Try to cast the ModelObject to a AvailabilityManagerHighTemperatureTurnOn.

    :return: An Optional AvailabilityManagerHighTemperatureTurnOn.
    """
    return toAvailabilityManagerHighTemperatureTurnOn(self)
openstudioutilitiesidf.IdfObject.to_AvailabilityManagerHighTemperatureTurnOn = _to_AvailabilityManagerHighTemperatureTurnOn

def _getAvailabilityManagerHighTemperatureTurnOn(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAvailabilityManagerHighTemperatureTurnOn:
    """Try to get an object of type AvailabilityManagerHighTemperatureTurnOn referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AvailabilityManagerHighTemperatureTurnOn.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAvailabilityManagerHighTemperatureTurnOn(self, t_handle)
Model.getAvailabilityManagerHighTemperatureTurnOn = _getAvailabilityManagerHighTemperatureTurnOn

def _getAvailabilityManagerHighTemperatureTurnOns(self) -> AvailabilityManagerHighTemperatureTurnOnVector:
    """Get a vector of all objects of type AvailabilityManagerHighTemperatureTurnOn in the model.

    :return: A vector of AvailabilityManagerHighTemperatureTurnOn.
    """
    return getAvailabilityManagerHighTemperatureTurnOns(self)
Model.getAvailabilityManagerHighTemperatureTurnOns = _getAvailabilityManagerHighTemperatureTurnOns

def _getAvailabilityManagerHighTemperatureTurnOnByName(self, t_name: str) -> OptionalAvailabilityManagerHighTemperatureTurnOn:
    """Try to get an object of type AvailabilityManagerHighTemperatureTurnOn that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AvailabilityManagerHighTemperatureTurnOn.
    """
    return getAvailabilityManagerHighTemperatureTurnOnByName(self, t_name)
Model.getAvailabilityManagerHighTemperatureTurnOnByName = _getAvailabilityManagerHighTemperatureTurnOnByName

def _getAvailabilityManagerHighTemperatureTurnOnsByName(self, t_name: str, t_exactMatch: bool) -> AvailabilityManagerHighTemperatureTurnOnVector:
    """Returns all objects of type AvailabilityManagerHighTemperatureTurnOn named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAvailabilityManagerHighTemperatureTurnOnsByName(self, t_name, t_exactMatch)
Model.getAvailabilityManagerHighTemperatureTurnOnsByName = _getAvailabilityManagerHighTemperatureTurnOnsByName

class AvailabilityManagerHighTemperatureTurnOff(openstudiomodelhvac.AvailabilityManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerHighTemperatureTurnOff

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOff_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerHighTemperatureTurnOff(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOff_iddObjectType()

    def sensorNode(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOff_sensorNode(self)

    def temperature(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOff_temperature(self)

    def setSensorNode(self, node):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOff_setSensorNode(self, node)

    def resetSensorNode(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOff_resetSensorNode(self)

    def setTemperature(self, temperature):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOff_setTemperature(self, temperature)

# Register AvailabilityManagerHighTemperatureTurnOff in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerHighTemperatureTurnOff_swigregister(AvailabilityManagerHighTemperatureTurnOff)

def toAvailabilityManagerHighTemperatureTurnOff(idfObject):
    return _openstudiomodelavailabilitymanager.toAvailabilityManagerHighTemperatureTurnOff(idfObject)

def getAvailabilityManagerHighTemperatureTurnOff(t_model, t_handle):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerHighTemperatureTurnOff(t_model, t_handle)

def getAvailabilityManagerHighTemperatureTurnOffs(t_model):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerHighTemperatureTurnOffs(t_model)

def getAvailabilityManagerHighTemperatureTurnOffByName(t_model, t_name):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerHighTemperatureTurnOffByName(t_model, t_name)

def getAvailabilityManagerHighTemperatureTurnOffsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerHighTemperatureTurnOffsByName(t_model, t_name, t_exactMatch)

def _to_AvailabilityManagerHighTemperatureTurnOff(self) -> OptionalAvailabilityManagerHighTemperatureTurnOff:
    """Try to cast the ModelObject to a AvailabilityManagerHighTemperatureTurnOff.

    :return: An Optional AvailabilityManagerHighTemperatureTurnOff.
    """
    return toAvailabilityManagerHighTemperatureTurnOff(self)
openstudioutilitiesidf.IdfObject.to_AvailabilityManagerHighTemperatureTurnOff = _to_AvailabilityManagerHighTemperatureTurnOff

def _getAvailabilityManagerHighTemperatureTurnOff(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAvailabilityManagerHighTemperatureTurnOff:
    """Try to get an object of type AvailabilityManagerHighTemperatureTurnOff referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AvailabilityManagerHighTemperatureTurnOff.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAvailabilityManagerHighTemperatureTurnOff(self, t_handle)
Model.getAvailabilityManagerHighTemperatureTurnOff = _getAvailabilityManagerHighTemperatureTurnOff

def _getAvailabilityManagerHighTemperatureTurnOffs(self) -> AvailabilityManagerHighTemperatureTurnOffVector:
    """Get a vector of all objects of type AvailabilityManagerHighTemperatureTurnOff in the model.

    :return: A vector of AvailabilityManagerHighTemperatureTurnOff.
    """
    return getAvailabilityManagerHighTemperatureTurnOffs(self)
Model.getAvailabilityManagerHighTemperatureTurnOffs = _getAvailabilityManagerHighTemperatureTurnOffs

def _getAvailabilityManagerHighTemperatureTurnOffByName(self, t_name: str) -> OptionalAvailabilityManagerHighTemperatureTurnOff:
    """Try to get an object of type AvailabilityManagerHighTemperatureTurnOff that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AvailabilityManagerHighTemperatureTurnOff.
    """
    return getAvailabilityManagerHighTemperatureTurnOffByName(self, t_name)
Model.getAvailabilityManagerHighTemperatureTurnOffByName = _getAvailabilityManagerHighTemperatureTurnOffByName

def _getAvailabilityManagerHighTemperatureTurnOffsByName(self, t_name: str, t_exactMatch: bool) -> AvailabilityManagerHighTemperatureTurnOffVector:
    """Returns all objects of type AvailabilityManagerHighTemperatureTurnOff named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAvailabilityManagerHighTemperatureTurnOffsByName(self, t_name, t_exactMatch)
Model.getAvailabilityManagerHighTemperatureTurnOffsByName = _getAvailabilityManagerHighTemperatureTurnOffsByName

class AvailabilityManagerLowTemperatureTurnOn(openstudiomodelhvac.AvailabilityManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerLowTemperatureTurnOn

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOn_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerLowTemperatureTurnOn(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOn_iddObjectType()

    def sensorNode(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOn_sensorNode(self)

    def temperature(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOn_temperature(self)

    def setSensorNode(self, node):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOn_setSensorNode(self, node)

    def resetSensorNode(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOn_resetSensorNode(self)

    def setTemperature(self, temperature):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOn_setTemperature(self, temperature)

# Register AvailabilityManagerLowTemperatureTurnOn in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOn_swigregister(AvailabilityManagerLowTemperatureTurnOn)

def toAvailabilityManagerLowTemperatureTurnOn(idfObject):
    return _openstudiomodelavailabilitymanager.toAvailabilityManagerLowTemperatureTurnOn(idfObject)

def getAvailabilityManagerLowTemperatureTurnOn(t_model, t_handle):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerLowTemperatureTurnOn(t_model, t_handle)

def getAvailabilityManagerLowTemperatureTurnOns(t_model):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerLowTemperatureTurnOns(t_model)

def getAvailabilityManagerLowTemperatureTurnOnByName(t_model, t_name):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerLowTemperatureTurnOnByName(t_model, t_name)

def getAvailabilityManagerLowTemperatureTurnOnsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerLowTemperatureTurnOnsByName(t_model, t_name, t_exactMatch)

def _to_AvailabilityManagerLowTemperatureTurnOn(self) -> OptionalAvailabilityManagerLowTemperatureTurnOn:
    """Try to cast the ModelObject to a AvailabilityManagerLowTemperatureTurnOn.

    :return: An Optional AvailabilityManagerLowTemperatureTurnOn.
    """
    return toAvailabilityManagerLowTemperatureTurnOn(self)
openstudioutilitiesidf.IdfObject.to_AvailabilityManagerLowTemperatureTurnOn = _to_AvailabilityManagerLowTemperatureTurnOn

def _getAvailabilityManagerLowTemperatureTurnOn(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAvailabilityManagerLowTemperatureTurnOn:
    """Try to get an object of type AvailabilityManagerLowTemperatureTurnOn referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AvailabilityManagerLowTemperatureTurnOn.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAvailabilityManagerLowTemperatureTurnOn(self, t_handle)
Model.getAvailabilityManagerLowTemperatureTurnOn = _getAvailabilityManagerLowTemperatureTurnOn

def _getAvailabilityManagerLowTemperatureTurnOns(self) -> AvailabilityManagerLowTemperatureTurnOnVector:
    """Get a vector of all objects of type AvailabilityManagerLowTemperatureTurnOn in the model.

    :return: A vector of AvailabilityManagerLowTemperatureTurnOn.
    """
    return getAvailabilityManagerLowTemperatureTurnOns(self)
Model.getAvailabilityManagerLowTemperatureTurnOns = _getAvailabilityManagerLowTemperatureTurnOns

def _getAvailabilityManagerLowTemperatureTurnOnByName(self, t_name: str) -> OptionalAvailabilityManagerLowTemperatureTurnOn:
    """Try to get an object of type AvailabilityManagerLowTemperatureTurnOn that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AvailabilityManagerLowTemperatureTurnOn.
    """
    return getAvailabilityManagerLowTemperatureTurnOnByName(self, t_name)
Model.getAvailabilityManagerLowTemperatureTurnOnByName = _getAvailabilityManagerLowTemperatureTurnOnByName

def _getAvailabilityManagerLowTemperatureTurnOnsByName(self, t_name: str, t_exactMatch: bool) -> AvailabilityManagerLowTemperatureTurnOnVector:
    """Returns all objects of type AvailabilityManagerLowTemperatureTurnOn named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAvailabilityManagerLowTemperatureTurnOnsByName(self, t_name, t_exactMatch)
Model.getAvailabilityManagerLowTemperatureTurnOnsByName = _getAvailabilityManagerLowTemperatureTurnOnsByName

class AvailabilityManagerLowTemperatureTurnOff(openstudiomodelhvac.AvailabilityManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerLowTemperatureTurnOff

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOff_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerLowTemperatureTurnOff(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOff_iddObjectType()

    def sensorNode(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOff_sensorNode(self)

    def temperature(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOff_temperature(self)

    def applicabilitySchedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOff_applicabilitySchedule(self)

    def setSensorNode(self, node):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOff_setSensorNode(self, node)

    def resetSensorNode(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOff_resetSensorNode(self)

    def setTemperature(self, temperature):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOff_setTemperature(self, temperature)

    def setApplicabilitySchedule(self, schedule):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOff_setApplicabilitySchedule(self, schedule)

# Register AvailabilityManagerLowTemperatureTurnOff in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerLowTemperatureTurnOff_swigregister(AvailabilityManagerLowTemperatureTurnOff)

def toAvailabilityManagerLowTemperatureTurnOff(idfObject):
    return _openstudiomodelavailabilitymanager.toAvailabilityManagerLowTemperatureTurnOff(idfObject)

def getAvailabilityManagerLowTemperatureTurnOff(t_model, t_handle):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerLowTemperatureTurnOff(t_model, t_handle)

def getAvailabilityManagerLowTemperatureTurnOffs(t_model):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerLowTemperatureTurnOffs(t_model)

def getAvailabilityManagerLowTemperatureTurnOffByName(t_model, t_name):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerLowTemperatureTurnOffByName(t_model, t_name)

def getAvailabilityManagerLowTemperatureTurnOffsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerLowTemperatureTurnOffsByName(t_model, t_name, t_exactMatch)

def _to_AvailabilityManagerLowTemperatureTurnOff(self) -> OptionalAvailabilityManagerLowTemperatureTurnOff:
    """Try to cast the ModelObject to a AvailabilityManagerLowTemperatureTurnOff.

    :return: An Optional AvailabilityManagerLowTemperatureTurnOff.
    """
    return toAvailabilityManagerLowTemperatureTurnOff(self)
openstudioutilitiesidf.IdfObject.to_AvailabilityManagerLowTemperatureTurnOff = _to_AvailabilityManagerLowTemperatureTurnOff

def _getAvailabilityManagerLowTemperatureTurnOff(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAvailabilityManagerLowTemperatureTurnOff:
    """Try to get an object of type AvailabilityManagerLowTemperatureTurnOff referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AvailabilityManagerLowTemperatureTurnOff.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAvailabilityManagerLowTemperatureTurnOff(self, t_handle)
Model.getAvailabilityManagerLowTemperatureTurnOff = _getAvailabilityManagerLowTemperatureTurnOff

def _getAvailabilityManagerLowTemperatureTurnOffs(self) -> AvailabilityManagerLowTemperatureTurnOffVector:
    """Get a vector of all objects of type AvailabilityManagerLowTemperatureTurnOff in the model.

    :return: A vector of AvailabilityManagerLowTemperatureTurnOff.
    """
    return getAvailabilityManagerLowTemperatureTurnOffs(self)
Model.getAvailabilityManagerLowTemperatureTurnOffs = _getAvailabilityManagerLowTemperatureTurnOffs

def _getAvailabilityManagerLowTemperatureTurnOffByName(self, t_name: str) -> OptionalAvailabilityManagerLowTemperatureTurnOff:
    """Try to get an object of type AvailabilityManagerLowTemperatureTurnOff that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AvailabilityManagerLowTemperatureTurnOff.
    """
    return getAvailabilityManagerLowTemperatureTurnOffByName(self, t_name)
Model.getAvailabilityManagerLowTemperatureTurnOffByName = _getAvailabilityManagerLowTemperatureTurnOffByName

def _getAvailabilityManagerLowTemperatureTurnOffsByName(self, t_name: str, t_exactMatch: bool) -> AvailabilityManagerLowTemperatureTurnOffVector:
    """Returns all objects of type AvailabilityManagerLowTemperatureTurnOff named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAvailabilityManagerLowTemperatureTurnOffsByName(self, t_name, t_exactMatch)
Model.getAvailabilityManagerLowTemperatureTurnOffsByName = _getAvailabilityManagerLowTemperatureTurnOffsByName

class AvailabilityManagerScheduled(openstudiomodelhvac.AvailabilityManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerScheduled

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerScheduled_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerScheduled(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduled_iddObjectType()

    def schedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduled_schedule(self)

    def setSchedule(self, schedule):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduled_setSchedule(self, schedule)

# Register AvailabilityManagerScheduled in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerScheduled_swigregister(AvailabilityManagerScheduled)

def toAvailabilityManagerScheduled(idfObject):
    return _openstudiomodelavailabilitymanager.toAvailabilityManagerScheduled(idfObject)

def getAvailabilityManagerScheduled(t_model, t_handle):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerScheduled(t_model, t_handle)

def getAvailabilityManagerScheduleds(t_model):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerScheduleds(t_model)

def getAvailabilityManagerScheduledByName(t_model, t_name):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerScheduledByName(t_model, t_name)

def getAvailabilityManagerScheduledsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerScheduledsByName(t_model, t_name, t_exactMatch)

def _to_AvailabilityManagerScheduled(self) -> OptionalAvailabilityManagerScheduled:
    """Try to cast the ModelObject to a AvailabilityManagerScheduled.

    :return: An Optional AvailabilityManagerScheduled.
    """
    return toAvailabilityManagerScheduled(self)
openstudioutilitiesidf.IdfObject.to_AvailabilityManagerScheduled = _to_AvailabilityManagerScheduled

def _getAvailabilityManagerScheduled(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAvailabilityManagerScheduled:
    """Try to get an object of type AvailabilityManagerScheduled referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AvailabilityManagerScheduled.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAvailabilityManagerScheduled(self, t_handle)
Model.getAvailabilityManagerScheduled = _getAvailabilityManagerScheduled

def _getAvailabilityManagerScheduleds(self) -> AvailabilityManagerScheduledVector:
    """Get a vector of all objects of type AvailabilityManagerScheduled in the model.

    :return: A vector of AvailabilityManagerScheduled.
    """
    return getAvailabilityManagerScheduleds(self)
Model.getAvailabilityManagerScheduleds = _getAvailabilityManagerScheduleds

def _getAvailabilityManagerScheduledByName(self, t_name: str) -> OptionalAvailabilityManagerScheduled:
    """Try to get an object of type AvailabilityManagerScheduled that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AvailabilityManagerScheduled.
    """
    return getAvailabilityManagerScheduledByName(self, t_name)
Model.getAvailabilityManagerScheduledByName = _getAvailabilityManagerScheduledByName

def _getAvailabilityManagerScheduledsByName(self, t_name: str, t_exactMatch: bool) -> AvailabilityManagerScheduledVector:
    """Returns all objects of type AvailabilityManagerScheduled named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAvailabilityManagerScheduledsByName(self, t_name, t_exactMatch)
Model.getAvailabilityManagerScheduledsByName = _getAvailabilityManagerScheduledsByName

class AvailabilityManagerScheduledOn(openstudiomodelhvac.AvailabilityManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerScheduledOn

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOn_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerScheduledOn(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOn_iddObjectType()

    def schedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOn_schedule(self)

    def setSchedule(self, schedule):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOn_setSchedule(self, schedule)

# Register AvailabilityManagerScheduledOn in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOn_swigregister(AvailabilityManagerScheduledOn)

def toAvailabilityManagerScheduledOn(idfObject):
    return _openstudiomodelavailabilitymanager.toAvailabilityManagerScheduledOn(idfObject)

def getAvailabilityManagerScheduledOn(t_model, t_handle):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerScheduledOn(t_model, t_handle)

def getAvailabilityManagerScheduledOns(t_model):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerScheduledOns(t_model)

def getAvailabilityManagerScheduledOnByName(t_model, t_name):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerScheduledOnByName(t_model, t_name)

def getAvailabilityManagerScheduledOnsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerScheduledOnsByName(t_model, t_name, t_exactMatch)

def _to_AvailabilityManagerScheduledOn(self) -> OptionalAvailabilityManagerScheduledOn:
    """Try to cast the ModelObject to a AvailabilityManagerScheduledOn.

    :return: An Optional AvailabilityManagerScheduledOn.
    """
    return toAvailabilityManagerScheduledOn(self)
openstudioutilitiesidf.IdfObject.to_AvailabilityManagerScheduledOn = _to_AvailabilityManagerScheduledOn

def _getAvailabilityManagerScheduledOn(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAvailabilityManagerScheduledOn:
    """Try to get an object of type AvailabilityManagerScheduledOn referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AvailabilityManagerScheduledOn.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAvailabilityManagerScheduledOn(self, t_handle)
Model.getAvailabilityManagerScheduledOn = _getAvailabilityManagerScheduledOn

def _getAvailabilityManagerScheduledOns(self) -> AvailabilityManagerScheduledOnVector:
    """Get a vector of all objects of type AvailabilityManagerScheduledOn in the model.

    :return: A vector of AvailabilityManagerScheduledOn.
    """
    return getAvailabilityManagerScheduledOns(self)
Model.getAvailabilityManagerScheduledOns = _getAvailabilityManagerScheduledOns

def _getAvailabilityManagerScheduledOnByName(self, t_name: str) -> OptionalAvailabilityManagerScheduledOn:
    """Try to get an object of type AvailabilityManagerScheduledOn that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AvailabilityManagerScheduledOn.
    """
    return getAvailabilityManagerScheduledOnByName(self, t_name)
Model.getAvailabilityManagerScheduledOnByName = _getAvailabilityManagerScheduledOnByName

def _getAvailabilityManagerScheduledOnsByName(self, t_name: str, t_exactMatch: bool) -> AvailabilityManagerScheduledOnVector:
    """Returns all objects of type AvailabilityManagerScheduledOn named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAvailabilityManagerScheduledOnsByName(self, t_name, t_exactMatch)
Model.getAvailabilityManagerScheduledOnsByName = _getAvailabilityManagerScheduledOnsByName

class AvailabilityManagerScheduledOff(openstudiomodelhvac.AvailabilityManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelavailabilitymanager.delete_AvailabilityManagerScheduledOff

    def __init__(self, *args):
        _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOff_swiginit(self, _openstudiomodelavailabilitymanager.new_AvailabilityManagerScheduledOff(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOff_iddObjectType()

    def schedule(self):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOff_schedule(self)

    def setSchedule(self, schedule):
        return _openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOff_setSchedule(self, schedule)

# Register AvailabilityManagerScheduledOff in _openstudiomodelavailabilitymanager:
_openstudiomodelavailabilitymanager.AvailabilityManagerScheduledOff_swigregister(AvailabilityManagerScheduledOff)

def toAvailabilityManagerScheduledOff(idfObject):
    return _openstudiomodelavailabilitymanager.toAvailabilityManagerScheduledOff(idfObject)

def getAvailabilityManagerScheduledOff(t_model, t_handle):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerScheduledOff(t_model, t_handle)

def getAvailabilityManagerScheduledOffs(t_model):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerScheduledOffs(t_model)

def getAvailabilityManagerScheduledOffByName(t_model, t_name):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerScheduledOffByName(t_model, t_name)

def getAvailabilityManagerScheduledOffsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelavailabilitymanager.getAvailabilityManagerScheduledOffsByName(t_model, t_name, t_exactMatch)

def _to_AvailabilityManagerScheduledOff(self) -> OptionalAvailabilityManagerScheduledOff:
    """Try to cast the ModelObject to a AvailabilityManagerScheduledOff.

    :return: An Optional AvailabilityManagerScheduledOff.
    """
    return toAvailabilityManagerScheduledOff(self)
openstudioutilitiesidf.IdfObject.to_AvailabilityManagerScheduledOff = _to_AvailabilityManagerScheduledOff

def _getAvailabilityManagerScheduledOff(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAvailabilityManagerScheduledOff:
    """Try to get an object of type AvailabilityManagerScheduledOff referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AvailabilityManagerScheduledOff.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAvailabilityManagerScheduledOff(self, t_handle)
Model.getAvailabilityManagerScheduledOff = _getAvailabilityManagerScheduledOff

def _getAvailabilityManagerScheduledOffs(self) -> AvailabilityManagerScheduledOffVector:
    """Get a vector of all objects of type AvailabilityManagerScheduledOff in the model.

    :return: A vector of AvailabilityManagerScheduledOff.
    """
    return getAvailabilityManagerScheduledOffs(self)
Model.getAvailabilityManagerScheduledOffs = _getAvailabilityManagerScheduledOffs

def _getAvailabilityManagerScheduledOffByName(self, t_name: str) -> OptionalAvailabilityManagerScheduledOff:
    """Try to get an object of type AvailabilityManagerScheduledOff that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AvailabilityManagerScheduledOff.
    """
    return getAvailabilityManagerScheduledOffByName(self, t_name)
Model.getAvailabilityManagerScheduledOffByName = _getAvailabilityManagerScheduledOffByName

def _getAvailabilityManagerScheduledOffsByName(self, t_name: str, t_exactMatch: bool) -> AvailabilityManagerScheduledOffVector:
    """Returns all objects of type AvailabilityManagerScheduledOff named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAvailabilityManagerScheduledOffsByName(self, t_name, t_exactMatch)
Model.getAvailabilityManagerScheduledOffsByName = _getAvailabilityManagerScheduledOffsByName


