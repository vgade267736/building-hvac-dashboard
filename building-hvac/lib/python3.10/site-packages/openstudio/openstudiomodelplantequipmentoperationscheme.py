# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelplantequipmentoperationscheme
else:
    import _openstudiomodelplantequipmentoperationscheme

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_SwigPyIterator

    def value(self):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_copy(self)

    def next(self):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudiomodelplantequipmentoperationscheme.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudioutilitiesxml

# Import common modules
import typing
import warnings

from .import openstudiomodelcore
from .import openstudiomodelsimulation
from .import openstudiomodelresources
from .import openstudiomodelgeometry
from .import openstudiomodelhvac

Model = openstudiomodelcore.Model

class PlantEquipmentOperationCoolingLoadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___bool__(self)

    def __len__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_pop(self)

    def append(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_append(self, x)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_empty(self)

    def size(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_size(self)

    def swap(self, v):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_swap(self, v)

    def begin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_begin(self)

    def end(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_end(self)

    def rbegin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_rbegin(self)

    def rend(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_rend(self)

    def clear(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationCoolingLoadVector(*args))

    def push_back(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_push_back(self, x)

    def front(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_front(self)

    def back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationCoolingLoadVector

# Register PlantEquipmentOperationCoolingLoadVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoadVector_swigregister(PlantEquipmentOperationCoolingLoadVector)
class OptionalPlantEquipmentOperationCoolingLoad(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationCoolingLoad(*args))

    def reset(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_reset(self)

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad___ref__(self)

    def is_initialized(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_is_initialized(self)

    def isNull(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_isNull(self)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_empty(self)

    def get(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_get(self)

    def set(self, t):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationCoolingLoad

# Register OptionalPlantEquipmentOperationCoolingLoad in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationCoolingLoad_swigregister(OptionalPlantEquipmentOperationCoolingLoad)
class PlantEquipmentOperationHeatingLoadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___bool__(self)

    def __len__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_pop(self)

    def append(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_append(self, x)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_empty(self)

    def size(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_size(self)

    def swap(self, v):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_swap(self, v)

    def begin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_begin(self)

    def end(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_end(self)

    def rbegin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_rbegin(self)

    def rend(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_rend(self)

    def clear(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationHeatingLoadVector(*args))

    def push_back(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_push_back(self, x)

    def front(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_front(self)

    def back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationHeatingLoadVector

# Register PlantEquipmentOperationHeatingLoadVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoadVector_swigregister(PlantEquipmentOperationHeatingLoadVector)
class OptionalPlantEquipmentOperationHeatingLoad(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationHeatingLoad(*args))

    def reset(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_reset(self)

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad___ref__(self)

    def is_initialized(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_is_initialized(self)

    def isNull(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_isNull(self)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_empty(self)

    def get(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_get(self)

    def set(self, t):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationHeatingLoad

# Register OptionalPlantEquipmentOperationHeatingLoad in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationHeatingLoad_swigregister(OptionalPlantEquipmentOperationHeatingLoad)
class PlantEquipmentOperationOutdoorDryBulbVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___bool__(self)

    def __len__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_pop(self)

    def append(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_append(self, x)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_empty(self)

    def size(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_size(self)

    def swap(self, v):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_swap(self, v)

    def begin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_begin(self)

    def end(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_end(self)

    def rbegin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_rbegin(self)

    def rend(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_rend(self)

    def clear(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDryBulbVector(*args))

    def push_back(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_push_back(self, x)

    def front(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_front(self)

    def back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDryBulbVector

# Register PlantEquipmentOperationOutdoorDryBulbVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbVector_swigregister(PlantEquipmentOperationOutdoorDryBulbVector)
class OptionalPlantEquipmentOperationOutdoorDryBulb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorDryBulb(*args))

    def reset(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_reset(self)

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb___ref__(self)

    def is_initialized(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_is_initialized(self)

    def isNull(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_isNull(self)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_empty(self)

    def get(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_get(self)

    def set(self, t):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorDryBulb

# Register OptionalPlantEquipmentOperationOutdoorDryBulb in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulb_swigregister(OptionalPlantEquipmentOperationOutdoorDryBulb)
class PlantEquipmentOperationOutdoorWetBulbVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___bool__(self)

    def __len__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_pop(self)

    def append(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_append(self, x)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_empty(self)

    def size(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_size(self)

    def swap(self, v):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_swap(self, v)

    def begin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_begin(self)

    def end(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_end(self)

    def rbegin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_rbegin(self)

    def rend(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_rend(self)

    def clear(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorWetBulbVector(*args))

    def push_back(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_push_back(self, x)

    def front(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_front(self)

    def back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorWetBulbVector

# Register PlantEquipmentOperationOutdoorWetBulbVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbVector_swigregister(PlantEquipmentOperationOutdoorWetBulbVector)
class OptionalPlantEquipmentOperationOutdoorWetBulb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorWetBulb(*args))

    def reset(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_reset(self)

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb___ref__(self)

    def is_initialized(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_is_initialized(self)

    def isNull(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_isNull(self)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_empty(self)

    def get(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_get(self)

    def set(self, t):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorWetBulb

# Register OptionalPlantEquipmentOperationOutdoorWetBulb in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulb_swigregister(OptionalPlantEquipmentOperationOutdoorWetBulb)
class PlantEquipmentOperationOutdoorDewpointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___bool__(self)

    def __len__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_pop(self)

    def append(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_append(self, x)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_empty(self)

    def size(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_size(self)

    def swap(self, v):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_swap(self, v)

    def begin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_begin(self)

    def end(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_end(self)

    def rbegin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_rbegin(self)

    def rend(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_rend(self)

    def clear(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDewpointVector(*args))

    def push_back(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_push_back(self, x)

    def front(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_front(self)

    def back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDewpointVector

# Register PlantEquipmentOperationOutdoorDewpointVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointVector_swigregister(PlantEquipmentOperationOutdoorDewpointVector)
class OptionalPlantEquipmentOperationOutdoorDewpoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorDewpoint(*args))

    def reset(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_reset(self)

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint___ref__(self)

    def is_initialized(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_is_initialized(self)

    def isNull(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_isNull(self)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_empty(self)

    def get(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_get(self)

    def set(self, t):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorDewpoint

# Register OptionalPlantEquipmentOperationOutdoorDewpoint in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpoint_swigregister(OptionalPlantEquipmentOperationOutdoorDewpoint)
class PlantEquipmentOperationOutdoorRelativeHumidityVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___bool__(self)

    def __len__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_pop(self)

    def append(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_append(self, x)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_empty(self)

    def size(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_size(self)

    def swap(self, v):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_swap(self, v)

    def begin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_begin(self)

    def end(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_end(self)

    def rbegin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_rbegin(self)

    def rend(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_rend(self)

    def clear(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorRelativeHumidityVector(*args))

    def push_back(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_push_back(self, x)

    def front(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_front(self)

    def back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorRelativeHumidityVector

# Register PlantEquipmentOperationOutdoorRelativeHumidityVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidityVector_swigregister(PlantEquipmentOperationOutdoorRelativeHumidityVector)
class OptionalPlantEquipmentOperationOutdoorRelativeHumidity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorRelativeHumidity(*args))

    def reset(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_reset(self)

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity___ref__(self)

    def is_initialized(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_is_initialized(self)

    def isNull(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_isNull(self)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_empty(self)

    def get(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_get(self)

    def set(self, t):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorRelativeHumidity

# Register OptionalPlantEquipmentOperationOutdoorRelativeHumidity in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorRelativeHumidity_swigregister(OptionalPlantEquipmentOperationOutdoorRelativeHumidity)
class PlantEquipmentOperationOutdoorDryBulbDifferenceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_pop(self)

    def append(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_append(self, x)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_empty(self)

    def size(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_size(self)

    def swap(self, v):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_begin(self)

    def end(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_end(self)

    def rbegin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_rend(self)

    def clear(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDryBulbDifferenceVector(*args))

    def push_back(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_front(self)

    def back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDryBulbDifferenceVector

# Register PlantEquipmentOperationOutdoorDryBulbDifferenceVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifferenceVector_swigregister(PlantEquipmentOperationOutdoorDryBulbDifferenceVector)
class OptionalPlantEquipmentOperationOutdoorDryBulbDifference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorDryBulbDifference(*args))

    def reset(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_reset(self)

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference___ref__(self)

    def is_initialized(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_is_initialized(self)

    def isNull(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_isNull(self)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_empty(self)

    def get(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_get(self)

    def set(self, t):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorDryBulbDifference

# Register OptionalPlantEquipmentOperationOutdoorDryBulbDifference in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDryBulbDifference_swigregister(OptionalPlantEquipmentOperationOutdoorDryBulbDifference)
class PlantEquipmentOperationOutdoorWetBulbDifferenceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_pop(self)

    def append(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_append(self, x)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_empty(self)

    def size(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_size(self)

    def swap(self, v):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_begin(self)

    def end(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_end(self)

    def rbegin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_rend(self)

    def clear(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorWetBulbDifferenceVector(*args))

    def push_back(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_front(self)

    def back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorWetBulbDifferenceVector

# Register PlantEquipmentOperationOutdoorWetBulbDifferenceVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifferenceVector_swigregister(PlantEquipmentOperationOutdoorWetBulbDifferenceVector)
class OptionalPlantEquipmentOperationOutdoorWetBulbDifference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorWetBulbDifference(*args))

    def reset(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_reset(self)

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference___ref__(self)

    def is_initialized(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_is_initialized(self)

    def isNull(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_isNull(self)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_empty(self)

    def get(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_get(self)

    def set(self, t):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorWetBulbDifference

# Register OptionalPlantEquipmentOperationOutdoorWetBulbDifference in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorWetBulbDifference_swigregister(OptionalPlantEquipmentOperationOutdoorWetBulbDifference)
class PlantEquipmentOperationOutdoorDewpointDifferenceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___bool__(self)

    def __len__(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_pop(self)

    def append(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_append(self, x)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_empty(self)

    def size(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_size(self)

    def swap(self, v):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_swap(self, v)

    def begin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_begin(self)

    def end(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_end(self)

    def rbegin(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_rbegin(self)

    def rend(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_rend(self)

    def clear(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDewpointDifferenceVector(*args))

    def push_back(self, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_push_back(self, x)

    def front(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_front(self)

    def back(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_capacity(self)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDewpointDifferenceVector

# Register PlantEquipmentOperationOutdoorDewpointDifferenceVector in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifferenceVector_swigregister(PlantEquipmentOperationOutdoorDewpointDifferenceVector)
class OptionalPlantEquipmentOperationOutdoorDewpointDifference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_OptionalPlantEquipmentOperationOutdoorDewpointDifference(*args))

    def reset(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_reset(self)

    def __nonzero__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference___ref__(self)

    def is_initialized(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_is_initialized(self)

    def isNull(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_isNull(self)

    def empty(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_empty(self)

    def get(self):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_get(self)

    def set(self, t):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_OptionalPlantEquipmentOperationOutdoorDewpointDifference

# Register OptionalPlantEquipmentOperationOutdoorDewpointDifference in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.OptionalPlantEquipmentOperationOutdoorDewpointDifference_swigregister(OptionalPlantEquipmentOperationOutdoorDewpointDifference)
class PlantEquipmentOperationCoolingLoad(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationCoolingLoad

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoad_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationCoolingLoad(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoad_iddObjectType()

# Register PlantEquipmentOperationCoolingLoad in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationCoolingLoad_swigregister(PlantEquipmentOperationCoolingLoad)

def toPlantEquipmentOperationCoolingLoad(idfObject):
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationCoolingLoad(idfObject)

def getPlantEquipmentOperationCoolingLoad(t_model, t_handle):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoad(t_model, t_handle)

def getPlantEquipmentOperationCoolingLoads(t_model):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoads(t_model)

def getPlantEquipmentOperationCoolingLoadByName(t_model, t_name):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoadByName(t_model, t_name)

def getPlantEquipmentOperationCoolingLoadsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationCoolingLoadsByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationCoolingLoad(self) -> OptionalPlantEquipmentOperationCoolingLoad:
    """Try to cast the ModelObject to a PlantEquipmentOperationCoolingLoad.

    :return: An Optional PlantEquipmentOperationCoolingLoad.
    """
    return toPlantEquipmentOperationCoolingLoad(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationCoolingLoad = _to_PlantEquipmentOperationCoolingLoad

def _getPlantEquipmentOperationCoolingLoad(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPlantEquipmentOperationCoolingLoad:
    """Try to get an object of type PlantEquipmentOperationCoolingLoad referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PlantEquipmentOperationCoolingLoad.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPlantEquipmentOperationCoolingLoad(self, t_handle)
Model.getPlantEquipmentOperationCoolingLoad = _getPlantEquipmentOperationCoolingLoad

def _getPlantEquipmentOperationCoolingLoads(self) -> PlantEquipmentOperationCoolingLoadVector:
    """Get a vector of all objects of type PlantEquipmentOperationCoolingLoad in the model.

    :return: A vector of PlantEquipmentOperationCoolingLoad.
    """
    return getPlantEquipmentOperationCoolingLoads(self)
Model.getPlantEquipmentOperationCoolingLoads = _getPlantEquipmentOperationCoolingLoads

def _getPlantEquipmentOperationCoolingLoadByName(self, t_name: str) -> OptionalPlantEquipmentOperationCoolingLoad:
    """Try to get an object of type PlantEquipmentOperationCoolingLoad that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PlantEquipmentOperationCoolingLoad.
    """
    return getPlantEquipmentOperationCoolingLoadByName(self, t_name)
Model.getPlantEquipmentOperationCoolingLoadByName = _getPlantEquipmentOperationCoolingLoadByName

def _getPlantEquipmentOperationCoolingLoadsByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationCoolingLoadVector:
    """Returns all objects of type PlantEquipmentOperationCoolingLoad named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPlantEquipmentOperationCoolingLoadsByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationCoolingLoadsByName = _getPlantEquipmentOperationCoolingLoadsByName

class PlantEquipmentOperationHeatingLoad(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationHeatingLoad

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoad_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationHeatingLoad(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoad_iddObjectType()

# Register PlantEquipmentOperationHeatingLoad in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationHeatingLoad_swigregister(PlantEquipmentOperationHeatingLoad)

def toPlantEquipmentOperationHeatingLoad(idfObject):
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationHeatingLoad(idfObject)

def getPlantEquipmentOperationHeatingLoad(t_model, t_handle):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoad(t_model, t_handle)

def getPlantEquipmentOperationHeatingLoads(t_model):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoads(t_model)

def getPlantEquipmentOperationHeatingLoadByName(t_model, t_name):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoadByName(t_model, t_name)

def getPlantEquipmentOperationHeatingLoadsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationHeatingLoadsByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationHeatingLoad(self) -> OptionalPlantEquipmentOperationHeatingLoad:
    """Try to cast the ModelObject to a PlantEquipmentOperationHeatingLoad.

    :return: An Optional PlantEquipmentOperationHeatingLoad.
    """
    return toPlantEquipmentOperationHeatingLoad(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationHeatingLoad = _to_PlantEquipmentOperationHeatingLoad

def _getPlantEquipmentOperationHeatingLoad(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPlantEquipmentOperationHeatingLoad:
    """Try to get an object of type PlantEquipmentOperationHeatingLoad referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PlantEquipmentOperationHeatingLoad.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPlantEquipmentOperationHeatingLoad(self, t_handle)
Model.getPlantEquipmentOperationHeatingLoad = _getPlantEquipmentOperationHeatingLoad

def _getPlantEquipmentOperationHeatingLoads(self) -> PlantEquipmentOperationHeatingLoadVector:
    """Get a vector of all objects of type PlantEquipmentOperationHeatingLoad in the model.

    :return: A vector of PlantEquipmentOperationHeatingLoad.
    """
    return getPlantEquipmentOperationHeatingLoads(self)
Model.getPlantEquipmentOperationHeatingLoads = _getPlantEquipmentOperationHeatingLoads

def _getPlantEquipmentOperationHeatingLoadByName(self, t_name: str) -> OptionalPlantEquipmentOperationHeatingLoad:
    """Try to get an object of type PlantEquipmentOperationHeatingLoad that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PlantEquipmentOperationHeatingLoad.
    """
    return getPlantEquipmentOperationHeatingLoadByName(self, t_name)
Model.getPlantEquipmentOperationHeatingLoadByName = _getPlantEquipmentOperationHeatingLoadByName

def _getPlantEquipmentOperationHeatingLoadsByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationHeatingLoadVector:
    """Returns all objects of type PlantEquipmentOperationHeatingLoad named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPlantEquipmentOperationHeatingLoadsByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationHeatingLoadsByName = _getPlantEquipmentOperationHeatingLoadsByName

class PlantEquipmentOperationOutdoorDryBulb(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDryBulb

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulb_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDryBulb(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulb_iddObjectType()

# Register PlantEquipmentOperationOutdoorDryBulb in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulb_swigregister(PlantEquipmentOperationOutdoorDryBulb)

def toPlantEquipmentOperationOutdoorDryBulb(idfObject):
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDryBulb(idfObject)

def getPlantEquipmentOperationOutdoorDryBulb(t_model, t_handle):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulb(t_model, t_handle)

def getPlantEquipmentOperationOutdoorDryBulbs(t_model):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbs(t_model)

def getPlantEquipmentOperationOutdoorDryBulbByName(t_model, t_name):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbByName(t_model, t_name)

def getPlantEquipmentOperationOutdoorDryBulbsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbsByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationOutdoorDryBulb(self) -> OptionalPlantEquipmentOperationOutdoorDryBulb:
    """Try to cast the ModelObject to a PlantEquipmentOperationOutdoorDryBulb.

    :return: An Optional PlantEquipmentOperationOutdoorDryBulb.
    """
    return toPlantEquipmentOperationOutdoorDryBulb(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationOutdoorDryBulb = _to_PlantEquipmentOperationOutdoorDryBulb

def _getPlantEquipmentOperationOutdoorDryBulb(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPlantEquipmentOperationOutdoorDryBulb:
    """Try to get an object of type PlantEquipmentOperationOutdoorDryBulb referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PlantEquipmentOperationOutdoorDryBulb.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPlantEquipmentOperationOutdoorDryBulb(self, t_handle)
Model.getPlantEquipmentOperationOutdoorDryBulb = _getPlantEquipmentOperationOutdoorDryBulb

def _getPlantEquipmentOperationOutdoorDryBulbs(self) -> PlantEquipmentOperationOutdoorDryBulbVector:
    """Get a vector of all objects of type PlantEquipmentOperationOutdoorDryBulb in the model.

    :return: A vector of PlantEquipmentOperationOutdoorDryBulb.
    """
    return getPlantEquipmentOperationOutdoorDryBulbs(self)
Model.getPlantEquipmentOperationOutdoorDryBulbs = _getPlantEquipmentOperationOutdoorDryBulbs

def _getPlantEquipmentOperationOutdoorDryBulbByName(self, t_name: str) -> OptionalPlantEquipmentOperationOutdoorDryBulb:
    """Try to get an object of type PlantEquipmentOperationOutdoorDryBulb that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PlantEquipmentOperationOutdoorDryBulb.
    """
    return getPlantEquipmentOperationOutdoorDryBulbByName(self, t_name)
Model.getPlantEquipmentOperationOutdoorDryBulbByName = _getPlantEquipmentOperationOutdoorDryBulbByName

def _getPlantEquipmentOperationOutdoorDryBulbsByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationOutdoorDryBulbVector:
    """Returns all objects of type PlantEquipmentOperationOutdoorDryBulb named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPlantEquipmentOperationOutdoorDryBulbsByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationOutdoorDryBulbsByName = _getPlantEquipmentOperationOutdoorDryBulbsByName

class PlantEquipmentOperationOutdoorWetBulb(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorWetBulb

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulb_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorWetBulb(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulb_iddObjectType()

# Register PlantEquipmentOperationOutdoorWetBulb in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulb_swigregister(PlantEquipmentOperationOutdoorWetBulb)

def toPlantEquipmentOperationOutdoorWetBulb(idfObject):
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorWetBulb(idfObject)

def getPlantEquipmentOperationOutdoorWetBulb(t_model, t_handle):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulb(t_model, t_handle)

def getPlantEquipmentOperationOutdoorWetBulbs(t_model):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbs(t_model)

def getPlantEquipmentOperationOutdoorWetBulbByName(t_model, t_name):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbByName(t_model, t_name)

def getPlantEquipmentOperationOutdoorWetBulbsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbsByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationOutdoorWetBulb(self) -> OptionalPlantEquipmentOperationOutdoorWetBulb:
    """Try to cast the ModelObject to a PlantEquipmentOperationOutdoorWetBulb.

    :return: An Optional PlantEquipmentOperationOutdoorWetBulb.
    """
    return toPlantEquipmentOperationOutdoorWetBulb(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationOutdoorWetBulb = _to_PlantEquipmentOperationOutdoorWetBulb

def _getPlantEquipmentOperationOutdoorWetBulb(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPlantEquipmentOperationOutdoorWetBulb:
    """Try to get an object of type PlantEquipmentOperationOutdoorWetBulb referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PlantEquipmentOperationOutdoorWetBulb.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPlantEquipmentOperationOutdoorWetBulb(self, t_handle)
Model.getPlantEquipmentOperationOutdoorWetBulb = _getPlantEquipmentOperationOutdoorWetBulb

def _getPlantEquipmentOperationOutdoorWetBulbs(self) -> PlantEquipmentOperationOutdoorWetBulbVector:
    """Get a vector of all objects of type PlantEquipmentOperationOutdoorWetBulb in the model.

    :return: A vector of PlantEquipmentOperationOutdoorWetBulb.
    """
    return getPlantEquipmentOperationOutdoorWetBulbs(self)
Model.getPlantEquipmentOperationOutdoorWetBulbs = _getPlantEquipmentOperationOutdoorWetBulbs

def _getPlantEquipmentOperationOutdoorWetBulbByName(self, t_name: str) -> OptionalPlantEquipmentOperationOutdoorWetBulb:
    """Try to get an object of type PlantEquipmentOperationOutdoorWetBulb that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PlantEquipmentOperationOutdoorWetBulb.
    """
    return getPlantEquipmentOperationOutdoorWetBulbByName(self, t_name)
Model.getPlantEquipmentOperationOutdoorWetBulbByName = _getPlantEquipmentOperationOutdoorWetBulbByName

def _getPlantEquipmentOperationOutdoorWetBulbsByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationOutdoorWetBulbVector:
    """Returns all objects of type PlantEquipmentOperationOutdoorWetBulb named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPlantEquipmentOperationOutdoorWetBulbsByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationOutdoorWetBulbsByName = _getPlantEquipmentOperationOutdoorWetBulbsByName

class PlantEquipmentOperationOutdoorDewpoint(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDewpoint

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpoint_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDewpoint(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpoint_iddObjectType()

# Register PlantEquipmentOperationOutdoorDewpoint in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpoint_swigregister(PlantEquipmentOperationOutdoorDewpoint)

def toPlantEquipmentOperationOutdoorDewpoint(idfObject):
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDewpoint(idfObject)

def getPlantEquipmentOperationOutdoorDewpoint(t_model, t_handle):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpoint(t_model, t_handle)

def getPlantEquipmentOperationOutdoorDewpoints(t_model):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpoints(t_model)

def getPlantEquipmentOperationOutdoorDewpointByName(t_model, t_name):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointByName(t_model, t_name)

def getPlantEquipmentOperationOutdoorDewpointsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointsByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationOutdoorDewpoint(self) -> OptionalPlantEquipmentOperationOutdoorDewpoint:
    """Try to cast the ModelObject to a PlantEquipmentOperationOutdoorDewpoint.

    :return: An Optional PlantEquipmentOperationOutdoorDewpoint.
    """
    return toPlantEquipmentOperationOutdoorDewpoint(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationOutdoorDewpoint = _to_PlantEquipmentOperationOutdoorDewpoint

def _getPlantEquipmentOperationOutdoorDewpoint(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPlantEquipmentOperationOutdoorDewpoint:
    """Try to get an object of type PlantEquipmentOperationOutdoorDewpoint referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PlantEquipmentOperationOutdoorDewpoint.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPlantEquipmentOperationOutdoorDewpoint(self, t_handle)
Model.getPlantEquipmentOperationOutdoorDewpoint = _getPlantEquipmentOperationOutdoorDewpoint

def _getPlantEquipmentOperationOutdoorDewpoints(self) -> PlantEquipmentOperationOutdoorDewpointVector:
    """Get a vector of all objects of type PlantEquipmentOperationOutdoorDewpoint in the model.

    :return: A vector of PlantEquipmentOperationOutdoorDewpoint.
    """
    return getPlantEquipmentOperationOutdoorDewpoints(self)
Model.getPlantEquipmentOperationOutdoorDewpoints = _getPlantEquipmentOperationOutdoorDewpoints

def _getPlantEquipmentOperationOutdoorDewpointByName(self, t_name: str) -> OptionalPlantEquipmentOperationOutdoorDewpoint:
    """Try to get an object of type PlantEquipmentOperationOutdoorDewpoint that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PlantEquipmentOperationOutdoorDewpoint.
    """
    return getPlantEquipmentOperationOutdoorDewpointByName(self, t_name)
Model.getPlantEquipmentOperationOutdoorDewpointByName = _getPlantEquipmentOperationOutdoorDewpointByName

def _getPlantEquipmentOperationOutdoorDewpointsByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationOutdoorDewpointVector:
    """Returns all objects of type PlantEquipmentOperationOutdoorDewpoint named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPlantEquipmentOperationOutdoorDewpointsByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationOutdoorDewpointsByName = _getPlantEquipmentOperationOutdoorDewpointsByName

class PlantEquipmentOperationOutdoorRelativeHumidity(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorRelativeHumidity

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidity_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorRelativeHumidity(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidity_iddObjectType()

# Register PlantEquipmentOperationOutdoorRelativeHumidity in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorRelativeHumidity_swigregister(PlantEquipmentOperationOutdoorRelativeHumidity)

def toPlantEquipmentOperationOutdoorRelativeHumidity(idfObject):
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorRelativeHumidity(idfObject)

def getPlantEquipmentOperationOutdoorRelativeHumidity(t_model, t_handle):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumidity(t_model, t_handle)

def getPlantEquipmentOperationOutdoorRelativeHumiditys(t_model):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumiditys(t_model)

def getPlantEquipmentOperationOutdoorRelativeHumidityByName(t_model, t_name):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumidityByName(t_model, t_name)

def getPlantEquipmentOperationOutdoorRelativeHumiditysByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorRelativeHumiditysByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationOutdoorRelativeHumidity(self) -> OptionalPlantEquipmentOperationOutdoorRelativeHumidity:
    """Try to cast the ModelObject to a PlantEquipmentOperationOutdoorRelativeHumidity.

    :return: An Optional PlantEquipmentOperationOutdoorRelativeHumidity.
    """
    return toPlantEquipmentOperationOutdoorRelativeHumidity(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationOutdoorRelativeHumidity = _to_PlantEquipmentOperationOutdoorRelativeHumidity

def _getPlantEquipmentOperationOutdoorRelativeHumidity(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPlantEquipmentOperationOutdoorRelativeHumidity:
    """Try to get an object of type PlantEquipmentOperationOutdoorRelativeHumidity referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PlantEquipmentOperationOutdoorRelativeHumidity.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPlantEquipmentOperationOutdoorRelativeHumidity(self, t_handle)
Model.getPlantEquipmentOperationOutdoorRelativeHumidity = _getPlantEquipmentOperationOutdoorRelativeHumidity

def _getPlantEquipmentOperationOutdoorRelativeHumiditys(self) -> PlantEquipmentOperationOutdoorRelativeHumidityVector:
    """Get a vector of all objects of type PlantEquipmentOperationOutdoorRelativeHumidity in the model.

    :return: A vector of PlantEquipmentOperationOutdoorRelativeHumidity.
    """
    return getPlantEquipmentOperationOutdoorRelativeHumiditys(self)
Model.getPlantEquipmentOperationOutdoorRelativeHumiditys = _getPlantEquipmentOperationOutdoorRelativeHumiditys

def _getPlantEquipmentOperationOutdoorRelativeHumidityByName(self, t_name: str) -> OptionalPlantEquipmentOperationOutdoorRelativeHumidity:
    """Try to get an object of type PlantEquipmentOperationOutdoorRelativeHumidity that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PlantEquipmentOperationOutdoorRelativeHumidity.
    """
    return getPlantEquipmentOperationOutdoorRelativeHumidityByName(self, t_name)
Model.getPlantEquipmentOperationOutdoorRelativeHumidityByName = _getPlantEquipmentOperationOutdoorRelativeHumidityByName

def _getPlantEquipmentOperationOutdoorRelativeHumiditysByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationOutdoorRelativeHumidityVector:
    """Returns all objects of type PlantEquipmentOperationOutdoorRelativeHumidity named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPlantEquipmentOperationOutdoorRelativeHumiditysByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationOutdoorRelativeHumiditysByName = _getPlantEquipmentOperationOutdoorRelativeHumiditysByName

class PlantEquipmentOperationOutdoorDryBulbDifference(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDryBulbDifference

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDryBulbDifference(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_iddObjectType()

    def referenceTemperatureNode(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_referenceTemperatureNode(self)

    def setReferenceTemperatureNode(self, node):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_setReferenceTemperatureNode(self, node)

    def resetReferenceTemperatureNode(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_resetReferenceTemperatureNode(self)

# Register PlantEquipmentOperationOutdoorDryBulbDifference in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDryBulbDifference_swigregister(PlantEquipmentOperationOutdoorDryBulbDifference)

def toPlantEquipmentOperationOutdoorDryBulbDifference(idfObject):
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDryBulbDifference(idfObject)

def getPlantEquipmentOperationOutdoorDryBulbDifference(t_model, t_handle):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifference(t_model, t_handle)

def getPlantEquipmentOperationOutdoorDryBulbDifferences(t_model):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifferences(t_model)

def getPlantEquipmentOperationOutdoorDryBulbDifferenceByName(t_model, t_name):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifferenceByName(t_model, t_name)

def getPlantEquipmentOperationOutdoorDryBulbDifferencesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDryBulbDifferencesByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationOutdoorDryBulbDifference(self) -> OptionalPlantEquipmentOperationOutdoorDryBulbDifference:
    """Try to cast the ModelObject to a PlantEquipmentOperationOutdoorDryBulbDifference.

    :return: An Optional PlantEquipmentOperationOutdoorDryBulbDifference.
    """
    return toPlantEquipmentOperationOutdoorDryBulbDifference(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationOutdoorDryBulbDifference = _to_PlantEquipmentOperationOutdoorDryBulbDifference

def _getPlantEquipmentOperationOutdoorDryBulbDifference(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPlantEquipmentOperationOutdoorDryBulbDifference:
    """Try to get an object of type PlantEquipmentOperationOutdoorDryBulbDifference referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PlantEquipmentOperationOutdoorDryBulbDifference.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPlantEquipmentOperationOutdoorDryBulbDifference(self, t_handle)
Model.getPlantEquipmentOperationOutdoorDryBulbDifference = _getPlantEquipmentOperationOutdoorDryBulbDifference

def _getPlantEquipmentOperationOutdoorDryBulbDifferences(self) -> PlantEquipmentOperationOutdoorDryBulbDifferenceVector:
    """Get a vector of all objects of type PlantEquipmentOperationOutdoorDryBulbDifference in the model.

    :return: A vector of PlantEquipmentOperationOutdoorDryBulbDifference.
    """
    return getPlantEquipmentOperationOutdoorDryBulbDifferences(self)
Model.getPlantEquipmentOperationOutdoorDryBulbDifferences = _getPlantEquipmentOperationOutdoorDryBulbDifferences

def _getPlantEquipmentOperationOutdoorDryBulbDifferenceByName(self, t_name: str) -> OptionalPlantEquipmentOperationOutdoorDryBulbDifference:
    """Try to get an object of type PlantEquipmentOperationOutdoorDryBulbDifference that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PlantEquipmentOperationOutdoorDryBulbDifference.
    """
    return getPlantEquipmentOperationOutdoorDryBulbDifferenceByName(self, t_name)
Model.getPlantEquipmentOperationOutdoorDryBulbDifferenceByName = _getPlantEquipmentOperationOutdoorDryBulbDifferenceByName

def _getPlantEquipmentOperationOutdoorDryBulbDifferencesByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationOutdoorDryBulbDifferenceVector:
    """Returns all objects of type PlantEquipmentOperationOutdoorDryBulbDifference named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPlantEquipmentOperationOutdoorDryBulbDifferencesByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationOutdoorDryBulbDifferencesByName = _getPlantEquipmentOperationOutdoorDryBulbDifferencesByName

class PlantEquipmentOperationOutdoorWetBulbDifference(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorWetBulbDifference

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorWetBulbDifference(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_iddObjectType()

    def referenceTemperatureNode(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_referenceTemperatureNode(self)

    def setReferenceTemperatureNode(self, node):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_setReferenceTemperatureNode(self, node)

    def resetReferenceTemperatureNode(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_resetReferenceTemperatureNode(self)

# Register PlantEquipmentOperationOutdoorWetBulbDifference in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorWetBulbDifference_swigregister(PlantEquipmentOperationOutdoorWetBulbDifference)

def toPlantEquipmentOperationOutdoorWetBulbDifference(idfObject):
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorWetBulbDifference(idfObject)

def getPlantEquipmentOperationOutdoorWetBulbDifference(t_model, t_handle):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifference(t_model, t_handle)

def getPlantEquipmentOperationOutdoorWetBulbDifferences(t_model):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifferences(t_model)

def getPlantEquipmentOperationOutdoorWetBulbDifferenceByName(t_model, t_name):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifferenceByName(t_model, t_name)

def getPlantEquipmentOperationOutdoorWetBulbDifferencesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorWetBulbDifferencesByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationOutdoorWetBulbDifference(self) -> OptionalPlantEquipmentOperationOutdoorWetBulbDifference:
    """Try to cast the ModelObject to a PlantEquipmentOperationOutdoorWetBulbDifference.

    :return: An Optional PlantEquipmentOperationOutdoorWetBulbDifference.
    """
    return toPlantEquipmentOperationOutdoorWetBulbDifference(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationOutdoorWetBulbDifference = _to_PlantEquipmentOperationOutdoorWetBulbDifference

def _getPlantEquipmentOperationOutdoorWetBulbDifference(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPlantEquipmentOperationOutdoorWetBulbDifference:
    """Try to get an object of type PlantEquipmentOperationOutdoorWetBulbDifference referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PlantEquipmentOperationOutdoorWetBulbDifference.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPlantEquipmentOperationOutdoorWetBulbDifference(self, t_handle)
Model.getPlantEquipmentOperationOutdoorWetBulbDifference = _getPlantEquipmentOperationOutdoorWetBulbDifference

def _getPlantEquipmentOperationOutdoorWetBulbDifferences(self) -> PlantEquipmentOperationOutdoorWetBulbDifferenceVector:
    """Get a vector of all objects of type PlantEquipmentOperationOutdoorWetBulbDifference in the model.

    :return: A vector of PlantEquipmentOperationOutdoorWetBulbDifference.
    """
    return getPlantEquipmentOperationOutdoorWetBulbDifferences(self)
Model.getPlantEquipmentOperationOutdoorWetBulbDifferences = _getPlantEquipmentOperationOutdoorWetBulbDifferences

def _getPlantEquipmentOperationOutdoorWetBulbDifferenceByName(self, t_name: str) -> OptionalPlantEquipmentOperationOutdoorWetBulbDifference:
    """Try to get an object of type PlantEquipmentOperationOutdoorWetBulbDifference that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PlantEquipmentOperationOutdoorWetBulbDifference.
    """
    return getPlantEquipmentOperationOutdoorWetBulbDifferenceByName(self, t_name)
Model.getPlantEquipmentOperationOutdoorWetBulbDifferenceByName = _getPlantEquipmentOperationOutdoorWetBulbDifferenceByName

def _getPlantEquipmentOperationOutdoorWetBulbDifferencesByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationOutdoorWetBulbDifferenceVector:
    """Returns all objects of type PlantEquipmentOperationOutdoorWetBulbDifference named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPlantEquipmentOperationOutdoorWetBulbDifferencesByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationOutdoorWetBulbDifferencesByName = _getPlantEquipmentOperationOutdoorWetBulbDifferencesByName

class PlantEquipmentOperationOutdoorDewpointDifference(openstudiomodelhvac.PlantEquipmentOperationRangeBasedScheme):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelplantequipmentoperationscheme.delete_PlantEquipmentOperationOutdoorDewpointDifference

    def __init__(self, *args):
        _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_swiginit(self, _openstudiomodelplantequipmentoperationscheme.new_PlantEquipmentOperationOutdoorDewpointDifference(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_iddObjectType()

    def referenceTemperatureNode(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_referenceTemperatureNode(self)

    def setReferenceTemperatureNode(self, node):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_setReferenceTemperatureNode(self, node)

    def resetReferenceTemperatureNode(self):
        return _openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_resetReferenceTemperatureNode(self)

# Register PlantEquipmentOperationOutdoorDewpointDifference in _openstudiomodelplantequipmentoperationscheme:
_openstudiomodelplantequipmentoperationscheme.PlantEquipmentOperationOutdoorDewpointDifference_swigregister(PlantEquipmentOperationOutdoorDewpointDifference)

def toPlantEquipmentOperationOutdoorDewpointDifference(idfObject):
    return _openstudiomodelplantequipmentoperationscheme.toPlantEquipmentOperationOutdoorDewpointDifference(idfObject)

def getPlantEquipmentOperationOutdoorDewpointDifference(t_model, t_handle):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifference(t_model, t_handle)

def getPlantEquipmentOperationOutdoorDewpointDifferences(t_model):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifferences(t_model)

def getPlantEquipmentOperationOutdoorDewpointDifferenceByName(t_model, t_name):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifferenceByName(t_model, t_name)

def getPlantEquipmentOperationOutdoorDewpointDifferencesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelplantequipmentoperationscheme.getPlantEquipmentOperationOutdoorDewpointDifferencesByName(t_model, t_name, t_exactMatch)

def _to_PlantEquipmentOperationOutdoorDewpointDifference(self) -> OptionalPlantEquipmentOperationOutdoorDewpointDifference:
    """Try to cast the ModelObject to a PlantEquipmentOperationOutdoorDewpointDifference.

    :return: An Optional PlantEquipmentOperationOutdoorDewpointDifference.
    """
    return toPlantEquipmentOperationOutdoorDewpointDifference(self)
openstudioutilitiesidf.IdfObject.to_PlantEquipmentOperationOutdoorDewpointDifference = _to_PlantEquipmentOperationOutdoorDewpointDifference

def _getPlantEquipmentOperationOutdoorDewpointDifference(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalPlantEquipmentOperationOutdoorDewpointDifference:
    """Try to get an object of type PlantEquipmentOperationOutdoorDewpointDifference referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional PlantEquipmentOperationOutdoorDewpointDifference.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getPlantEquipmentOperationOutdoorDewpointDifference(self, t_handle)
Model.getPlantEquipmentOperationOutdoorDewpointDifference = _getPlantEquipmentOperationOutdoorDewpointDifference

def _getPlantEquipmentOperationOutdoorDewpointDifferences(self) -> PlantEquipmentOperationOutdoorDewpointDifferenceVector:
    """Get a vector of all objects of type PlantEquipmentOperationOutdoorDewpointDifference in the model.

    :return: A vector of PlantEquipmentOperationOutdoorDewpointDifference.
    """
    return getPlantEquipmentOperationOutdoorDewpointDifferences(self)
Model.getPlantEquipmentOperationOutdoorDewpointDifferences = _getPlantEquipmentOperationOutdoorDewpointDifferences

def _getPlantEquipmentOperationOutdoorDewpointDifferenceByName(self, t_name: str) -> OptionalPlantEquipmentOperationOutdoorDewpointDifference:
    """Try to get an object of type PlantEquipmentOperationOutdoorDewpointDifference that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional PlantEquipmentOperationOutdoorDewpointDifference.
    """
    return getPlantEquipmentOperationOutdoorDewpointDifferenceByName(self, t_name)
Model.getPlantEquipmentOperationOutdoorDewpointDifferenceByName = _getPlantEquipmentOperationOutdoorDewpointDifferenceByName

def _getPlantEquipmentOperationOutdoorDewpointDifferencesByName(self, t_name: str, t_exactMatch: bool) -> PlantEquipmentOperationOutdoorDewpointDifferenceVector:
    """Returns all objects of type PlantEquipmentOperationOutdoorDewpointDifference named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getPlantEquipmentOperationOutdoorDewpointDifferencesByName(self, t_name, t_exactMatch)
Model.getPlantEquipmentOperationOutdoorDewpointDifferencesByName = _getPlantEquipmentOperationOutdoorDewpointDifferencesByName


