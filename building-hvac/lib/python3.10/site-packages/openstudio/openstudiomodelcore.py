# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _openstudiomodelcore
else:
    import _openstudiomodelcore

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_SwigPyIterator

    def value(self):
        return _openstudiomodelcore.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _openstudiomodelcore.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _openstudiomodelcore.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _openstudiomodelcore.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _openstudiomodelcore.SwigPyIterator_equal(self, x)

    def copy(self):
        return _openstudiomodelcore.SwigPyIterator_copy(self)

    def next(self):
        return _openstudiomodelcore.SwigPyIterator_next(self)

    def __next__(self):
        return _openstudiomodelcore.SwigPyIterator___next__(self)

    def previous(self):
        return _openstudiomodelcore.SwigPyIterator_previous(self)

    def advance(self, n):
        return _openstudiomodelcore.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _openstudiomodelcore.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _openstudiomodelcore.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _openstudiomodelcore.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _openstudiomodelcore.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _openstudiomodelcore.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _openstudiomodelcore.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _openstudiomodelcore:
_openstudiomodelcore.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _openstudiomodelcore.SHARED_PTR_DISOWN
from .import openstudioutilities
from .import openstudioutilitiescore
from .import openstudioutilitiestime
from .import openstudioutilitiesdata
from .import openstudioutilitiesunits
from .import openstudioutilitiesplot
from .import openstudioutilitiesgeometry
from .import openstudioutilitiessql
from .import openstudioutilitiesbcl
from .import openstudioutilitiesidd
from .import openstudioutilitiesidf
from .import openstudioutilitiesfiletypes
from .import openstudioutilitiesxml

# Import common modules
import typing
import warnings


def _workspace_to_Model(self) -> "Model":
    """Cast the Workspace to a Model.

    Throws if not an actual Model

    :return: A Model.
    """
    return toModel(self)
openstudioutilitiesidf.Workspace.to_Model = _workspace_to_Model

def _workspace_to_OptionalModel(self) -> "OptionalModel":
    """Try to cast the Workspace to a Model.

    :return: An OptionalModel.
    """
    return toOptionalModel(self)
openstudioutilitiesidf.Workspace.to_OptionalModel = _workspace_to_OptionalModel



def _workspace_to_Component(self) -> "Component":
    """Cast the Workspace to a Component.

    Throws if not an actual Component

    :return: A Component.
    """
    return toComponent(self)
openstudioutilitiesidf.Workspace.to_Component = _workspace_to_Component

def _workspace_to_OptionalComponent(self) -> "OptionalComponent":
    """Try to cast the Workspace to a Component.

    :return: An OptionalComponent.
    """
    return toOptionalComponent(self)
openstudioutilitiesidf.Workspace.to_OptionalComponent = _workspace_to_OptionalComponent

class ModelVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ModelVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ModelVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ModelVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ModelVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ModelVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ModelVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ModelVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ModelVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ModelVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ModelVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ModelVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ModelVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ModelVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ModelVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ModelVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ModelVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ModelVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ModelVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ModelVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ModelVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ModelVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ModelVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ModelVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ModelVector_swiginit(self, _openstudiomodelcore.new_ModelVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ModelVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ModelVector_front(self)

    def back(self):
        return _openstudiomodelcore.ModelVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ModelVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudiomodelcore.ModelVector_resize(self, *args)

    def insert(self, *args):
        return _openstudiomodelcore.ModelVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ModelVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ModelVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelVector

# Register ModelVector in _openstudiomodelcore:
_openstudiomodelcore.ModelVector_swigregister(ModelVector)
class OptionalModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalModel_swiginit(self, _openstudiomodelcore.new_OptionalModel(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalModel_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalModel___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalModel___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalModel_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalModel_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalModel_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalModel_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalModel_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalModel_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalModel

# Register OptionalModel in _openstudiomodelcore:
_openstudiomodelcore.OptionalModel_swigregister(OptionalModel)
class ComponentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ComponentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ComponentVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ComponentVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ComponentVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ComponentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ComponentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ComponentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ComponentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ComponentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ComponentVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ComponentVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ComponentVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ComponentVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ComponentVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ComponentVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ComponentVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ComponentVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ComponentVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ComponentVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ComponentVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ComponentVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ComponentVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ComponentVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ComponentVector_swiginit(self, _openstudiomodelcore.new_ComponentVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ComponentVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ComponentVector_front(self)

    def back(self):
        return _openstudiomodelcore.ComponentVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ComponentVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ComponentVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ComponentVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ComponentVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ComponentVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ComponentVector

# Register ComponentVector in _openstudiomodelcore:
_openstudiomodelcore.ComponentVector_swigregister(ComponentVector)
class OptionalComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalComponent_swiginit(self, _openstudiomodelcore.new_OptionalComponent(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalComponent_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalComponent___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalComponent___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalComponent_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalComponent_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalComponent_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalComponent_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalComponent_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalComponent_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalComponent

# Register OptionalComponent in _openstudiomodelcore:
_openstudiomodelcore.OptionalComponent_swigregister(OptionalComponent)
class ModelObjectVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ModelObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ModelObjectVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ModelObjectVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ModelObjectVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ModelObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ModelObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ModelObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ModelObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ModelObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ModelObjectVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ModelObjectVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ModelObjectVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ModelObjectVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ModelObjectVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ModelObjectVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ModelObjectVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ModelObjectVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ModelObjectVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ModelObjectVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ModelObjectVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ModelObjectVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ModelObjectVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ModelObjectVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ModelObjectVector_swiginit(self, _openstudiomodelcore.new_ModelObjectVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ModelObjectVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ModelObjectVector_front(self)

    def back(self):
        return _openstudiomodelcore.ModelObjectVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ModelObjectVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ModelObjectVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ModelObjectVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ModelObjectVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ModelObjectVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectVector

# Register ModelObjectVector in _openstudiomodelcore:
_openstudiomodelcore.ModelObjectVector_swigregister(ModelObjectVector)
class ModelObjectVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ModelObjectVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ModelObjectVectorVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ModelObjectVectorVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ModelObjectVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ModelObjectVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ModelObjectVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ModelObjectVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ModelObjectVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ModelObjectVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ModelObjectVectorVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ModelObjectVectorVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ModelObjectVectorVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ModelObjectVectorVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ModelObjectVectorVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ModelObjectVectorVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ModelObjectVectorVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ModelObjectVectorVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ModelObjectVectorVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ModelObjectVectorVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ModelObjectVectorVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ModelObjectVectorVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ModelObjectVectorVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ModelObjectVectorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ModelObjectVectorVector_swiginit(self, _openstudiomodelcore.new_ModelObjectVectorVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ModelObjectVectorVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ModelObjectVectorVector_front(self)

    def back(self):
        return _openstudiomodelcore.ModelObjectVectorVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ModelObjectVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _openstudiomodelcore.ModelObjectVectorVector_resize(self, *args)

    def insert(self, *args):
        return _openstudiomodelcore.ModelObjectVectorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ModelObjectVectorVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ModelObjectVectorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectVectorVector

# Register ModelObjectVectorVector in _openstudiomodelcore:
_openstudiomodelcore.ModelObjectVectorVector_swigregister(ModelObjectVectorVector)
class ModelObjectSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ModelObjectSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ModelObjectSet___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ModelObjectSet___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ModelObjectSet___len__(self)

    def append(self, x):
        return _openstudiomodelcore.ModelObjectSet_append(self, x)

    def __contains__(self, x):
        return _openstudiomodelcore.ModelObjectSet___contains__(self, x)

    def __getitem__(self, i):
        return _openstudiomodelcore.ModelObjectSet___getitem__(self, i)

    def add(self, x):
        return _openstudiomodelcore.ModelObjectSet_add(self, x)

    def discard(self, x):
        return _openstudiomodelcore.ModelObjectSet_discard(self, x)

    def __init__(self, *args):
        _openstudiomodelcore.ModelObjectSet_swiginit(self, _openstudiomodelcore.new_ModelObjectSet(*args))

    def empty(self):
        return _openstudiomodelcore.ModelObjectSet_empty(self)

    def size(self):
        return _openstudiomodelcore.ModelObjectSet_size(self)

    def clear(self):
        return _openstudiomodelcore.ModelObjectSet_clear(self)

    def swap(self, v):
        return _openstudiomodelcore.ModelObjectSet_swap(self, v)

    def count(self, x):
        return _openstudiomodelcore.ModelObjectSet_count(self, x)

    def begin(self):
        return _openstudiomodelcore.ModelObjectSet_begin(self)

    def end(self):
        return _openstudiomodelcore.ModelObjectSet_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ModelObjectSet_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ModelObjectSet_rend(self)

    def erase(self, *args):
        return _openstudiomodelcore.ModelObjectSet_erase(self, *args)

    def find(self, x):
        return _openstudiomodelcore.ModelObjectSet_find(self, x)

    def lower_bound(self, x):
        return _openstudiomodelcore.ModelObjectSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _openstudiomodelcore.ModelObjectSet_upper_bound(self, x)

    def equal_range(self, x):
        return _openstudiomodelcore.ModelObjectSet_equal_range(self, x)

    def insert(self, __x):
        return _openstudiomodelcore.ModelObjectSet_insert(self, __x)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectSet

# Register ModelObjectSet in _openstudiomodelcore:
_openstudiomodelcore.ModelObjectSet_swigregister(ModelObjectSet)
class OptionalModelObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalModelObject_swiginit(self, _openstudiomodelcore.new_OptionalModelObject(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalModelObject_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalModelObject___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalModelObject___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalModelObject_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalModelObject_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalModelObject_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalModelObject_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalModelObject_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalModelObject_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalModelObject

# Register OptionalModelObject in _openstudiomodelcore:
_openstudiomodelcore.OptionalModelObject_swigregister(OptionalModelObject)

def getModelObjectHandles(objects):
    return _openstudiomodelcore.getModelObjectHandles(objects)
class ModelObject(openstudioutilitiesidf.WorkspaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObject

    def __init__(self, *args):
        _openstudiomodelcore.ModelObject_swiginit(self, _openstudiomodelcore.new_ModelObject(*args))

    def clone(self, *args):
        return _openstudiomodelcore.ModelObject_clone(self, *args)

    def createComponent(self):
        return _openstudiomodelcore.ModelObject_createComponent(self)

    def model(self):
        return _openstudiomodelcore.ModelObject_model(self)

    def parent(self):
        return _openstudiomodelcore.ModelObject_parent(self)

    def resources(self):
        return _openstudiomodelcore.ModelObject_resources(self)

    def outputVariableNames(self):
        return _openstudiomodelcore.ModelObject_outputVariableNames(self)

    def outputVariables(self):
        return _openstudiomodelcore.ModelObject_outputVariables(self)

    def getData(self, variable, envPeriod):
        return _openstudiomodelcore.ModelObject_getData(self, variable, envPeriod)

    def lifeCycleCosts(self):
        return _openstudiomodelcore.ModelObject_lifeCycleCosts(self)

    def removeLifeCycleCosts(self):
        return _openstudiomodelcore.ModelObject_removeLifeCycleCosts(self)

    def iddObjectType(self):
        return _openstudiomodelcore.ModelObject_iddObjectType(self)

    def additionalProperties(self):
        return _openstudiomodelcore.ModelObject_additionalProperties(self)

    def hasAdditionalProperties(self):
        return _openstudiomodelcore.ModelObject_hasAdditionalProperties(self)

    def removeAdditionalProperties(self):
        return _openstudiomodelcore.ModelObject_removeAdditionalProperties(self)

    def cadObjectId(self):
        return _openstudiomodelcore.ModelObject_cadObjectId(self)

    def setCADObjectId(self, cadObjectId):
        return _openstudiomodelcore.ModelObject_setCADObjectId(self, cadObjectId)

    def gbXMLId(self):
        return _openstudiomodelcore.ModelObject_gbXMLId(self)

    def setGBXMLId(self, gbXMLId):
        return _openstudiomodelcore.ModelObject_setGBXMLId(self, gbXMLId)

    def displayName(self):
        return _openstudiomodelcore.ModelObject_displayName(self)

    def setDisplayName(self, displayName):
        return _openstudiomodelcore.ModelObject_setDisplayName(self, displayName)

    def setParent(self, newParent):
        return _openstudiomodelcore.ModelObject_setParent(self, newParent)

    def __lt__(self, right):
        return _openstudiomodelcore.ModelObject___lt__(self, right)

    def __eq__(self, other):
        return _openstudiomodelcore.ModelObject___eq__(self, other)

    def __ne__(self, other):
        return _openstudiomodelcore.ModelObject___ne__(self, other)

    def getScheduleTypeKeys(self, schedule):
        return _openstudiomodelcore.ModelObject_getScheduleTypeKeys(self, schedule)

    def getAutosizedValue(self, valueName, units):
        return _openstudiomodelcore.ModelObject_getAutosizedValue(self, valueName, units)

    def emsActuatorNames(self):
        return _openstudiomodelcore.ModelObject_emsActuatorNames(self)

    def emsInternalVariableNames(self):
        return _openstudiomodelcore.ModelObject_emsInternalVariableNames(self)

    def connectedObject(self, port):
        return _openstudiomodelcore.ModelObject_connectedObject(self, port)

    def connectedObjectPort(self, port):
        return _openstudiomodelcore.ModelObject_connectedObjectPort(self, port)

    def __str__(self):
        return _openstudiomodelcore.ModelObject___str__(self)

    def toIdfObject(self):
        return _openstudiomodelcore.ModelObject_toIdfObject(self)

# Register ModelObject in _openstudiomodelcore:
_openstudiomodelcore.ModelObject_swigregister(ModelObject)
class EMSActuatorNames(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, componentTypeName, controlTypeName):
        _openstudiomodelcore.EMSActuatorNames_swiginit(self, _openstudiomodelcore.new_EMSActuatorNames(componentTypeName, controlTypeName))

    def controlTypeName(self):
        return _openstudiomodelcore.EMSActuatorNames_controlTypeName(self)

    def componentTypeName(self):
        return _openstudiomodelcore.EMSActuatorNames_componentTypeName(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EMSActuatorNames

# Register EMSActuatorNames in _openstudiomodelcore:
_openstudiomodelcore.EMSActuatorNames_swigregister(EMSActuatorNames)
class ScheduleTypeKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, className, scheduleDisplayName):
        _openstudiomodelcore.ScheduleTypeKey_swiginit(self, _openstudiomodelcore.new_ScheduleTypeKey(className, scheduleDisplayName))

    def className(self):
        return _openstudiomodelcore.ScheduleTypeKey_className(self)

    def scheduleDisplayName(self):
        return _openstudiomodelcore.ScheduleTypeKey_scheduleDisplayName(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleTypeKey

# Register ScheduleTypeKey in _openstudiomodelcore:
_openstudiomodelcore.ScheduleTypeKey_swigregister(ScheduleTypeKey)
class Model(openstudioutilitiesidf.Workspace):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_Model

    def workflowJSON(self):
        return _openstudiomodelcore.Model_workflowJSON(self)

    def sqlFile(self):
        return _openstudiomodelcore.Model_sqlFile(self)

    def building(self):
        return _openstudiomodelcore.Model_building(self)

    def foundationKivaSettings(self):
        return _openstudiomodelcore.Model_foundationKivaSettings(self)

    def outputControlFiles(self):
        return _openstudiomodelcore.Model_outputControlFiles(self)

    def outputControlReportingTolerances(self):
        return _openstudiomodelcore.Model_outputControlReportingTolerances(self)

    def outputControlTableStyle(self):
        return _openstudiomodelcore.Model_outputControlTableStyle(self)

    def outputControlTimestamp(self):
        return _openstudiomodelcore.Model_outputControlTimestamp(self)

    def outputDiagnostics(self):
        return _openstudiomodelcore.Model_outputDiagnostics(self)

    def outputDebuggingData(self):
        return _openstudiomodelcore.Model_outputDebuggingData(self)

    def outputJSON(self):
        return _openstudiomodelcore.Model_outputJSON(self)

    def outputSQLite(self):
        return _openstudiomodelcore.Model_outputSQLite(self)

    def outputEnergyManagementSystem(self):
        return _openstudiomodelcore.Model_outputEnergyManagementSystem(self)

    def outputTableSummaryReports(self):
        return _openstudiomodelcore.Model_outputTableSummaryReports(self)

    def outputSchedules(self):
        return _openstudiomodelcore.Model_outputSchedules(self)

    def outputConstructions(self):
        return _openstudiomodelcore.Model_outputConstructions(self)

    def performancePrecisionTradeoffs(self):
        return _openstudiomodelcore.Model_performancePrecisionTradeoffs(self)

    def lifeCycleCostParameters(self):
        return _openstudiomodelcore.Model_lifeCycleCostParameters(self)

    def sizingParameters(self):
        return _openstudiomodelcore.Model_sizingParameters(self)

    def radianceParameters(self):
        return _openstudiomodelcore.Model_radianceParameters(self)

    def runPeriod(self):
        return _openstudiomodelcore.Model_runPeriod(self)

    def runPeriodControlDaylightSavingTime(self):
        return _openstudiomodelcore.Model_runPeriodControlDaylightSavingTime(self)

    def yearDescription(self):
        return _openstudiomodelcore.Model_yearDescription(self)

    def site(self):
        return _openstudiomodelcore.Model_site(self)

    def siteGroundReflectance(self):
        return _openstudiomodelcore.Model_siteGroundReflectance(self)

    def siteWaterMainsTemperature(self):
        return _openstudiomodelcore.Model_siteWaterMainsTemperature(self)

    def siteGroundTemperatureBuildingSurface(self):
        return _openstudiomodelcore.Model_siteGroundTemperatureBuildingSurface(self)

    def siteGroundTemperatureFCfactorMethod(self):
        return _openstudiomodelcore.Model_siteGroundTemperatureFCfactorMethod(self)

    def siteGroundTemperatureDeep(self):
        return _openstudiomodelcore.Model_siteGroundTemperatureDeep(self)

    def siteGroundTemperatureShallow(self):
        return _openstudiomodelcore.Model_siteGroundTemperatureShallow(self)

    def facility(self):
        return _openstudiomodelcore.Model_facility(self)

    def weatherFile(self):
        return _openstudiomodelcore.Model_weatherFile(self)

    def simulationControl(self):
        return _openstudiomodelcore.Model_simulationControl(self)

    def lightingSimulationControl(self):
        return _openstudiomodelcore.Model_lightingSimulationControl(self)

    def airflowNetworkSimulationControl(self):
        return _openstudiomodelcore.Model_airflowNetworkSimulationControl(self)

    def insideSurfaceConvectionAlgorithm(self):
        return _openstudiomodelcore.Model_insideSurfaceConvectionAlgorithm(self)

    def outsideSurfaceConvectionAlgorithm(self):
        return _openstudiomodelcore.Model_outsideSurfaceConvectionAlgorithm(self)

    def heatBalanceAlgorithm(self):
        return _openstudiomodelcore.Model_heatBalanceAlgorithm(self)

    def zoneAirContaminantBalance(self):
        return _openstudiomodelcore.Model_zoneAirContaminantBalance(self)

    def zoneAirHeatBalanceAlgorithm(self):
        return _openstudiomodelcore.Model_zoneAirHeatBalanceAlgorithm(self)

    def zoneAirMassFlowConservation(self):
        return _openstudiomodelcore.Model_zoneAirMassFlowConservation(self)

    def zoneCapacitanceMultiplierResearchSpecial(self):
        return _openstudiomodelcore.Model_zoneCapacitanceMultiplierResearchSpecial(self)

    def convergenceLimits(self):
        return _openstudiomodelcore.Model_convergenceLimits(self)

    def shadowCalculation(self):
        return _openstudiomodelcore.Model_shadowCalculation(self)

    def timestep(self):
        return _openstudiomodelcore.Model_timestep(self)

    def climateZones(self):
        return _openstudiomodelcore.Model_climateZones(self)

    def environmentalImpactFactors(self):
        return _openstudiomodelcore.Model_environmentalImpactFactors(self)

    def externalInterface(self):
        return _openstudiomodelcore.Model_externalInterface(self)

    def calendarYear(self):
        return _openstudiomodelcore.Model_calendarYear(self)

    def dayofWeekforStartDay(self):
        return _openstudiomodelcore.Model_dayofWeekforStartDay(self)

    def isDayofWeekforStartDayDefaulted(self):
        return _openstudiomodelcore.Model_isDayofWeekforStartDayDefaulted(self)

    def isLeapYear(self):
        return _openstudiomodelcore.Model_isLeapYear(self)

    def isIsLeapYearDefaulted(self):
        return _openstudiomodelcore.Model_isIsLeapYearDefaulted(self)

    def setCalendarYear(self, calendarYear):
        return _openstudiomodelcore.Model_setCalendarYear(self, calendarYear)

    def resetCalendarYear(self):
        return _openstudiomodelcore.Model_resetCalendarYear(self)

    def setDayofWeekforStartDay(self, dayofWeekforStartDay):
        return _openstudiomodelcore.Model_setDayofWeekforStartDay(self, dayofWeekforStartDay)

    def resetDayofWeekforStartDay(self):
        return _openstudiomodelcore.Model_resetDayofWeekforStartDay(self)

    def setIsLeapYear(self, isLeapYear):
        return _openstudiomodelcore.Model_setIsLeapYear(self, isLeapYear)

    def resetIsLeapYear(self):
        return _openstudiomodelcore.Model_resetIsLeapYear(self)

    def assumedYear(self):
        return _openstudiomodelcore.Model_assumedYear(self)

    def makeDate(self, *args):
        return _openstudiomodelcore.Model_makeDate(self, *args)

    def alwaysOnDiscreteSchedule(self):
        return _openstudiomodelcore.Model_alwaysOnDiscreteSchedule(self)

    def alwaysOnDiscreteScheduleName(self):
        return _openstudiomodelcore.Model_alwaysOnDiscreteScheduleName(self)

    def alwaysOffDiscreteSchedule(self):
        return _openstudiomodelcore.Model_alwaysOffDiscreteSchedule(self)

    def alwaysOffDiscreteScheduleName(self):
        return _openstudiomodelcore.Model_alwaysOffDiscreteScheduleName(self)

    def alwaysOnContinuousSchedule(self):
        return _openstudiomodelcore.Model_alwaysOnContinuousSchedule(self)

    def alwaysOnContinuousScheduleName(self):
        return _openstudiomodelcore.Model_alwaysOnContinuousScheduleName(self)

    def outdoorAirNode(self):
        return _openstudiomodelcore.Model_outdoorAirNode(self)

    def plenumSpaceType(self):
        return _openstudiomodelcore.Model_plenumSpaceType(self)

    def plenumSpaceTypeName(self):
        return _openstudiomodelcore.Model_plenumSpaceTypeName(self)

    def setWorkflowJSON(self, workflowJSON):
        return _openstudiomodelcore.Model_setWorkflowJSON(self, workflowJSON)

    def resetWorkflowJSON(self):
        return _openstudiomodelcore.Model_resetWorkflowJSON(self)

    def setSqlFile(self, sqlFile):
        return _openstudiomodelcore.Model_setSqlFile(self, sqlFile)

    def resetSqlFile(self):
        return _openstudiomodelcore.Model_resetSqlFile(self)

    @staticmethod
    def load(*args):
        return _openstudiomodelcore.Model_load(*args)

    def __eq__(self, other):
        return _openstudiomodelcore.Model___eq__(self, other)

    def modelObjects(self, sorted=False):
        return _openstudiomodelcore.Model_modelObjects(self, sorted)

    def insertComponent(self, component):
        return _openstudiomodelcore.Model_insertComponent(self, component)

    def purgeUnusedResourceObjects(self, *args):
        return _openstudiomodelcore.Model_purgeUnusedResourceObjects(self, *args)

    def connect(self, sourceObject, sourcePort, targetObject, targetPort):
        return _openstudiomodelcore.Model_connect(self, sourceObject, sourcePort, targetObject, targetPort)

    def disconnect(self, object, port):
        return _openstudiomodelcore.Model_disconnect(self, object, port)

    def autosize(self):
        return _openstudiomodelcore.Model_autosize(self)

    def applySizingValues(self):
        return _openstudiomodelcore.Model_applySizingValues(self)

    def __init__(self, *args):
        if self.__class__ == Model:
            _self = None
        else:
            _self = self
        _openstudiomodelcore.Model_swiginit(self, _openstudiomodelcore.new_Model(_self, *args))

    def addVersionObject(self):
        return _openstudiomodelcore.Model_addVersionObject(self)
    def __disown__(self):
        self.this.disown()
        _openstudiomodelcore.disown_Model(self)
        return weakref.proxy(self)

# Register Model in _openstudiomodelcore:
_openstudiomodelcore.Model_swigregister(Model)

def compareInputAndOutput(*args):
    return _openstudiomodelcore.compareInputAndOutput(*args)

def exampleModel():
    return _openstudiomodelcore.exampleModel()

def addExampleModelObjects(model):
    return _openstudiomodelcore.addExampleModelObjects(model)
class ModelExtensibleGroup(openstudioutilitiesidf.WorkspaceExtensibleGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ModelExtensibleGroup

    def __init__(self, *args):
        _openstudiomodelcore.ModelExtensibleGroup_swiginit(self, _openstudiomodelcore.new_ModelExtensibleGroup(*args))

    def setSchedule(self, index, className, scheduleDisplayName, schedule):
        return _openstudiomodelcore.ModelExtensibleGroup_setSchedule(self, index, className, scheduleDisplayName, schedule)

# Register ModelExtensibleGroup in _openstudiomodelcore:
_openstudiomodelcore.ModelExtensibleGroup_swigregister(ModelExtensibleGroup)
class Component(Model):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_Component

    def __init__(self, *args):
        _openstudiomodelcore.Component_swiginit(self, _openstudiomodelcore.new_Component(*args))

    def componentData(self):
        return _openstudiomodelcore.Component_componentData(self)

    def primaryObject(self):
        return _openstudiomodelcore.Component_primaryObject(self)

    @staticmethod
    def load(p):
        return _openstudiomodelcore.Component_load(p)

    def save(self, p, overwrite=False):
        return _openstudiomodelcore.Component_save(self, p, overwrite)

# Register Component in _openstudiomodelcore:
_openstudiomodelcore.Component_swigregister(Component)

def initializeModel(*args):
    return _openstudiomodelcore.initializeModel(*args)

def initializeModelObjects(model):
    return _openstudiomodelcore.initializeModelObjects(model)

def saveModel(model, osmPath, modelTempDir):
    return _openstudiomodelcore.saveModel(model, osmPath, modelTempDir)

def removeModelTempDir(modelTempDir):
    return _openstudiomodelcore.removeModelTempDir(modelTempDir)

def toModel(workspace):
    return _openstudiomodelcore.toModel(workspace)

def toOptionalModel(workspace):
    return _openstudiomodelcore.toOptionalModel(workspace)

def toComponent(workspace):
    return _openstudiomodelcore.toComponent(workspace)

def toOptionalComponent(workspace):
    return _openstudiomodelcore.toOptionalComponent(workspace)
class ScheduleTypeKeyVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ScheduleTypeKeyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ScheduleTypeKeyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ScheduleTypeKeyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ScheduleTypeKeyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ScheduleTypeKeyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ScheduleTypeKeyVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ScheduleTypeKeyVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ScheduleTypeKeyVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ScheduleTypeKeyVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleTypeKeyVector_swiginit(self, _openstudiomodelcore.new_ScheduleTypeKeyVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ScheduleTypeKeyVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector_front(self)

    def back(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ScheduleTypeKeyVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ScheduleTypeKeyVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ScheduleTypeKeyVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ScheduleTypeKeyVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ScheduleTypeKeyVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleTypeKeyVector

# Register ScheduleTypeKeyVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleTypeKeyVector_swigregister(ScheduleTypeKeyVector)
class OptionalScheduleTypeKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleTypeKey_swiginit(self, _openstudiomodelcore.new_OptionalScheduleTypeKey(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalScheduleTypeKey_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalScheduleTypeKey___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalScheduleTypeKey___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalScheduleTypeKey_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalScheduleTypeKey_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalScheduleTypeKey_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalScheduleTypeKey_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalScheduleTypeKey_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalScheduleTypeKey_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleTypeKey

# Register OptionalScheduleTypeKey in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleTypeKey_swigregister(OptionalScheduleTypeKey)
class EMSActuatorNamesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.EMSActuatorNamesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.EMSActuatorNamesVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.EMSActuatorNamesVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.EMSActuatorNamesVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.EMSActuatorNamesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.EMSActuatorNamesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.EMSActuatorNamesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.EMSActuatorNamesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.EMSActuatorNamesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.EMSActuatorNamesVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.EMSActuatorNamesVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.EMSActuatorNamesVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.EMSActuatorNamesVector_empty(self)

    def size(self):
        return _openstudiomodelcore.EMSActuatorNamesVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.EMSActuatorNamesVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.EMSActuatorNamesVector_begin(self)

    def end(self):
        return _openstudiomodelcore.EMSActuatorNamesVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.EMSActuatorNamesVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.EMSActuatorNamesVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.EMSActuatorNamesVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.EMSActuatorNamesVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.EMSActuatorNamesVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.EMSActuatorNamesVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EMSActuatorNamesVector_swiginit(self, _openstudiomodelcore.new_EMSActuatorNamesVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.EMSActuatorNamesVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.EMSActuatorNamesVector_front(self)

    def back(self):
        return _openstudiomodelcore.EMSActuatorNamesVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.EMSActuatorNamesVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.EMSActuatorNamesVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.EMSActuatorNamesVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.EMSActuatorNamesVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.EMSActuatorNamesVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EMSActuatorNamesVector

# Register EMSActuatorNamesVector in _openstudiomodelcore:
_openstudiomodelcore.EMSActuatorNamesVector_swigregister(EMSActuatorNamesVector)
class OptionalEMSActuatorNames(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEMSActuatorNames_swiginit(self, _openstudiomodelcore.new_OptionalEMSActuatorNames(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalEMSActuatorNames_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalEMSActuatorNames___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalEMSActuatorNames___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalEMSActuatorNames_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalEMSActuatorNames_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalEMSActuatorNames_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalEMSActuatorNames_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalEMSActuatorNames_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalEMSActuatorNames_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEMSActuatorNames

# Register OptionalEMSActuatorNames in _openstudiomodelcore:
_openstudiomodelcore.OptionalEMSActuatorNames_swigregister(OptionalEMSActuatorNames)
class ModelExtensibleGroupVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ModelExtensibleGroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ModelExtensibleGroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ModelExtensibleGroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ModelExtensibleGroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ModelExtensibleGroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ModelExtensibleGroupVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ModelExtensibleGroupVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ModelExtensibleGroupVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ModelExtensibleGroupVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ModelExtensibleGroupVector_swiginit(self, _openstudiomodelcore.new_ModelExtensibleGroupVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ModelExtensibleGroupVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector_front(self)

    def back(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ModelExtensibleGroupVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ModelExtensibleGroupVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ModelExtensibleGroupVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ModelExtensibleGroupVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ModelExtensibleGroupVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelExtensibleGroupVector

# Register ModelExtensibleGroupVector in _openstudiomodelcore:
_openstudiomodelcore.ModelExtensibleGroupVector_swigregister(ModelExtensibleGroupVector)
class OptionalModelExtensibleGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalModelExtensibleGroup_swiginit(self, _openstudiomodelcore.new_OptionalModelExtensibleGroup(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalModelExtensibleGroup_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalModelExtensibleGroup___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalModelExtensibleGroup___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalModelExtensibleGroup_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalModelExtensibleGroup_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalModelExtensibleGroup_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalModelExtensibleGroup_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalModelExtensibleGroup_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalModelExtensibleGroup_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalModelExtensibleGroup

# Register OptionalModelExtensibleGroup in _openstudiomodelcore:
_openstudiomodelcore.OptionalModelExtensibleGroup_swigregister(OptionalModelExtensibleGroup)
class ParentObjectVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ParentObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ParentObjectVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ParentObjectVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ParentObjectVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ParentObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ParentObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ParentObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ParentObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ParentObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ParentObjectVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ParentObjectVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ParentObjectVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ParentObjectVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ParentObjectVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ParentObjectVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ParentObjectVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ParentObjectVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ParentObjectVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ParentObjectVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ParentObjectVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ParentObjectVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ParentObjectVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ParentObjectVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ParentObjectVector_swiginit(self, _openstudiomodelcore.new_ParentObjectVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ParentObjectVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ParentObjectVector_front(self)

    def back(self):
        return _openstudiomodelcore.ParentObjectVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ParentObjectVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ParentObjectVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ParentObjectVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ParentObjectVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ParentObjectVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ParentObjectVector

# Register ParentObjectVector in _openstudiomodelcore:
_openstudiomodelcore.ParentObjectVector_swigregister(ParentObjectVector)
class OptionalParentObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalParentObject_swiginit(self, _openstudiomodelcore.new_OptionalParentObject(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalParentObject_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalParentObject___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalParentObject___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalParentObject_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalParentObject_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalParentObject_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalParentObject_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalParentObject_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalParentObject_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalParentObject

# Register OptionalParentObject in _openstudiomodelcore:
_openstudiomodelcore.OptionalParentObject_swigregister(OptionalParentObject)
class ResourceObjectVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ResourceObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ResourceObjectVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ResourceObjectVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ResourceObjectVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ResourceObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ResourceObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ResourceObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ResourceObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ResourceObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ResourceObjectVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ResourceObjectVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ResourceObjectVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ResourceObjectVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ResourceObjectVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ResourceObjectVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ResourceObjectVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ResourceObjectVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ResourceObjectVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ResourceObjectVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ResourceObjectVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ResourceObjectVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ResourceObjectVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ResourceObjectVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ResourceObjectVector_swiginit(self, _openstudiomodelcore.new_ResourceObjectVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ResourceObjectVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ResourceObjectVector_front(self)

    def back(self):
        return _openstudiomodelcore.ResourceObjectVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ResourceObjectVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ResourceObjectVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ResourceObjectVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ResourceObjectVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ResourceObjectVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ResourceObjectVector

# Register ResourceObjectVector in _openstudiomodelcore:
_openstudiomodelcore.ResourceObjectVector_swigregister(ResourceObjectVector)
class OptionalResourceObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalResourceObject_swiginit(self, _openstudiomodelcore.new_OptionalResourceObject(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalResourceObject_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalResourceObject___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalResourceObject___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalResourceObject_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalResourceObject_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalResourceObject_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalResourceObject_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalResourceObject_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalResourceObject_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalResourceObject

# Register OptionalResourceObject in _openstudiomodelcore:
_openstudiomodelcore.OptionalResourceObject_swigregister(OptionalResourceObject)
class OptionalVersion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalVersion_swiginit(self, _openstudiomodelcore.new_OptionalVersion(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalVersion_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalVersion___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalVersion___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalVersion_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalVersion_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalVersion_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalVersion_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalVersion_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalVersion_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalVersion

# Register OptionalVersion in _openstudiomodelcore:
_openstudiomodelcore.OptionalVersion_swigregister(OptionalVersion)
class OptionalLifeCycleCostParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalLifeCycleCostParameters_swiginit(self, _openstudiomodelcore.new_OptionalLifeCycleCostParameters(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalLifeCycleCostParameters___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalLifeCycleCostParameters___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalLifeCycleCostParameters_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalLifeCycleCostParameters

# Register OptionalLifeCycleCostParameters in _openstudiomodelcore:
_openstudiomodelcore.OptionalLifeCycleCostParameters_swigregister(OptionalLifeCycleCostParameters)
class OptionalRadianceParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalRadianceParameters_swiginit(self, _openstudiomodelcore.new_OptionalRadianceParameters(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalRadianceParameters_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalRadianceParameters___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalRadianceParameters___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalRadianceParameters_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalRadianceParameters_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalRadianceParameters_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalRadianceParameters_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalRadianceParameters_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalRadianceParameters_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalRadianceParameters

# Register OptionalRadianceParameters in _openstudiomodelcore:
_openstudiomodelcore.OptionalRadianceParameters_swigregister(OptionalRadianceParameters)
class OutputMeterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.OutputMeterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.OutputMeterVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.OutputMeterVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.OutputMeterVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.OutputMeterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.OutputMeterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.OutputMeterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.OutputMeterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.OutputMeterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.OutputMeterVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.OutputMeterVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.OutputMeterVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.OutputMeterVector_empty(self)

    def size(self):
        return _openstudiomodelcore.OutputMeterVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.OutputMeterVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.OutputMeterVector_begin(self)

    def end(self):
        return _openstudiomodelcore.OutputMeterVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.OutputMeterVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.OutputMeterVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.OutputMeterVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.OutputMeterVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.OutputMeterVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.OutputMeterVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.OutputMeterVector_swiginit(self, _openstudiomodelcore.new_OutputMeterVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.OutputMeterVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.OutputMeterVector_front(self)

    def back(self):
        return _openstudiomodelcore.OutputMeterVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.OutputMeterVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.OutputMeterVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.OutputMeterVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.OutputMeterVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.OutputMeterVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_OutputMeterVector

# Register OutputMeterVector in _openstudiomodelcore:
_openstudiomodelcore.OutputMeterVector_swigregister(OutputMeterVector)
class OptionalOutputMeter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalOutputMeter_swiginit(self, _openstudiomodelcore.new_OptionalOutputMeter(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalOutputMeter_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalOutputMeter___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalOutputMeter___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalOutputMeter_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalOutputMeter_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalOutputMeter_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalOutputMeter_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalOutputMeter_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalOutputMeter_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalOutputMeter

# Register OptionalOutputMeter in _openstudiomodelcore:
_openstudiomodelcore.OptionalOutputMeter_swigregister(OptionalOutputMeter)
class MeterCustomVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.MeterCustomVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.MeterCustomVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.MeterCustomVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.MeterCustomVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.MeterCustomVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.MeterCustomVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.MeterCustomVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.MeterCustomVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.MeterCustomVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.MeterCustomVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.MeterCustomVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.MeterCustomVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.MeterCustomVector_empty(self)

    def size(self):
        return _openstudiomodelcore.MeterCustomVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.MeterCustomVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.MeterCustomVector_begin(self)

    def end(self):
        return _openstudiomodelcore.MeterCustomVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.MeterCustomVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.MeterCustomVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.MeterCustomVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.MeterCustomVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.MeterCustomVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.MeterCustomVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.MeterCustomVector_swiginit(self, _openstudiomodelcore.new_MeterCustomVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.MeterCustomVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.MeterCustomVector_front(self)

    def back(self):
        return _openstudiomodelcore.MeterCustomVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.MeterCustomVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.MeterCustomVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.MeterCustomVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.MeterCustomVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.MeterCustomVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_MeterCustomVector

# Register MeterCustomVector in _openstudiomodelcore:
_openstudiomodelcore.MeterCustomVector_swigregister(MeterCustomVector)
class OptionalMeterCustom(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalMeterCustom_swiginit(self, _openstudiomodelcore.new_OptionalMeterCustom(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalMeterCustom_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalMeterCustom___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalMeterCustom___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalMeterCustom_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalMeterCustom_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalMeterCustom_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalMeterCustom_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalMeterCustom_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalMeterCustom_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalMeterCustom

# Register OptionalMeterCustom in _openstudiomodelcore:
_openstudiomodelcore.OptionalMeterCustom_swigregister(OptionalMeterCustom)
class MeterCustomDecrementVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.MeterCustomDecrementVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.MeterCustomDecrementVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.MeterCustomDecrementVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.MeterCustomDecrementVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.MeterCustomDecrementVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.MeterCustomDecrementVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.MeterCustomDecrementVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.MeterCustomDecrementVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.MeterCustomDecrementVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.MeterCustomDecrementVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.MeterCustomDecrementVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.MeterCustomDecrementVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.MeterCustomDecrementVector_empty(self)

    def size(self):
        return _openstudiomodelcore.MeterCustomDecrementVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.MeterCustomDecrementVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.MeterCustomDecrementVector_begin(self)

    def end(self):
        return _openstudiomodelcore.MeterCustomDecrementVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.MeterCustomDecrementVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.MeterCustomDecrementVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.MeterCustomDecrementVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.MeterCustomDecrementVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.MeterCustomDecrementVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.MeterCustomDecrementVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.MeterCustomDecrementVector_swiginit(self, _openstudiomodelcore.new_MeterCustomDecrementVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.MeterCustomDecrementVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.MeterCustomDecrementVector_front(self)

    def back(self):
        return _openstudiomodelcore.MeterCustomDecrementVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.MeterCustomDecrementVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.MeterCustomDecrementVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.MeterCustomDecrementVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.MeterCustomDecrementVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.MeterCustomDecrementVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_MeterCustomDecrementVector

# Register MeterCustomDecrementVector in _openstudiomodelcore:
_openstudiomodelcore.MeterCustomDecrementVector_swigregister(MeterCustomDecrementVector)
class OptionalMeterCustomDecrement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalMeterCustomDecrement_swiginit(self, _openstudiomodelcore.new_OptionalMeterCustomDecrement(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalMeterCustomDecrement_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalMeterCustomDecrement___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalMeterCustomDecrement___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalMeterCustomDecrement_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalMeterCustomDecrement_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalMeterCustomDecrement_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalMeterCustomDecrement_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalMeterCustomDecrement_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalMeterCustomDecrement_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalMeterCustomDecrement

# Register OptionalMeterCustomDecrement in _openstudiomodelcore:
_openstudiomodelcore.OptionalMeterCustomDecrement_swigregister(OptionalMeterCustomDecrement)
class LifeCycleCostVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.LifeCycleCostVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.LifeCycleCostVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.LifeCycleCostVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.LifeCycleCostVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.LifeCycleCostVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.LifeCycleCostVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.LifeCycleCostVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.LifeCycleCostVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.LifeCycleCostVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.LifeCycleCostVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.LifeCycleCostVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.LifeCycleCostVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.LifeCycleCostVector_empty(self)

    def size(self):
        return _openstudiomodelcore.LifeCycleCostVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.LifeCycleCostVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.LifeCycleCostVector_begin(self)

    def end(self):
        return _openstudiomodelcore.LifeCycleCostVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.LifeCycleCostVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.LifeCycleCostVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.LifeCycleCostVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.LifeCycleCostVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.LifeCycleCostVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.LifeCycleCostVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.LifeCycleCostVector_swiginit(self, _openstudiomodelcore.new_LifeCycleCostVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.LifeCycleCostVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.LifeCycleCostVector_front(self)

    def back(self):
        return _openstudiomodelcore.LifeCycleCostVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.LifeCycleCostVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.LifeCycleCostVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.LifeCycleCostVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.LifeCycleCostVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.LifeCycleCostVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_LifeCycleCostVector

# Register LifeCycleCostVector in _openstudiomodelcore:
_openstudiomodelcore.LifeCycleCostVector_swigregister(LifeCycleCostVector)
class OptionalLifeCycleCost(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalLifeCycleCost_swiginit(self, _openstudiomodelcore.new_OptionalLifeCycleCost(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalLifeCycleCost_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalLifeCycleCost___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalLifeCycleCost___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalLifeCycleCost_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalLifeCycleCost_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalLifeCycleCost_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalLifeCycleCost_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalLifeCycleCost_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalLifeCycleCost_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalLifeCycleCost

# Register OptionalLifeCycleCost in _openstudiomodelcore:
_openstudiomodelcore.OptionalLifeCycleCost_swigregister(OptionalLifeCycleCost)
class UtilityBillVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.UtilityBillVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.UtilityBillVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.UtilityBillVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.UtilityBillVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.UtilityBillVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.UtilityBillVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.UtilityBillVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.UtilityBillVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.UtilityBillVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.UtilityBillVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.UtilityBillVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.UtilityBillVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.UtilityBillVector_empty(self)

    def size(self):
        return _openstudiomodelcore.UtilityBillVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.UtilityBillVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.UtilityBillVector_begin(self)

    def end(self):
        return _openstudiomodelcore.UtilityBillVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.UtilityBillVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.UtilityBillVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.UtilityBillVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.UtilityBillVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.UtilityBillVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.UtilityBillVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.UtilityBillVector_swiginit(self, _openstudiomodelcore.new_UtilityBillVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.UtilityBillVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.UtilityBillVector_front(self)

    def back(self):
        return _openstudiomodelcore.UtilityBillVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.UtilityBillVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.UtilityBillVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.UtilityBillVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.UtilityBillVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.UtilityBillVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_UtilityBillVector

# Register UtilityBillVector in _openstudiomodelcore:
_openstudiomodelcore.UtilityBillVector_swigregister(UtilityBillVector)
class OptionalUtilityBill(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalUtilityBill_swiginit(self, _openstudiomodelcore.new_OptionalUtilityBill(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalUtilityBill_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalUtilityBill___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalUtilityBill___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalUtilityBill_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalUtilityBill_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalUtilityBill_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalUtilityBill_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalUtilityBill_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalUtilityBill_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalUtilityBill

# Register OptionalUtilityBill in _openstudiomodelcore:
_openstudiomodelcore.OptionalUtilityBill_swigregister(OptionalUtilityBill)
class BillingPeriodVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.BillingPeriodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.BillingPeriodVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.BillingPeriodVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.BillingPeriodVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.BillingPeriodVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.BillingPeriodVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.BillingPeriodVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.BillingPeriodVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.BillingPeriodVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.BillingPeriodVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.BillingPeriodVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.BillingPeriodVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.BillingPeriodVector_empty(self)

    def size(self):
        return _openstudiomodelcore.BillingPeriodVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.BillingPeriodVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.BillingPeriodVector_begin(self)

    def end(self):
        return _openstudiomodelcore.BillingPeriodVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.BillingPeriodVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.BillingPeriodVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.BillingPeriodVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.BillingPeriodVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.BillingPeriodVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.BillingPeriodVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.BillingPeriodVector_swiginit(self, _openstudiomodelcore.new_BillingPeriodVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.BillingPeriodVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.BillingPeriodVector_front(self)

    def back(self):
        return _openstudiomodelcore.BillingPeriodVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.BillingPeriodVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.BillingPeriodVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.BillingPeriodVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.BillingPeriodVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.BillingPeriodVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_BillingPeriodVector

# Register BillingPeriodVector in _openstudiomodelcore:
_openstudiomodelcore.BillingPeriodVector_swigregister(BillingPeriodVector)
class OptionalBillingPeriod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalBillingPeriod_swiginit(self, _openstudiomodelcore.new_OptionalBillingPeriod(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalBillingPeriod_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalBillingPeriod___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalBillingPeriod___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalBillingPeriod_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalBillingPeriod_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalBillingPeriod_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalBillingPeriod_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalBillingPeriod_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalBillingPeriod_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalBillingPeriod

# Register OptionalBillingPeriod in _openstudiomodelcore:
_openstudiomodelcore.OptionalBillingPeriod_swigregister(OptionalBillingPeriod)
class ComponentDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ComponentDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ComponentDataVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ComponentDataVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ComponentDataVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ComponentDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ComponentDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ComponentDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ComponentDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ComponentDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ComponentDataVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ComponentDataVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ComponentDataVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ComponentDataVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ComponentDataVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ComponentDataVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ComponentDataVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ComponentDataVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ComponentDataVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ComponentDataVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ComponentDataVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ComponentDataVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ComponentDataVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ComponentDataVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ComponentDataVector_swiginit(self, _openstudiomodelcore.new_ComponentDataVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ComponentDataVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ComponentDataVector_front(self)

    def back(self):
        return _openstudiomodelcore.ComponentDataVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ComponentDataVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ComponentDataVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ComponentDataVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ComponentDataVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ComponentDataVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ComponentDataVector

# Register ComponentDataVector in _openstudiomodelcore:
_openstudiomodelcore.ComponentDataVector_swigregister(ComponentDataVector)
class OptionalComponentData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalComponentData_swiginit(self, _openstudiomodelcore.new_OptionalComponentData(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalComponentData_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalComponentData___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalComponentData___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalComponentData_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalComponentData_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalComponentData_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalComponentData_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalComponentData_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalComponentData_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalComponentData

# Register OptionalComponentData in _openstudiomodelcore:
_openstudiomodelcore.OptionalComponentData_swigregister(OptionalComponentData)
class ScheduleTypeLimitsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ScheduleTypeLimitsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ScheduleTypeLimitsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ScheduleTypeLimitsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ScheduleTypeLimitsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ScheduleTypeLimitsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ScheduleTypeLimitsVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleTypeLimitsVector_swiginit(self, _openstudiomodelcore.new_ScheduleTypeLimitsVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_front(self)

    def back(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ScheduleTypeLimitsVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleTypeLimitsVector

# Register ScheduleTypeLimitsVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleTypeLimitsVector_swigregister(ScheduleTypeLimitsVector)
class OptionalScheduleTypeLimits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleTypeLimits_swiginit(self, _openstudiomodelcore.new_OptionalScheduleTypeLimits(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalScheduleTypeLimits_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalScheduleTypeLimits___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalScheduleTypeLimits___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalScheduleTypeLimits_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalScheduleTypeLimits_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalScheduleTypeLimits_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalScheduleTypeLimits_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalScheduleTypeLimits_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalScheduleTypeLimits_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleTypeLimits

# Register OptionalScheduleTypeLimits in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleTypeLimits_swigregister(OptionalScheduleTypeLimits)
class ScheduleBaseVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ScheduleBaseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ScheduleBaseVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ScheduleBaseVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ScheduleBaseVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ScheduleBaseVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ScheduleBaseVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ScheduleBaseVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ScheduleBaseVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ScheduleBaseVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ScheduleBaseVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ScheduleBaseVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ScheduleBaseVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ScheduleBaseVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ScheduleBaseVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ScheduleBaseVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ScheduleBaseVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ScheduleBaseVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ScheduleBaseVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ScheduleBaseVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ScheduleBaseVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ScheduleBaseVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ScheduleBaseVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ScheduleBaseVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleBaseVector_swiginit(self, _openstudiomodelcore.new_ScheduleBaseVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ScheduleBaseVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ScheduleBaseVector_front(self)

    def back(self):
        return _openstudiomodelcore.ScheduleBaseVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ScheduleBaseVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ScheduleBaseVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ScheduleBaseVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ScheduleBaseVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ScheduleBaseVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleBaseVector

# Register ScheduleBaseVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleBaseVector_swigregister(ScheduleBaseVector)
class OptionalScheduleBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleBase_swiginit(self, _openstudiomodelcore.new_OptionalScheduleBase(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalScheduleBase_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalScheduleBase___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalScheduleBase___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalScheduleBase_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalScheduleBase_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalScheduleBase_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalScheduleBase_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalScheduleBase_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalScheduleBase_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleBase

# Register OptionalScheduleBase in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleBase_swigregister(OptionalScheduleBase)
class ScheduleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ScheduleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ScheduleVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ScheduleVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ScheduleVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ScheduleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ScheduleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ScheduleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ScheduleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ScheduleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ScheduleVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ScheduleVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ScheduleVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ScheduleVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ScheduleVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ScheduleVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ScheduleVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ScheduleVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ScheduleVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ScheduleVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ScheduleVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ScheduleVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ScheduleVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ScheduleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleVector_swiginit(self, _openstudiomodelcore.new_ScheduleVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ScheduleVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ScheduleVector_front(self)

    def back(self):
        return _openstudiomodelcore.ScheduleVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ScheduleVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ScheduleVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ScheduleVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ScheduleVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ScheduleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleVector

# Register ScheduleVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleVector_swigregister(ScheduleVector)
class OptionalSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalSchedule_swiginit(self, _openstudiomodelcore.new_OptionalSchedule(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalSchedule_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalSchedule___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalSchedule___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalSchedule_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalSchedule_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalSchedule_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalSchedule_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalSchedule_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalSchedule_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalSchedule

# Register OptionalSchedule in _openstudiomodelcore:
_openstudiomodelcore.OptionalSchedule_swigregister(OptionalSchedule)
class ScheduleDayVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ScheduleDayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ScheduleDayVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ScheduleDayVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ScheduleDayVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ScheduleDayVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ScheduleDayVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ScheduleDayVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ScheduleDayVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ScheduleDayVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ScheduleDayVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ScheduleDayVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ScheduleDayVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ScheduleDayVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ScheduleDayVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ScheduleDayVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ScheduleDayVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ScheduleDayVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ScheduleDayVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ScheduleDayVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ScheduleDayVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ScheduleDayVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ScheduleDayVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ScheduleDayVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleDayVector_swiginit(self, _openstudiomodelcore.new_ScheduleDayVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ScheduleDayVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ScheduleDayVector_front(self)

    def back(self):
        return _openstudiomodelcore.ScheduleDayVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ScheduleDayVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ScheduleDayVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ScheduleDayVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ScheduleDayVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ScheduleDayVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleDayVector

# Register ScheduleDayVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleDayVector_swigregister(ScheduleDayVector)
class OptionalScheduleDay(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleDay_swiginit(self, _openstudiomodelcore.new_OptionalScheduleDay(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalScheduleDay_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalScheduleDay___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalScheduleDay___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalScheduleDay_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalScheduleDay_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalScheduleDay_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalScheduleDay_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalScheduleDay_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalScheduleDay_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleDay

# Register OptionalScheduleDay in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleDay_swigregister(OptionalScheduleDay)
class ScheduleWeekVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ScheduleWeekVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ScheduleWeekVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ScheduleWeekVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ScheduleWeekVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ScheduleWeekVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ScheduleWeekVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ScheduleWeekVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ScheduleWeekVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ScheduleWeekVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ScheduleWeekVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ScheduleWeekVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ScheduleWeekVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ScheduleWeekVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ScheduleWeekVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ScheduleWeekVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ScheduleWeekVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ScheduleWeekVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ScheduleWeekVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ScheduleWeekVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ScheduleWeekVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ScheduleWeekVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ScheduleWeekVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ScheduleWeekVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleWeekVector_swiginit(self, _openstudiomodelcore.new_ScheduleWeekVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ScheduleWeekVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ScheduleWeekVector_front(self)

    def back(self):
        return _openstudiomodelcore.ScheduleWeekVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ScheduleWeekVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ScheduleWeekVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ScheduleWeekVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ScheduleWeekVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ScheduleWeekVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleWeekVector

# Register ScheduleWeekVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleWeekVector_swigregister(ScheduleWeekVector)
class OptionalScheduleWeek(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleWeek_swiginit(self, _openstudiomodelcore.new_OptionalScheduleWeek(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalScheduleWeek_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalScheduleWeek___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalScheduleWeek___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalScheduleWeek_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalScheduleWeek_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalScheduleWeek_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalScheduleWeek_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalScheduleWeek_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalScheduleWeek_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleWeek

# Register OptionalScheduleWeek in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleWeek_swigregister(OptionalScheduleWeek)
class ScheduleYearVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ScheduleYearVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ScheduleYearVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ScheduleYearVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ScheduleYearVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ScheduleYearVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ScheduleYearVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ScheduleYearVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ScheduleYearVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ScheduleYearVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ScheduleYearVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ScheduleYearVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ScheduleYearVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ScheduleYearVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ScheduleYearVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ScheduleYearVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ScheduleYearVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ScheduleYearVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ScheduleYearVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ScheduleYearVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ScheduleYearVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ScheduleYearVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ScheduleYearVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ScheduleYearVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleYearVector_swiginit(self, _openstudiomodelcore.new_ScheduleYearVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ScheduleYearVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ScheduleYearVector_front(self)

    def back(self):
        return _openstudiomodelcore.ScheduleYearVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ScheduleYearVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ScheduleYearVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ScheduleYearVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ScheduleYearVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ScheduleYearVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleYearVector

# Register ScheduleYearVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleYearVector_swigregister(ScheduleYearVector)
class OptionalScheduleYear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleYear_swiginit(self, _openstudiomodelcore.new_OptionalScheduleYear(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalScheduleYear_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalScheduleYear___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalScheduleYear___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalScheduleYear_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalScheduleYear_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalScheduleYear_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalScheduleYear_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalScheduleYear_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalScheduleYear_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleYear

# Register OptionalScheduleYear in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleYear_swigregister(OptionalScheduleYear)
class ScheduleRuleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ScheduleRuleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ScheduleRuleVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ScheduleRuleVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ScheduleRuleVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ScheduleRuleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ScheduleRuleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ScheduleRuleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ScheduleRuleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ScheduleRuleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ScheduleRuleVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ScheduleRuleVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ScheduleRuleVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ScheduleRuleVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ScheduleRuleVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ScheduleRuleVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ScheduleRuleVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ScheduleRuleVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ScheduleRuleVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ScheduleRuleVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ScheduleRuleVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ScheduleRuleVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ScheduleRuleVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ScheduleRuleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleRuleVector_swiginit(self, _openstudiomodelcore.new_ScheduleRuleVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ScheduleRuleVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ScheduleRuleVector_front(self)

    def back(self):
        return _openstudiomodelcore.ScheduleRuleVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ScheduleRuleVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ScheduleRuleVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ScheduleRuleVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ScheduleRuleVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ScheduleRuleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleRuleVector

# Register ScheduleRuleVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleRuleVector_swigregister(ScheduleRuleVector)
class OptionalScheduleRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleRule_swiginit(self, _openstudiomodelcore.new_OptionalScheduleRule(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalScheduleRule_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalScheduleRule___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalScheduleRule___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalScheduleRule_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalScheduleRule_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalScheduleRule_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalScheduleRule_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalScheduleRule_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalScheduleRule_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleRule

# Register OptionalScheduleRule in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleRule_swigregister(OptionalScheduleRule)
class ScheduleRulesetVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ScheduleRulesetVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ScheduleRulesetVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ScheduleRulesetVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ScheduleRulesetVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ScheduleRulesetVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ScheduleRulesetVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ScheduleRulesetVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ScheduleRulesetVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ScheduleRulesetVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ScheduleRulesetVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ScheduleRulesetVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ScheduleRulesetVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ScheduleRulesetVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ScheduleRulesetVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ScheduleRulesetVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ScheduleRulesetVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ScheduleRulesetVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ScheduleRulesetVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ScheduleRulesetVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ScheduleRulesetVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ScheduleRulesetVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ScheduleRulesetVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ScheduleRulesetVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleRulesetVector_swiginit(self, _openstudiomodelcore.new_ScheduleRulesetVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ScheduleRulesetVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ScheduleRulesetVector_front(self)

    def back(self):
        return _openstudiomodelcore.ScheduleRulesetVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ScheduleRulesetVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ScheduleRulesetVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ScheduleRulesetVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ScheduleRulesetVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ScheduleRulesetVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleRulesetVector

# Register ScheduleRulesetVector in _openstudiomodelcore:
_openstudiomodelcore.ScheduleRulesetVector_swigregister(ScheduleRulesetVector)
class OptionalScheduleRuleset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalScheduleRuleset_swiginit(self, _openstudiomodelcore.new_OptionalScheduleRuleset(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalScheduleRuleset_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalScheduleRuleset___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalScheduleRuleset___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalScheduleRuleset_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalScheduleRuleset_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalScheduleRuleset_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalScheduleRuleset_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalScheduleRuleset_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalScheduleRuleset_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalScheduleRuleset

# Register OptionalScheduleRuleset in _openstudiomodelcore:
_openstudiomodelcore.OptionalScheduleRuleset_swigregister(OptionalScheduleRuleset)
class OutputVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.OutputVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.OutputVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.OutputVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.OutputVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.OutputVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.OutputVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.OutputVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.OutputVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.OutputVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.OutputVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.OutputVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.OutputVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.OutputVariableVector_empty(self)

    def size(self):
        return _openstudiomodelcore.OutputVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.OutputVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.OutputVariableVector_begin(self)

    def end(self):
        return _openstudiomodelcore.OutputVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.OutputVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.OutputVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.OutputVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.OutputVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.OutputVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.OutputVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.OutputVariableVector_swiginit(self, _openstudiomodelcore.new_OutputVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.OutputVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.OutputVariableVector_front(self)

    def back(self):
        return _openstudiomodelcore.OutputVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.OutputVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.OutputVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.OutputVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.OutputVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.OutputVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_OutputVariableVector

# Register OutputVariableVector in _openstudiomodelcore:
_openstudiomodelcore.OutputVariableVector_swigregister(OutputVariableVector)
class OptionalOutputVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalOutputVariable_swiginit(self, _openstudiomodelcore.new_OptionalOutputVariable(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalOutputVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalOutputVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalOutputVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalOutputVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalOutputVariable_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalOutputVariable_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalOutputVariable_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalOutputVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalOutputVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalOutputVariable

# Register OptionalOutputVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalOutputVariable_swigregister(OptionalOutputVariable)
class AdditionalPropertiesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.AdditionalPropertiesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.AdditionalPropertiesVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.AdditionalPropertiesVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.AdditionalPropertiesVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.AdditionalPropertiesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.AdditionalPropertiesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.AdditionalPropertiesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.AdditionalPropertiesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.AdditionalPropertiesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.AdditionalPropertiesVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.AdditionalPropertiesVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.AdditionalPropertiesVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.AdditionalPropertiesVector_empty(self)

    def size(self):
        return _openstudiomodelcore.AdditionalPropertiesVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.AdditionalPropertiesVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.AdditionalPropertiesVector_begin(self)

    def end(self):
        return _openstudiomodelcore.AdditionalPropertiesVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.AdditionalPropertiesVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.AdditionalPropertiesVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.AdditionalPropertiesVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.AdditionalPropertiesVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.AdditionalPropertiesVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.AdditionalPropertiesVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.AdditionalPropertiesVector_swiginit(self, _openstudiomodelcore.new_AdditionalPropertiesVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.AdditionalPropertiesVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.AdditionalPropertiesVector_front(self)

    def back(self):
        return _openstudiomodelcore.AdditionalPropertiesVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.AdditionalPropertiesVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.AdditionalPropertiesVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.AdditionalPropertiesVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.AdditionalPropertiesVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.AdditionalPropertiesVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_AdditionalPropertiesVector

# Register AdditionalPropertiesVector in _openstudiomodelcore:
_openstudiomodelcore.AdditionalPropertiesVector_swigregister(AdditionalPropertiesVector)
class OptionalAdditionalProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalAdditionalProperties_swiginit(self, _openstudiomodelcore.new_OptionalAdditionalProperties(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalAdditionalProperties_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalAdditionalProperties___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalAdditionalProperties___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalAdditionalProperties_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalAdditionalProperties_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalAdditionalProperties_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalAdditionalProperties_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalAdditionalProperties_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalAdditionalProperties_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalAdditionalProperties

# Register OptionalAdditionalProperties in _openstudiomodelcore:
_openstudiomodelcore.OptionalAdditionalProperties_swigregister(OptionalAdditionalProperties)
class GenericModelObjectVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.GenericModelObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.GenericModelObjectVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.GenericModelObjectVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.GenericModelObjectVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.GenericModelObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.GenericModelObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.GenericModelObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.GenericModelObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.GenericModelObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.GenericModelObjectVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.GenericModelObjectVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.GenericModelObjectVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.GenericModelObjectVector_empty(self)

    def size(self):
        return _openstudiomodelcore.GenericModelObjectVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.GenericModelObjectVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.GenericModelObjectVector_begin(self)

    def end(self):
        return _openstudiomodelcore.GenericModelObjectVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.GenericModelObjectVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.GenericModelObjectVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.GenericModelObjectVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.GenericModelObjectVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.GenericModelObjectVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.GenericModelObjectVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.GenericModelObjectVector_swiginit(self, _openstudiomodelcore.new_GenericModelObjectVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.GenericModelObjectVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.GenericModelObjectVector_front(self)

    def back(self):
        return _openstudiomodelcore.GenericModelObjectVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.GenericModelObjectVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.GenericModelObjectVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.GenericModelObjectVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.GenericModelObjectVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.GenericModelObjectVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_GenericModelObjectVector

# Register GenericModelObjectVector in _openstudiomodelcore:
_openstudiomodelcore.GenericModelObjectVector_swigregister(GenericModelObjectVector)
class OptionalGenericModelObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalGenericModelObject_swiginit(self, _openstudiomodelcore.new_OptionalGenericModelObject(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalGenericModelObject_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalGenericModelObject___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalGenericModelObject___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalGenericModelObject_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalGenericModelObject_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalGenericModelObject_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalGenericModelObject_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalGenericModelObject_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalGenericModelObject_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalGenericModelObject

# Register OptionalGenericModelObject in _openstudiomodelcore:
_openstudiomodelcore.OptionalGenericModelObject_swigregister(OptionalGenericModelObject)
class ModelObjectListVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ModelObjectListVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ModelObjectListVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ModelObjectListVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ModelObjectListVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ModelObjectListVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ModelObjectListVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ModelObjectListVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ModelObjectListVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ModelObjectListVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ModelObjectListVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ModelObjectListVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ModelObjectListVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ModelObjectListVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ModelObjectListVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ModelObjectListVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ModelObjectListVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ModelObjectListVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ModelObjectListVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ModelObjectListVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ModelObjectListVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ModelObjectListVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ModelObjectListVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ModelObjectListVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ModelObjectListVector_swiginit(self, _openstudiomodelcore.new_ModelObjectListVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ModelObjectListVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ModelObjectListVector_front(self)

    def back(self):
        return _openstudiomodelcore.ModelObjectListVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ModelObjectListVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ModelObjectListVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ModelObjectListVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ModelObjectListVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ModelObjectListVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectListVector

# Register ModelObjectListVector in _openstudiomodelcore:
_openstudiomodelcore.ModelObjectListVector_swigregister(ModelObjectListVector)
class OptionalModelObjectList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalModelObjectList_swiginit(self, _openstudiomodelcore.new_OptionalModelObjectList(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalModelObjectList_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalModelObjectList___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalModelObjectList___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalModelObjectList_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalModelObjectList_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalModelObjectList_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalModelObjectList_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalModelObjectList_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalModelObjectList_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalModelObjectList

# Register OptionalModelObjectList in _openstudiomodelcore:
_openstudiomodelcore.OptionalModelObjectList_swigregister(OptionalModelObjectList)
class EnergyManagementSystemSensorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_empty(self)

    def size(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_begin(self)

    def end(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemSensorVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemSensorVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_front(self)

    def back(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.EnergyManagementSystemSensorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemSensorVector

# Register EnergyManagementSystemSensorVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemSensorVector_swigregister(EnergyManagementSystemSensorVector)
class OptionalEnergyManagementSystemSensor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemSensor_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemSensor(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSensor_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemSensor

# Register OptionalEnergyManagementSystemSensor in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemSensor_swigregister(OptionalEnergyManagementSystemSensor)
class EnergyManagementSystemActuatorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_empty(self)

    def size(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_begin(self)

    def end(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemActuatorVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemActuatorVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_front(self)

    def back(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.EnergyManagementSystemActuatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemActuatorVector

# Register EnergyManagementSystemActuatorVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemActuatorVector_swigregister(EnergyManagementSystemActuatorVector)
class OptionalEnergyManagementSystemActuator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemActuator_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemActuator(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalEnergyManagementSystemActuator_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemActuator

# Register OptionalEnergyManagementSystemActuator in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemActuator_swigregister(OptionalEnergyManagementSystemActuator)
class EnergyManagementSystemConstructionIndexVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_empty(self)

    def size(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_begin(self)

    def end(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemConstructionIndexVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_front(self)

    def back(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemConstructionIndexVariableVector

# Register EnergyManagementSystemConstructionIndexVariableVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemConstructionIndexVariableVector_swigregister(EnergyManagementSystemConstructionIndexVariableVector)
class OptionalEnergyManagementSystemConstructionIndexVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemConstructionIndexVariable(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemConstructionIndexVariable

# Register OptionalEnergyManagementSystemConstructionIndexVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemConstructionIndexVariable_swigregister(OptionalEnergyManagementSystemConstructionIndexVariable)
class EnergyManagementSystemCurveOrTableIndexVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_empty(self)

    def size(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_begin(self)

    def end(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemCurveOrTableIndexVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_front(self)

    def back(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemCurveOrTableIndexVariableVector

# Register EnergyManagementSystemCurveOrTableIndexVariableVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariableVector_swigregister(EnergyManagementSystemCurveOrTableIndexVariableVector)
class OptionalEnergyManagementSystemCurveOrTableIndexVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemCurveOrTableIndexVariable(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemCurveOrTableIndexVariable

# Register OptionalEnergyManagementSystemCurveOrTableIndexVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemCurveOrTableIndexVariable_swigregister(OptionalEnergyManagementSystemCurveOrTableIndexVariable)
class EnergyManagementSystemGlobalVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_empty(self)

    def size(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_begin(self)

    def end(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemGlobalVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_front(self)

    def back(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemGlobalVariableVector

# Register EnergyManagementSystemGlobalVariableVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemGlobalVariableVector_swigregister(EnergyManagementSystemGlobalVariableVector)
class OptionalEnergyManagementSystemGlobalVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemGlobalVariable(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemGlobalVariable

# Register OptionalEnergyManagementSystemGlobalVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemGlobalVariable_swigregister(OptionalEnergyManagementSystemGlobalVariable)
class EnergyManagementSystemInternalVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_empty(self)

    def size(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_begin(self)

    def end(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemInternalVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_front(self)

    def back(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemInternalVariableVector

# Register EnergyManagementSystemInternalVariableVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemInternalVariableVector_swigregister(EnergyManagementSystemInternalVariableVector)
class OptionalEnergyManagementSystemInternalVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemInternalVariable(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemInternalVariable

# Register OptionalEnergyManagementSystemInternalVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemInternalVariable_swigregister(OptionalEnergyManagementSystemInternalVariable)
class EnergyManagementSystemTrendVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_empty(self)

    def size(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_begin(self)

    def end(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemTrendVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_front(self)

    def back(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemTrendVariableVector

# Register EnergyManagementSystemTrendVariableVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemTrendVariableVector_swigregister(EnergyManagementSystemTrendVariableVector)
class OptionalEnergyManagementSystemTrendVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemTrendVariable(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemTrendVariable

# Register OptionalEnergyManagementSystemTrendVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemTrendVariable_swigregister(OptionalEnergyManagementSystemTrendVariable)
class EnergyManagementSystemSubroutineVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_empty(self)

    def size(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_begin(self)

    def end(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemSubroutineVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemSubroutineVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_front(self)

    def back(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutineVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemSubroutineVector

# Register EnergyManagementSystemSubroutineVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemSubroutineVector_swigregister(EnergyManagementSystemSubroutineVector)
class OptionalEnergyManagementSystemSubroutine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemSubroutine(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemSubroutine

# Register OptionalEnergyManagementSystemSubroutine in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemSubroutine_swigregister(OptionalEnergyManagementSystemSubroutine)
class EnergyManagementSystemProgramVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_empty(self)

    def size(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_begin(self)

    def end(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemProgramVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemProgramVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_front(self)

    def back(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemProgramVector

# Register EnergyManagementSystemProgramVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemProgramVector_swigregister(EnergyManagementSystemProgramVector)
class OptionalEnergyManagementSystemProgram(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemProgram_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemProgram(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgram_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemProgram

# Register OptionalEnergyManagementSystemProgram in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemProgram_swigregister(OptionalEnergyManagementSystemProgram)
class EnergyManagementSystemProgramCallingManagerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_empty(self)

    def size(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_begin(self)

    def end(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemProgramCallingManagerVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_front(self)

    def back(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemProgramCallingManagerVector

# Register EnergyManagementSystemProgramCallingManagerVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemProgramCallingManagerVector_swigregister(EnergyManagementSystemProgramCallingManagerVector)
class OptionalEnergyManagementSystemProgramCallingManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemProgramCallingManager(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemProgramCallingManager

# Register OptionalEnergyManagementSystemProgramCallingManager in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemProgramCallingManager_swigregister(OptionalEnergyManagementSystemProgramCallingManager)
class EnergyManagementSystemOutputVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_empty(self)

    def size(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_begin(self)

    def end(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemOutputVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_front(self)

    def back(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemOutputVariableVector

# Register EnergyManagementSystemOutputVariableVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemOutputVariableVector_swigregister(EnergyManagementSystemOutputVariableVector)
class OptionalEnergyManagementSystemOutputVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemOutputVariable(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemOutputVariable

# Register OptionalEnergyManagementSystemOutputVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemOutputVariable_swigregister(OptionalEnergyManagementSystemOutputVariable)
class EnergyManagementSystemMeteredOutputVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_empty(self)

    def size(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_begin(self)

    def end(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemMeteredOutputVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_front(self)

    def back(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemMeteredOutputVariableVector

# Register EnergyManagementSystemMeteredOutputVariableVector in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemMeteredOutputVariableVector_swigregister(EnergyManagementSystemMeteredOutputVariableVector)
class OptionalEnergyManagementSystemMeteredOutputVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_swiginit(self, _openstudiomodelcore.new_OptionalEnergyManagementSystemMeteredOutputVariable(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalEnergyManagementSystemMeteredOutputVariable

# Register OptionalEnergyManagementSystemMeteredOutputVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalEnergyManagementSystemMeteredOutputVariable_swigregister(OptionalEnergyManagementSystemMeteredOutputVariable)
class OptionalOutputEnergyManagementSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalOutputEnergyManagementSystem_swiginit(self, _openstudiomodelcore.new_OptionalOutputEnergyManagementSystem(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalOutputEnergyManagementSystem_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalOutputEnergyManagementSystem

# Register OptionalOutputEnergyManagementSystem in _openstudiomodelcore:
_openstudiomodelcore.OptionalOutputEnergyManagementSystem_swigregister(OptionalOutputEnergyManagementSystem)
class OptionalExternalInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterface_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterface(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalExternalInterface_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalExternalInterface___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalExternalInterface___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalExternalInterface_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalExternalInterface_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalExternalInterface_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalExternalInterface_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalExternalInterface_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalExternalInterface_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterface

# Register OptionalExternalInterface in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterface_swigregister(OptionalExternalInterface)
class ExternalInterfaceActuatorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceActuatorVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceActuatorVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_front(self)

    def back(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ExternalInterfaceActuatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceActuatorVector

# Register ExternalInterfaceActuatorVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceActuatorVector_swigregister(ExternalInterfaceActuatorVector)
class OptionalExternalInterfaceActuator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceActuator_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceActuator(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceActuator___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceActuator___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalExternalInterfaceActuator_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceActuator

# Register OptionalExternalInterfaceActuator in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceActuator_swigregister(OptionalExternalInterfaceActuator)
class ExternalInterfaceFunctionalMockupUnitExportFromVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportFromVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_front(self)

    def back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportFromVariableVector

# Register ExternalInterfaceFunctionalMockupUnitExportFromVariableVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariableVector_swigregister(ExternalInterfaceFunctionalMockupUnitExportFromVariableVector)
class OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable

# Register OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable_swigregister(OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable)
class ExternalInterfaceFunctionalMockupUnitExportToActuatorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToActuatorVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_front(self)

    def back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToActuatorVector

# Register ExternalInterfaceFunctionalMockupUnitExportToActuatorVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuatorVector_swigregister(ExternalInterfaceFunctionalMockupUnitExportToActuatorVector)
class OptionalExternalInterfaceFunctionalMockupUnitExportToActuator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitExportToActuator(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitExportToActuator

# Register OptionalExternalInterfaceFunctionalMockupUnitExportToActuator in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToActuator_swigregister(OptionalExternalInterfaceFunctionalMockupUnitExportToActuator)
class ExternalInterfaceFunctionalMockupUnitExportToScheduleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToScheduleVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_front(self)

    def back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToScheduleVector

# Register ExternalInterfaceFunctionalMockupUnitExportToScheduleVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToScheduleVector_swigregister(ExternalInterfaceFunctionalMockupUnitExportToScheduleVector)
class OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule

# Register OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule_swigregister(OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule)
class ExternalInterfaceFunctionalMockupUnitExportToVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_front(self)

    def back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToVariableVector

# Register ExternalInterfaceFunctionalMockupUnitExportToVariableVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariableVector_swigregister(ExternalInterfaceFunctionalMockupUnitExportToVariableVector)
class OptionalExternalInterfaceFunctionalMockupUnitExportToVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitExportToVariable(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitExportToVariable

# Register OptionalExternalInterfaceFunctionalMockupUnitExportToVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitExportToVariable_swigregister(OptionalExternalInterfaceFunctionalMockupUnitExportToVariable)
class ExternalInterfaceFunctionalMockupUnitImportVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_front(self)

    def back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportVector

# Register ExternalInterfaceFunctionalMockupUnitImportVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportVector)
class OptionalExternalInterfaceFunctionalMockupUnitImport(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImport(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImport

# Register OptionalExternalInterfaceFunctionalMockupUnitImport in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImport_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImport)
class ExternalInterfaceFunctionalMockupUnitImportFromVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportFromVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_front(self)

    def back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportFromVariableVector

# Register ExternalInterfaceFunctionalMockupUnitImportFromVariableVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariableVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportFromVariableVector)
class OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable

# Register OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable)
class ExternalInterfaceFunctionalMockupUnitImportToActuatorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToActuatorVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_front(self)

    def back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToActuatorVector

# Register ExternalInterfaceFunctionalMockupUnitImportToActuatorVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuatorVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportToActuatorVector)
class OptionalExternalInterfaceFunctionalMockupUnitImportToActuator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImportToActuator(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImportToActuator

# Register OptionalExternalInterfaceFunctionalMockupUnitImportToActuator in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToActuator_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImportToActuator)
class ExternalInterfaceFunctionalMockupUnitImportToScheduleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToScheduleVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_front(self)

    def back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToScheduleVector

# Register ExternalInterfaceFunctionalMockupUnitImportToScheduleVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToScheduleVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportToScheduleVector)
class OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule

# Register OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule)
class ExternalInterfaceFunctionalMockupUnitImportToVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_front(self)

    def back(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToVariableVector

# Register ExternalInterfaceFunctionalMockupUnitImportToVariableVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariableVector_swigregister(ExternalInterfaceFunctionalMockupUnitImportToVariableVector)
class OptionalExternalInterfaceFunctionalMockupUnitImportToVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceFunctionalMockupUnitImportToVariable(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceFunctionalMockupUnitImportToVariable

# Register OptionalExternalInterfaceFunctionalMockupUnitImportToVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceFunctionalMockupUnitImportToVariable_swigregister(OptionalExternalInterfaceFunctionalMockupUnitImportToVariable)
class ExternalInterfaceScheduleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceScheduleVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceScheduleVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_front(self)

    def back(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ExternalInterfaceScheduleVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceScheduleVector

# Register ExternalInterfaceScheduleVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceScheduleVector_swigregister(ExternalInterfaceScheduleVector)
class OptionalExternalInterfaceSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceSchedule_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceSchedule(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalExternalInterfaceSchedule_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceSchedule

# Register OptionalExternalInterfaceSchedule in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceSchedule_swigregister(OptionalExternalInterfaceSchedule)
class ExternalInterfaceVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector___nonzero__(self)

    def __bool__(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector___bool__(self)

    def __len__(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _openstudiomodelcore.ExternalInterfaceVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _openstudiomodelcore.ExternalInterfaceVariableVector___setitem__(self, *args)

    def pop(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_pop(self)

    def append(self, x):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_append(self, x)

    def empty(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_empty(self)

    def size(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_size(self)

    def swap(self, v):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_swap(self, v)

    def begin(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_begin(self)

    def end(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_end(self)

    def rbegin(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_rbegin(self)

    def rend(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_rend(self)

    def clear(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_clear(self)

    def get_allocator(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_get_allocator(self)

    def pop_back(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_pop_back(self)

    def erase(self, *args):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_erase(self, *args)

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceVariableVector_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceVariableVector(*args))

    def push_back(self, x):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_push_back(self, x)

    def front(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_front(self)

    def back(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_back(self)

    def assign(self, n, x):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_assign(self, n, x)

    def resize(self, new_size, x):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_resize(self, new_size, x)

    def insert(self, *args):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_insert(self, *args)

    def reserve(self, n):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_reserve(self, n)

    def capacity(self):
        return _openstudiomodelcore.ExternalInterfaceVariableVector_capacity(self)
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceVariableVector

# Register ExternalInterfaceVariableVector in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceVariableVector_swigregister(ExternalInterfaceVariableVector)
class OptionalExternalInterfaceVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openstudiomodelcore.OptionalExternalInterfaceVariable_swiginit(self, _openstudiomodelcore.new_OptionalExternalInterfaceVariable(*args))

    def reset(self):
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_reset(self)

    def __nonzero__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceVariable___nonzero__(self)
    __bool__ = __nonzero__



    def __ref__(self):
        return _openstudiomodelcore.OptionalExternalInterfaceVariable___ref__(self)

    def is_initialized(self):
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_is_initialized(self)

    def isNull(self):
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_isNull(self)

    def empty(self):
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_empty(self)

    def get(self):
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_get(self)

    def set(self, t):
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_set(self, t)

    def value_or(self, default_value):
        return _openstudiomodelcore.OptionalExternalInterfaceVariable_value_or(self, default_value)
    __swig_destroy__ = _openstudiomodelcore.delete_OptionalExternalInterfaceVariable

# Register OptionalExternalInterfaceVariable in _openstudiomodelcore:
_openstudiomodelcore.OptionalExternalInterfaceVariable_swigregister(OptionalExternalInterfaceVariable)

def toModelObject(idfObject):
    return _openstudiomodelcore.toModelObject(idfObject)

def getModelObject(t_model, t_handle):
    return _openstudiomodelcore.getModelObject(t_model, t_handle)

def getModelObjects(t_model):
    return _openstudiomodelcore.getModelObjects(t_model)

def getModelObjectByName(t_model, t_name):
    return _openstudiomodelcore.getModelObjectByName(t_model, t_name)

def getModelObjectsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getModelObjectsByName(t_model, t_name, t_exactMatch)

def _to_ModelObject(self) -> OptionalModelObject:
    """Try to cast the ModelObject to a ModelObject.

    :return: An Optional ModelObject.
    """
    return toModelObject(self)
openstudioutilitiesidf.IdfObject.to_ModelObject = _to_ModelObject

def _getModelObject(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalModelObject:
    """Try to get an object of type ModelObject referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ModelObject.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getModelObject(self, t_handle)
Model.getModelObject = _getModelObject

def _getModelObjects(self) -> ModelObjectVector:
    """Get a vector of all objects of type ModelObject in the model.

    :return: A vector of ModelObject.
    """
    return getModelObjects(self)
Model.getModelObjects = _getModelObjects

def _getModelObjectByName(self, t_name: str) -> OptionalModelObject:
    """Try to get an object of type ModelObject that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ModelObject.
    """
    return getModelObjectByName(self, t_name)
Model.getModelObjectByName = _getModelObjectByName

def _getModelObjectsByName(self, t_name: str, t_exactMatch: bool) -> ModelObjectVector:
    """Returns all objects of type ModelObject named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getModelObjectsByName(self, t_name, t_exactMatch)
Model.getModelObjectsByName = _getModelObjectsByName


def toModelExtensibleGroup(extensibleGroup):
    return _openstudiomodelcore.toModelExtensibleGroup(extensibleGroup)

def _to_ModelExtensibleGroup(self) -> OptionalModelExtensibleGroup:
    return toModelExtensibleGroup(self)
openstudioutilitiesidf.IdfExtensibleGroup.to_ModelExtensibleGroup = _to_ModelExtensibleGroup

class ParentObject(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ParentObject

    def __init__(self, *args):
        _openstudiomodelcore.ParentObject_swiginit(self, _openstudiomodelcore.new_ParentObject(*args))

    def children(self):
        return _openstudiomodelcore.ParentObject_children(self)

    def allowableChildTypes(self):
        return _openstudiomodelcore.ParentObject_allowableChildTypes(self)

# Register ParentObject in _openstudiomodelcore:
_openstudiomodelcore.ParentObject_swigregister(ParentObject)

def getRecursiveChildren(object, includeLifeCycleCostsAndAdditionalProperties=False, includeUsedResources=True):
    return _openstudiomodelcore.getRecursiveChildren(object, includeLifeCycleCostsAndAdditionalProperties, includeUsedResources)

def getRecursiveChildrenAndResources(object):
    return _openstudiomodelcore.getRecursiveChildrenAndResources(object)

def toParentObject(idfObject):
    return _openstudiomodelcore.toParentObject(idfObject)

def getParentObject(t_model, t_handle):
    return _openstudiomodelcore.getParentObject(t_model, t_handle)

def getParentObjects(t_model):
    return _openstudiomodelcore.getParentObjects(t_model)

def getParentObjectByName(t_model, t_name):
    return _openstudiomodelcore.getParentObjectByName(t_model, t_name)

def getParentObjectsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getParentObjectsByName(t_model, t_name, t_exactMatch)

def _to_ParentObject(self) -> OptionalParentObject:
    """Try to cast the ModelObject to a ParentObject.

    :return: An Optional ParentObject.
    """
    return toParentObject(self)
openstudioutilitiesidf.IdfObject.to_ParentObject = _to_ParentObject

def _getParentObject(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalParentObject:
    """Try to get an object of type ParentObject referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ParentObject.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getParentObject(self, t_handle)
Model.getParentObject = _getParentObject

def _getParentObjects(self) -> ParentObjectVector:
    """Get a vector of all objects of type ParentObject in the model.

    :return: A vector of ParentObject.
    """
    return getParentObjects(self)
Model.getParentObjects = _getParentObjects

def _getParentObjectByName(self, t_name: str) -> OptionalParentObject:
    """Try to get an object of type ParentObject that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ParentObject.
    """
    return getParentObjectByName(self, t_name)
Model.getParentObjectByName = _getParentObjectByName

def _getParentObjectsByName(self, t_name: str, t_exactMatch: bool) -> ParentObjectVector:
    """Returns all objects of type ParentObject named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getParentObjectsByName(self, t_name, t_exactMatch)
Model.getParentObjectsByName = _getParentObjectsByName

class ResourceObject(ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def directUseCount(self, excludeChildren=False):
        return _openstudiomodelcore.ResourceObject_directUseCount(self, excludeChildren)

    def nonResourceObjectUseCount(self, excludeChildren=False):
        return _openstudiomodelcore.ResourceObject_nonResourceObjectUseCount(self, excludeChildren)
    __swig_destroy__ = _openstudiomodelcore.delete_ResourceObject

    def __init__(self, *args):
        _openstudiomodelcore.ResourceObject_swiginit(self, _openstudiomodelcore.new_ResourceObject(*args))

# Register ResourceObject in _openstudiomodelcore:
_openstudiomodelcore.ResourceObject_swigregister(ResourceObject)

def getRecursiveResources(object):
    return _openstudiomodelcore.getRecursiveResources(object)

def getRecursiveResourceSubTrees(object, includeComponentCostLineItems=False):
    return _openstudiomodelcore.getRecursiveResourceSubTrees(object, includeComponentCostLineItems)

def toResourceObject(idfObject):
    return _openstudiomodelcore.toResourceObject(idfObject)

def getResourceObject(t_model, t_handle):
    return _openstudiomodelcore.getResourceObject(t_model, t_handle)

def getResourceObjects(t_model):
    return _openstudiomodelcore.getResourceObjects(t_model)

def getResourceObjectByName(t_model, t_name):
    return _openstudiomodelcore.getResourceObjectByName(t_model, t_name)

def getResourceObjectsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getResourceObjectsByName(t_model, t_name, t_exactMatch)

def _to_ResourceObject(self) -> OptionalResourceObject:
    """Try to cast the ModelObject to a ResourceObject.

    :return: An Optional ResourceObject.
    """
    return toResourceObject(self)
openstudioutilitiesidf.IdfObject.to_ResourceObject = _to_ResourceObject

def _getResourceObject(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalResourceObject:
    """Try to get an object of type ResourceObject referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ResourceObject.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getResourceObject(self, t_handle)
Model.getResourceObject = _getResourceObject

def _getResourceObjects(self) -> ResourceObjectVector:
    """Get a vector of all objects of type ResourceObject in the model.

    :return: A vector of ResourceObject.
    """
    return getResourceObjects(self)
Model.getResourceObjects = _getResourceObjects

def _getResourceObjectByName(self, t_name: str) -> OptionalResourceObject:
    """Try to get an object of type ResourceObject that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ResourceObject.
    """
    return getResourceObjectByName(self, t_name)
Model.getResourceObjectByName = _getResourceObjectByName

def _getResourceObjectsByName(self, t_name: str, t_exactMatch: bool) -> ResourceObjectVector:
    """Returns all objects of type ResourceObject named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getResourceObjectsByName(self, t_name, t_exactMatch)
Model.getResourceObjectsByName = _getResourceObjectsByName

class Version(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_Version

    def __init__(self, *args):
        _openstudiomodelcore.Version_swiginit(self, _openstudiomodelcore.new_Version(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.Version_iddObjectType()

    def versionIdentifier(self):
        return _openstudiomodelcore.Version_versionIdentifier(self)

    def prereleaseIdentifier(self):
        return _openstudiomodelcore.Version_prereleaseIdentifier(self)

# Register Version in _openstudiomodelcore:
_openstudiomodelcore.Version_swigregister(Version)

def toVersion(idfObject):
    return _openstudiomodelcore.toVersion(idfObject)

def getVersion(t_model):
    return _openstudiomodelcore.getVersion(t_model)

def getOptionalVersion(t_model):
    return _openstudiomodelcore.getOptionalVersion(t_model)

def _to_Version(self) -> OptionalVersion:
    """Try to cast the ModelObject to a Version.

    :return: An Optional Version.
    """
    return toVersion(self)
openstudioutilitiesidf.IdfObject.to_Version = _to_Version

def _getVersion(self) -> Version:
    """Get or instantiate a UniqueModelObject of type Version.

    :return: An existing Version or a newly instantiated one.
    """
    return getVersion(self)
Model.getVersion = _getVersion

def _getOptionalVersion(self) -> OptionalVersion:
    """Return a UniqueModelObject of type Version only if it's already present in the Model.

    :return: An Optional Version.
    """
    return getOptionalVersion(self)
Model.getOptionalVersion = _getOptionalVersion

class LifeCycleCostParameters(ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_LifeCycleCostParameters

    def __init__(self, *args):
        _openstudiomodelcore.LifeCycleCostParameters_swiginit(self, _openstudiomodelcore.new_LifeCycleCostParameters(*args))

    @staticmethod
    def nistYear():
        return _openstudiomodelcore.LifeCycleCostParameters_nistYear()

    @staticmethod
    def fempRealDiscountRate():
        return _openstudiomodelcore.LifeCycleCostParameters_fempRealDiscountRate()

    @staticmethod
    def fempNominalDiscountRate():
        return _openstudiomodelcore.LifeCycleCostParameters_fempNominalDiscountRate()

    @staticmethod
    def fempInflation():
        return _openstudiomodelcore.LifeCycleCostParameters_fempInflation()

    def analysisType(self):
        return _openstudiomodelcore.LifeCycleCostParameters_analysisType(self)

    def isAnalysisTypeDefaulted(self):
        return _openstudiomodelcore.LifeCycleCostParameters_isAnalysisTypeDefaulted(self)

    def isFEMPAnalysis(self):
        return _openstudiomodelcore.LifeCycleCostParameters_isFEMPAnalysis(self)

    def discountingConvention(self):
        return _openstudiomodelcore.LifeCycleCostParameters_discountingConvention(self)

    def isDiscountingConventionDefaulted(self):
        return _openstudiomodelcore.LifeCycleCostParameters_isDiscountingConventionDefaulted(self)

    def inflationApproach(self):
        return _openstudiomodelcore.LifeCycleCostParameters_inflationApproach(self)

    def isInflationApproachDefaulted(self):
        return _openstudiomodelcore.LifeCycleCostParameters_isInflationApproachDefaulted(self)

    def isConstantDollarAnalysis(self):
        return _openstudiomodelcore.LifeCycleCostParameters_isConstantDollarAnalysis(self)

    def realDiscountRate(self):
        return _openstudiomodelcore.LifeCycleCostParameters_realDiscountRate(self)

    def nominalDiscountRate(self):
        return _openstudiomodelcore.LifeCycleCostParameters_nominalDiscountRate(self)

    def inflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_inflation(self)

    def baseDateMonth(self):
        return _openstudiomodelcore.LifeCycleCostParameters_baseDateMonth(self)

    def isBaseDateMonthDefaulted(self):
        return _openstudiomodelcore.LifeCycleCostParameters_isBaseDateMonthDefaulted(self)

    def baseDateYear(self):
        return _openstudiomodelcore.LifeCycleCostParameters_baseDateYear(self)

    def isBaseDateYearDefaulted(self):
        return _openstudiomodelcore.LifeCycleCostParameters_isBaseDateYearDefaulted(self)

    def serviceDateMonth(self):
        return _openstudiomodelcore.LifeCycleCostParameters_serviceDateMonth(self)

    def isServiceDateMonthDefaulted(self):
        return _openstudiomodelcore.LifeCycleCostParameters_isServiceDateMonthDefaulted(self)

    def serviceDateYear(self):
        return _openstudiomodelcore.LifeCycleCostParameters_serviceDateYear(self)

    def isServiceDateYearDefaulted(self):
        return _openstudiomodelcore.LifeCycleCostParameters_isServiceDateYearDefaulted(self)

    def lengthOfStudyPeriodInYears(self):
        return _openstudiomodelcore.LifeCycleCostParameters_lengthOfStudyPeriodInYears(self)

    def isLengthOfStudyPeriodInYearsDefaulted(self):
        return _openstudiomodelcore.LifeCycleCostParameters_isLengthOfStudyPeriodInYearsDefaulted(self)

    def taxRate(self):
        return _openstudiomodelcore.LifeCycleCostParameters_taxRate(self)

    def depreciationMethod(self):
        return _openstudiomodelcore.LifeCycleCostParameters_depreciationMethod(self)

    def isDepreciationMethodDefaulted(self):
        return _openstudiomodelcore.LifeCycleCostParameters_isDepreciationMethodDefaulted(self)

    def useNISTFuelEscalationRates(self):
        return _openstudiomodelcore.LifeCycleCostParameters_useNISTFuelEscalationRates(self)

    def isUseNISTFuelEscalationRatesDefaulted(self):
        return _openstudiomodelcore.LifeCycleCostParameters_isUseNISTFuelEscalationRatesDefaulted(self)

    def nistRegion(self):
        return _openstudiomodelcore.LifeCycleCostParameters_nistRegion(self)

    def validNistRegionValues(self):
        return _openstudiomodelcore.LifeCycleCostParameters_validNistRegionValues(self)

    def isNISTRegionDefaulted(self):
        return _openstudiomodelcore.LifeCycleCostParameters_isNISTRegionDefaulted(self)

    def nistSector(self):
        return _openstudiomodelcore.LifeCycleCostParameters_nistSector(self)

    def validNistSectorValues(self):
        return _openstudiomodelcore.LifeCycleCostParameters_validNistSectorValues(self)

    def isNISTSectorDefaulted(self):
        return _openstudiomodelcore.LifeCycleCostParameters_isNISTSectorDefaulted(self)

    def electricityInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_electricityInflation(self)

    def naturalGasInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_naturalGasInflation(self)

    def steamInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_steamInflation(self)

    def gasolineInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_gasolineInflation(self)

    def dieselInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_dieselInflation(self)

    def coalInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_coalInflation(self)

    def fuelOil1Inflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_fuelOil1Inflation(self)

    def fuelOil2Inflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_fuelOil2Inflation(self)

    def propaneInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_propaneInflation(self)

    def waterInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_waterInflation(self)

    def otherFuel1Inflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_otherFuel1Inflation(self)

    def otherFuel2Inflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_otherFuel2Inflation(self)

    def setAnalysisType(self, analysisType):
        return _openstudiomodelcore.LifeCycleCostParameters_setAnalysisType(self, analysisType)

    def resetAnalysisType(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetAnalysisType(self)

    def setDiscountingConvention(self, discountingConvention):
        return _openstudiomodelcore.LifeCycleCostParameters_setDiscountingConvention(self, discountingConvention)

    def resetDiscountingConvention(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetDiscountingConvention(self)

    def setInflationApproach(self, inflationApproach):
        return _openstudiomodelcore.LifeCycleCostParameters_setInflationApproach(self, inflationApproach)

    def resetInflationApproach(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetInflationApproach(self)

    def setRealDiscountRate(self, realDiscountRate):
        return _openstudiomodelcore.LifeCycleCostParameters_setRealDiscountRate(self, realDiscountRate)

    def setNominalDiscountRate(self, nominalDiscountRate):
        return _openstudiomodelcore.LifeCycleCostParameters_setNominalDiscountRate(self, nominalDiscountRate)

    def setInflation(self, inflation):
        return _openstudiomodelcore.LifeCycleCostParameters_setInflation(self, inflation)

    def setBaseDateMonth(self, baseDateMonth):
        return _openstudiomodelcore.LifeCycleCostParameters_setBaseDateMonth(self, baseDateMonth)

    def resetBaseDateMonth(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetBaseDateMonth(self)

    def setBaseDateYear(self, baseDateYear):
        return _openstudiomodelcore.LifeCycleCostParameters_setBaseDateYear(self, baseDateYear)

    def resetBaseDateYear(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetBaseDateYear(self)

    def setServiceDateMonth(self, serviceDateMonth):
        return _openstudiomodelcore.LifeCycleCostParameters_setServiceDateMonth(self, serviceDateMonth)

    def resetServiceDateMonth(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetServiceDateMonth(self)

    def setServiceDateYear(self, serviceDateYear):
        return _openstudiomodelcore.LifeCycleCostParameters_setServiceDateYear(self, serviceDateYear)

    def resetServiceDateYear(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetServiceDateYear(self)

    def setLengthOfStudyPeriodInYears(self, lengthOfStudyPeriodInYears):
        return _openstudiomodelcore.LifeCycleCostParameters_setLengthOfStudyPeriodInYears(self, lengthOfStudyPeriodInYears)

    def resetLengthOfStudyPeriodInYears(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetLengthOfStudyPeriodInYears(self)

    def setTaxRate(self, taxRate):
        return _openstudiomodelcore.LifeCycleCostParameters_setTaxRate(self, taxRate)

    def resetTaxRate(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetTaxRate(self)

    def setDepreciationMethod(self, depreciationMethod):
        return _openstudiomodelcore.LifeCycleCostParameters_setDepreciationMethod(self, depreciationMethod)

    def resetDepreciationMethod(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetDepreciationMethod(self)

    def setUseNISTFuelEscalationRates(self, useNISTFuelEscalationRates):
        return _openstudiomodelcore.LifeCycleCostParameters_setUseNISTFuelEscalationRates(self, useNISTFuelEscalationRates)

    def resetUseNISTFuelEscalationRates(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetUseNISTFuelEscalationRates(self)

    def setNISTRegion(self, nistRegion):
        return _openstudiomodelcore.LifeCycleCostParameters_setNISTRegion(self, nistRegion)

    def resetNISTRegion(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetNISTRegion(self)

    def setNISTSector(self, nistSector):
        return _openstudiomodelcore.LifeCycleCostParameters_setNISTSector(self, nistSector)

    def resetNISTSector(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetNISTSector(self)

    def setElectricityInflation(self, electricityInflation):
        return _openstudiomodelcore.LifeCycleCostParameters_setElectricityInflation(self, electricityInflation)

    def resetElectricityInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetElectricityInflation(self)

    def setNaturalGasInflation(self, naturalGasInflation):
        return _openstudiomodelcore.LifeCycleCostParameters_setNaturalGasInflation(self, naturalGasInflation)

    def resetNaturalGasInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetNaturalGasInflation(self)

    def setSteamInflation(self, steamInflation):
        return _openstudiomodelcore.LifeCycleCostParameters_setSteamInflation(self, steamInflation)

    def resetSteamInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetSteamInflation(self)

    def setGasolineInflation(self, gasolineInflation):
        return _openstudiomodelcore.LifeCycleCostParameters_setGasolineInflation(self, gasolineInflation)

    def resetGasolineInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetGasolineInflation(self)

    def setDieselInflation(self, dieselInflation):
        return _openstudiomodelcore.LifeCycleCostParameters_setDieselInflation(self, dieselInflation)

    def resetDieselInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetDieselInflation(self)

    def setCoalInflation(self, coalInflation):
        return _openstudiomodelcore.LifeCycleCostParameters_setCoalInflation(self, coalInflation)

    def resetCoalInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetCoalInflation(self)

    def setFuelOil1Inflation(self, fuelOil1Inflation):
        return _openstudiomodelcore.LifeCycleCostParameters_setFuelOil1Inflation(self, fuelOil1Inflation)

    def resetFuelOil1Inflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetFuelOil1Inflation(self)

    def setFuelOil2Inflation(self, fuelOil2Inflation):
        return _openstudiomodelcore.LifeCycleCostParameters_setFuelOil2Inflation(self, fuelOil2Inflation)

    def resetFuelOil2Inflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetFuelOil2Inflation(self)

    def setPropaneInflation(self, propaneInflation):
        return _openstudiomodelcore.LifeCycleCostParameters_setPropaneInflation(self, propaneInflation)

    def resetPropaneInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetPropaneInflation(self)

    def setWaterInflation(self, waterInflation):
        return _openstudiomodelcore.LifeCycleCostParameters_setWaterInflation(self, waterInflation)

    def resetWaterInflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetWaterInflation(self)

    def setOtherFuel1Inflation(self, otherFuel1Inflation):
        return _openstudiomodelcore.LifeCycleCostParameters_setOtherFuel1Inflation(self, otherFuel1Inflation)

    def resetOtherFuel1Inflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetOtherFuel1Inflation(self)

    def setOtherFuel2Inflation(self, otherFuel2Inflation):
        return _openstudiomodelcore.LifeCycleCostParameters_setOtherFuel2Inflation(self, otherFuel2Inflation)

    def resetOtherFuel2Inflation(self):
        return _openstudiomodelcore.LifeCycleCostParameters_resetOtherFuel2Inflation(self)

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.LifeCycleCostParameters_iddObjectType()

    @staticmethod
    def validAnalysisTypeValues():
        return _openstudiomodelcore.LifeCycleCostParameters_validAnalysisTypeValues()

    @staticmethod
    def validDiscountingConventionValues():
        return _openstudiomodelcore.LifeCycleCostParameters_validDiscountingConventionValues()

    @staticmethod
    def validInflationApproachValues():
        return _openstudiomodelcore.LifeCycleCostParameters_validInflationApproachValues()

    @staticmethod
    def validDepreciationMethodValues():
        return _openstudiomodelcore.LifeCycleCostParameters_validDepreciationMethodValues()

# Register LifeCycleCostParameters in _openstudiomodelcore:
_openstudiomodelcore.LifeCycleCostParameters_swigregister(LifeCycleCostParameters)

def toLifeCycleCostParameters(idfObject):
    return _openstudiomodelcore.toLifeCycleCostParameters(idfObject)

def getLifeCycleCostParameters(t_model):
    return _openstudiomodelcore.getLifeCycleCostParameters(t_model)

def getOptionalLifeCycleCostParameters(t_model):
    return _openstudiomodelcore.getOptionalLifeCycleCostParameters(t_model)

def _to_LifeCycleCostParameters(self) -> OptionalLifeCycleCostParameters:
    """Try to cast the ModelObject to a LifeCycleCostParameters.

    :return: An Optional LifeCycleCostParameters.
    """
    return toLifeCycleCostParameters(self)
openstudioutilitiesidf.IdfObject.to_LifeCycleCostParameters = _to_LifeCycleCostParameters

def _getLifeCycleCostParameters(self) -> LifeCycleCostParameters:
    """Get or instantiate a UniqueModelObject of type LifeCycleCostParameters.

    :return: An existing LifeCycleCostParameters or a newly instantiated one.
    """
    return getLifeCycleCostParameters(self)
Model.getLifeCycleCostParameters = _getLifeCycleCostParameters

def _getOptionalLifeCycleCostParameters(self) -> OptionalLifeCycleCostParameters:
    """Return a UniqueModelObject of type LifeCycleCostParameters only if it's already present in the Model.

    :return: An Optional LifeCycleCostParameters.
    """
    return getOptionalLifeCycleCostParameters(self)
Model.getOptionalLifeCycleCostParameters = _getOptionalLifeCycleCostParameters

class RadianceParameters(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_RadianceParameters

    def __init__(self, *args):
        _openstudiomodelcore.RadianceParameters_swiginit(self, _openstudiomodelcore.new_RadianceParameters(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.RadianceParameters_iddObjectType()

    @staticmethod
    def skyDiscretizationResolutionValues():
        return _openstudiomodelcore.RadianceParameters_skyDiscretizationResolutionValues()

    def accumulatedRaysperRecord(self):
        return _openstudiomodelcore.RadianceParameters_accumulatedRaysperRecord(self)

    def isAccumulatedRaysperRecordDefaulted(self):
        return _openstudiomodelcore.RadianceParameters_isAccumulatedRaysperRecordDefaulted(self)

    def directThreshold(self):
        return _openstudiomodelcore.RadianceParameters_directThreshold(self)

    def isDirectThresholdDefaulted(self):
        return _openstudiomodelcore.RadianceParameters_isDirectThresholdDefaulted(self)

    def directCertainty(self):
        return _openstudiomodelcore.RadianceParameters_directCertainty(self)

    def isDirectCertaintyDefaulted(self):
        return _openstudiomodelcore.RadianceParameters_isDirectCertaintyDefaulted(self)

    def directJitter(self):
        return _openstudiomodelcore.RadianceParameters_directJitter(self)

    def isDirectJitterDefaulted(self):
        return _openstudiomodelcore.RadianceParameters_isDirectJitterDefaulted(self)

    def directPretest(self):
        return _openstudiomodelcore.RadianceParameters_directPretest(self)

    def isDirectPretestDefaulted(self):
        return _openstudiomodelcore.RadianceParameters_isDirectPretestDefaulted(self)

    def ambientBouncesVMX(self):
        return _openstudiomodelcore.RadianceParameters_ambientBouncesVMX(self)

    def isAmbientBouncesVMXDefaulted(self):
        return _openstudiomodelcore.RadianceParameters_isAmbientBouncesVMXDefaulted(self)

    def ambientBouncesDMX(self):
        return _openstudiomodelcore.RadianceParameters_ambientBouncesDMX(self)

    def isAmbientBouncesDMXDefaulted(self):
        return _openstudiomodelcore.RadianceParameters_isAmbientBouncesDMXDefaulted(self)

    def ambientDivisionsVMX(self):
        return _openstudiomodelcore.RadianceParameters_ambientDivisionsVMX(self)

    def isAmbientDivisionsVMXDefaulted(self):
        return _openstudiomodelcore.RadianceParameters_isAmbientDivisionsVMXDefaulted(self)

    def ambientDivisionsDMX(self):
        return _openstudiomodelcore.RadianceParameters_ambientDivisionsDMX(self)

    def isAmbientDivisionsDMXDefaulted(self):
        return _openstudiomodelcore.RadianceParameters_isAmbientDivisionsDMXDefaulted(self)

    def ambientSupersamples(self):
        return _openstudiomodelcore.RadianceParameters_ambientSupersamples(self)

    def isAmbientSupersamplesDefaulted(self):
        return _openstudiomodelcore.RadianceParameters_isAmbientSupersamplesDefaulted(self)

    def limitWeightVMX(self):
        return _openstudiomodelcore.RadianceParameters_limitWeightVMX(self)

    def isLimitWeightVMXDefaulted(self):
        return _openstudiomodelcore.RadianceParameters_isLimitWeightVMXDefaulted(self)

    def limitWeightDMX(self):
        return _openstudiomodelcore.RadianceParameters_limitWeightDMX(self)

    def isLimitWeightDMXDefaulted(self):
        return _openstudiomodelcore.RadianceParameters_isLimitWeightDMXDefaulted(self)

    def klemsSamplingDensity(self):
        return _openstudiomodelcore.RadianceParameters_klemsSamplingDensity(self)

    def isKlemsSamplingDensityDefaulted(self):
        return _openstudiomodelcore.RadianceParameters_isKlemsSamplingDensityDefaulted(self)

    def skyDiscretizationResolution(self):
        return _openstudiomodelcore.RadianceParameters_skyDiscretizationResolution(self)

    def isCoarseSettings(self):
        return _openstudiomodelcore.RadianceParameters_isCoarseSettings(self)

    def isFineSettings(self):
        return _openstudiomodelcore.RadianceParameters_isFineSettings(self)

    def setAccumulatedRaysperRecord(self, accumulatedRaysperRecord):
        return _openstudiomodelcore.RadianceParameters_setAccumulatedRaysperRecord(self, accumulatedRaysperRecord)

    def resetAccumulatedRaysperRecord(self):
        return _openstudiomodelcore.RadianceParameters_resetAccumulatedRaysperRecord(self)

    def setDirectThreshold(self, directThreshold):
        return _openstudiomodelcore.RadianceParameters_setDirectThreshold(self, directThreshold)

    def resetDirectThreshold(self):
        return _openstudiomodelcore.RadianceParameters_resetDirectThreshold(self)

    def setDirectCertainty(self, directCertainty):
        return _openstudiomodelcore.RadianceParameters_setDirectCertainty(self, directCertainty)

    def resetDirectCertainty(self):
        return _openstudiomodelcore.RadianceParameters_resetDirectCertainty(self)

    def setDirectJitter(self, directJitter):
        return _openstudiomodelcore.RadianceParameters_setDirectJitter(self, directJitter)

    def resetDirectJitter(self):
        return _openstudiomodelcore.RadianceParameters_resetDirectJitter(self)

    def setDirectPretest(self, directPretest):
        return _openstudiomodelcore.RadianceParameters_setDirectPretest(self, directPretest)

    def resetDirectPretest(self):
        return _openstudiomodelcore.RadianceParameters_resetDirectPretest(self)

    def setAmbientBouncesVMX(self, ambientBouncesVMX):
        return _openstudiomodelcore.RadianceParameters_setAmbientBouncesVMX(self, ambientBouncesVMX)

    def resetAmbientBouncesVMX(self):
        return _openstudiomodelcore.RadianceParameters_resetAmbientBouncesVMX(self)

    def setAmbientBouncesDMX(self, ambientBouncesDMX):
        return _openstudiomodelcore.RadianceParameters_setAmbientBouncesDMX(self, ambientBouncesDMX)

    def resetAmbientBouncesDMX(self):
        return _openstudiomodelcore.RadianceParameters_resetAmbientBouncesDMX(self)

    def setAmbientDivisionsVMX(self, ambientDivisionsVMX):
        return _openstudiomodelcore.RadianceParameters_setAmbientDivisionsVMX(self, ambientDivisionsVMX)

    def resetAmbientDivisionsVMX(self):
        return _openstudiomodelcore.RadianceParameters_resetAmbientDivisionsVMX(self)

    def setAmbientDivisionsDMX(self, ambientDivisionsDMX):
        return _openstudiomodelcore.RadianceParameters_setAmbientDivisionsDMX(self, ambientDivisionsDMX)

    def resetAmbientDivisionsDMX(self):
        return _openstudiomodelcore.RadianceParameters_resetAmbientDivisionsDMX(self)

    def setAmbientSupersamples(self, ambientSupersamples):
        return _openstudiomodelcore.RadianceParameters_setAmbientSupersamples(self, ambientSupersamples)

    def resetAmbientSupersamples(self):
        return _openstudiomodelcore.RadianceParameters_resetAmbientSupersamples(self)

    def setLimitWeightVMX(self, limitWeightVMX):
        return _openstudiomodelcore.RadianceParameters_setLimitWeightVMX(self, limitWeightVMX)

    def resetLimitWeightVMX(self):
        return _openstudiomodelcore.RadianceParameters_resetLimitWeightVMX(self)

    def setLimitWeightDMX(self, limitWeightDMX):
        return _openstudiomodelcore.RadianceParameters_setLimitWeightDMX(self, limitWeightDMX)

    def resetLimitWeightDMX(self):
        return _openstudiomodelcore.RadianceParameters_resetLimitWeightDMX(self)

    def setKlemsSamplingDensity(self, klemsSamplingDensity):
        return _openstudiomodelcore.RadianceParameters_setKlemsSamplingDensity(self, klemsSamplingDensity)

    def resetKlemsSamplingDensity(self):
        return _openstudiomodelcore.RadianceParameters_resetKlemsSamplingDensity(self)

    def setSkyDiscretizationResolution(self, skyDiscretizationResolution):
        return _openstudiomodelcore.RadianceParameters_setSkyDiscretizationResolution(self, skyDiscretizationResolution)

    def resetSkyDiscretizationResolution(self):
        return _openstudiomodelcore.RadianceParameters_resetSkyDiscretizationResolution(self)

    def applyCoarseSettings(self):
        return _openstudiomodelcore.RadianceParameters_applyCoarseSettings(self)

    def applyFineSettings(self):
        return _openstudiomodelcore.RadianceParameters_applyFineSettings(self)

# Register RadianceParameters in _openstudiomodelcore:
_openstudiomodelcore.RadianceParameters_swigregister(RadianceParameters)

def toRadianceParameters(idfObject):
    return _openstudiomodelcore.toRadianceParameters(idfObject)

def getRadianceParameters(t_model):
    return _openstudiomodelcore.getRadianceParameters(t_model)

def getOptionalRadianceParameters(t_model):
    return _openstudiomodelcore.getOptionalRadianceParameters(t_model)

def _to_RadianceParameters(self) -> OptionalRadianceParameters:
    """Try to cast the ModelObject to a RadianceParameters.

    :return: An Optional RadianceParameters.
    """
    return toRadianceParameters(self)
openstudioutilitiesidf.IdfObject.to_RadianceParameters = _to_RadianceParameters

def _getRadianceParameters(self) -> RadianceParameters:
    """Get or instantiate a UniqueModelObject of type RadianceParameters.

    :return: An existing RadianceParameters or a newly instantiated one.
    """
    return getRadianceParameters(self)
Model.getRadianceParameters = _getRadianceParameters

def _getOptionalRadianceParameters(self) -> OptionalRadianceParameters:
    """Return a UniqueModelObject of type RadianceParameters only if it's already present in the Model.

    :return: An Optional RadianceParameters.
    """
    return getOptionalRadianceParameters(self)
Model.getOptionalRadianceParameters = _getOptionalRadianceParameters

class OutputMeter(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_OutputMeter

    def __init__(self, *args):
        _openstudiomodelcore.OutputMeter_swiginit(self, _openstudiomodelcore.new_OutputMeter(*args))

    def remove(self):
        return _openstudiomodelcore.OutputMeter_remove(self)

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.OutputMeter_iddObjectType()

    @staticmethod
    def meterRegex():
        return _openstudiomodelcore.OutputMeter_meterRegex()

    @staticmethod
    def getName(specificEndUseType, endUseType, fuelType, installLocationType, specificInstallLocation):
        return _openstudiomodelcore.OutputMeter_getName(specificEndUseType, endUseType, fuelType, installLocationType, specificInstallLocation)

    def name(self):
        return _openstudiomodelcore.OutputMeter_name(self)

    def reportingFrequency(self):
        return _openstudiomodelcore.OutputMeter_reportingFrequency(self)

    def isReportingFrequencyDefaulted(self):
        return _openstudiomodelcore.OutputMeter_isReportingFrequencyDefaulted(self)

    def meterFileOnly(self):
        return _openstudiomodelcore.OutputMeter_meterFileOnly(self)

    def isMeterFileOnlyDefaulted(self):
        return _openstudiomodelcore.OutputMeter_isMeterFileOnlyDefaulted(self)

    def cumulative(self):
        return _openstudiomodelcore.OutputMeter_cumulative(self)

    def isCumulativeDefaulted(self):
        return _openstudiomodelcore.OutputMeter_isCumulativeDefaulted(self)

    def specificEndUse(self):
        return _openstudiomodelcore.OutputMeter_specificEndUse(self)

    def endUseType(self):
        return _openstudiomodelcore.OutputMeter_endUseType(self)

    def fuelType(self):
        return _openstudiomodelcore.OutputMeter_fuelType(self)

    def installLocationType(self):
        return _openstudiomodelcore.OutputMeter_installLocationType(self)

    def specificInstallLocation(self):
        return _openstudiomodelcore.OutputMeter_specificInstallLocation(self)

    def setReportingFrequency(self, reportingFrequency):
        return _openstudiomodelcore.OutputMeter_setReportingFrequency(self, reportingFrequency)

    def resetReportingFrequency(self):
        return _openstudiomodelcore.OutputMeter_resetReportingFrequency(self)

    def setMeterFileOnly(self, meterFileOnly):
        return _openstudiomodelcore.OutputMeter_setMeterFileOnly(self, meterFileOnly)

    def resetMeterFileOnly(self):
        return _openstudiomodelcore.OutputMeter_resetMeterFileOnly(self)

    def setCumulative(self, cumulative):
        return _openstudiomodelcore.OutputMeter_setCumulative(self, cumulative)

    def resetCumulative(self):
        return _openstudiomodelcore.OutputMeter_resetCumulative(self)

    def setSpecificEndUse(self, specifcEndUse):
        return _openstudiomodelcore.OutputMeter_setSpecificEndUse(self, specifcEndUse)

    def resetSpecificEndUse(self):
        return _openstudiomodelcore.OutputMeter_resetSpecificEndUse(self)

    def setEndUseType(self, type):
        return _openstudiomodelcore.OutputMeter_setEndUseType(self, type)

    def resetEndUseType(self):
        return _openstudiomodelcore.OutputMeter_resetEndUseType(self)

    def setFuelType(self, type):
        return _openstudiomodelcore.OutputMeter_setFuelType(self, type)

    def resetFuelType(self):
        return _openstudiomodelcore.OutputMeter_resetFuelType(self)

    def setInstallLocationType(self, type):
        return _openstudiomodelcore.OutputMeter_setInstallLocationType(self, type)

    def resetInstallLocationType(self):
        return _openstudiomodelcore.OutputMeter_resetInstallLocationType(self)

    def setSpecificInstallLocation(self, locationName):
        return _openstudiomodelcore.OutputMeter_setSpecificInstallLocation(self, locationName)

    def resetSpecificInstallLocation(self):
        return _openstudiomodelcore.OutputMeter_resetSpecificInstallLocation(self)

    def getData(self, *args):
        return _openstudiomodelcore.OutputMeter_getData(self, *args)

# Register OutputMeter in _openstudiomodelcore:
_openstudiomodelcore.OutputMeter_swigregister(OutputMeter)

def MeterFuelTypeEquals(meter, ft):
    return _openstudiomodelcore.MeterFuelTypeEquals(meter, ft)

def toOutputMeter(idfObject):
    return _openstudiomodelcore.toOutputMeter(idfObject)

def getOutputMeter(t_model, t_handle):
    return _openstudiomodelcore.getOutputMeter(t_model, t_handle)

def getOutputMeters(t_model):
    return _openstudiomodelcore.getOutputMeters(t_model)

def getOutputMeterByName(t_model, t_name):
    return _openstudiomodelcore.getOutputMeterByName(t_model, t_name)

def getOutputMetersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getOutputMetersByName(t_model, t_name, t_exactMatch)

def _to_OutputMeter(self) -> OptionalOutputMeter:
    """Try to cast the ModelObject to a OutputMeter.

    :return: An Optional OutputMeter.
    """
    return toOutputMeter(self)
openstudioutilitiesidf.IdfObject.to_OutputMeter = _to_OutputMeter

def _getOutputMeter(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalOutputMeter:
    """Try to get an object of type OutputMeter referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional OutputMeter.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getOutputMeter(self, t_handle)
Model.getOutputMeter = _getOutputMeter

def _getOutputMeters(self) -> OutputMeterVector:
    """Get a vector of all objects of type OutputMeter in the model.

    :return: A vector of OutputMeter.
    """
    return getOutputMeters(self)
Model.getOutputMeters = _getOutputMeters

def _getOutputMeterByName(self, t_name: str) -> OptionalOutputMeter:
    """Try to get an object of type OutputMeter that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional OutputMeter.
    """
    return getOutputMeterByName(self, t_name)
Model.getOutputMeterByName = _getOutputMeterByName

def _getOutputMetersByName(self, t_name: str, t_exactMatch: bool) -> OutputMeterVector:
    """Returns all objects of type OutputMeter named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getOutputMetersByName(self, t_name, t_exactMatch)
Model.getOutputMetersByName = _getOutputMetersByName

class MeterCustom(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_MeterCustom

    def __init__(self, *args):
        _openstudiomodelcore.MeterCustom_swiginit(self, _openstudiomodelcore.new_MeterCustom(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.MeterCustom_iddObjectType()

    @staticmethod
    def fuelTypeValues():
        return _openstudiomodelcore.MeterCustom_fuelTypeValues()

    def fuelType(self):
        return _openstudiomodelcore.MeterCustom_fuelType(self)

    def keyVarGroups(self):
        return _openstudiomodelcore.MeterCustom_keyVarGroups(self)

    def numKeyVarGroups(self):
        return _openstudiomodelcore.MeterCustom_numKeyVarGroups(self)

    def keyName(self, index):
        return _openstudiomodelcore.MeterCustom_keyName(self, index)

    def outputVariableorMeterName(self, index):
        return _openstudiomodelcore.MeterCustom_outputVariableorMeterName(self, index)

    def setFuelType(self, *args):
        return _openstudiomodelcore.MeterCustom_setFuelType(self, *args)

    def resetFuelType(self):
        return _openstudiomodelcore.MeterCustom_resetFuelType(self)

    def addKeyVarGroup(self, keyName, outputVariableorMeterName):
        return _openstudiomodelcore.MeterCustom_addKeyVarGroup(self, keyName, outputVariableorMeterName)

    def removeKeyVarGroup(self, groupIndex):
        return _openstudiomodelcore.MeterCustom_removeKeyVarGroup(self, groupIndex)

    def removeAllKeyVarGroups(self):
        return _openstudiomodelcore.MeterCustom_removeAllKeyVarGroups(self)

    def setKeyName(self, index, str):
        return _openstudiomodelcore.MeterCustom_setKeyName(self, index, str)

    def setOutputVariableorMeterName(self, index, str):
        return _openstudiomodelcore.MeterCustom_setOutputVariableorMeterName(self, index, str)

# Register MeterCustom in _openstudiomodelcore:
_openstudiomodelcore.MeterCustom_swigregister(MeterCustom)

def toMeterCustom(idfObject):
    return _openstudiomodelcore.toMeterCustom(idfObject)

def getMeterCustom(t_model, t_handle):
    return _openstudiomodelcore.getMeterCustom(t_model, t_handle)

def getMeterCustoms(t_model):
    return _openstudiomodelcore.getMeterCustoms(t_model)

def getMeterCustomByName(t_model, t_name):
    return _openstudiomodelcore.getMeterCustomByName(t_model, t_name)

def getMeterCustomsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getMeterCustomsByName(t_model, t_name, t_exactMatch)

def _to_MeterCustom(self) -> OptionalMeterCustom:
    """Try to cast the ModelObject to a MeterCustom.

    :return: An Optional MeterCustom.
    """
    return toMeterCustom(self)
openstudioutilitiesidf.IdfObject.to_MeterCustom = _to_MeterCustom

def _getMeterCustom(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalMeterCustom:
    """Try to get an object of type MeterCustom referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional MeterCustom.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getMeterCustom(self, t_handle)
Model.getMeterCustom = _getMeterCustom

def _getMeterCustoms(self) -> MeterCustomVector:
    """Get a vector of all objects of type MeterCustom in the model.

    :return: A vector of MeterCustom.
    """
    return getMeterCustoms(self)
Model.getMeterCustoms = _getMeterCustoms

def _getMeterCustomByName(self, t_name: str) -> OptionalMeterCustom:
    """Try to get an object of type MeterCustom that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional MeterCustom.
    """
    return getMeterCustomByName(self, t_name)
Model.getMeterCustomByName = _getMeterCustomByName

def _getMeterCustomsByName(self, t_name: str, t_exactMatch: bool) -> MeterCustomVector:
    """Returns all objects of type MeterCustom named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getMeterCustomsByName(self, t_name, t_exactMatch)
Model.getMeterCustomsByName = _getMeterCustomsByName

class MeterCustomDecrement(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_MeterCustomDecrement

    def __init__(self, *args):
        _openstudiomodelcore.MeterCustomDecrement_swiginit(self, _openstudiomodelcore.new_MeterCustomDecrement(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.MeterCustomDecrement_iddObjectType()

    @staticmethod
    def fuelTypeValues():
        return _openstudiomodelcore.MeterCustomDecrement_fuelTypeValues()

    def fuelType(self):
        return _openstudiomodelcore.MeterCustomDecrement_fuelType(self)

    def sourceMeterName(self):
        return _openstudiomodelcore.MeterCustomDecrement_sourceMeterName(self)

    def keyVarGroups(self):
        return _openstudiomodelcore.MeterCustomDecrement_keyVarGroups(self)

    def numKeyVarGroups(self):
        return _openstudiomodelcore.MeterCustomDecrement_numKeyVarGroups(self)

    def keyName(self, index):
        return _openstudiomodelcore.MeterCustomDecrement_keyName(self, index)

    def outputVariableorMeterName(self, index):
        return _openstudiomodelcore.MeterCustomDecrement_outputVariableorMeterName(self, index)

    def setFuelType(self, *args):
        return _openstudiomodelcore.MeterCustomDecrement_setFuelType(self, *args)

    def resetFuelType(self):
        return _openstudiomodelcore.MeterCustomDecrement_resetFuelType(self)

    def setSourceMeterName(self, sourceMeterName):
        return _openstudiomodelcore.MeterCustomDecrement_setSourceMeterName(self, sourceMeterName)

    def addKeyVarGroup(self, keyName, outputVariableorMeterName):
        return _openstudiomodelcore.MeterCustomDecrement_addKeyVarGroup(self, keyName, outputVariableorMeterName)

    def removeKeyVarGroup(self, groupIndex):
        return _openstudiomodelcore.MeterCustomDecrement_removeKeyVarGroup(self, groupIndex)

    def removeAllKeyVarGroups(self):
        return _openstudiomodelcore.MeterCustomDecrement_removeAllKeyVarGroups(self)

    def setKeyName(self, index, str):
        return _openstudiomodelcore.MeterCustomDecrement_setKeyName(self, index, str)

    def setOutputVariableorMeterName(self, index, str):
        return _openstudiomodelcore.MeterCustomDecrement_setOutputVariableorMeterName(self, index, str)

# Register MeterCustomDecrement in _openstudiomodelcore:
_openstudiomodelcore.MeterCustomDecrement_swigregister(MeterCustomDecrement)

def toMeterCustomDecrement(idfObject):
    return _openstudiomodelcore.toMeterCustomDecrement(idfObject)

def getMeterCustomDecrement(t_model, t_handle):
    return _openstudiomodelcore.getMeterCustomDecrement(t_model, t_handle)

def getMeterCustomDecrements(t_model):
    return _openstudiomodelcore.getMeterCustomDecrements(t_model)

def getMeterCustomDecrementByName(t_model, t_name):
    return _openstudiomodelcore.getMeterCustomDecrementByName(t_model, t_name)

def getMeterCustomDecrementsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getMeterCustomDecrementsByName(t_model, t_name, t_exactMatch)

def _to_MeterCustomDecrement(self) -> OptionalMeterCustomDecrement:
    """Try to cast the ModelObject to a MeterCustomDecrement.

    :return: An Optional MeterCustomDecrement.
    """
    return toMeterCustomDecrement(self)
openstudioutilitiesidf.IdfObject.to_MeterCustomDecrement = _to_MeterCustomDecrement

def _getMeterCustomDecrement(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalMeterCustomDecrement:
    """Try to get an object of type MeterCustomDecrement referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional MeterCustomDecrement.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getMeterCustomDecrement(self, t_handle)
Model.getMeterCustomDecrement = _getMeterCustomDecrement

def _getMeterCustomDecrements(self) -> MeterCustomDecrementVector:
    """Get a vector of all objects of type MeterCustomDecrement in the model.

    :return: A vector of MeterCustomDecrement.
    """
    return getMeterCustomDecrements(self)
Model.getMeterCustomDecrements = _getMeterCustomDecrements

def _getMeterCustomDecrementByName(self, t_name: str) -> OptionalMeterCustomDecrement:
    """Try to get an object of type MeterCustomDecrement that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional MeterCustomDecrement.
    """
    return getMeterCustomDecrementByName(self, t_name)
Model.getMeterCustomDecrementByName = _getMeterCustomDecrementByName

def _getMeterCustomDecrementsByName(self, t_name: str, t_exactMatch: bool) -> MeterCustomDecrementVector:
    """Returns all objects of type MeterCustomDecrement named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getMeterCustomDecrementsByName(self, t_name, t_exactMatch)
Model.getMeterCustomDecrementsByName = _getMeterCustomDecrementsByName

class LifeCycleCost(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_LifeCycleCost

    def __init__(self, *args):
        _openstudiomodelcore.LifeCycleCost_swiginit(self, _openstudiomodelcore.new_LifeCycleCost(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.LifeCycleCost_iddObjectType()

    @staticmethod
    def validCategoryValues():
        return _openstudiomodelcore.LifeCycleCost_validCategoryValues()

    @staticmethod
    def validItemTypeValues():
        return _openstudiomodelcore.LifeCycleCost_validItemTypeValues()

    @staticmethod
    def validStartOfCostsValues():
        return _openstudiomodelcore.LifeCycleCost_validStartOfCostsValues()

    @staticmethod
    def createLifeCycleCost(name, modelObject, cost, costUnits, category, repeatPeriodYears=0, yearsFromStart=0):
        return _openstudiomodelcore.LifeCycleCost_createLifeCycleCost(name, modelObject, cost, costUnits, category, repeatPeriodYears, yearsFromStart)

    def category(self):
        return _openstudiomodelcore.LifeCycleCost_category(self)

    def itemType(self):
        return _openstudiomodelcore.LifeCycleCost_itemType(self)

    def item(self):
        return _openstudiomodelcore.LifeCycleCost_item(self)

    def cost(self):
        return _openstudiomodelcore.LifeCycleCost_cost(self)

    def validCostUnitsValues(self):
        return _openstudiomodelcore.LifeCycleCost_validCostUnitsValues(self)

    def costUnits(self):
        return _openstudiomodelcore.LifeCycleCost_costUnits(self)

    def startOfCosts(self):
        return _openstudiomodelcore.LifeCycleCost_startOfCosts(self)

    def isStartOfCostsDefaulted(self):
        return _openstudiomodelcore.LifeCycleCost_isStartOfCostsDefaulted(self)

    def yearsFromStart(self):
        return _openstudiomodelcore.LifeCycleCost_yearsFromStart(self)

    def isYearsFromStartDefaulted(self):
        return _openstudiomodelcore.LifeCycleCost_isYearsFromStartDefaulted(self)

    def monthsFromStart(self):
        return _openstudiomodelcore.LifeCycleCost_monthsFromStart(self)

    def isMonthsFromStartDefaulted(self):
        return _openstudiomodelcore.LifeCycleCost_isMonthsFromStartDefaulted(self)

    def repeatPeriodYears(self):
        return _openstudiomodelcore.LifeCycleCost_repeatPeriodYears(self)

    def isRepeatPeriodYearsDefaulted(self):
        return _openstudiomodelcore.LifeCycleCost_isRepeatPeriodYearsDefaulted(self)

    def repeatPeriodMonths(self):
        return _openstudiomodelcore.LifeCycleCost_repeatPeriodMonths(self)

    def isRepeatPeriodMonthsDefaulted(self):
        return _openstudiomodelcore.LifeCycleCost_isRepeatPeriodMonthsDefaulted(self)

    def setCategory(self, category):
        return _openstudiomodelcore.LifeCycleCost_setCategory(self, category)

    def setCost(self, cost):
        return _openstudiomodelcore.LifeCycleCost_setCost(self, cost)

    def setCostUnits(self, costUnits):
        return _openstudiomodelcore.LifeCycleCost_setCostUnits(self, costUnits)

    def setStartOfCosts(self, startOfCosts):
        return _openstudiomodelcore.LifeCycleCost_setStartOfCosts(self, startOfCosts)

    def resetStartOfCosts(self):
        return _openstudiomodelcore.LifeCycleCost_resetStartOfCosts(self)

    def setYearsFromStart(self, yearsFromStart):
        return _openstudiomodelcore.LifeCycleCost_setYearsFromStart(self, yearsFromStart)

    def resetYearsFromStart(self):
        return _openstudiomodelcore.LifeCycleCost_resetYearsFromStart(self)

    def setMonthsFromStart(self, monthsFromStart):
        return _openstudiomodelcore.LifeCycleCost_setMonthsFromStart(self, monthsFromStart)

    def resetMonthsFromStart(self):
        return _openstudiomodelcore.LifeCycleCost_resetMonthsFromStart(self)

    def setRepeatPeriodYears(self, repeatPeriodYears):
        return _openstudiomodelcore.LifeCycleCost_setRepeatPeriodYears(self, repeatPeriodYears)

    def resetRepeatPeriodYears(self):
        return _openstudiomodelcore.LifeCycleCost_resetRepeatPeriodYears(self)

    def setRepeatPeriodMonths(self, repeatPeriodMonths):
        return _openstudiomodelcore.LifeCycleCost_setRepeatPeriodMonths(self, repeatPeriodMonths)

    def resetRepeatPeriodMonths(self):
        return _openstudiomodelcore.LifeCycleCost_resetRepeatPeriodMonths(self)

    def totalCost(self):
        return _openstudiomodelcore.LifeCycleCost_totalCost(self)

    def convertToCostPerEach(self):
        return _openstudiomodelcore.LifeCycleCost_convertToCostPerEach(self)

    def costedQuantity(self):
        return _openstudiomodelcore.LifeCycleCost_costedQuantity(self)

    def costedArea(self):
        return _openstudiomodelcore.LifeCycleCost_costedArea(self)

    def costedThermalZones(self):
        return _openstudiomodelcore.LifeCycleCost_costedThermalZones(self)

# Register LifeCycleCost in _openstudiomodelcore:
_openstudiomodelcore.LifeCycleCost_swigregister(LifeCycleCost)

def toLifeCycleCost(idfObject):
    return _openstudiomodelcore.toLifeCycleCost(idfObject)

def getLifeCycleCost(t_model, t_handle):
    return _openstudiomodelcore.getLifeCycleCost(t_model, t_handle)

def getLifeCycleCosts(t_model):
    return _openstudiomodelcore.getLifeCycleCosts(t_model)

def getLifeCycleCostByName(t_model, t_name):
    return _openstudiomodelcore.getLifeCycleCostByName(t_model, t_name)

def getLifeCycleCostsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getLifeCycleCostsByName(t_model, t_name, t_exactMatch)

def _to_LifeCycleCost(self) -> OptionalLifeCycleCost:
    """Try to cast the ModelObject to a LifeCycleCost.

    :return: An Optional LifeCycleCost.
    """
    return toLifeCycleCost(self)
openstudioutilitiesidf.IdfObject.to_LifeCycleCost = _to_LifeCycleCost

def _getLifeCycleCost(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalLifeCycleCost:
    """Try to get an object of type LifeCycleCost referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional LifeCycleCost.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getLifeCycleCost(self, t_handle)
Model.getLifeCycleCost = _getLifeCycleCost

def _getLifeCycleCosts(self) -> LifeCycleCostVector:
    """Get a vector of all objects of type LifeCycleCost in the model.

    :return: A vector of LifeCycleCost.
    """
    return getLifeCycleCosts(self)
Model.getLifeCycleCosts = _getLifeCycleCosts

def _getLifeCycleCostByName(self, t_name: str) -> OptionalLifeCycleCost:
    """Try to get an object of type LifeCycleCost that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional LifeCycleCost.
    """
    return getLifeCycleCostByName(self, t_name)
Model.getLifeCycleCostByName = _getLifeCycleCostByName

def _getLifeCycleCostsByName(self, t_name: str, t_exactMatch: bool) -> LifeCycleCostVector:
    """Returns all objects of type LifeCycleCost named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getLifeCycleCostsByName(self, t_name, t_exactMatch)
Model.getLifeCycleCostsByName = _getLifeCycleCostsByName

class BillingPeriod(ModelExtensibleGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def startDate(self):
        return _openstudiomodelcore.BillingPeriod_startDate(self)

    def endDate(self):
        return _openstudiomodelcore.BillingPeriod_endDate(self)

    def numberOfDays(self):
        return _openstudiomodelcore.BillingPeriod_numberOfDays(self)

    def consumption(self):
        return _openstudiomodelcore.BillingPeriod_consumption(self)

    def peakDemand(self):
        return _openstudiomodelcore.BillingPeriod_peakDemand(self)

    def totalCost(self):
        return _openstudiomodelcore.BillingPeriod_totalCost(self)

    def setStartDate(self, startDate):
        return _openstudiomodelcore.BillingPeriod_setStartDate(self, startDate)

    def setEndDate(self, endDate):
        return _openstudiomodelcore.BillingPeriod_setEndDate(self, endDate)

    def setNumberOfDays(self, numberOfDays):
        return _openstudiomodelcore.BillingPeriod_setNumberOfDays(self, numberOfDays)

    def setConsumption(self, consumption):
        return _openstudiomodelcore.BillingPeriod_setConsumption(self, consumption)

    def resetConsumption(self):
        return _openstudiomodelcore.BillingPeriod_resetConsumption(self)

    def setPeakDemand(self, peakDemand):
        return _openstudiomodelcore.BillingPeriod_setPeakDemand(self, peakDemand)

    def resetPeakDemand(self):
        return _openstudiomodelcore.BillingPeriod_resetPeakDemand(self)

    def setTotalCost(self, totalCost):
        return _openstudiomodelcore.BillingPeriod_setTotalCost(self, totalCost)

    def resetTotalCost(self):
        return _openstudiomodelcore.BillingPeriod_resetTotalCost(self)

    def withinRunPeriod(self):
        return _openstudiomodelcore.BillingPeriod_withinRunPeriod(self)

    def withinPeriodicRunPeriod(self):
        return _openstudiomodelcore.BillingPeriod_withinPeriodicRunPeriod(self)

    def overlapsRunPeriod(self):
        return _openstudiomodelcore.BillingPeriod_overlapsRunPeriod(self)

    def modelConsumptionValues(self):
        return _openstudiomodelcore.BillingPeriod_modelConsumptionValues(self)

    def modelConsumption(self):
        return _openstudiomodelcore.BillingPeriod_modelConsumption(self)

    def modelPeakDemand(self):
        return _openstudiomodelcore.BillingPeriod_modelPeakDemand(self)

    def modelTotalCost(self):
        return _openstudiomodelcore.BillingPeriod_modelTotalCost(self)
    __swig_destroy__ = _openstudiomodelcore.delete_BillingPeriod

# Register BillingPeriod in _openstudiomodelcore:
_openstudiomodelcore.BillingPeriod_swigregister(BillingPeriod)
class UtilityBill(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_UtilityBill

    def __init__(self, *args):
        _openstudiomodelcore.UtilityBill_swiginit(self, _openstudiomodelcore.new_UtilityBill(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.UtilityBill_iddObjectType()

    def consumptionUnitValues(self):
        return _openstudiomodelcore.UtilityBill_consumptionUnitValues(self)

    def peakDemandUnitValues(self):
        return _openstudiomodelcore.UtilityBill_peakDemandUnitValues(self)

    @staticmethod
    def calibrationGuidelines():
        return _openstudiomodelcore.UtilityBill_calibrationGuidelines()

    @staticmethod
    def maxNMBE(calibrationGuideline):
        return _openstudiomodelcore.UtilityBill_maxNMBE(calibrationGuideline)

    @staticmethod
    def maxCVRMSE(calibrationGuideline):
        return _openstudiomodelcore.UtilityBill_maxCVRMSE(calibrationGuideline)

    def fuelType(self):
        return _openstudiomodelcore.UtilityBill_fuelType(self)

    def meterInstallLocation(self):
        return _openstudiomodelcore.UtilityBill_meterInstallLocation(self)

    def isMeterInstallLocationDefaulted(self):
        return _openstudiomodelcore.UtilityBill_isMeterInstallLocationDefaulted(self)

    def meterSpecificInstallLocation(self):
        return _openstudiomodelcore.UtilityBill_meterSpecificInstallLocation(self)

    def meterEndUseCategory(self):
        return _openstudiomodelcore.UtilityBill_meterEndUseCategory(self)

    def meterSpecificEndUse(self):
        return _openstudiomodelcore.UtilityBill_meterSpecificEndUse(self)

    def consumptionUnit(self):
        return _openstudiomodelcore.UtilityBill_consumptionUnit(self)

    def consumptionUnitDescription(self):
        return _openstudiomodelcore.UtilityBill_consumptionUnitDescription(self)

    def consumptionUnitConversionFactor(self):
        return _openstudiomodelcore.UtilityBill_consumptionUnitConversionFactor(self)

    def isConsumptionUnitConversionFactorDefaulted(self):
        return _openstudiomodelcore.UtilityBill_isConsumptionUnitConversionFactorDefaulted(self)

    def peakDemandUnit(self):
        return _openstudiomodelcore.UtilityBill_peakDemandUnit(self)

    def peakDemandUnitDescription(self):
        return _openstudiomodelcore.UtilityBill_peakDemandUnitDescription(self)

    def peakDemandUnitConversionFactor(self):
        return _openstudiomodelcore.UtilityBill_peakDemandUnitConversionFactor(self)

    def timestepsInPeakDemandWindow(self):
        return _openstudiomodelcore.UtilityBill_timestepsInPeakDemandWindow(self)

    def isTimestepsInPeakDemandWindowDefaulted(self):
        return _openstudiomodelcore.UtilityBill_isTimestepsInPeakDemandWindowDefaulted(self)

    def minutesInPeakDemandWindow(self):
        return _openstudiomodelcore.UtilityBill_minutesInPeakDemandWindow(self)

    def billingPeriods(self):
        return _openstudiomodelcore.UtilityBill_billingPeriods(self)

    def setMeterInstallLocation(self, meterInstallLocation):
        return _openstudiomodelcore.UtilityBill_setMeterInstallLocation(self, meterInstallLocation)

    def resetMeterInstallLocation(self):
        return _openstudiomodelcore.UtilityBill_resetMeterInstallLocation(self)

    def setMeterSpecificInstallLocation(self, meterSpecificInstallLocation):
        return _openstudiomodelcore.UtilityBill_setMeterSpecificInstallLocation(self, meterSpecificInstallLocation)

    def resetMeterSpecificInstallLocation(self):
        return _openstudiomodelcore.UtilityBill_resetMeterSpecificInstallLocation(self)

    def setMeterEndUseCategory(self, meterEndUseCategory):
        return _openstudiomodelcore.UtilityBill_setMeterEndUseCategory(self, meterEndUseCategory)

    def resetMeterEndUseCategory(self):
        return _openstudiomodelcore.UtilityBill_resetMeterEndUseCategory(self)

    def setMeterSpecificEndUse(self, meterSpecificEndUse):
        return _openstudiomodelcore.UtilityBill_setMeterSpecificEndUse(self, meterSpecificEndUse)

    def resetMeterSpecificEndUse(self):
        return _openstudiomodelcore.UtilityBill_resetMeterSpecificEndUse(self)

    def setConsumptionUnit(self, consumptionUnit):
        return _openstudiomodelcore.UtilityBill_setConsumptionUnit(self, consumptionUnit)

    def setConsumptionUnitConversionFactor(self, consumptionUnitConversionFactor):
        return _openstudiomodelcore.UtilityBill_setConsumptionUnitConversionFactor(self, consumptionUnitConversionFactor)

    def resetConsumptionUnitConversionFactor(self):
        return _openstudiomodelcore.UtilityBill_resetConsumptionUnitConversionFactor(self)

    def setPeakDemandUnit(self, peakDemandUnit):
        return _openstudiomodelcore.UtilityBill_setPeakDemandUnit(self, peakDemandUnit)

    def setTimestepsInPeakDemandWindow(self, timestepsInPeakDemandWindow):
        return _openstudiomodelcore.UtilityBill_setTimestepsInPeakDemandWindow(self, timestepsInPeakDemandWindow)

    def resetTimestepsInPeakDemandWindow(self):
        return _openstudiomodelcore.UtilityBill_resetTimestepsInPeakDemandWindow(self)

    def clearBillingPeriods(self):
        return _openstudiomodelcore.UtilityBill_clearBillingPeriods(self)

    def addBillingPeriod(self):
        return _openstudiomodelcore.UtilityBill_addBillingPeriod(self)

    def consumptionMeter(self):
        return _openstudiomodelcore.UtilityBill_consumptionMeter(self)

    def peakDemandMeter(self):
        return _openstudiomodelcore.UtilityBill_peakDemandMeter(self)

    def numberBillingPeriodsInCalculations(self):
        return _openstudiomodelcore.UtilityBill_numberBillingPeriodsInCalculations(self)

    def CVRMSE(self):
        return _openstudiomodelcore.UtilityBill_CVRMSE(self)

    def NMBE(self):
        return _openstudiomodelcore.UtilityBill_NMBE(self)

# Register UtilityBill in _openstudiomodelcore:
_openstudiomodelcore.UtilityBill_swigregister(UtilityBill)

def toUtilityBill(idfObject):
    return _openstudiomodelcore.toUtilityBill(idfObject)

def getUtilityBill(t_model, t_handle):
    return _openstudiomodelcore.getUtilityBill(t_model, t_handle)

def getUtilityBills(t_model):
    return _openstudiomodelcore.getUtilityBills(t_model)

def getUtilityBillByName(t_model, t_name):
    return _openstudiomodelcore.getUtilityBillByName(t_model, t_name)

def getUtilityBillsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getUtilityBillsByName(t_model, t_name, t_exactMatch)

def _to_UtilityBill(self) -> OptionalUtilityBill:
    """Try to cast the ModelObject to a UtilityBill.

    :return: An Optional UtilityBill.
    """
    return toUtilityBill(self)
openstudioutilitiesidf.IdfObject.to_UtilityBill = _to_UtilityBill

def _getUtilityBill(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalUtilityBill:
    """Try to get an object of type UtilityBill referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional UtilityBill.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getUtilityBill(self, t_handle)
Model.getUtilityBill = _getUtilityBill

def _getUtilityBills(self) -> UtilityBillVector:
    """Get a vector of all objects of type UtilityBill in the model.

    :return: A vector of UtilityBill.
    """
    return getUtilityBills(self)
Model.getUtilityBills = _getUtilityBills

def _getUtilityBillByName(self, t_name: str) -> OptionalUtilityBill:
    """Try to get an object of type UtilityBill that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional UtilityBill.
    """
    return getUtilityBillByName(self, t_name)
Model.getUtilityBillByName = _getUtilityBillByName

def _getUtilityBillsByName(self, t_name: str, t_exactMatch: bool) -> UtilityBillVector:
    """Returns all objects of type UtilityBill named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getUtilityBillsByName(self, t_name, t_exactMatch)
Model.getUtilityBillsByName = _getUtilityBillsByName


def toBillingPeriod(extensibleGroup):
    return _openstudiomodelcore.toBillingPeriod(extensibleGroup)

def _to_BillingPeriod(self) -> OptionalBillingPeriod:
    return toBillingPeriod(self)
openstudioutilitiesidf.IdfExtensibleGroup.to_BillingPeriod = _to_BillingPeriod

class ComponentData(ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ComponentData

    def __init__(self, *args):
        _openstudiomodelcore.ComponentData_swiginit(self, _openstudiomodelcore.new_ComponentData(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ComponentData_iddObjectType()

    def uuid(self):
        return _openstudiomodelcore.ComponentData_uuid(self)

    def versionUUID(self):
        return _openstudiomodelcore.ComponentData_versionUUID(self)

    def creationTimestamp(self):
        return _openstudiomodelcore.ComponentData_creationTimestamp(self)

    def versionTimestamp(self):
        return _openstudiomodelcore.ComponentData_versionTimestamp(self)

    def primaryComponentObject(self):
        return _openstudiomodelcore.ComponentData_primaryComponentObject(self)

    def componentObjects(self):
        return _openstudiomodelcore.ComponentData_componentObjects(self)

    def getComponentObject(self, objectIndex):
        return _openstudiomodelcore.ComponentData_getComponentObject(self, objectIndex)

    def createVersionUUID(self):
        return _openstudiomodelcore.ComponentData_createVersionUUID(self)

    def numComponentObjects(self):
        return _openstudiomodelcore.ComponentData_numComponentObjects(self)

# Register ComponentData in _openstudiomodelcore:
_openstudiomodelcore.ComponentData_swigregister(ComponentData)

def toComponentData(idfObject):
    return _openstudiomodelcore.toComponentData(idfObject)

def getComponentData(t_model, t_handle):
    return _openstudiomodelcore.getComponentData(t_model, t_handle)

def getComponentDatas(t_model):
    return _openstudiomodelcore.getComponentDatas(t_model)

def getComponentDataByName(t_model, t_name):
    return _openstudiomodelcore.getComponentDataByName(t_model, t_name)

def getComponentDatasByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getComponentDatasByName(t_model, t_name, t_exactMatch)

def _to_ComponentData(self) -> OptionalComponentData:
    """Try to cast the ModelObject to a ComponentData.

    :return: An Optional ComponentData.
    """
    return toComponentData(self)
openstudioutilitiesidf.IdfObject.to_ComponentData = _to_ComponentData

def _getComponentData(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalComponentData:
    """Try to get an object of type ComponentData referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ComponentData.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getComponentData(self, t_handle)
Model.getComponentData = _getComponentData

def _getComponentDatas(self) -> ComponentDataVector:
    """Get a vector of all objects of type ComponentData in the model.

    :return: A vector of ComponentData.
    """
    return getComponentDatas(self)
Model.getComponentDatas = _getComponentDatas

def _getComponentDataByName(self, t_name: str) -> OptionalComponentData:
    """Try to get an object of type ComponentData that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ComponentData.
    """
    return getComponentDataByName(self, t_name)
Model.getComponentDataByName = _getComponentDataByName

def _getComponentDatasByName(self, t_name: str, t_exactMatch: bool) -> ComponentDataVector:
    """Returns all objects of type ComponentData named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getComponentDatasByName(self, t_name, t_exactMatch)
Model.getComponentDatasByName = _getComponentDatasByName

class ScheduleTypeLimits(ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleTypeLimits

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleTypeLimits_swiginit(self, _openstudiomodelcore.new_ScheduleTypeLimits(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ScheduleTypeLimits_iddObjectType()

    @staticmethod
    def numericTypeValues():
        return _openstudiomodelcore.ScheduleTypeLimits_numericTypeValues()

    @staticmethod
    def unitTypeValues():
        return _openstudiomodelcore.ScheduleTypeLimits_unitTypeValues()

    def lowerLimitValue(self):
        return _openstudiomodelcore.ScheduleTypeLimits_lowerLimitValue(self)

    def upperLimitValue(self):
        return _openstudiomodelcore.ScheduleTypeLimits_upperLimitValue(self)

    def numericType(self):
        return _openstudiomodelcore.ScheduleTypeLimits_numericType(self)

    def unitType(self):
        return _openstudiomodelcore.ScheduleTypeLimits_unitType(self)

    def isUnitTypeDefaulted(self):
        return _openstudiomodelcore.ScheduleTypeLimits_isUnitTypeDefaulted(self)

    def units(self, *args):
        return _openstudiomodelcore.ScheduleTypeLimits_units(self, *args)

    def setLowerLimitValue(self, lowerLimitValue):
        return _openstudiomodelcore.ScheduleTypeLimits_setLowerLimitValue(self, lowerLimitValue)

    def resetLowerLimitValue(self):
        return _openstudiomodelcore.ScheduleTypeLimits_resetLowerLimitValue(self)

    def setUpperLimitValue(self, upperLimitValue):
        return _openstudiomodelcore.ScheduleTypeLimits_setUpperLimitValue(self, upperLimitValue)

    def resetUpperLimitValue(self):
        return _openstudiomodelcore.ScheduleTypeLimits_resetUpperLimitValue(self)

    def setNumericType(self, numericType):
        return _openstudiomodelcore.ScheduleTypeLimits_setNumericType(self, numericType)

    def resetNumericType(self):
        return _openstudiomodelcore.ScheduleTypeLimits_resetNumericType(self)

    def setUnitType(self, unitType):
        return _openstudiomodelcore.ScheduleTypeLimits_setUnitType(self, unitType)

    def resetUnitType(self):
        return _openstudiomodelcore.ScheduleTypeLimits_resetUnitType(self)

# Register ScheduleTypeLimits in _openstudiomodelcore:
_openstudiomodelcore.ScheduleTypeLimits_swigregister(ScheduleTypeLimits)

def isCompatible(parentLimits, candidate):
    return _openstudiomodelcore.isCompatible(parentLimits, candidate)

def toScheduleTypeLimits(idfObject):
    return _openstudiomodelcore.toScheduleTypeLimits(idfObject)

def getScheduleTypeLimits(t_model, t_handle):
    return _openstudiomodelcore.getScheduleTypeLimits(t_model, t_handle)

def getScheduleTypeLimitss(t_model):
    return _openstudiomodelcore.getScheduleTypeLimitss(t_model)

def getScheduleTypeLimitsByName(t_model, t_name):
    return _openstudiomodelcore.getScheduleTypeLimitsByName(t_model, t_name)

def getScheduleTypeLimitssByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getScheduleTypeLimitssByName(t_model, t_name, t_exactMatch)

def _to_ScheduleTypeLimits(self) -> OptionalScheduleTypeLimits:
    """Try to cast the ModelObject to a ScheduleTypeLimits.

    :return: An Optional ScheduleTypeLimits.
    """
    return toScheduleTypeLimits(self)
openstudioutilitiesidf.IdfObject.to_ScheduleTypeLimits = _to_ScheduleTypeLimits

def _getScheduleTypeLimits(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalScheduleTypeLimits:
    """Try to get an object of type ScheduleTypeLimits referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ScheduleTypeLimits.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getScheduleTypeLimits(self, t_handle)
Model.getScheduleTypeLimits = _getScheduleTypeLimits

def _getScheduleTypeLimitss(self) -> ScheduleTypeLimitsVector:
    """Get a vector of all objects of type ScheduleTypeLimits in the model.

    :return: A vector of ScheduleTypeLimits.
    """
    return getScheduleTypeLimitss(self)
Model.getScheduleTypeLimitss = _getScheduleTypeLimitss

def _getScheduleTypeLimitsByName(self, t_name: str) -> OptionalScheduleTypeLimits:
    """Try to get an object of type ScheduleTypeLimits that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ScheduleTypeLimits.
    """
    return getScheduleTypeLimitsByName(self, t_name)
Model.getScheduleTypeLimitsByName = _getScheduleTypeLimitsByName

def _getScheduleTypeLimitssByName(self, t_name: str, t_exactMatch: bool) -> ScheduleTypeLimitsVector:
    """Returns all objects of type ScheduleTypeLimits named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getScheduleTypeLimitssByName(self, t_name, t_exactMatch)
Model.getScheduleTypeLimitssByName = _getScheduleTypeLimitssByName

class ScheduleBase(ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleBase

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleBase_swiginit(self, _openstudiomodelcore.new_ScheduleBase(*args))

    def scheduleTypeLimits(self):
        return _openstudiomodelcore.ScheduleBase_scheduleTypeLimits(self)

    def setScheduleTypeLimits(self, scheduleTypeLimits):
        return _openstudiomodelcore.ScheduleBase_setScheduleTypeLimits(self, scheduleTypeLimits)

    def resetScheduleTypeLimits(self):
        return _openstudiomodelcore.ScheduleBase_resetScheduleTypeLimits(self)

    def ensureNoLeapDays(self):
        return _openstudiomodelcore.ScheduleBase_ensureNoLeapDays(self)

# Register ScheduleBase in _openstudiomodelcore:
_openstudiomodelcore.ScheduleBase_swigregister(ScheduleBase)

def toScheduleBase(idfObject):
    return _openstudiomodelcore.toScheduleBase(idfObject)

def getScheduleBase(t_model, t_handle):
    return _openstudiomodelcore.getScheduleBase(t_model, t_handle)

def getScheduleBases(t_model):
    return _openstudiomodelcore.getScheduleBases(t_model)

def getScheduleBaseByName(t_model, t_name):
    return _openstudiomodelcore.getScheduleBaseByName(t_model, t_name)

def getScheduleBasesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getScheduleBasesByName(t_model, t_name, t_exactMatch)

def _to_ScheduleBase(self) -> OptionalScheduleBase:
    """Try to cast the ModelObject to a ScheduleBase.

    :return: An Optional ScheduleBase.
    """
    return toScheduleBase(self)
openstudioutilitiesidf.IdfObject.to_ScheduleBase = _to_ScheduleBase

def _getScheduleBase(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalScheduleBase:
    """Try to get an object of type ScheduleBase referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ScheduleBase.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getScheduleBase(self, t_handle)
Model.getScheduleBase = _getScheduleBase

def _getScheduleBases(self) -> ScheduleBaseVector:
    """Get a vector of all objects of type ScheduleBase in the model.

    :return: A vector of ScheduleBase.
    """
    return getScheduleBases(self)
Model.getScheduleBases = _getScheduleBases

def _getScheduleBaseByName(self, t_name: str) -> OptionalScheduleBase:
    """Try to get an object of type ScheduleBase that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ScheduleBase.
    """
    return getScheduleBaseByName(self, t_name)
Model.getScheduleBaseByName = _getScheduleBaseByName

def _getScheduleBasesByName(self, t_name: str, t_exactMatch: bool) -> ScheduleBaseVector:
    """Returns all objects of type ScheduleBase named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getScheduleBasesByName(self, t_name, t_exactMatch)
Model.getScheduleBasesByName = _getScheduleBasesByName

class Schedule(ScheduleBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_Schedule

    def __init__(self, *args):
        _openstudiomodelcore.Schedule_swiginit(self, _openstudiomodelcore.new_Schedule(*args))

# Register Schedule in _openstudiomodelcore:
_openstudiomodelcore.Schedule_swigregister(Schedule)

def toSchedule(idfObject):
    return _openstudiomodelcore.toSchedule(idfObject)

def getSchedule(t_model, t_handle):
    return _openstudiomodelcore.getSchedule(t_model, t_handle)

def getSchedules(t_model):
    return _openstudiomodelcore.getSchedules(t_model)

def getScheduleByName(t_model, t_name):
    return _openstudiomodelcore.getScheduleByName(t_model, t_name)

def getSchedulesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getSchedulesByName(t_model, t_name, t_exactMatch)

def _to_Schedule(self) -> OptionalSchedule:
    """Try to cast the ModelObject to a Schedule.

    :return: An Optional Schedule.
    """
    return toSchedule(self)
openstudioutilitiesidf.IdfObject.to_Schedule = _to_Schedule

def _getSchedule(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalSchedule:
    """Try to get an object of type Schedule referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional Schedule.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getSchedule(self, t_handle)
Model.getSchedule = _getSchedule

def _getSchedules(self) -> ScheduleVector:
    """Get a vector of all objects of type Schedule in the model.

    :return: A vector of Schedule.
    """
    return getSchedules(self)
Model.getSchedules = _getSchedules

def _getScheduleByName(self, t_name: str) -> OptionalSchedule:
    """Try to get an object of type Schedule that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional Schedule.
    """
    return getScheduleByName(self, t_name)
Model.getScheduleByName = _getScheduleByName

def _getSchedulesByName(self, t_name: str, t_exactMatch: bool) -> ScheduleVector:
    """Returns all objects of type Schedule named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getSchedulesByName(self, t_name, t_exactMatch)
Model.getSchedulesByName = _getSchedulesByName

class ScheduleDay(ScheduleBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleDay

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleDay_swiginit(self, _openstudiomodelcore.new_ScheduleDay(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ScheduleDay_iddObjectType()

    def isScheduleTypeLimitsDefaulted(self):
        return _openstudiomodelcore.ScheduleDay_isScheduleTypeLimitsDefaulted(self)

    def interpolatetoTimestep(self):
        return _openstudiomodelcore.ScheduleDay_interpolatetoTimestep(self)

    def isInterpolatetoTimestepDefaulted(self):
        return _openstudiomodelcore.ScheduleDay_isInterpolatetoTimestepDefaulted(self)

    def times(self):
        return _openstudiomodelcore.ScheduleDay_times(self)

    def values(self):
        return _openstudiomodelcore.ScheduleDay_values(self)

    def getValue(self, time):
        return _openstudiomodelcore.ScheduleDay_getValue(self, time)

    def timeSeries(self):
        return _openstudiomodelcore.ScheduleDay_timeSeries(self)

    def setInterpolatetoTimestep(self, interpolatetoTimestep):
        return _openstudiomodelcore.ScheduleDay_setInterpolatetoTimestep(self, interpolatetoTimestep)

    def resetInterpolatetoTimestep(self):
        return _openstudiomodelcore.ScheduleDay_resetInterpolatetoTimestep(self)

    def addValue(self, untilTime, value):
        return _openstudiomodelcore.ScheduleDay_addValue(self, untilTime, value)

    def removeValue(self, time):
        return _openstudiomodelcore.ScheduleDay_removeValue(self, time)

    def clearValues(self):
        return _openstudiomodelcore.ScheduleDay_clearValues(self)

# Register ScheduleDay in _openstudiomodelcore:
_openstudiomodelcore.ScheduleDay_swigregister(ScheduleDay)

def toScheduleDay(idfObject):
    return _openstudiomodelcore.toScheduleDay(idfObject)

def getScheduleDay(t_model, t_handle):
    return _openstudiomodelcore.getScheduleDay(t_model, t_handle)

def getScheduleDays(t_model):
    return _openstudiomodelcore.getScheduleDays(t_model)

def getScheduleDayByName(t_model, t_name):
    return _openstudiomodelcore.getScheduleDayByName(t_model, t_name)

def getScheduleDaysByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getScheduleDaysByName(t_model, t_name, t_exactMatch)

def _to_ScheduleDay(self) -> OptionalScheduleDay:
    """Try to cast the ModelObject to a ScheduleDay.

    :return: An Optional ScheduleDay.
    """
    return toScheduleDay(self)
openstudioutilitiesidf.IdfObject.to_ScheduleDay = _to_ScheduleDay

def _getScheduleDay(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalScheduleDay:
    """Try to get an object of type ScheduleDay referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ScheduleDay.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getScheduleDay(self, t_handle)
Model.getScheduleDay = _getScheduleDay

def _getScheduleDays(self) -> ScheduleDayVector:
    """Get a vector of all objects of type ScheduleDay in the model.

    :return: A vector of ScheduleDay.
    """
    return getScheduleDays(self)
Model.getScheduleDays = _getScheduleDays

def _getScheduleDayByName(self, t_name: str) -> OptionalScheduleDay:
    """Try to get an object of type ScheduleDay that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ScheduleDay.
    """
    return getScheduleDayByName(self, t_name)
Model.getScheduleDayByName = _getScheduleDayByName

def _getScheduleDaysByName(self, t_name: str, t_exactMatch: bool) -> ScheduleDayVector:
    """Returns all objects of type ScheduleDay named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getScheduleDaysByName(self, t_name, t_exactMatch)
Model.getScheduleDaysByName = _getScheduleDaysByName

class ScheduleWeek(ResourceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleWeek

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleWeek_swiginit(self, _openstudiomodelcore.new_ScheduleWeek(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ScheduleWeek_iddObjectType()

    def sundaySchedule(self):
        return _openstudiomodelcore.ScheduleWeek_sundaySchedule(self)

    def mondaySchedule(self):
        return _openstudiomodelcore.ScheduleWeek_mondaySchedule(self)

    def tuesdaySchedule(self):
        return _openstudiomodelcore.ScheduleWeek_tuesdaySchedule(self)

    def wednesdaySchedule(self):
        return _openstudiomodelcore.ScheduleWeek_wednesdaySchedule(self)

    def thursdaySchedule(self):
        return _openstudiomodelcore.ScheduleWeek_thursdaySchedule(self)

    def fridaySchedule(self):
        return _openstudiomodelcore.ScheduleWeek_fridaySchedule(self)

    def saturdaySchedule(self):
        return _openstudiomodelcore.ScheduleWeek_saturdaySchedule(self)

    def holidaySchedule(self):
        return _openstudiomodelcore.ScheduleWeek_holidaySchedule(self)

    def summerDesignDaySchedule(self):
        return _openstudiomodelcore.ScheduleWeek_summerDesignDaySchedule(self)

    def winterDesignDaySchedule(self):
        return _openstudiomodelcore.ScheduleWeek_winterDesignDaySchedule(self)

    def customDay1Schedule(self):
        return _openstudiomodelcore.ScheduleWeek_customDay1Schedule(self)

    def customDay2Schedule(self):
        return _openstudiomodelcore.ScheduleWeek_customDay2Schedule(self)

    def setSundaySchedule(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setSundaySchedule(self, schedule)

    def setMondaySchedule(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setMondaySchedule(self, schedule)

    def setTuesdaySchedule(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setTuesdaySchedule(self, schedule)

    def setWednesdaySchedule(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setWednesdaySchedule(self, schedule)

    def setThursdaySchedule(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setThursdaySchedule(self, schedule)

    def setFridaySchedule(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setFridaySchedule(self, schedule)

    def setSaturdaySchedule(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setSaturdaySchedule(self, schedule)

    def setHolidaySchedule(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setHolidaySchedule(self, schedule)

    def setSummerDesignDaySchedule(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setSummerDesignDaySchedule(self, schedule)

    def setWinterDesignDaySchedule(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setWinterDesignDaySchedule(self, schedule)

    def setCustomDay1Schedule(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setCustomDay1Schedule(self, schedule)

    def setCustomDay2Schedule(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setCustomDay2Schedule(self, schedule)

    def setAllSchedules(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setAllSchedules(self, schedule)

    def setWeekdaySchedule(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setWeekdaySchedule(self, schedule)

    def setWeekendSchedule(self, schedule):
        return _openstudiomodelcore.ScheduleWeek_setWeekendSchedule(self, schedule)

# Register ScheduleWeek in _openstudiomodelcore:
_openstudiomodelcore.ScheduleWeek_swigregister(ScheduleWeek)

def toScheduleWeek(idfObject):
    return _openstudiomodelcore.toScheduleWeek(idfObject)

def getScheduleWeek(t_model, t_handle):
    return _openstudiomodelcore.getScheduleWeek(t_model, t_handle)

def getScheduleWeeks(t_model):
    return _openstudiomodelcore.getScheduleWeeks(t_model)

def getScheduleWeekByName(t_model, t_name):
    return _openstudiomodelcore.getScheduleWeekByName(t_model, t_name)

def getScheduleWeeksByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getScheduleWeeksByName(t_model, t_name, t_exactMatch)

def _to_ScheduleWeek(self) -> OptionalScheduleWeek:
    """Try to cast the ModelObject to a ScheduleWeek.

    :return: An Optional ScheduleWeek.
    """
    return toScheduleWeek(self)
openstudioutilitiesidf.IdfObject.to_ScheduleWeek = _to_ScheduleWeek

def _getScheduleWeek(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalScheduleWeek:
    """Try to get an object of type ScheduleWeek referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ScheduleWeek.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getScheduleWeek(self, t_handle)
Model.getScheduleWeek = _getScheduleWeek

def _getScheduleWeeks(self) -> ScheduleWeekVector:
    """Get a vector of all objects of type ScheduleWeek in the model.

    :return: A vector of ScheduleWeek.
    """
    return getScheduleWeeks(self)
Model.getScheduleWeeks = _getScheduleWeeks

def _getScheduleWeekByName(self, t_name: str) -> OptionalScheduleWeek:
    """Try to get an object of type ScheduleWeek that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ScheduleWeek.
    """
    return getScheduleWeekByName(self, t_name)
Model.getScheduleWeekByName = _getScheduleWeekByName

def _getScheduleWeeksByName(self, t_name: str, t_exactMatch: bool) -> ScheduleWeekVector:
    """Returns all objects of type ScheduleWeek named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getScheduleWeeksByName(self, t_name, t_exactMatch)
Model.getScheduleWeeksByName = _getScheduleWeeksByName

class ScheduleYear(Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleYear

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleYear_swiginit(self, _openstudiomodelcore.new_ScheduleYear(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ScheduleYear_iddObjectType()

    def dates(self):
        return _openstudiomodelcore.ScheduleYear_dates(self)

    def scheduleWeeks(self):
        return _openstudiomodelcore.ScheduleYear_scheduleWeeks(self)

    def addScheduleWeek(self, untilDate, scheduleWeek):
        return _openstudiomodelcore.ScheduleYear_addScheduleWeek(self, untilDate, scheduleWeek)

    def clearScheduleWeeks(self):
        return _openstudiomodelcore.ScheduleYear_clearScheduleWeeks(self)

    def getScheduleWeek(self, date):
        return _openstudiomodelcore.ScheduleYear_getScheduleWeek(self, date)

# Register ScheduleYear in _openstudiomodelcore:
_openstudiomodelcore.ScheduleYear_swigregister(ScheduleYear)

def toScheduleYear(idfObject):
    return _openstudiomodelcore.toScheduleYear(idfObject)

def getScheduleYear(t_model, t_handle):
    return _openstudiomodelcore.getScheduleYear(t_model, t_handle)

def getScheduleYears(t_model):
    return _openstudiomodelcore.getScheduleYears(t_model)

def getScheduleYearByName(t_model, t_name):
    return _openstudiomodelcore.getScheduleYearByName(t_model, t_name)

def getScheduleYearsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getScheduleYearsByName(t_model, t_name, t_exactMatch)

def _to_ScheduleYear(self) -> OptionalScheduleYear:
    """Try to cast the ModelObject to a ScheduleYear.

    :return: An Optional ScheduleYear.
    """
    return toScheduleYear(self)
openstudioutilitiesidf.IdfObject.to_ScheduleYear = _to_ScheduleYear

def _getScheduleYear(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalScheduleYear:
    """Try to get an object of type ScheduleYear referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ScheduleYear.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getScheduleYear(self, t_handle)
Model.getScheduleYear = _getScheduleYear

def _getScheduleYears(self) -> ScheduleYearVector:
    """Get a vector of all objects of type ScheduleYear in the model.

    :return: A vector of ScheduleYear.
    """
    return getScheduleYears(self)
Model.getScheduleYears = _getScheduleYears

def _getScheduleYearByName(self, t_name: str) -> OptionalScheduleYear:
    """Try to get an object of type ScheduleYear that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ScheduleYear.
    """
    return getScheduleYearByName(self, t_name)
Model.getScheduleYearByName = _getScheduleYearByName

def _getScheduleYearsByName(self, t_name: str, t_exactMatch: bool) -> ScheduleYearVector:
    """Returns all objects of type ScheduleYear named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getScheduleYearsByName(self, t_name, t_exactMatch)
Model.getScheduleYearsByName = _getScheduleYearsByName

class ScheduleRule(ParentObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleRule

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleRule_swiginit(self, _openstudiomodelcore.new_ScheduleRule(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ScheduleRule_iddObjectType()

    @staticmethod
    def validDateSpecificationTypeValues():
        return _openstudiomodelcore.ScheduleRule_validDateSpecificationTypeValues()

    def scheduleRuleset(self):
        return _openstudiomodelcore.ScheduleRule_scheduleRuleset(self)

    def ruleIndex(self):
        return _openstudiomodelcore.ScheduleRule_ruleIndex(self)

    def daySchedule(self):
        return _openstudiomodelcore.ScheduleRule_daySchedule(self)

    def applySunday(self):
        return _openstudiomodelcore.ScheduleRule_applySunday(self)

    def applyMonday(self):
        return _openstudiomodelcore.ScheduleRule_applyMonday(self)

    def applyTuesday(self):
        return _openstudiomodelcore.ScheduleRule_applyTuesday(self)

    def applyWednesday(self):
        return _openstudiomodelcore.ScheduleRule_applyWednesday(self)

    def applyThursday(self):
        return _openstudiomodelcore.ScheduleRule_applyThursday(self)

    def applyFriday(self):
        return _openstudiomodelcore.ScheduleRule_applyFriday(self)

    def applySaturday(self):
        return _openstudiomodelcore.ScheduleRule_applySaturday(self)

    def dateSpecificationType(self):
        return _openstudiomodelcore.ScheduleRule_dateSpecificationType(self)

    def startDate(self):
        return _openstudiomodelcore.ScheduleRule_startDate(self)

    def endDate(self):
        return _openstudiomodelcore.ScheduleRule_endDate(self)

    def specificDates(self):
        return _openstudiomodelcore.ScheduleRule_specificDates(self)

    def setApplySunday(self, applySunday):
        return _openstudiomodelcore.ScheduleRule_setApplySunday(self, applySunday)

    def setApplySundayNoFail(self, applySunday):
        return _openstudiomodelcore.ScheduleRule_setApplySundayNoFail(self, applySunday)

    def setApplyMonday(self, applyMonday):
        return _openstudiomodelcore.ScheduleRule_setApplyMonday(self, applyMonday)

    def setApplyMondayNoFail(self, applyMonday):
        return _openstudiomodelcore.ScheduleRule_setApplyMondayNoFail(self, applyMonday)

    def setApplyTuesday(self, applyTuesday):
        return _openstudiomodelcore.ScheduleRule_setApplyTuesday(self, applyTuesday)

    def setApplyTuesdayNoFail(self, applyTuesday):
        return _openstudiomodelcore.ScheduleRule_setApplyTuesdayNoFail(self, applyTuesday)

    def setApplyWednesday(self, applyWednesday):
        return _openstudiomodelcore.ScheduleRule_setApplyWednesday(self, applyWednesday)

    def setApplyWednesdayNoFail(self, applyWednesday):
        return _openstudiomodelcore.ScheduleRule_setApplyWednesdayNoFail(self, applyWednesday)

    def setApplyThursday(self, applyThursday):
        return _openstudiomodelcore.ScheduleRule_setApplyThursday(self, applyThursday)

    def setApplyThursdayNoFail(self, applyThursday):
        return _openstudiomodelcore.ScheduleRule_setApplyThursdayNoFail(self, applyThursday)

    def setApplyFriday(self, applyFriday):
        return _openstudiomodelcore.ScheduleRule_setApplyFriday(self, applyFriday)

    def setApplyFridayNoFail(self, applyFriday):
        return _openstudiomodelcore.ScheduleRule_setApplyFridayNoFail(self, applyFriday)

    def setApplySaturday(self, applySaturday):
        return _openstudiomodelcore.ScheduleRule_setApplySaturday(self, applySaturday)

    def setApplySaturdayNoFail(self, applySaturday):
        return _openstudiomodelcore.ScheduleRule_setApplySaturdayNoFail(self, applySaturday)

    def setStartDate(self, date):
        return _openstudiomodelcore.ScheduleRule_setStartDate(self, date)

    def setEndDate(self, date):
        return _openstudiomodelcore.ScheduleRule_setEndDate(self, date)

    def addSpecificDate(self, date):
        return _openstudiomodelcore.ScheduleRule_addSpecificDate(self, date)

    def ensureNoLeapDays(self):
        return _openstudiomodelcore.ScheduleRule_ensureNoLeapDays(self)

    def containsDate(self, date):
        return _openstudiomodelcore.ScheduleRule_containsDate(self, date)

    def containsDates(self, dates):
        return _openstudiomodelcore.ScheduleRule_containsDates(self, dates)

    def applyAllDays(self):
        return _openstudiomodelcore.ScheduleRule_applyAllDays(self)

    def applyWeekdays(self):
        return _openstudiomodelcore.ScheduleRule_applyWeekdays(self)

    def applyWeekends(self):
        return _openstudiomodelcore.ScheduleRule_applyWeekends(self)

    def setApplyAllDays(self, applyAllDays):
        return _openstudiomodelcore.ScheduleRule_setApplyAllDays(self, applyAllDays)

    def setApplyWeekdays(self, applyWeekdays):
        return _openstudiomodelcore.ScheduleRule_setApplyWeekdays(self, applyWeekdays)

    def setApplyWeekends(self, applyWeekends):
        return _openstudiomodelcore.ScheduleRule_setApplyWeekends(self, applyWeekends)

# Register ScheduleRule in _openstudiomodelcore:
_openstudiomodelcore.ScheduleRule_swigregister(ScheduleRule)

def toScheduleRule(idfObject):
    return _openstudiomodelcore.toScheduleRule(idfObject)

def getScheduleRule(t_model, t_handle):
    return _openstudiomodelcore.getScheduleRule(t_model, t_handle)

def getScheduleRules(t_model):
    return _openstudiomodelcore.getScheduleRules(t_model)

def getScheduleRuleByName(t_model, t_name):
    return _openstudiomodelcore.getScheduleRuleByName(t_model, t_name)

def getScheduleRulesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getScheduleRulesByName(t_model, t_name, t_exactMatch)

def _to_ScheduleRule(self) -> OptionalScheduleRule:
    """Try to cast the ModelObject to a ScheduleRule.

    :return: An Optional ScheduleRule.
    """
    return toScheduleRule(self)
openstudioutilitiesidf.IdfObject.to_ScheduleRule = _to_ScheduleRule

def _getScheduleRule(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalScheduleRule:
    """Try to get an object of type ScheduleRule referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ScheduleRule.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getScheduleRule(self, t_handle)
Model.getScheduleRule = _getScheduleRule

def _getScheduleRules(self) -> ScheduleRuleVector:
    """Get a vector of all objects of type ScheduleRule in the model.

    :return: A vector of ScheduleRule.
    """
    return getScheduleRules(self)
Model.getScheduleRules = _getScheduleRules

def _getScheduleRuleByName(self, t_name: str) -> OptionalScheduleRule:
    """Try to get an object of type ScheduleRule that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ScheduleRule.
    """
    return getScheduleRuleByName(self, t_name)
Model.getScheduleRuleByName = _getScheduleRuleByName

def _getScheduleRulesByName(self, t_name: str, t_exactMatch: bool) -> ScheduleRuleVector:
    """Returns all objects of type ScheduleRule named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getScheduleRulesByName(self, t_name, t_exactMatch)
Model.getScheduleRulesByName = _getScheduleRulesByName

class ScheduleRuleset(Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ScheduleRuleset

    def __init__(self, *args):
        _openstudiomodelcore.ScheduleRuleset_swiginit(self, _openstudiomodelcore.new_ScheduleRuleset(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ScheduleRuleset_iddObjectType()

    def defaultDaySchedule(self):
        return _openstudiomodelcore.ScheduleRuleset_defaultDaySchedule(self)

    def summerDesignDaySchedule(self):
        return _openstudiomodelcore.ScheduleRuleset_summerDesignDaySchedule(self)

    def isSummerDesignDayScheduleDefaulted(self):
        return _openstudiomodelcore.ScheduleRuleset_isSummerDesignDayScheduleDefaulted(self)

    def winterDesignDaySchedule(self):
        return _openstudiomodelcore.ScheduleRuleset_winterDesignDaySchedule(self)

    def isWinterDesignDayScheduleDefaulted(self):
        return _openstudiomodelcore.ScheduleRuleset_isWinterDesignDayScheduleDefaulted(self)

    def holidaySchedule(self):
        return _openstudiomodelcore.ScheduleRuleset_holidaySchedule(self)

    def isHolidayScheduleDefaulted(self):
        return _openstudiomodelcore.ScheduleRuleset_isHolidayScheduleDefaulted(self)

    def customDay1Schedule(self):
        return _openstudiomodelcore.ScheduleRuleset_customDay1Schedule(self)

    def isCustomDay1ScheduleDefaulted(self):
        return _openstudiomodelcore.ScheduleRuleset_isCustomDay1ScheduleDefaulted(self)

    def customDay2Schedule(self):
        return _openstudiomodelcore.ScheduleRuleset_customDay2Schedule(self)

    def isCustomDay2ScheduleDefaulted(self):
        return _openstudiomodelcore.ScheduleRuleset_isCustomDay2ScheduleDefaulted(self)

    def setSummerDesignDaySchedule(self, schedule):
        return _openstudiomodelcore.ScheduleRuleset_setSummerDesignDaySchedule(self, schedule)

    def resetSummerDesignDaySchedule(self):
        return _openstudiomodelcore.ScheduleRuleset_resetSummerDesignDaySchedule(self)

    def setWinterDesignDaySchedule(self, schedule):
        return _openstudiomodelcore.ScheduleRuleset_setWinterDesignDaySchedule(self, schedule)

    def resetWinterDesignDaySchedule(self):
        return _openstudiomodelcore.ScheduleRuleset_resetWinterDesignDaySchedule(self)

    def setHolidaySchedule(self, schedule):
        return _openstudiomodelcore.ScheduleRuleset_setHolidaySchedule(self, schedule)

    def resetHolidaySchedule(self):
        return _openstudiomodelcore.ScheduleRuleset_resetHolidaySchedule(self)

    def setCustomDay1Schedule(self, schedule):
        return _openstudiomodelcore.ScheduleRuleset_setCustomDay1Schedule(self, schedule)

    def resetCustomDay1Schedule(self):
        return _openstudiomodelcore.ScheduleRuleset_resetCustomDay1Schedule(self)

    def setCustomDay2Schedule(self, schedule):
        return _openstudiomodelcore.ScheduleRuleset_setCustomDay2Schedule(self, schedule)

    def resetCustomDay2Schedule(self):
        return _openstudiomodelcore.ScheduleRuleset_resetCustomDay2Schedule(self)

    def scheduleRules(self):
        return _openstudiomodelcore.ScheduleRuleset_scheduleRules(self)

    def setScheduleRuleIndex(self, scheduleRule, index):
        return _openstudiomodelcore.ScheduleRuleset_setScheduleRuleIndex(self, scheduleRule, index)

    def getActiveRuleIndices(self, startDate, endDate):
        return _openstudiomodelcore.ScheduleRuleset_getActiveRuleIndices(self, startDate, endDate)

    def getDaySchedules(self, startDate, endDate):
        return _openstudiomodelcore.ScheduleRuleset_getDaySchedules(self, startDate, endDate)

# Register ScheduleRuleset in _openstudiomodelcore:
_openstudiomodelcore.ScheduleRuleset_swigregister(ScheduleRuleset)

def toScheduleRuleset(idfObject):
    return _openstudiomodelcore.toScheduleRuleset(idfObject)

def getScheduleRuleset(t_model, t_handle):
    return _openstudiomodelcore.getScheduleRuleset(t_model, t_handle)

def getScheduleRulesets(t_model):
    return _openstudiomodelcore.getScheduleRulesets(t_model)

def getScheduleRulesetByName(t_model, t_name):
    return _openstudiomodelcore.getScheduleRulesetByName(t_model, t_name)

def getScheduleRulesetsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getScheduleRulesetsByName(t_model, t_name, t_exactMatch)

def _to_ScheduleRuleset(self) -> OptionalScheduleRuleset:
    """Try to cast the ModelObject to a ScheduleRuleset.

    :return: An Optional ScheduleRuleset.
    """
    return toScheduleRuleset(self)
openstudioutilitiesidf.IdfObject.to_ScheduleRuleset = _to_ScheduleRuleset

def _getScheduleRuleset(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalScheduleRuleset:
    """Try to get an object of type ScheduleRuleset referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ScheduleRuleset.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getScheduleRuleset(self, t_handle)
Model.getScheduleRuleset = _getScheduleRuleset

def _getScheduleRulesets(self) -> ScheduleRulesetVector:
    """Get a vector of all objects of type ScheduleRuleset in the model.

    :return: A vector of ScheduleRuleset.
    """
    return getScheduleRulesets(self)
Model.getScheduleRulesets = _getScheduleRulesets

def _getScheduleRulesetByName(self, t_name: str) -> OptionalScheduleRuleset:
    """Try to get an object of type ScheduleRuleset that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ScheduleRuleset.
    """
    return getScheduleRulesetByName(self, t_name)
Model.getScheduleRulesetByName = _getScheduleRulesetByName

def _getScheduleRulesetsByName(self, t_name: str, t_exactMatch: bool) -> ScheduleRulesetVector:
    """Returns all objects of type ScheduleRuleset named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getScheduleRulesetsByName(self, t_name, t_exactMatch)
Model.getScheduleRulesetsByName = _getScheduleRulesetsByName

class OutputVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_OutputVariable

    def __init__(self, *args):
        _openstudiomodelcore.OutputVariable_swiginit(self, _openstudiomodelcore.new_OutputVariable(*args))

    def remove(self):
        return _openstudiomodelcore.OutputVariable_remove(self)

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.OutputVariable_iddObjectType()

    @staticmethod
    def reportingFrequencyValues():
        return _openstudiomodelcore.OutputVariable_reportingFrequencyValues()

    def keyValue(self):
        return _openstudiomodelcore.OutputVariable_keyValue(self)

    def isKeyValueDefaulted(self):
        return _openstudiomodelcore.OutputVariable_isKeyValueDefaulted(self)

    def variableName(self):
        return _openstudiomodelcore.OutputVariable_variableName(self)

    def reportingFrequency(self):
        return _openstudiomodelcore.OutputVariable_reportingFrequency(self)

    def isReportingFrequencyDefaulted(self):
        return _openstudiomodelcore.OutputVariable_isReportingFrequencyDefaulted(self)

    def schedule(self):
        return _openstudiomodelcore.OutputVariable_schedule(self)

    def exportToBCVTB(self):
        return _openstudiomodelcore.OutputVariable_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self):
        return _openstudiomodelcore.OutputVariable_isExportToBCVTBDefaulted(self)

    def setKeyValue(self, keyValue):
        return _openstudiomodelcore.OutputVariable_setKeyValue(self, keyValue)

    def resetKeyValue(self):
        return _openstudiomodelcore.OutputVariable_resetKeyValue(self)

    def setVariableName(self, variableName):
        return _openstudiomodelcore.OutputVariable_setVariableName(self, variableName)

    def setReportingFrequency(self, reportingFrequency):
        return _openstudiomodelcore.OutputVariable_setReportingFrequency(self, reportingFrequency)

    def resetReportingFrequency(self):
        return _openstudiomodelcore.OutputVariable_resetReportingFrequency(self)

    def setSchedule(self, schedule):
        return _openstudiomodelcore.OutputVariable_setSchedule(self, schedule)

    def resetSchedule(self):
        return _openstudiomodelcore.OutputVariable_resetSchedule(self)

    def setExportToBCVTB(self, exportToBCVTB):
        return _openstudiomodelcore.OutputVariable_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self):
        return _openstudiomodelcore.OutputVariable_resetExportToBCVTB(self)

# Register OutputVariable in _openstudiomodelcore:
_openstudiomodelcore.OutputVariable_swigregister(OutputVariable)

def toOutputVariable(idfObject):
    return _openstudiomodelcore.toOutputVariable(idfObject)

def getOutputVariable(t_model, t_handle):
    return _openstudiomodelcore.getOutputVariable(t_model, t_handle)

def getOutputVariables(t_model):
    return _openstudiomodelcore.getOutputVariables(t_model)

def getOutputVariableByName(t_model, t_name):
    return _openstudiomodelcore.getOutputVariableByName(t_model, t_name)

def getOutputVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getOutputVariablesByName(t_model, t_name, t_exactMatch)

def _to_OutputVariable(self) -> OptionalOutputVariable:
    """Try to cast the ModelObject to a OutputVariable.

    :return: An Optional OutputVariable.
    """
    return toOutputVariable(self)
openstudioutilitiesidf.IdfObject.to_OutputVariable = _to_OutputVariable

def _getOutputVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalOutputVariable:
    """Try to get an object of type OutputVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional OutputVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getOutputVariable(self, t_handle)
Model.getOutputVariable = _getOutputVariable

def _getOutputVariables(self) -> OutputVariableVector:
    """Get a vector of all objects of type OutputVariable in the model.

    :return: A vector of OutputVariable.
    """
    return getOutputVariables(self)
Model.getOutputVariables = _getOutputVariables

def _getOutputVariableByName(self, t_name: str) -> OptionalOutputVariable:
    """Try to get an object of type OutputVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional OutputVariable.
    """
    return getOutputVariableByName(self, t_name)
Model.getOutputVariableByName = _getOutputVariableByName

def _getOutputVariablesByName(self, t_name: str, t_exactMatch: bool) -> OutputVariableVector:
    """Returns all objects of type OutputVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getOutputVariablesByName(self, t_name, t_exactMatch)
Model.getOutputVariablesByName = _getOutputVariablesByName

class AdditionalProperties(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_AdditionalProperties

    def __init__(self, *args):
        _openstudiomodelcore.AdditionalProperties_swiginit(self, _openstudiomodelcore.new_AdditionalProperties(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.AdditionalProperties_iddObjectType()

    def modelObject(self):
        return _openstudiomodelcore.AdditionalProperties_modelObject(self)

    def featureNames(self):
        return _openstudiomodelcore.AdditionalProperties_featureNames(self)

    def hasFeature(self, name):
        return _openstudiomodelcore.AdditionalProperties_hasFeature(self, name)

    def getFeatureDataType(self, name):
        return _openstudiomodelcore.AdditionalProperties_getFeatureDataType(self, name)

    def getFeatureAsString(self, name):
        return _openstudiomodelcore.AdditionalProperties_getFeatureAsString(self, name)

    def getFeatureAsDouble(self, name):
        return _openstudiomodelcore.AdditionalProperties_getFeatureAsDouble(self, name)

    def getFeatureAsInteger(self, name):
        return _openstudiomodelcore.AdditionalProperties_getFeatureAsInteger(self, name)

    def getFeatureAsBoolean(self, name):
        return _openstudiomodelcore.AdditionalProperties_getFeatureAsBoolean(self, name)

    def suggestedFeatureNames(self):
        return _openstudiomodelcore.AdditionalProperties_suggestedFeatureNames(self)

    def setFeature(self, *args):
        return _openstudiomodelcore.AdditionalProperties_setFeature(self, *args)

    def resetFeature(self, name):
        return _openstudiomodelcore.AdditionalProperties_resetFeature(self, name)

    def merge(self, other, overwrite=False):
        return _openstudiomodelcore.AdditionalProperties_merge(self, other, overwrite)

# Register AdditionalProperties in _openstudiomodelcore:
_openstudiomodelcore.AdditionalProperties_swigregister(AdditionalProperties)

def toAdditionalProperties(idfObject):
    return _openstudiomodelcore.toAdditionalProperties(idfObject)

def getAdditionalProperties(t_model, t_handle):
    return _openstudiomodelcore.getAdditionalProperties(t_model, t_handle)

def getAdditionalPropertiess(t_model):
    return _openstudiomodelcore.getAdditionalPropertiess(t_model)

def getAdditionalPropertiesByName(t_model, t_name):
    return _openstudiomodelcore.getAdditionalPropertiesByName(t_model, t_name)

def getAdditionalPropertiessByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getAdditionalPropertiessByName(t_model, t_name, t_exactMatch)

def _to_AdditionalProperties(self) -> OptionalAdditionalProperties:
    """Try to cast the ModelObject to a AdditionalProperties.

    :return: An Optional AdditionalProperties.
    """
    return toAdditionalProperties(self)
openstudioutilitiesidf.IdfObject.to_AdditionalProperties = _to_AdditionalProperties

def _getAdditionalProperties(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalAdditionalProperties:
    """Try to get an object of type AdditionalProperties referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional AdditionalProperties.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getAdditionalProperties(self, t_handle)
Model.getAdditionalProperties = _getAdditionalProperties

def _getAdditionalPropertiess(self) -> AdditionalPropertiesVector:
    """Get a vector of all objects of type AdditionalProperties in the model.

    :return: A vector of AdditionalProperties.
    """
    return getAdditionalPropertiess(self)
Model.getAdditionalPropertiess = _getAdditionalPropertiess

def _getAdditionalPropertiesByName(self, t_name: str) -> OptionalAdditionalProperties:
    """Try to get an object of type AdditionalProperties that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional AdditionalProperties.
    """
    return getAdditionalPropertiesByName(self, t_name)
Model.getAdditionalPropertiesByName = _getAdditionalPropertiesByName

def _getAdditionalPropertiessByName(self, t_name: str, t_exactMatch: bool) -> AdditionalPropertiesVector:
    """Returns all objects of type AdditionalProperties named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getAdditionalPropertiessByName(self, t_name, t_exactMatch)
Model.getAdditionalPropertiessByName = _getAdditionalPropertiessByName

class GenericModelObject(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_GenericModelObject

    def __init__(self, *args):
        _openstudiomodelcore.GenericModelObject_swiginit(self, _openstudiomodelcore.new_GenericModelObject(*args))

# Register GenericModelObject in _openstudiomodelcore:
_openstudiomodelcore.GenericModelObject_swigregister(GenericModelObject)

def toGenericModelObject(idfObject):
    return _openstudiomodelcore.toGenericModelObject(idfObject)

def getGenericModelObject(t_model, t_handle):
    return _openstudiomodelcore.getGenericModelObject(t_model, t_handle)

def getGenericModelObjects(t_model):
    return _openstudiomodelcore.getGenericModelObjects(t_model)

def getGenericModelObjectByName(t_model, t_name):
    return _openstudiomodelcore.getGenericModelObjectByName(t_model, t_name)

def getGenericModelObjectsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getGenericModelObjectsByName(t_model, t_name, t_exactMatch)

def _to_GenericModelObject(self) -> OptionalGenericModelObject:
    """Try to cast the ModelObject to a GenericModelObject.

    :return: An Optional GenericModelObject.
    """
    return toGenericModelObject(self)
openstudioutilitiesidf.IdfObject.to_GenericModelObject = _to_GenericModelObject

def _getGenericModelObject(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalGenericModelObject:
    """Try to get an object of type GenericModelObject referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional GenericModelObject.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getGenericModelObject(self, t_handle)
Model.getGenericModelObject = _getGenericModelObject

def _getGenericModelObjects(self) -> GenericModelObjectVector:
    """Get a vector of all objects of type GenericModelObject in the model.

    :return: A vector of GenericModelObject.
    """
    return getGenericModelObjects(self)
Model.getGenericModelObjects = _getGenericModelObjects

def _getGenericModelObjectByName(self, t_name: str) -> OptionalGenericModelObject:
    """Try to get an object of type GenericModelObject that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional GenericModelObject.
    """
    return getGenericModelObjectByName(self, t_name)
Model.getGenericModelObjectByName = _getGenericModelObjectByName

def _getGenericModelObjectsByName(self, t_name: str, t_exactMatch: bool) -> GenericModelObjectVector:
    """Returns all objects of type GenericModelObject named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getGenericModelObjectsByName(self, t_name, t_exactMatch)
Model.getGenericModelObjectsByName = _getGenericModelObjectsByName

class ModelObjectList(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ModelObjectList

    def __init__(self, *args):
        _openstudiomodelcore.ModelObjectList_swiginit(self, _openstudiomodelcore.new_ModelObjectList(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ModelObjectList_iddObjectType()

    def remove(self):
        return _openstudiomodelcore.ModelObjectList_remove(self)

    def clone(self, model):
        return _openstudiomodelcore.ModelObjectList_clone(self, model)

    def size(self):
        return _openstudiomodelcore.ModelObjectList_size(self)

    def addModelObject(self, modelObject):
        return _openstudiomodelcore.ModelObjectList_addModelObject(self, modelObject)

    def hasModelObject(self, modelObject):
        return _openstudiomodelcore.ModelObjectList_hasModelObject(self, modelObject)

    def removeModelObject(self, modelObject):
        return _openstudiomodelcore.ModelObjectList_removeModelObject(self, modelObject)

    def removeAllModelObjects(self):
        return _openstudiomodelcore.ModelObjectList_removeAllModelObjects(self)

    def modelObjects(self):
        return _openstudiomodelcore.ModelObjectList_modelObjects(self)

# Register ModelObjectList in _openstudiomodelcore:
_openstudiomodelcore.ModelObjectList_swigregister(ModelObjectList)

def toModelObjectList(idfObject):
    return _openstudiomodelcore.toModelObjectList(idfObject)

def getModelObjectList(t_model, t_handle):
    return _openstudiomodelcore.getModelObjectList(t_model, t_handle)

def getModelObjectLists(t_model):
    return _openstudiomodelcore.getModelObjectLists(t_model)

def getModelObjectListByName(t_model, t_name):
    return _openstudiomodelcore.getModelObjectListByName(t_model, t_name)

def getModelObjectListsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getModelObjectListsByName(t_model, t_name, t_exactMatch)

def _to_ModelObjectList(self) -> OptionalModelObjectList:
    """Try to cast the ModelObject to a ModelObjectList.

    :return: An Optional ModelObjectList.
    """
    return toModelObjectList(self)
openstudioutilitiesidf.IdfObject.to_ModelObjectList = _to_ModelObjectList

def _getModelObjectList(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalModelObjectList:
    """Try to get an object of type ModelObjectList referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ModelObjectList.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getModelObjectList(self, t_handle)
Model.getModelObjectList = _getModelObjectList

def _getModelObjectLists(self) -> ModelObjectListVector:
    """Get a vector of all objects of type ModelObjectList in the model.

    :return: A vector of ModelObjectList.
    """
    return getModelObjectLists(self)
Model.getModelObjectLists = _getModelObjectLists

def _getModelObjectListByName(self, t_name: str) -> OptionalModelObjectList:
    """Try to get an object of type ModelObjectList that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ModelObjectList.
    """
    return getModelObjectListByName(self, t_name)
Model.getModelObjectListByName = _getModelObjectListByName

def _getModelObjectListsByName(self, t_name: str, t_exactMatch: bool) -> ModelObjectListVector:
    """Returns all objects of type ModelObjectList named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getModelObjectListsByName(self, t_name, t_exactMatch)
Model.getModelObjectListsByName = _getModelObjectListsByName

class EnergyManagementSystemSensor(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemSensor

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemSensor_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemSensor(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.EnergyManagementSystemSensor_iddObjectType()

    def keyName(self):
        return _openstudiomodelcore.EnergyManagementSystemSensor_keyName(self)

    def outputVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemSensor_outputVariable(self)

    def outputMeter(self):
        return _openstudiomodelcore.EnergyManagementSystemSensor_outputMeter(self)

    def outputVariableOrMeterName(self):
        return _openstudiomodelcore.EnergyManagementSystemSensor_outputVariableOrMeterName(self)

    def setKeyName(self, keyName):
        return _openstudiomodelcore.EnergyManagementSystemSensor_setKeyName(self, keyName)

    def setOutputVariable(self, outputVariable):
        return _openstudiomodelcore.EnergyManagementSystemSensor_setOutputVariable(self, outputVariable)

    def setOutputMeter(self, outputMeter):
        return _openstudiomodelcore.EnergyManagementSystemSensor_setOutputMeter(self, outputMeter)

    def setOutputVariableOrMeterName(self, outputVariableOrMeterName):
        return _openstudiomodelcore.EnergyManagementSystemSensor_setOutputVariableOrMeterName(self, outputVariableOrMeterName)

# Register EnergyManagementSystemSensor in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemSensor_swigregister(EnergyManagementSystemSensor)

def toEnergyManagementSystemSensor(idfObject):
    return _openstudiomodelcore.toEnergyManagementSystemSensor(idfObject)

def getEnergyManagementSystemSensor(t_model, t_handle):
    return _openstudiomodelcore.getEnergyManagementSystemSensor(t_model, t_handle)

def getEnergyManagementSystemSensors(t_model):
    return _openstudiomodelcore.getEnergyManagementSystemSensors(t_model)

def getEnergyManagementSystemSensorByName(t_model, t_name):
    return _openstudiomodelcore.getEnergyManagementSystemSensorByName(t_model, t_name)

def getEnergyManagementSystemSensorsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getEnergyManagementSystemSensorsByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemSensor(self) -> OptionalEnergyManagementSystemSensor:
    """Try to cast the ModelObject to a EnergyManagementSystemSensor.

    :return: An Optional EnergyManagementSystemSensor.
    """
    return toEnergyManagementSystemSensor(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemSensor = _to_EnergyManagementSystemSensor

def _getEnergyManagementSystemSensor(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalEnergyManagementSystemSensor:
    """Try to get an object of type EnergyManagementSystemSensor referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional EnergyManagementSystemSensor.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getEnergyManagementSystemSensor(self, t_handle)
Model.getEnergyManagementSystemSensor = _getEnergyManagementSystemSensor

def _getEnergyManagementSystemSensors(self) -> EnergyManagementSystemSensorVector:
    """Get a vector of all objects of type EnergyManagementSystemSensor in the model.

    :return: A vector of EnergyManagementSystemSensor.
    """
    return getEnergyManagementSystemSensors(self)
Model.getEnergyManagementSystemSensors = _getEnergyManagementSystemSensors

def _getEnergyManagementSystemSensorByName(self, t_name: str) -> OptionalEnergyManagementSystemSensor:
    """Try to get an object of type EnergyManagementSystemSensor that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional EnergyManagementSystemSensor.
    """
    return getEnergyManagementSystemSensorByName(self, t_name)
Model.getEnergyManagementSystemSensorByName = _getEnergyManagementSystemSensorByName

def _getEnergyManagementSystemSensorsByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemSensorVector:
    """Returns all objects of type EnergyManagementSystemSensor named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getEnergyManagementSystemSensorsByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemSensorsByName = _getEnergyManagementSystemSensorsByName

class EnergyManagementSystemActuator(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemActuator

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemActuator_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemActuator(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.EnergyManagementSystemActuator_iddObjectType()

    def actuatedComponent(self):
        return _openstudiomodelcore.EnergyManagementSystemActuator_actuatedComponent(self)

    def actuatedComponentControlType(self):
        return _openstudiomodelcore.EnergyManagementSystemActuator_actuatedComponentControlType(self)

    def actuatedComponentType(self):
        return _openstudiomodelcore.EnergyManagementSystemActuator_actuatedComponentType(self)

    def zoneName(self):
        return _openstudiomodelcore.EnergyManagementSystemActuator_zoneName(self)

    def zoneOrSpace(self):
        return _openstudiomodelcore.EnergyManagementSystemActuator_zoneOrSpace(self)

    def thermalZone(self):
        return _openstudiomodelcore.EnergyManagementSystemActuator_thermalZone(self)

    def space(self):
        return _openstudiomodelcore.EnergyManagementSystemActuator_space(self)

    def setActuatedComponent(self, modelObject):
        return _openstudiomodelcore.EnergyManagementSystemActuator_setActuatedComponent(self, modelObject)

    def setActuatedComponentControlType(self, actuatedComponentControlType):
        return _openstudiomodelcore.EnergyManagementSystemActuator_setActuatedComponentControlType(self, actuatedComponentControlType)

    def setActuatedComponentType(self, actuatedComponentType):
        return _openstudiomodelcore.EnergyManagementSystemActuator_setActuatedComponentType(self, actuatedComponentType)

    def setThermalZone(self, thermalZone):
        return _openstudiomodelcore.EnergyManagementSystemActuator_setThermalZone(self, thermalZone)

    def setSpace(self, space):
        return _openstudiomodelcore.EnergyManagementSystemActuator_setSpace(self, space)

    def resetZoneName(self):
        return _openstudiomodelcore.EnergyManagementSystemActuator_resetZoneName(self)

    def resetZoneOrSpace(self):
        return _openstudiomodelcore.EnergyManagementSystemActuator_resetZoneOrSpace(self)

# Register EnergyManagementSystemActuator in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemActuator_swigregister(EnergyManagementSystemActuator)

def toEnergyManagementSystemActuator(idfObject):
    return _openstudiomodelcore.toEnergyManagementSystemActuator(idfObject)

def getEnergyManagementSystemActuator(t_model, t_handle):
    return _openstudiomodelcore.getEnergyManagementSystemActuator(t_model, t_handle)

def getEnergyManagementSystemActuators(t_model):
    return _openstudiomodelcore.getEnergyManagementSystemActuators(t_model)

def getEnergyManagementSystemActuatorByName(t_model, t_name):
    return _openstudiomodelcore.getEnergyManagementSystemActuatorByName(t_model, t_name)

def getEnergyManagementSystemActuatorsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getEnergyManagementSystemActuatorsByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemActuator(self) -> OptionalEnergyManagementSystemActuator:
    """Try to cast the ModelObject to a EnergyManagementSystemActuator.

    :return: An Optional EnergyManagementSystemActuator.
    """
    return toEnergyManagementSystemActuator(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemActuator = _to_EnergyManagementSystemActuator

def _getEnergyManagementSystemActuator(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalEnergyManagementSystemActuator:
    """Try to get an object of type EnergyManagementSystemActuator referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional EnergyManagementSystemActuator.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getEnergyManagementSystemActuator(self, t_handle)
Model.getEnergyManagementSystemActuator = _getEnergyManagementSystemActuator

def _getEnergyManagementSystemActuators(self) -> EnergyManagementSystemActuatorVector:
    """Get a vector of all objects of type EnergyManagementSystemActuator in the model.

    :return: A vector of EnergyManagementSystemActuator.
    """
    return getEnergyManagementSystemActuators(self)
Model.getEnergyManagementSystemActuators = _getEnergyManagementSystemActuators

def _getEnergyManagementSystemActuatorByName(self, t_name: str) -> OptionalEnergyManagementSystemActuator:
    """Try to get an object of type EnergyManagementSystemActuator that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional EnergyManagementSystemActuator.
    """
    return getEnergyManagementSystemActuatorByName(self, t_name)
Model.getEnergyManagementSystemActuatorByName = _getEnergyManagementSystemActuatorByName

def _getEnergyManagementSystemActuatorsByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemActuatorVector:
    """Returns all objects of type EnergyManagementSystemActuator named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getEnergyManagementSystemActuatorsByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemActuatorsByName = _getEnergyManagementSystemActuatorsByName

class EnergyManagementSystemConstructionIndexVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemConstructionIndexVariable

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemConstructionIndexVariable(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_iddObjectType()

    def constructionObject(self):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_constructionObject(self)

    def setConstructionObject(self, construction):
        return _openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_setConstructionObject(self, construction)

# Register EnergyManagementSystemConstructionIndexVariable in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemConstructionIndexVariable_swigregister(EnergyManagementSystemConstructionIndexVariable)

def toEnergyManagementSystemConstructionIndexVariable(idfObject):
    return _openstudiomodelcore.toEnergyManagementSystemConstructionIndexVariable(idfObject)

def getEnergyManagementSystemConstructionIndexVariable(t_model, t_handle):
    return _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariable(t_model, t_handle)

def getEnergyManagementSystemConstructionIndexVariables(t_model):
    return _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariables(t_model)

def getEnergyManagementSystemConstructionIndexVariableByName(t_model, t_name):
    return _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariableByName(t_model, t_name)

def getEnergyManagementSystemConstructionIndexVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getEnergyManagementSystemConstructionIndexVariablesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemConstructionIndexVariable(self) -> OptionalEnergyManagementSystemConstructionIndexVariable:
    """Try to cast the ModelObject to a EnergyManagementSystemConstructionIndexVariable.

    :return: An Optional EnergyManagementSystemConstructionIndexVariable.
    """
    return toEnergyManagementSystemConstructionIndexVariable(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemConstructionIndexVariable = _to_EnergyManagementSystemConstructionIndexVariable

def _getEnergyManagementSystemConstructionIndexVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalEnergyManagementSystemConstructionIndexVariable:
    """Try to get an object of type EnergyManagementSystemConstructionIndexVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional EnergyManagementSystemConstructionIndexVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getEnergyManagementSystemConstructionIndexVariable(self, t_handle)
Model.getEnergyManagementSystemConstructionIndexVariable = _getEnergyManagementSystemConstructionIndexVariable

def _getEnergyManagementSystemConstructionIndexVariables(self) -> EnergyManagementSystemConstructionIndexVariableVector:
    """Get a vector of all objects of type EnergyManagementSystemConstructionIndexVariable in the model.

    :return: A vector of EnergyManagementSystemConstructionIndexVariable.
    """
    return getEnergyManagementSystemConstructionIndexVariables(self)
Model.getEnergyManagementSystemConstructionIndexVariables = _getEnergyManagementSystemConstructionIndexVariables

def _getEnergyManagementSystemConstructionIndexVariableByName(self, t_name: str) -> OptionalEnergyManagementSystemConstructionIndexVariable:
    """Try to get an object of type EnergyManagementSystemConstructionIndexVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional EnergyManagementSystemConstructionIndexVariable.
    """
    return getEnergyManagementSystemConstructionIndexVariableByName(self, t_name)
Model.getEnergyManagementSystemConstructionIndexVariableByName = _getEnergyManagementSystemConstructionIndexVariableByName

def _getEnergyManagementSystemConstructionIndexVariablesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemConstructionIndexVariableVector:
    """Returns all objects of type EnergyManagementSystemConstructionIndexVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getEnergyManagementSystemConstructionIndexVariablesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemConstructionIndexVariablesByName = _getEnergyManagementSystemConstructionIndexVariablesByName

class EnergyManagementSystemCurveOrTableIndexVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemCurveOrTableIndexVariable

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemCurveOrTableIndexVariable(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_iddObjectType()

    def curveOrTableObject(self):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_curveOrTableObject(self)

    def setCurveOrTableObject(self, allCurves):
        return _openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_setCurveOrTableObject(self, allCurves)

# Register EnergyManagementSystemCurveOrTableIndexVariable in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemCurveOrTableIndexVariable_swigregister(EnergyManagementSystemCurveOrTableIndexVariable)

def toEnergyManagementSystemCurveOrTableIndexVariable(idfObject):
    return _openstudiomodelcore.toEnergyManagementSystemCurveOrTableIndexVariable(idfObject)

def getEnergyManagementSystemCurveOrTableIndexVariable(t_model, t_handle):
    return _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariable(t_model, t_handle)

def getEnergyManagementSystemCurveOrTableIndexVariables(t_model):
    return _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariables(t_model)

def getEnergyManagementSystemCurveOrTableIndexVariableByName(t_model, t_name):
    return _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariableByName(t_model, t_name)

def getEnergyManagementSystemCurveOrTableIndexVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getEnergyManagementSystemCurveOrTableIndexVariablesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemCurveOrTableIndexVariable(self) -> OptionalEnergyManagementSystemCurveOrTableIndexVariable:
    """Try to cast the ModelObject to a EnergyManagementSystemCurveOrTableIndexVariable.

    :return: An Optional EnergyManagementSystemCurveOrTableIndexVariable.
    """
    return toEnergyManagementSystemCurveOrTableIndexVariable(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemCurveOrTableIndexVariable = _to_EnergyManagementSystemCurveOrTableIndexVariable

def _getEnergyManagementSystemCurveOrTableIndexVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalEnergyManagementSystemCurveOrTableIndexVariable:
    """Try to get an object of type EnergyManagementSystemCurveOrTableIndexVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional EnergyManagementSystemCurveOrTableIndexVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getEnergyManagementSystemCurveOrTableIndexVariable(self, t_handle)
Model.getEnergyManagementSystemCurveOrTableIndexVariable = _getEnergyManagementSystemCurveOrTableIndexVariable

def _getEnergyManagementSystemCurveOrTableIndexVariables(self) -> EnergyManagementSystemCurveOrTableIndexVariableVector:
    """Get a vector of all objects of type EnergyManagementSystemCurveOrTableIndexVariable in the model.

    :return: A vector of EnergyManagementSystemCurveOrTableIndexVariable.
    """
    return getEnergyManagementSystemCurveOrTableIndexVariables(self)
Model.getEnergyManagementSystemCurveOrTableIndexVariables = _getEnergyManagementSystemCurveOrTableIndexVariables

def _getEnergyManagementSystemCurveOrTableIndexVariableByName(self, t_name: str) -> OptionalEnergyManagementSystemCurveOrTableIndexVariable:
    """Try to get an object of type EnergyManagementSystemCurveOrTableIndexVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional EnergyManagementSystemCurveOrTableIndexVariable.
    """
    return getEnergyManagementSystemCurveOrTableIndexVariableByName(self, t_name)
Model.getEnergyManagementSystemCurveOrTableIndexVariableByName = _getEnergyManagementSystemCurveOrTableIndexVariableByName

def _getEnergyManagementSystemCurveOrTableIndexVariablesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemCurveOrTableIndexVariableVector:
    """Returns all objects of type EnergyManagementSystemCurveOrTableIndexVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getEnergyManagementSystemCurveOrTableIndexVariablesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemCurveOrTableIndexVariablesByName = _getEnergyManagementSystemCurveOrTableIndexVariablesByName

class EnergyManagementSystemGlobalVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemGlobalVariable

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemGlobalVariable_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemGlobalVariable(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariable_iddObjectType()

    def exportToBCVTB(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariable_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariable_isExportToBCVTBDefaulted(self)

    def setExportToBCVTB(self, exportToBCVTB):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariable_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self):
        return _openstudiomodelcore.EnergyManagementSystemGlobalVariable_resetExportToBCVTB(self)

# Register EnergyManagementSystemGlobalVariable in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemGlobalVariable_swigregister(EnergyManagementSystemGlobalVariable)

def toEnergyManagementSystemGlobalVariable(idfObject):
    return _openstudiomodelcore.toEnergyManagementSystemGlobalVariable(idfObject)

def getEnergyManagementSystemGlobalVariable(t_model, t_handle):
    return _openstudiomodelcore.getEnergyManagementSystemGlobalVariable(t_model, t_handle)

def getEnergyManagementSystemGlobalVariables(t_model):
    return _openstudiomodelcore.getEnergyManagementSystemGlobalVariables(t_model)

def getEnergyManagementSystemGlobalVariableByName(t_model, t_name):
    return _openstudiomodelcore.getEnergyManagementSystemGlobalVariableByName(t_model, t_name)

def getEnergyManagementSystemGlobalVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getEnergyManagementSystemGlobalVariablesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemGlobalVariable(self) -> OptionalEnergyManagementSystemGlobalVariable:
    """Try to cast the ModelObject to a EnergyManagementSystemGlobalVariable.

    :return: An Optional EnergyManagementSystemGlobalVariable.
    """
    return toEnergyManagementSystemGlobalVariable(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemGlobalVariable = _to_EnergyManagementSystemGlobalVariable

def _getEnergyManagementSystemGlobalVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalEnergyManagementSystemGlobalVariable:
    """Try to get an object of type EnergyManagementSystemGlobalVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional EnergyManagementSystemGlobalVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getEnergyManagementSystemGlobalVariable(self, t_handle)
Model.getEnergyManagementSystemGlobalVariable = _getEnergyManagementSystemGlobalVariable

def _getEnergyManagementSystemGlobalVariables(self) -> EnergyManagementSystemGlobalVariableVector:
    """Get a vector of all objects of type EnergyManagementSystemGlobalVariable in the model.

    :return: A vector of EnergyManagementSystemGlobalVariable.
    """
    return getEnergyManagementSystemGlobalVariables(self)
Model.getEnergyManagementSystemGlobalVariables = _getEnergyManagementSystemGlobalVariables

def _getEnergyManagementSystemGlobalVariableByName(self, t_name: str) -> OptionalEnergyManagementSystemGlobalVariable:
    """Try to get an object of type EnergyManagementSystemGlobalVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional EnergyManagementSystemGlobalVariable.
    """
    return getEnergyManagementSystemGlobalVariableByName(self, t_name)
Model.getEnergyManagementSystemGlobalVariableByName = _getEnergyManagementSystemGlobalVariableByName

def _getEnergyManagementSystemGlobalVariablesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemGlobalVariableVector:
    """Returns all objects of type EnergyManagementSystemGlobalVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getEnergyManagementSystemGlobalVariablesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemGlobalVariablesByName = _getEnergyManagementSystemGlobalVariablesByName

class EnergyManagementSystemInternalVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemInternalVariable

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemInternalVariable_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemInternalVariable(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_iddObjectType()

    def internalDataIndexKeyName(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_internalDataIndexKeyName(self)

    def internalDataType(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_internalDataType(self)

    def setInternalDataIndexKeyName(self, internalDataIndexKeyName):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_setInternalDataIndexKeyName(self, internalDataIndexKeyName)

    def resetInternalDataIndexKeyName(self):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_resetInternalDataIndexKeyName(self)

    def setInternalDataType(self, internalDataType):
        return _openstudiomodelcore.EnergyManagementSystemInternalVariable_setInternalDataType(self, internalDataType)

# Register EnergyManagementSystemInternalVariable in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemInternalVariable_swigregister(EnergyManagementSystemInternalVariable)

def toEnergyManagementSystemInternalVariable(idfObject):
    return _openstudiomodelcore.toEnergyManagementSystemInternalVariable(idfObject)

def getEnergyManagementSystemInternalVariable(t_model, t_handle):
    return _openstudiomodelcore.getEnergyManagementSystemInternalVariable(t_model, t_handle)

def getEnergyManagementSystemInternalVariables(t_model):
    return _openstudiomodelcore.getEnergyManagementSystemInternalVariables(t_model)

def getEnergyManagementSystemInternalVariableByName(t_model, t_name):
    return _openstudiomodelcore.getEnergyManagementSystemInternalVariableByName(t_model, t_name)

def getEnergyManagementSystemInternalVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getEnergyManagementSystemInternalVariablesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemInternalVariable(self) -> OptionalEnergyManagementSystemInternalVariable:
    """Try to cast the ModelObject to a EnergyManagementSystemInternalVariable.

    :return: An Optional EnergyManagementSystemInternalVariable.
    """
    return toEnergyManagementSystemInternalVariable(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemInternalVariable = _to_EnergyManagementSystemInternalVariable

def _getEnergyManagementSystemInternalVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalEnergyManagementSystemInternalVariable:
    """Try to get an object of type EnergyManagementSystemInternalVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional EnergyManagementSystemInternalVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getEnergyManagementSystemInternalVariable(self, t_handle)
Model.getEnergyManagementSystemInternalVariable = _getEnergyManagementSystemInternalVariable

def _getEnergyManagementSystemInternalVariables(self) -> EnergyManagementSystemInternalVariableVector:
    """Get a vector of all objects of type EnergyManagementSystemInternalVariable in the model.

    :return: A vector of EnergyManagementSystemInternalVariable.
    """
    return getEnergyManagementSystemInternalVariables(self)
Model.getEnergyManagementSystemInternalVariables = _getEnergyManagementSystemInternalVariables

def _getEnergyManagementSystemInternalVariableByName(self, t_name: str) -> OptionalEnergyManagementSystemInternalVariable:
    """Try to get an object of type EnergyManagementSystemInternalVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional EnergyManagementSystemInternalVariable.
    """
    return getEnergyManagementSystemInternalVariableByName(self, t_name)
Model.getEnergyManagementSystemInternalVariableByName = _getEnergyManagementSystemInternalVariableByName

def _getEnergyManagementSystemInternalVariablesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemInternalVariableVector:
    """Returns all objects of type EnergyManagementSystemInternalVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getEnergyManagementSystemInternalVariablesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemInternalVariablesByName = _getEnergyManagementSystemInternalVariablesByName

class EnergyManagementSystemTrendVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemTrendVariable

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemTrendVariable_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemTrendVariable(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_iddObjectType()

    def emsVariableName(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsVariableName(self)

    def numberOfTimestepsToBeLogged(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_numberOfTimestepsToBeLogged(self)

    def emsVariableObject(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsVariableObject(self)

    def emsActuator(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsActuator(self)

    def emsSensor(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsSensor(self)

    def emsGlobalVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsGlobalVariable(self)

    def emsTrendVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsTrendVariable(self)

    def emsInternalVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsInternalVariable(self)

    def emsCurveOrTableIndexVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsCurveOrTableIndexVariable(self)

    def emsConstructionIndexVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_emsConstructionIndexVariable(self)

    def setNumberOfTimestepsToBeLogged(self, numberofTimestepstobeLogged):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_setNumberOfTimestepsToBeLogged(self, numberofTimestepstobeLogged)

    def setEMSVariableName(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemTrendVariable_setEMSVariableName(self, *args)

# Register EnergyManagementSystemTrendVariable in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemTrendVariable_swigregister(EnergyManagementSystemTrendVariable)

def toEnergyManagementSystemTrendVariable(idfObject):
    return _openstudiomodelcore.toEnergyManagementSystemTrendVariable(idfObject)

def getEnergyManagementSystemTrendVariable(t_model, t_handle):
    return _openstudiomodelcore.getEnergyManagementSystemTrendVariable(t_model, t_handle)

def getEnergyManagementSystemTrendVariables(t_model):
    return _openstudiomodelcore.getEnergyManagementSystemTrendVariables(t_model)

def getEnergyManagementSystemTrendVariableByName(t_model, t_name):
    return _openstudiomodelcore.getEnergyManagementSystemTrendVariableByName(t_model, t_name)

def getEnergyManagementSystemTrendVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getEnergyManagementSystemTrendVariablesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemTrendVariable(self) -> OptionalEnergyManagementSystemTrendVariable:
    """Try to cast the ModelObject to a EnergyManagementSystemTrendVariable.

    :return: An Optional EnergyManagementSystemTrendVariable.
    """
    return toEnergyManagementSystemTrendVariable(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemTrendVariable = _to_EnergyManagementSystemTrendVariable

def _getEnergyManagementSystemTrendVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalEnergyManagementSystemTrendVariable:
    """Try to get an object of type EnergyManagementSystemTrendVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional EnergyManagementSystemTrendVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getEnergyManagementSystemTrendVariable(self, t_handle)
Model.getEnergyManagementSystemTrendVariable = _getEnergyManagementSystemTrendVariable

def _getEnergyManagementSystemTrendVariables(self) -> EnergyManagementSystemTrendVariableVector:
    """Get a vector of all objects of type EnergyManagementSystemTrendVariable in the model.

    :return: A vector of EnergyManagementSystemTrendVariable.
    """
    return getEnergyManagementSystemTrendVariables(self)
Model.getEnergyManagementSystemTrendVariables = _getEnergyManagementSystemTrendVariables

def _getEnergyManagementSystemTrendVariableByName(self, t_name: str) -> OptionalEnergyManagementSystemTrendVariable:
    """Try to get an object of type EnergyManagementSystemTrendVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional EnergyManagementSystemTrendVariable.
    """
    return getEnergyManagementSystemTrendVariableByName(self, t_name)
Model.getEnergyManagementSystemTrendVariableByName = _getEnergyManagementSystemTrendVariableByName

def _getEnergyManagementSystemTrendVariablesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemTrendVariableVector:
    """Returns all objects of type EnergyManagementSystemTrendVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getEnergyManagementSystemTrendVariablesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemTrendVariablesByName = _getEnergyManagementSystemTrendVariablesByName

class EnergyManagementSystemSubroutine(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemSubroutine

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemSubroutine_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemSubroutine(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_iddObjectType()

    def body(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_body(self)

    def lines(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_lines(self)

    def referencedObjects(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_referencedObjects(self)

    def invalidReferencedObjects(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_invalidReferencedObjects(self)

    def setBody(self, body):
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_setBody(self, body)

    def resetBody(self):
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_resetBody(self)

    def addLine(self, body):
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_addLine(self, body)

    def setLines(self, body):
        return _openstudiomodelcore.EnergyManagementSystemSubroutine_setLines(self, body)

# Register EnergyManagementSystemSubroutine in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemSubroutine_swigregister(EnergyManagementSystemSubroutine)

def toEnergyManagementSystemSubroutine(idfObject):
    return _openstudiomodelcore.toEnergyManagementSystemSubroutine(idfObject)

def getEnergyManagementSystemSubroutine(t_model, t_handle):
    return _openstudiomodelcore.getEnergyManagementSystemSubroutine(t_model, t_handle)

def getEnergyManagementSystemSubroutines(t_model):
    return _openstudiomodelcore.getEnergyManagementSystemSubroutines(t_model)

def getEnergyManagementSystemSubroutineByName(t_model, t_name):
    return _openstudiomodelcore.getEnergyManagementSystemSubroutineByName(t_model, t_name)

def getEnergyManagementSystemSubroutinesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getEnergyManagementSystemSubroutinesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemSubroutine(self) -> OptionalEnergyManagementSystemSubroutine:
    """Try to cast the ModelObject to a EnergyManagementSystemSubroutine.

    :return: An Optional EnergyManagementSystemSubroutine.
    """
    return toEnergyManagementSystemSubroutine(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemSubroutine = _to_EnergyManagementSystemSubroutine

def _getEnergyManagementSystemSubroutine(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalEnergyManagementSystemSubroutine:
    """Try to get an object of type EnergyManagementSystemSubroutine referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional EnergyManagementSystemSubroutine.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getEnergyManagementSystemSubroutine(self, t_handle)
Model.getEnergyManagementSystemSubroutine = _getEnergyManagementSystemSubroutine

def _getEnergyManagementSystemSubroutines(self) -> EnergyManagementSystemSubroutineVector:
    """Get a vector of all objects of type EnergyManagementSystemSubroutine in the model.

    :return: A vector of EnergyManagementSystemSubroutine.
    """
    return getEnergyManagementSystemSubroutines(self)
Model.getEnergyManagementSystemSubroutines = _getEnergyManagementSystemSubroutines

def _getEnergyManagementSystemSubroutineByName(self, t_name: str) -> OptionalEnergyManagementSystemSubroutine:
    """Try to get an object of type EnergyManagementSystemSubroutine that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional EnergyManagementSystemSubroutine.
    """
    return getEnergyManagementSystemSubroutineByName(self, t_name)
Model.getEnergyManagementSystemSubroutineByName = _getEnergyManagementSystemSubroutineByName

def _getEnergyManagementSystemSubroutinesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemSubroutineVector:
    """Returns all objects of type EnergyManagementSystemSubroutine named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getEnergyManagementSystemSubroutinesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemSubroutinesByName = _getEnergyManagementSystemSubroutinesByName

class EnergyManagementSystemProgram(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemProgram

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemProgram_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemProgram(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.EnergyManagementSystemProgram_iddObjectType()

    def body(self):
        return _openstudiomodelcore.EnergyManagementSystemProgram_body(self)

    def lines(self):
        return _openstudiomodelcore.EnergyManagementSystemProgram_lines(self)

    def referencedObjects(self):
        return _openstudiomodelcore.EnergyManagementSystemProgram_referencedObjects(self)

    def invalidReferencedObjects(self):
        return _openstudiomodelcore.EnergyManagementSystemProgram_invalidReferencedObjects(self)

    def setBody(self, body):
        return _openstudiomodelcore.EnergyManagementSystemProgram_setBody(self, body)

    def resetBody(self):
        return _openstudiomodelcore.EnergyManagementSystemProgram_resetBody(self)

    def addLine(self, body):
        return _openstudiomodelcore.EnergyManagementSystemProgram_addLine(self, body)

    def setLines(self, body):
        return _openstudiomodelcore.EnergyManagementSystemProgram_setLines(self, body)

# Register EnergyManagementSystemProgram in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemProgram_swigregister(EnergyManagementSystemProgram)

def toEnergyManagementSystemProgram(idfObject):
    return _openstudiomodelcore.toEnergyManagementSystemProgram(idfObject)

def getEnergyManagementSystemProgram(t_model, t_handle):
    return _openstudiomodelcore.getEnergyManagementSystemProgram(t_model, t_handle)

def getEnergyManagementSystemPrograms(t_model):
    return _openstudiomodelcore.getEnergyManagementSystemPrograms(t_model)

def getEnergyManagementSystemProgramByName(t_model, t_name):
    return _openstudiomodelcore.getEnergyManagementSystemProgramByName(t_model, t_name)

def getEnergyManagementSystemProgramsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getEnergyManagementSystemProgramsByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemProgram(self) -> OptionalEnergyManagementSystemProgram:
    """Try to cast the ModelObject to a EnergyManagementSystemProgram.

    :return: An Optional EnergyManagementSystemProgram.
    """
    return toEnergyManagementSystemProgram(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemProgram = _to_EnergyManagementSystemProgram

def _getEnergyManagementSystemProgram(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalEnergyManagementSystemProgram:
    """Try to get an object of type EnergyManagementSystemProgram referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional EnergyManagementSystemProgram.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getEnergyManagementSystemProgram(self, t_handle)
Model.getEnergyManagementSystemProgram = _getEnergyManagementSystemProgram

def _getEnergyManagementSystemPrograms(self) -> EnergyManagementSystemProgramVector:
    """Get a vector of all objects of type EnergyManagementSystemProgram in the model.

    :return: A vector of EnergyManagementSystemProgram.
    """
    return getEnergyManagementSystemPrograms(self)
Model.getEnergyManagementSystemPrograms = _getEnergyManagementSystemPrograms

def _getEnergyManagementSystemProgramByName(self, t_name: str) -> OptionalEnergyManagementSystemProgram:
    """Try to get an object of type EnergyManagementSystemProgram that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional EnergyManagementSystemProgram.
    """
    return getEnergyManagementSystemProgramByName(self, t_name)
Model.getEnergyManagementSystemProgramByName = _getEnergyManagementSystemProgramByName

def _getEnergyManagementSystemProgramsByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemProgramVector:
    """Returns all objects of type EnergyManagementSystemProgram named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getEnergyManagementSystemProgramsByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemProgramsByName = _getEnergyManagementSystemProgramsByName

class EnergyManagementSystemProgramCallingManager(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemProgramCallingManager

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemProgramCallingManager(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_iddObjectType()

    @staticmethod
    def validCallingPointValues():
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_validCallingPointValues()

    def callingPoint(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_callingPoint(self)

    def programs(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_programs(self)

    def getProgram(self, index):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_getProgram(self, index)

    def setCallingPoint(self, callingPoint):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_setCallingPoint(self, callingPoint)

    def eraseProgram(self, index):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_eraseProgram(self, index)

    def erasePrograms(self):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_erasePrograms(self)

    def addProgram(self, program):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_addProgram(self, program)

    def setProgram(self, program, index):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_setProgram(self, program, index)

    def setPrograms(self, programs):
        return _openstudiomodelcore.EnergyManagementSystemProgramCallingManager_setPrograms(self, programs)

# Register EnergyManagementSystemProgramCallingManager in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemProgramCallingManager_swigregister(EnergyManagementSystemProgramCallingManager)

def toEnergyManagementSystemProgramCallingManager(idfObject):
    return _openstudiomodelcore.toEnergyManagementSystemProgramCallingManager(idfObject)

def getEnergyManagementSystemProgramCallingManager(t_model, t_handle):
    return _openstudiomodelcore.getEnergyManagementSystemProgramCallingManager(t_model, t_handle)

def getEnergyManagementSystemProgramCallingManagers(t_model):
    return _openstudiomodelcore.getEnergyManagementSystemProgramCallingManagers(t_model)

def getEnergyManagementSystemProgramCallingManagerByName(t_model, t_name):
    return _openstudiomodelcore.getEnergyManagementSystemProgramCallingManagerByName(t_model, t_name)

def getEnergyManagementSystemProgramCallingManagersByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getEnergyManagementSystemProgramCallingManagersByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemProgramCallingManager(self) -> OptionalEnergyManagementSystemProgramCallingManager:
    """Try to cast the ModelObject to a EnergyManagementSystemProgramCallingManager.

    :return: An Optional EnergyManagementSystemProgramCallingManager.
    """
    return toEnergyManagementSystemProgramCallingManager(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemProgramCallingManager = _to_EnergyManagementSystemProgramCallingManager

def _getEnergyManagementSystemProgramCallingManager(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalEnergyManagementSystemProgramCallingManager:
    """Try to get an object of type EnergyManagementSystemProgramCallingManager referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional EnergyManagementSystemProgramCallingManager.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getEnergyManagementSystemProgramCallingManager(self, t_handle)
Model.getEnergyManagementSystemProgramCallingManager = _getEnergyManagementSystemProgramCallingManager

def _getEnergyManagementSystemProgramCallingManagers(self) -> EnergyManagementSystemProgramCallingManagerVector:
    """Get a vector of all objects of type EnergyManagementSystemProgramCallingManager in the model.

    :return: A vector of EnergyManagementSystemProgramCallingManager.
    """
    return getEnergyManagementSystemProgramCallingManagers(self)
Model.getEnergyManagementSystemProgramCallingManagers = _getEnergyManagementSystemProgramCallingManagers

def _getEnergyManagementSystemProgramCallingManagerByName(self, t_name: str) -> OptionalEnergyManagementSystemProgramCallingManager:
    """Try to get an object of type EnergyManagementSystemProgramCallingManager that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional EnergyManagementSystemProgramCallingManager.
    """
    return getEnergyManagementSystemProgramCallingManagerByName(self, t_name)
Model.getEnergyManagementSystemProgramCallingManagerByName = _getEnergyManagementSystemProgramCallingManagerByName

def _getEnergyManagementSystemProgramCallingManagersByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemProgramCallingManagerVector:
    """Returns all objects of type EnergyManagementSystemProgramCallingManager named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getEnergyManagementSystemProgramCallingManagersByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemProgramCallingManagersByName = _getEnergyManagementSystemProgramCallingManagersByName

class EnergyManagementSystemOutputVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemOutputVariable

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemOutputVariable_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemOutputVariable(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_iddObjectType()

    @staticmethod
    def typeOfDataInVariableValues():
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_typeOfDataInVariableValues()

    @staticmethod
    def updateFrequencyValues():
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_updateFrequencyValues()

    def emsVariableName(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsVariableName(self)

    def typeOfDataInVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_typeOfDataInVariable(self)

    def updateFrequency(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_updateFrequency(self)

    def emsProgramOrSubroutineName(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsProgramOrSubroutineName(self)

    def emsProgram(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsProgram(self)

    def emsSubroutine(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsSubroutine(self)

    def units(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_units(self)

    def emsVariableObject(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsVariableObject(self)

    def emsActuator(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsActuator(self)

    def emsSensor(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsSensor(self)

    def emsGlobalVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsGlobalVariable(self)

    def emsTrendVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsTrendVariable(self)

    def emsInternalVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsInternalVariable(self)

    def emsCurveOrTableIndexVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsCurveOrTableIndexVariable(self)

    def emsConstructionIndexVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_emsConstructionIndexVariable(self)

    def exportToBCVTB(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_isExportToBCVTBDefaulted(self)

    def setTypeOfDataInVariable(self, typeofDatainVariable):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setTypeOfDataInVariable(self, typeofDatainVariable)

    def setUpdateFrequency(self, updateFrequency):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setUpdateFrequency(self, updateFrequency)

    def setEMSProgramOrSubroutineName(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setEMSProgramOrSubroutineName(self, *args)

    def resetEMSProgramOrSubroutineName(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_resetEMSProgramOrSubroutineName(self)

    def setUnits(self, units):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setUnits(self, units)

    def resetUnits(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_resetUnits(self)

    def setEMSVariableName(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setEMSVariableName(self, *args)

    def setExportToBCVTB(self, exportToBCVTB):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self):
        return _openstudiomodelcore.EnergyManagementSystemOutputVariable_resetExportToBCVTB(self)

# Register EnergyManagementSystemOutputVariable in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemOutputVariable_swigregister(EnergyManagementSystemOutputVariable)

def toEnergyManagementSystemOutputVariable(idfObject):
    return _openstudiomodelcore.toEnergyManagementSystemOutputVariable(idfObject)

def getEnergyManagementSystemOutputVariable(t_model, t_handle):
    return _openstudiomodelcore.getEnergyManagementSystemOutputVariable(t_model, t_handle)

def getEnergyManagementSystemOutputVariables(t_model):
    return _openstudiomodelcore.getEnergyManagementSystemOutputVariables(t_model)

def getEnergyManagementSystemOutputVariableByName(t_model, t_name):
    return _openstudiomodelcore.getEnergyManagementSystemOutputVariableByName(t_model, t_name)

def getEnergyManagementSystemOutputVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getEnergyManagementSystemOutputVariablesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemOutputVariable(self) -> OptionalEnergyManagementSystemOutputVariable:
    """Try to cast the ModelObject to a EnergyManagementSystemOutputVariable.

    :return: An Optional EnergyManagementSystemOutputVariable.
    """
    return toEnergyManagementSystemOutputVariable(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemOutputVariable = _to_EnergyManagementSystemOutputVariable

def _getEnergyManagementSystemOutputVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalEnergyManagementSystemOutputVariable:
    """Try to get an object of type EnergyManagementSystemOutputVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional EnergyManagementSystemOutputVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getEnergyManagementSystemOutputVariable(self, t_handle)
Model.getEnergyManagementSystemOutputVariable = _getEnergyManagementSystemOutputVariable

def _getEnergyManagementSystemOutputVariables(self) -> EnergyManagementSystemOutputVariableVector:
    """Get a vector of all objects of type EnergyManagementSystemOutputVariable in the model.

    :return: A vector of EnergyManagementSystemOutputVariable.
    """
    return getEnergyManagementSystemOutputVariables(self)
Model.getEnergyManagementSystemOutputVariables = _getEnergyManagementSystemOutputVariables

def _getEnergyManagementSystemOutputVariableByName(self, t_name: str) -> OptionalEnergyManagementSystemOutputVariable:
    """Try to get an object of type EnergyManagementSystemOutputVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional EnergyManagementSystemOutputVariable.
    """
    return getEnergyManagementSystemOutputVariableByName(self, t_name)
Model.getEnergyManagementSystemOutputVariableByName = _getEnergyManagementSystemOutputVariableByName

def _getEnergyManagementSystemOutputVariablesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemOutputVariableVector:
    """Returns all objects of type EnergyManagementSystemOutputVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getEnergyManagementSystemOutputVariablesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemOutputVariablesByName = _getEnergyManagementSystemOutputVariablesByName

class EnergyManagementSystemMeteredOutputVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_EnergyManagementSystemMeteredOutputVariable

    def __init__(self, *args):
        _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_swiginit(self, _openstudiomodelcore.new_EnergyManagementSystemMeteredOutputVariable(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_iddObjectType()

    @staticmethod
    def updateFrequencyValues():
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_updateFrequencyValues()

    @staticmethod
    def resourceTypeValues():
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resourceTypeValues()

    @staticmethod
    def groupTypeValues():
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_groupTypeValues()

    @staticmethod
    def endUseCategoryValues():
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_endUseCategoryValues()

    def emsVariableName(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsVariableName(self)

    def updateFrequency(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_updateFrequency(self)

    def emsProgramOrSubroutineName(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsProgramOrSubroutineName(self)

    def emsProgram(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsProgram(self)

    def emsSubroutine(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsSubroutine(self)

    def resourceType(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resourceType(self)

    def groupType(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_groupType(self)

    def endUseCategory(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_endUseCategory(self)

    def endUseSubcategory(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_endUseSubcategory(self)

    def units(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_units(self)

    def emsVariableObject(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsVariableObject(self)

    def emsActuator(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsActuator(self)

    def emsSensor(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsSensor(self)

    def emsGlobalVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsGlobalVariable(self)

    def emsTrendVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsTrendVariable(self)

    def emsInternalVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsInternalVariable(self)

    def emsCurveOrTableIndexVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsCurveOrTableIndexVariable(self)

    def emsConstructionIndexVariable(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_emsConstructionIndexVariable(self)

    def setUpdateFrequency(self, updateFrequency):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setUpdateFrequency(self, updateFrequency)

    def setEMSProgramOrSubroutineName(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setEMSProgramOrSubroutineName(self, *args)

    def resetEMSProgramOrSubroutineName(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resetEMSProgramOrSubroutineName(self)

    def setResourceType(self, resourceType):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setResourceType(self, resourceType)

    def setGroupType(self, groupType):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setGroupType(self, groupType)

    def setEndUseCategory(self, endUseCategory):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setEndUseCategory(self, endUseCategory)

    def setEndUseSubcategory(self, endUseSubcategory):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setEndUseSubcategory(self, endUseSubcategory)

    def resetEndUseSubcategory(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resetEndUseSubcategory(self)

    def setUnits(self, units):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setUnits(self, units)

    def resetUnits(self):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_resetUnits(self)

    def setEMSVariableName(self, *args):
        return _openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_setEMSVariableName(self, *args)

# Register EnergyManagementSystemMeteredOutputVariable in _openstudiomodelcore:
_openstudiomodelcore.EnergyManagementSystemMeteredOutputVariable_swigregister(EnergyManagementSystemMeteredOutputVariable)

def toEnergyManagementSystemMeteredOutputVariable(idfObject):
    return _openstudiomodelcore.toEnergyManagementSystemMeteredOutputVariable(idfObject)

def getEnergyManagementSystemMeteredOutputVariable(t_model, t_handle):
    return _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariable(t_model, t_handle)

def getEnergyManagementSystemMeteredOutputVariables(t_model):
    return _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariables(t_model)

def getEnergyManagementSystemMeteredOutputVariableByName(t_model, t_name):
    return _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariableByName(t_model, t_name)

def getEnergyManagementSystemMeteredOutputVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getEnergyManagementSystemMeteredOutputVariablesByName(t_model, t_name, t_exactMatch)

def _to_EnergyManagementSystemMeteredOutputVariable(self) -> OptionalEnergyManagementSystemMeteredOutputVariable:
    """Try to cast the ModelObject to a EnergyManagementSystemMeteredOutputVariable.

    :return: An Optional EnergyManagementSystemMeteredOutputVariable.
    """
    return toEnergyManagementSystemMeteredOutputVariable(self)
openstudioutilitiesidf.IdfObject.to_EnergyManagementSystemMeteredOutputVariable = _to_EnergyManagementSystemMeteredOutputVariable

def _getEnergyManagementSystemMeteredOutputVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalEnergyManagementSystemMeteredOutputVariable:
    """Try to get an object of type EnergyManagementSystemMeteredOutputVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional EnergyManagementSystemMeteredOutputVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getEnergyManagementSystemMeteredOutputVariable(self, t_handle)
Model.getEnergyManagementSystemMeteredOutputVariable = _getEnergyManagementSystemMeteredOutputVariable

def _getEnergyManagementSystemMeteredOutputVariables(self) -> EnergyManagementSystemMeteredOutputVariableVector:
    """Get a vector of all objects of type EnergyManagementSystemMeteredOutputVariable in the model.

    :return: A vector of EnergyManagementSystemMeteredOutputVariable.
    """
    return getEnergyManagementSystemMeteredOutputVariables(self)
Model.getEnergyManagementSystemMeteredOutputVariables = _getEnergyManagementSystemMeteredOutputVariables

def _getEnergyManagementSystemMeteredOutputVariableByName(self, t_name: str) -> OptionalEnergyManagementSystemMeteredOutputVariable:
    """Try to get an object of type EnergyManagementSystemMeteredOutputVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional EnergyManagementSystemMeteredOutputVariable.
    """
    return getEnergyManagementSystemMeteredOutputVariableByName(self, t_name)
Model.getEnergyManagementSystemMeteredOutputVariableByName = _getEnergyManagementSystemMeteredOutputVariableByName

def _getEnergyManagementSystemMeteredOutputVariablesByName(self, t_name: str, t_exactMatch: bool) -> EnergyManagementSystemMeteredOutputVariableVector:
    """Returns all objects of type EnergyManagementSystemMeteredOutputVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getEnergyManagementSystemMeteredOutputVariablesByName(self, t_name, t_exactMatch)
Model.getEnergyManagementSystemMeteredOutputVariablesByName = _getEnergyManagementSystemMeteredOutputVariablesByName

class OutputEnergyManagementSystem(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_OutputEnergyManagementSystem

    def __init__(self, *args):
        _openstudiomodelcore.OutputEnergyManagementSystem_swiginit(self, _openstudiomodelcore.new_OutputEnergyManagementSystem(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.OutputEnergyManagementSystem_iddObjectType()

    @staticmethod
    def actuatorAvailabilityDictionaryReportingValues():
        return _openstudiomodelcore.OutputEnergyManagementSystem_actuatorAvailabilityDictionaryReportingValues()

    @staticmethod
    def internalVariableAvailabilityDictionaryReportingValues():
        return _openstudiomodelcore.OutputEnergyManagementSystem_internalVariableAvailabilityDictionaryReportingValues()

    @staticmethod
    def eMSRuntimeLanguageDebugOutputLevelValues():
        return _openstudiomodelcore.OutputEnergyManagementSystem_eMSRuntimeLanguageDebugOutputLevelValues()

    def actuatorAvailabilityDictionaryReporting(self):
        return _openstudiomodelcore.OutputEnergyManagementSystem_actuatorAvailabilityDictionaryReporting(self)

    def isActuatorAvailabilityDictionaryReportingDefaulted(self):
        return _openstudiomodelcore.OutputEnergyManagementSystem_isActuatorAvailabilityDictionaryReportingDefaulted(self)

    def internalVariableAvailabilityDictionaryReporting(self):
        return _openstudiomodelcore.OutputEnergyManagementSystem_internalVariableAvailabilityDictionaryReporting(self)

    def isInternalVariableAvailabilityDictionaryReportingDefaulted(self):
        return _openstudiomodelcore.OutputEnergyManagementSystem_isInternalVariableAvailabilityDictionaryReportingDefaulted(self)

    def eMSRuntimeLanguageDebugOutputLevel(self):
        return _openstudiomodelcore.OutputEnergyManagementSystem_eMSRuntimeLanguageDebugOutputLevel(self)

    def isEMSRuntimeLanguageDebugOutputLevelDefaulted(self):
        return _openstudiomodelcore.OutputEnergyManagementSystem_isEMSRuntimeLanguageDebugOutputLevelDefaulted(self)

    def setActuatorAvailabilityDictionaryReporting(self, actuatorAvailabilityDictionaryReporting):
        return _openstudiomodelcore.OutputEnergyManagementSystem_setActuatorAvailabilityDictionaryReporting(self, actuatorAvailabilityDictionaryReporting)

    def resetActuatorAvailabilityDictionaryReporting(self):
        return _openstudiomodelcore.OutputEnergyManagementSystem_resetActuatorAvailabilityDictionaryReporting(self)

    def setInternalVariableAvailabilityDictionaryReporting(self, internalVariableAvailabilityDictionaryReporting):
        return _openstudiomodelcore.OutputEnergyManagementSystem_setInternalVariableAvailabilityDictionaryReporting(self, internalVariableAvailabilityDictionaryReporting)

    def resetInternalVariableAvailabilityDictionaryReporting(self):
        return _openstudiomodelcore.OutputEnergyManagementSystem_resetInternalVariableAvailabilityDictionaryReporting(self)

    def setEMSRuntimeLanguageDebugOutputLevel(self, eMSRuntimeLanguageDebugOutputLevel):
        return _openstudiomodelcore.OutputEnergyManagementSystem_setEMSRuntimeLanguageDebugOutputLevel(self, eMSRuntimeLanguageDebugOutputLevel)

    def resetEMSRuntimeLanguageDebugOutputLevel(self):
        return _openstudiomodelcore.OutputEnergyManagementSystem_resetEMSRuntimeLanguageDebugOutputLevel(self)

# Register OutputEnergyManagementSystem in _openstudiomodelcore:
_openstudiomodelcore.OutputEnergyManagementSystem_swigregister(OutputEnergyManagementSystem)

def toOutputEnergyManagementSystem(idfObject):
    return _openstudiomodelcore.toOutputEnergyManagementSystem(idfObject)

def getOutputEnergyManagementSystem(t_model):
    return _openstudiomodelcore.getOutputEnergyManagementSystem(t_model)

def getOptionalOutputEnergyManagementSystem(t_model):
    return _openstudiomodelcore.getOptionalOutputEnergyManagementSystem(t_model)

def _to_OutputEnergyManagementSystem(self) -> OptionalOutputEnergyManagementSystem:
    """Try to cast the ModelObject to a OutputEnergyManagementSystem.

    :return: An Optional OutputEnergyManagementSystem.
    """
    return toOutputEnergyManagementSystem(self)
openstudioutilitiesidf.IdfObject.to_OutputEnergyManagementSystem = _to_OutputEnergyManagementSystem

def _getOutputEnergyManagementSystem(self) -> OutputEnergyManagementSystem:
    """Get or instantiate a UniqueModelObject of type OutputEnergyManagementSystem.

    :return: An existing OutputEnergyManagementSystem or a newly instantiated one.
    """
    return getOutputEnergyManagementSystem(self)
Model.getOutputEnergyManagementSystem = _getOutputEnergyManagementSystem

def _getOptionalOutputEnergyManagementSystem(self) -> OptionalOutputEnergyManagementSystem:
    """Return a UniqueModelObject of type OutputEnergyManagementSystem only if it's already present in the Model.

    :return: An Optional OutputEnergyManagementSystem.
    """
    return getOptionalOutputEnergyManagementSystem(self)
Model.getOptionalOutputEnergyManagementSystem = _getOptionalOutputEnergyManagementSystem

class ExternalInterface(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterface

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterface_swiginit(self, _openstudiomodelcore.new_ExternalInterface(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ExternalInterface_iddObjectType()

    @staticmethod
    def nameofExternalInterfaceValues():
        return _openstudiomodelcore.ExternalInterface_nameofExternalInterfaceValues()

    def nameofExternalInterface(self):
        return _openstudiomodelcore.ExternalInterface_nameofExternalInterface(self)

    def setNameofExternalInterface(self, nameofExternalInterface):
        return _openstudiomodelcore.ExternalInterface_setNameofExternalInterface(self, nameofExternalInterface)

# Register ExternalInterface in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterface_swigregister(ExternalInterface)

def toExternalInterface(idfObject):
    return _openstudiomodelcore.toExternalInterface(idfObject)

def getExternalInterface(t_model):
    return _openstudiomodelcore.getExternalInterface(t_model)

def getOptionalExternalInterface(t_model):
    return _openstudiomodelcore.getOptionalExternalInterface(t_model)

def _to_ExternalInterface(self) -> OptionalExternalInterface:
    """Try to cast the ModelObject to a ExternalInterface.

    :return: An Optional ExternalInterface.
    """
    return toExternalInterface(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterface = _to_ExternalInterface

def _getExternalInterface(self) -> ExternalInterface:
    """Get or instantiate a UniqueModelObject of type ExternalInterface.

    :return: An existing ExternalInterface or a newly instantiated one.
    """
    return getExternalInterface(self)
Model.getExternalInterface = _getExternalInterface

def _getOptionalExternalInterface(self) -> OptionalExternalInterface:
    """Return a UniqueModelObject of type ExternalInterface only if it's already present in the Model.

    :return: An Optional ExternalInterface.
    """
    return getOptionalExternalInterface(self)
Model.getOptionalExternalInterface = _getOptionalExternalInterface

class ExternalInterfaceActuator(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceActuator

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceActuator_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceActuator(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ExternalInterfaceActuator_iddObjectType()

    def actuatedComponentUnique(self):
        return _openstudiomodelcore.ExternalInterfaceActuator_actuatedComponentUnique(self)

    def actuatedComponentType(self):
        return _openstudiomodelcore.ExternalInterfaceActuator_actuatedComponentType(self)

    def actuatedComponentControlType(self):
        return _openstudiomodelcore.ExternalInterfaceActuator_actuatedComponentControlType(self)

    def optionalInitialValue(self):
        return _openstudiomodelcore.ExternalInterfaceActuator_optionalInitialValue(self)

    def exportToBCVTB(self):
        return _openstudiomodelcore.ExternalInterfaceActuator_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self):
        return _openstudiomodelcore.ExternalInterfaceActuator_isExportToBCVTBDefaulted(self)

    def setActuatedComponentUnique(self, modelObject):
        return _openstudiomodelcore.ExternalInterfaceActuator_setActuatedComponentUnique(self, modelObject)

    def setActuatedComponentType(self, actuatedComponentType):
        return _openstudiomodelcore.ExternalInterfaceActuator_setActuatedComponentType(self, actuatedComponentType)

    def setActuatedComponentControlType(self, actuatedComponentControlType):
        return _openstudiomodelcore.ExternalInterfaceActuator_setActuatedComponentControlType(self, actuatedComponentControlType)

    def setOptionalInitialValue(self, optionalInitialValue):
        return _openstudiomodelcore.ExternalInterfaceActuator_setOptionalInitialValue(self, optionalInitialValue)

    def resetOptionalInitialValue(self):
        return _openstudiomodelcore.ExternalInterfaceActuator_resetOptionalInitialValue(self)

    def setExportToBCVTB(self, exportToBCVTB):
        return _openstudiomodelcore.ExternalInterfaceActuator_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self):
        return _openstudiomodelcore.ExternalInterfaceActuator_resetExportToBCVTB(self)

# Register ExternalInterfaceActuator in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceActuator_swigregister(ExternalInterfaceActuator)

def toExternalInterfaceActuator(idfObject):
    return _openstudiomodelcore.toExternalInterfaceActuator(idfObject)

def getExternalInterfaceActuator(t_model, t_handle):
    return _openstudiomodelcore.getExternalInterfaceActuator(t_model, t_handle)

def getExternalInterfaceActuators(t_model):
    return _openstudiomodelcore.getExternalInterfaceActuators(t_model)

def getExternalInterfaceActuatorByName(t_model, t_name):
    return _openstudiomodelcore.getExternalInterfaceActuatorByName(t_model, t_name)

def getExternalInterfaceActuatorsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getExternalInterfaceActuatorsByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceActuator(self) -> OptionalExternalInterfaceActuator:
    """Try to cast the ModelObject to a ExternalInterfaceActuator.

    :return: An Optional ExternalInterfaceActuator.
    """
    return toExternalInterfaceActuator(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceActuator = _to_ExternalInterfaceActuator

def _getExternalInterfaceActuator(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExternalInterfaceActuator:
    """Try to get an object of type ExternalInterfaceActuator referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExternalInterfaceActuator.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExternalInterfaceActuator(self, t_handle)
Model.getExternalInterfaceActuator = _getExternalInterfaceActuator

def _getExternalInterfaceActuators(self) -> ExternalInterfaceActuatorVector:
    """Get a vector of all objects of type ExternalInterfaceActuator in the model.

    :return: A vector of ExternalInterfaceActuator.
    """
    return getExternalInterfaceActuators(self)
Model.getExternalInterfaceActuators = _getExternalInterfaceActuators

def _getExternalInterfaceActuatorByName(self, t_name: str) -> OptionalExternalInterfaceActuator:
    """Try to get an object of type ExternalInterfaceActuator that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExternalInterfaceActuator.
    """
    return getExternalInterfaceActuatorByName(self, t_name)
Model.getExternalInterfaceActuatorByName = _getExternalInterfaceActuatorByName

def _getExternalInterfaceActuatorsByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceActuatorVector:
    """Returns all objects of type ExternalInterfaceActuator named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExternalInterfaceActuatorsByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceActuatorsByName = _getExternalInterfaceActuatorsByName

class ExternalInterfaceFunctionalMockupUnitExportFromVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportFromVariable

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportFromVariable(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_iddObjectType()

    def outputVariableIndexKeyName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_outputVariableIndexKeyName(self)

    def outputVariableName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_outputVariableName(self)

    def fMUVariableName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_fMUVariableName(self)

    def setOutputVariableIndexKeyName(self, outputVariableIndexKeyName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_setOutputVariableIndexKeyName(self, outputVariableIndexKeyName)

    def setOutputVariableName(self, outputVariableName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_setOutputVariableName(self, outputVariableName)

    def setFMUVariableName(self, fMUVariableName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_setFMUVariableName(self, fMUVariableName)

# Register ExternalInterfaceFunctionalMockupUnitExportFromVariable in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportFromVariable_swigregister(ExternalInterfaceFunctionalMockupUnitExportFromVariable)

def toExternalInterfaceFunctionalMockupUnitExportFromVariable(idfObject):
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportFromVariable(idfObject)

def getExternalInterfaceFunctionalMockupUnitExportFromVariable(t_model, t_handle):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariable(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitExportFromVariables(t_model):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariables(t_model)

def getExternalInterfaceFunctionalMockupUnitExportFromVariableByName(t_model, t_name):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariableByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitExportFromVariable(self) -> OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable:
    """Try to cast the ModelObject to a ExternalInterfaceFunctionalMockupUnitExportFromVariable.

    :return: An Optional ExternalInterfaceFunctionalMockupUnitExportFromVariable.
    """
    return toExternalInterfaceFunctionalMockupUnitExportFromVariable(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitExportFromVariable = _to_ExternalInterfaceFunctionalMockupUnitExportFromVariable

def _getExternalInterfaceFunctionalMockupUnitExportFromVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitExportFromVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExternalInterfaceFunctionalMockupUnitExportFromVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExternalInterfaceFunctionalMockupUnitExportFromVariable(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitExportFromVariable = _getExternalInterfaceFunctionalMockupUnitExportFromVariable

def _getExternalInterfaceFunctionalMockupUnitExportFromVariables(self) -> ExternalInterfaceFunctionalMockupUnitExportFromVariableVector:
    """Get a vector of all objects of type ExternalInterfaceFunctionalMockupUnitExportFromVariable in the model.

    :return: A vector of ExternalInterfaceFunctionalMockupUnitExportFromVariable.
    """
    return getExternalInterfaceFunctionalMockupUnitExportFromVariables(self)
Model.getExternalInterfaceFunctionalMockupUnitExportFromVariables = _getExternalInterfaceFunctionalMockupUnitExportFromVariables

def _getExternalInterfaceFunctionalMockupUnitExportFromVariableByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitExportFromVariable:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitExportFromVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExternalInterfaceFunctionalMockupUnitExportFromVariable.
    """
    return getExternalInterfaceFunctionalMockupUnitExportFromVariableByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitExportFromVariableByName = _getExternalInterfaceFunctionalMockupUnitExportFromVariableByName

def _getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitExportFromVariableVector:
    """Returns all objects of type ExternalInterfaceFunctionalMockupUnitExportFromVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName = _getExternalInterfaceFunctionalMockupUnitExportFromVariablesByName

class ExternalInterfaceFunctionalMockupUnitExportToActuator(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToActuator

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToActuator(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_iddObjectType()

    def actuatedComponentUnique(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_actuatedComponentUnique(self)

    def actuatedComponentType(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_actuatedComponentType(self)

    def actuatedComponentControlType(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_actuatedComponentControlType(self)

    def fMUVariableName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_fMUVariableName(self)

    def initialValue(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_initialValue(self)

    def setActuatedComponentUnique(self, modelObject):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setActuatedComponentUnique(self, modelObject)

    def setActuatedComponentType(self, actuatedComponentType):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setActuatedComponentType(self, actuatedComponentType)

    def setActuatedComponentControlType(self, actuatedComponentControlType):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setActuatedComponentControlType(self, actuatedComponentControlType)

    def setFMUVariableName(self, fMUVariableName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_setInitialValue(self, initialValue)

# Register ExternalInterfaceFunctionalMockupUnitExportToActuator in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToActuator_swigregister(ExternalInterfaceFunctionalMockupUnitExportToActuator)

def toExternalInterfaceFunctionalMockupUnitExportToActuator(idfObject):
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportToActuator(idfObject)

def getExternalInterfaceFunctionalMockupUnitExportToActuator(t_model, t_handle):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuator(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitExportToActuators(t_model):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuators(t_model)

def getExternalInterfaceFunctionalMockupUnitExportToActuatorByName(t_model, t_name):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuatorByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitExportToActuator(self) -> OptionalExternalInterfaceFunctionalMockupUnitExportToActuator:
    """Try to cast the ModelObject to a ExternalInterfaceFunctionalMockupUnitExportToActuator.

    :return: An Optional ExternalInterfaceFunctionalMockupUnitExportToActuator.
    """
    return toExternalInterfaceFunctionalMockupUnitExportToActuator(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitExportToActuator = _to_ExternalInterfaceFunctionalMockupUnitExportToActuator

def _getExternalInterfaceFunctionalMockupUnitExportToActuator(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExternalInterfaceFunctionalMockupUnitExportToActuator:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitExportToActuator referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExternalInterfaceFunctionalMockupUnitExportToActuator.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExternalInterfaceFunctionalMockupUnitExportToActuator(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitExportToActuator = _getExternalInterfaceFunctionalMockupUnitExportToActuator

def _getExternalInterfaceFunctionalMockupUnitExportToActuators(self) -> ExternalInterfaceFunctionalMockupUnitExportToActuatorVector:
    """Get a vector of all objects of type ExternalInterfaceFunctionalMockupUnitExportToActuator in the model.

    :return: A vector of ExternalInterfaceFunctionalMockupUnitExportToActuator.
    """
    return getExternalInterfaceFunctionalMockupUnitExportToActuators(self)
Model.getExternalInterfaceFunctionalMockupUnitExportToActuators = _getExternalInterfaceFunctionalMockupUnitExportToActuators

def _getExternalInterfaceFunctionalMockupUnitExportToActuatorByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitExportToActuator:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitExportToActuator that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExternalInterfaceFunctionalMockupUnitExportToActuator.
    """
    return getExternalInterfaceFunctionalMockupUnitExportToActuatorByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitExportToActuatorByName = _getExternalInterfaceFunctionalMockupUnitExportToActuatorByName

def _getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitExportToActuatorVector:
    """Returns all objects of type ExternalInterfaceFunctionalMockupUnitExportToActuator named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName = _getExternalInterfaceFunctionalMockupUnitExportToActuatorsByName

class ExternalInterfaceFunctionalMockupUnitExportToSchedule(Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToSchedule

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToSchedule(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_iddObjectType()

    def fMUVariableName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_fMUVariableName(self)

    def initialValue(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_initialValue(self)

    def setFMUVariableName(self, fMUVariableName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_setInitialValue(self, initialValue)

# Register ExternalInterfaceFunctionalMockupUnitExportToSchedule in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToSchedule_swigregister(ExternalInterfaceFunctionalMockupUnitExportToSchedule)

def toExternalInterfaceFunctionalMockupUnitExportToSchedule(idfObject):
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportToSchedule(idfObject)

def getExternalInterfaceFunctionalMockupUnitExportToSchedule(t_model, t_handle):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToSchedule(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitExportToSchedules(t_model):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToSchedules(t_model)

def getExternalInterfaceFunctionalMockupUnitExportToScheduleByName(t_model, t_name):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToScheduleByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitExportToSchedule(self) -> OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule:
    """Try to cast the ModelObject to a ExternalInterfaceFunctionalMockupUnitExportToSchedule.

    :return: An Optional ExternalInterfaceFunctionalMockupUnitExportToSchedule.
    """
    return toExternalInterfaceFunctionalMockupUnitExportToSchedule(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitExportToSchedule = _to_ExternalInterfaceFunctionalMockupUnitExportToSchedule

def _getExternalInterfaceFunctionalMockupUnitExportToSchedule(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitExportToSchedule referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExternalInterfaceFunctionalMockupUnitExportToSchedule.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExternalInterfaceFunctionalMockupUnitExportToSchedule(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitExportToSchedule = _getExternalInterfaceFunctionalMockupUnitExportToSchedule

def _getExternalInterfaceFunctionalMockupUnitExportToSchedules(self) -> ExternalInterfaceFunctionalMockupUnitExportToScheduleVector:
    """Get a vector of all objects of type ExternalInterfaceFunctionalMockupUnitExportToSchedule in the model.

    :return: A vector of ExternalInterfaceFunctionalMockupUnitExportToSchedule.
    """
    return getExternalInterfaceFunctionalMockupUnitExportToSchedules(self)
Model.getExternalInterfaceFunctionalMockupUnitExportToSchedules = _getExternalInterfaceFunctionalMockupUnitExportToSchedules

def _getExternalInterfaceFunctionalMockupUnitExportToScheduleByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitExportToSchedule:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitExportToSchedule that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExternalInterfaceFunctionalMockupUnitExportToSchedule.
    """
    return getExternalInterfaceFunctionalMockupUnitExportToScheduleByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitExportToScheduleByName = _getExternalInterfaceFunctionalMockupUnitExportToScheduleByName

def _getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitExportToScheduleVector:
    """Returns all objects of type ExternalInterfaceFunctionalMockupUnitExportToSchedule named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName = _getExternalInterfaceFunctionalMockupUnitExportToSchedulesByName

class ExternalInterfaceFunctionalMockupUnitExportToVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitExportToVariable

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitExportToVariable(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_iddObjectType()

    def fMUVariableName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_fMUVariableName(self)

    def initialValue(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_initialValue(self)

    def setFMUVariableName(self, fMUVariableName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_setInitialValue(self, initialValue)

# Register ExternalInterfaceFunctionalMockupUnitExportToVariable in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitExportToVariable_swigregister(ExternalInterfaceFunctionalMockupUnitExportToVariable)

def toExternalInterfaceFunctionalMockupUnitExportToVariable(idfObject):
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitExportToVariable(idfObject)

def getExternalInterfaceFunctionalMockupUnitExportToVariable(t_model, t_handle):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariable(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitExportToVariables(t_model):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariables(t_model)

def getExternalInterfaceFunctionalMockupUnitExportToVariableByName(t_model, t_name):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariableByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitExportToVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitExportToVariablesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitExportToVariable(self) -> OptionalExternalInterfaceFunctionalMockupUnitExportToVariable:
    """Try to cast the ModelObject to a ExternalInterfaceFunctionalMockupUnitExportToVariable.

    :return: An Optional ExternalInterfaceFunctionalMockupUnitExportToVariable.
    """
    return toExternalInterfaceFunctionalMockupUnitExportToVariable(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitExportToVariable = _to_ExternalInterfaceFunctionalMockupUnitExportToVariable

def _getExternalInterfaceFunctionalMockupUnitExportToVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExternalInterfaceFunctionalMockupUnitExportToVariable:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitExportToVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExternalInterfaceFunctionalMockupUnitExportToVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExternalInterfaceFunctionalMockupUnitExportToVariable(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitExportToVariable = _getExternalInterfaceFunctionalMockupUnitExportToVariable

def _getExternalInterfaceFunctionalMockupUnitExportToVariables(self) -> ExternalInterfaceFunctionalMockupUnitExportToVariableVector:
    """Get a vector of all objects of type ExternalInterfaceFunctionalMockupUnitExportToVariable in the model.

    :return: A vector of ExternalInterfaceFunctionalMockupUnitExportToVariable.
    """
    return getExternalInterfaceFunctionalMockupUnitExportToVariables(self)
Model.getExternalInterfaceFunctionalMockupUnitExportToVariables = _getExternalInterfaceFunctionalMockupUnitExportToVariables

def _getExternalInterfaceFunctionalMockupUnitExportToVariableByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitExportToVariable:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitExportToVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExternalInterfaceFunctionalMockupUnitExportToVariable.
    """
    return getExternalInterfaceFunctionalMockupUnitExportToVariableByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitExportToVariableByName = _getExternalInterfaceFunctionalMockupUnitExportToVariableByName

def _getExternalInterfaceFunctionalMockupUnitExportToVariablesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitExportToVariableVector:
    """Returns all objects of type ExternalInterfaceFunctionalMockupUnitExportToVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExternalInterfaceFunctionalMockupUnitExportToVariablesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitExportToVariablesByName = _getExternalInterfaceFunctionalMockupUnitExportToVariablesByName

class ExternalInterfaceFunctionalMockupUnitImport(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImport

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImport(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_iddObjectType()

    def fMUTimeout(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_fMUTimeout(self)

    def isFMUTimeoutDefaulted(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_isFMUTimeoutDefaulted(self)

    def fMULoggingOn(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_fMULoggingOn(self)

    def isFMULoggingOnDefaulted(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_isFMULoggingOnDefaulted(self)

    def fMUFileName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_fMUFileName(self)

    def setFMUTimeout(self, fMUTimeout):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_setFMUTimeout(self, fMUTimeout)

    def resetFMUTimeout(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_resetFMUTimeout(self)

    def setFMULoggingOn(self, fMULoggingOn):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_setFMULoggingOn(self, fMULoggingOn)

    def resetFMULoggingOn(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_resetFMULoggingOn(self)

    def setFMUFileName(self, fMUName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_setFMUFileName(self, fMUName)

# Register ExternalInterfaceFunctionalMockupUnitImport in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImport_swigregister(ExternalInterfaceFunctionalMockupUnitImport)

def toExternalInterfaceFunctionalMockupUnitImport(idfObject):
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImport(idfObject)

def getExternalInterfaceFunctionalMockupUnitImport(t_model, t_handle):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImport(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitImports(t_model):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImports(t_model)

def getExternalInterfaceFunctionalMockupUnitImportByName(t_model, t_name):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitImportsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportsByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitImport(self) -> OptionalExternalInterfaceFunctionalMockupUnitImport:
    """Try to cast the ModelObject to a ExternalInterfaceFunctionalMockupUnitImport.

    :return: An Optional ExternalInterfaceFunctionalMockupUnitImport.
    """
    return toExternalInterfaceFunctionalMockupUnitImport(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitImport = _to_ExternalInterfaceFunctionalMockupUnitImport

def _getExternalInterfaceFunctionalMockupUnitImport(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExternalInterfaceFunctionalMockupUnitImport:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitImport referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExternalInterfaceFunctionalMockupUnitImport.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExternalInterfaceFunctionalMockupUnitImport(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitImport = _getExternalInterfaceFunctionalMockupUnitImport

def _getExternalInterfaceFunctionalMockupUnitImports(self) -> ExternalInterfaceFunctionalMockupUnitImportVector:
    """Get a vector of all objects of type ExternalInterfaceFunctionalMockupUnitImport in the model.

    :return: A vector of ExternalInterfaceFunctionalMockupUnitImport.
    """
    return getExternalInterfaceFunctionalMockupUnitImports(self)
Model.getExternalInterfaceFunctionalMockupUnitImports = _getExternalInterfaceFunctionalMockupUnitImports

def _getExternalInterfaceFunctionalMockupUnitImportByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitImport:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitImport that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExternalInterfaceFunctionalMockupUnitImport.
    """
    return getExternalInterfaceFunctionalMockupUnitImportByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitImportByName = _getExternalInterfaceFunctionalMockupUnitImportByName

def _getExternalInterfaceFunctionalMockupUnitImportsByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitImportVector:
    """Returns all objects of type ExternalInterfaceFunctionalMockupUnitImport named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExternalInterfaceFunctionalMockupUnitImportsByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitImportsByName = _getExternalInterfaceFunctionalMockupUnitImportsByName

class ExternalInterfaceFunctionalMockupUnitImportFromVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportFromVariable

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportFromVariable(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_iddObjectType()

    def outputVariableIndexKeyName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_outputVariableIndexKeyName(self)

    def outputVariableName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_outputVariableName(self)

    def fMUFile(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_fMUFile(self)

    def fMUInstanceName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_fMUInstanceName(self)

    def fMUVariableName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_fMUVariableName(self)

    def setOutputVariableIndexKeyName(self, outputVariableIndexKeyName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setOutputVariableIndexKeyName(self, outputVariableIndexKeyName)

    def setOutputVariableName(self, outputVariableName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setOutputVariableName(self, outputVariableName)

    def setFMUFile(self, fMUFile):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setFMUFile(self, fMUFile)

    def setFMUInstanceName(self, fMUInstanceName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setFMUInstanceName(self, fMUInstanceName)

    def setFMUVariableName(self, fMUVariableName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_setFMUVariableName(self, fMUVariableName)

# Register ExternalInterfaceFunctionalMockupUnitImportFromVariable in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportFromVariable_swigregister(ExternalInterfaceFunctionalMockupUnitImportFromVariable)

def toExternalInterfaceFunctionalMockupUnitImportFromVariable(idfObject):
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportFromVariable(idfObject)

def getExternalInterfaceFunctionalMockupUnitImportFromVariable(t_model, t_handle):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariable(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitImportFromVariables(t_model):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariables(t_model)

def getExternalInterfaceFunctionalMockupUnitImportFromVariableByName(t_model, t_name):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariableByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitImportFromVariable(self) -> OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable:
    """Try to cast the ModelObject to a ExternalInterfaceFunctionalMockupUnitImportFromVariable.

    :return: An Optional ExternalInterfaceFunctionalMockupUnitImportFromVariable.
    """
    return toExternalInterfaceFunctionalMockupUnitImportFromVariable(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitImportFromVariable = _to_ExternalInterfaceFunctionalMockupUnitImportFromVariable

def _getExternalInterfaceFunctionalMockupUnitImportFromVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitImportFromVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExternalInterfaceFunctionalMockupUnitImportFromVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExternalInterfaceFunctionalMockupUnitImportFromVariable(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitImportFromVariable = _getExternalInterfaceFunctionalMockupUnitImportFromVariable

def _getExternalInterfaceFunctionalMockupUnitImportFromVariables(self) -> ExternalInterfaceFunctionalMockupUnitImportFromVariableVector:
    """Get a vector of all objects of type ExternalInterfaceFunctionalMockupUnitImportFromVariable in the model.

    :return: A vector of ExternalInterfaceFunctionalMockupUnitImportFromVariable.
    """
    return getExternalInterfaceFunctionalMockupUnitImportFromVariables(self)
Model.getExternalInterfaceFunctionalMockupUnitImportFromVariables = _getExternalInterfaceFunctionalMockupUnitImportFromVariables

def _getExternalInterfaceFunctionalMockupUnitImportFromVariableByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitImportFromVariable:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitImportFromVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExternalInterfaceFunctionalMockupUnitImportFromVariable.
    """
    return getExternalInterfaceFunctionalMockupUnitImportFromVariableByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitImportFromVariableByName = _getExternalInterfaceFunctionalMockupUnitImportFromVariableByName

def _getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitImportFromVariableVector:
    """Returns all objects of type ExternalInterfaceFunctionalMockupUnitImportFromVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName = _getExternalInterfaceFunctionalMockupUnitImportFromVariablesByName

class ExternalInterfaceFunctionalMockupUnitImportToActuator(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToActuator

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToActuator(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_iddObjectType()

    def actuatedComponentUnique(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_actuatedComponentUnique(self)

    def actuatedComponentType(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_actuatedComponentType(self)

    def actuatedComponentControlType(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_actuatedComponentControlType(self)

    def fMUFile(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_fMUFile(self)

    def fMUInstanceName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_fMUInstanceName(self)

    def fMUVariableName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_fMUVariableName(self)

    def initialValue(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_initialValue(self)

    def setActuatedComponentUnique(self, modelObject):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setActuatedComponentUnique(self, modelObject)

    def setActuatedComponentType(self, actuatedComponentType):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setActuatedComponentType(self, actuatedComponentType)

    def setActuatedComponentControlType(self, actuatedComponentControlType):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setActuatedComponentControlType(self, actuatedComponentControlType)

    def setFMUFile(self, fMUFile):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setFMUFile(self, fMUFile)

    def setFMUInstanceName(self, fMUInstanceName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setFMUInstanceName(self, fMUInstanceName)

    def setFMUVariableName(self, fMUVariableName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_setInitialValue(self, initialValue)

# Register ExternalInterfaceFunctionalMockupUnitImportToActuator in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToActuator_swigregister(ExternalInterfaceFunctionalMockupUnitImportToActuator)

def toExternalInterfaceFunctionalMockupUnitImportToActuator(idfObject):
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportToActuator(idfObject)

def getExternalInterfaceFunctionalMockupUnitImportToActuator(t_model, t_handle):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuator(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitImportToActuators(t_model):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuators(t_model)

def getExternalInterfaceFunctionalMockupUnitImportToActuatorByName(t_model, t_name):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuatorByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitImportToActuator(self) -> OptionalExternalInterfaceFunctionalMockupUnitImportToActuator:
    """Try to cast the ModelObject to a ExternalInterfaceFunctionalMockupUnitImportToActuator.

    :return: An Optional ExternalInterfaceFunctionalMockupUnitImportToActuator.
    """
    return toExternalInterfaceFunctionalMockupUnitImportToActuator(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitImportToActuator = _to_ExternalInterfaceFunctionalMockupUnitImportToActuator

def _getExternalInterfaceFunctionalMockupUnitImportToActuator(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExternalInterfaceFunctionalMockupUnitImportToActuator:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitImportToActuator referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExternalInterfaceFunctionalMockupUnitImportToActuator.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExternalInterfaceFunctionalMockupUnitImportToActuator(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitImportToActuator = _getExternalInterfaceFunctionalMockupUnitImportToActuator

def _getExternalInterfaceFunctionalMockupUnitImportToActuators(self) -> ExternalInterfaceFunctionalMockupUnitImportToActuatorVector:
    """Get a vector of all objects of type ExternalInterfaceFunctionalMockupUnitImportToActuator in the model.

    :return: A vector of ExternalInterfaceFunctionalMockupUnitImportToActuator.
    """
    return getExternalInterfaceFunctionalMockupUnitImportToActuators(self)
Model.getExternalInterfaceFunctionalMockupUnitImportToActuators = _getExternalInterfaceFunctionalMockupUnitImportToActuators

def _getExternalInterfaceFunctionalMockupUnitImportToActuatorByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitImportToActuator:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitImportToActuator that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExternalInterfaceFunctionalMockupUnitImportToActuator.
    """
    return getExternalInterfaceFunctionalMockupUnitImportToActuatorByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitImportToActuatorByName = _getExternalInterfaceFunctionalMockupUnitImportToActuatorByName

def _getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitImportToActuatorVector:
    """Returns all objects of type ExternalInterfaceFunctionalMockupUnitImportToActuator named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName = _getExternalInterfaceFunctionalMockupUnitImportToActuatorsByName

class ExternalInterfaceFunctionalMockupUnitImportToSchedule(Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToSchedule

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToSchedule(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_iddObjectType()

    def fMUFile(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_fMUFile(self)

    def fMUInstanceName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_fMUInstanceName(self)

    def fMUVariableName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_fMUVariableName(self)

    def initialValue(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_initialValue(self)

    def setFMUFile(self, fMUFile):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_setFMUFile(self, fMUFile)

    def setFMUInstanceName(self, fMUInstanceName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_setFMUInstanceName(self, fMUInstanceName)

    def setFMUVariableName(self, fMUVariableName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_setInitialValue(self, initialValue)

# Register ExternalInterfaceFunctionalMockupUnitImportToSchedule in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToSchedule_swigregister(ExternalInterfaceFunctionalMockupUnitImportToSchedule)

def toExternalInterfaceFunctionalMockupUnitImportToSchedule(idfObject):
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportToSchedule(idfObject)

def getExternalInterfaceFunctionalMockupUnitImportToSchedule(t_model, t_handle):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToSchedule(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitImportToSchedules(t_model):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToSchedules(t_model)

def getExternalInterfaceFunctionalMockupUnitImportToScheduleByName(t_model, t_name):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToScheduleByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitImportToSchedule(self) -> OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule:
    """Try to cast the ModelObject to a ExternalInterfaceFunctionalMockupUnitImportToSchedule.

    :return: An Optional ExternalInterfaceFunctionalMockupUnitImportToSchedule.
    """
    return toExternalInterfaceFunctionalMockupUnitImportToSchedule(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitImportToSchedule = _to_ExternalInterfaceFunctionalMockupUnitImportToSchedule

def _getExternalInterfaceFunctionalMockupUnitImportToSchedule(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitImportToSchedule referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExternalInterfaceFunctionalMockupUnitImportToSchedule.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExternalInterfaceFunctionalMockupUnitImportToSchedule(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitImportToSchedule = _getExternalInterfaceFunctionalMockupUnitImportToSchedule

def _getExternalInterfaceFunctionalMockupUnitImportToSchedules(self) -> ExternalInterfaceFunctionalMockupUnitImportToScheduleVector:
    """Get a vector of all objects of type ExternalInterfaceFunctionalMockupUnitImportToSchedule in the model.

    :return: A vector of ExternalInterfaceFunctionalMockupUnitImportToSchedule.
    """
    return getExternalInterfaceFunctionalMockupUnitImportToSchedules(self)
Model.getExternalInterfaceFunctionalMockupUnitImportToSchedules = _getExternalInterfaceFunctionalMockupUnitImportToSchedules

def _getExternalInterfaceFunctionalMockupUnitImportToScheduleByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitImportToSchedule:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitImportToSchedule that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExternalInterfaceFunctionalMockupUnitImportToSchedule.
    """
    return getExternalInterfaceFunctionalMockupUnitImportToScheduleByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitImportToScheduleByName = _getExternalInterfaceFunctionalMockupUnitImportToScheduleByName

def _getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitImportToScheduleVector:
    """Returns all objects of type ExternalInterfaceFunctionalMockupUnitImportToSchedule named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName = _getExternalInterfaceFunctionalMockupUnitImportToSchedulesByName

class ExternalInterfaceFunctionalMockupUnitImportToVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceFunctionalMockupUnitImportToVariable

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceFunctionalMockupUnitImportToVariable(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_iddObjectType()

    def fMUFile(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_fMUFile(self)

    def fMUInstanceName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_fMUInstanceName(self)

    def fMUVariableName(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_fMUVariableName(self)

    def initialValue(self):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_initialValue(self)

    def setFMUFile(self, fMUFile):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_setFMUFile(self, fMUFile)

    def setFMUInstanceName(self, fMUInstanceName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_setFMUInstanceName(self, fMUInstanceName)

    def setFMUVariableName(self, fMUVariableName):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_setFMUVariableName(self, fMUVariableName)

    def setInitialValue(self, initialValue):
        return _openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_setInitialValue(self, initialValue)

# Register ExternalInterfaceFunctionalMockupUnitImportToVariable in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceFunctionalMockupUnitImportToVariable_swigregister(ExternalInterfaceFunctionalMockupUnitImportToVariable)

def toExternalInterfaceFunctionalMockupUnitImportToVariable(idfObject):
    return _openstudiomodelcore.toExternalInterfaceFunctionalMockupUnitImportToVariable(idfObject)

def getExternalInterfaceFunctionalMockupUnitImportToVariable(t_model, t_handle):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariable(t_model, t_handle)

def getExternalInterfaceFunctionalMockupUnitImportToVariables(t_model):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariables(t_model)

def getExternalInterfaceFunctionalMockupUnitImportToVariableByName(t_model, t_name):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariableByName(t_model, t_name)

def getExternalInterfaceFunctionalMockupUnitImportToVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getExternalInterfaceFunctionalMockupUnitImportToVariablesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceFunctionalMockupUnitImportToVariable(self) -> OptionalExternalInterfaceFunctionalMockupUnitImportToVariable:
    """Try to cast the ModelObject to a ExternalInterfaceFunctionalMockupUnitImportToVariable.

    :return: An Optional ExternalInterfaceFunctionalMockupUnitImportToVariable.
    """
    return toExternalInterfaceFunctionalMockupUnitImportToVariable(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceFunctionalMockupUnitImportToVariable = _to_ExternalInterfaceFunctionalMockupUnitImportToVariable

def _getExternalInterfaceFunctionalMockupUnitImportToVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExternalInterfaceFunctionalMockupUnitImportToVariable:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitImportToVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExternalInterfaceFunctionalMockupUnitImportToVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExternalInterfaceFunctionalMockupUnitImportToVariable(self, t_handle)
Model.getExternalInterfaceFunctionalMockupUnitImportToVariable = _getExternalInterfaceFunctionalMockupUnitImportToVariable

def _getExternalInterfaceFunctionalMockupUnitImportToVariables(self) -> ExternalInterfaceFunctionalMockupUnitImportToVariableVector:
    """Get a vector of all objects of type ExternalInterfaceFunctionalMockupUnitImportToVariable in the model.

    :return: A vector of ExternalInterfaceFunctionalMockupUnitImportToVariable.
    """
    return getExternalInterfaceFunctionalMockupUnitImportToVariables(self)
Model.getExternalInterfaceFunctionalMockupUnitImportToVariables = _getExternalInterfaceFunctionalMockupUnitImportToVariables

def _getExternalInterfaceFunctionalMockupUnitImportToVariableByName(self, t_name: str) -> OptionalExternalInterfaceFunctionalMockupUnitImportToVariable:
    """Try to get an object of type ExternalInterfaceFunctionalMockupUnitImportToVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExternalInterfaceFunctionalMockupUnitImportToVariable.
    """
    return getExternalInterfaceFunctionalMockupUnitImportToVariableByName(self, t_name)
Model.getExternalInterfaceFunctionalMockupUnitImportToVariableByName = _getExternalInterfaceFunctionalMockupUnitImportToVariableByName

def _getExternalInterfaceFunctionalMockupUnitImportToVariablesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceFunctionalMockupUnitImportToVariableVector:
    """Returns all objects of type ExternalInterfaceFunctionalMockupUnitImportToVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExternalInterfaceFunctionalMockupUnitImportToVariablesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceFunctionalMockupUnitImportToVariablesByName = _getExternalInterfaceFunctionalMockupUnitImportToVariablesByName

class ExternalInterfaceSchedule(Schedule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceSchedule

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceSchedule_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceSchedule(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ExternalInterfaceSchedule_iddObjectType()

    def initialValue(self):
        return _openstudiomodelcore.ExternalInterfaceSchedule_initialValue(self)

    def exportToBCVTB(self):
        return _openstudiomodelcore.ExternalInterfaceSchedule_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self):
        return _openstudiomodelcore.ExternalInterfaceSchedule_isExportToBCVTBDefaulted(self)

    def setInitialValue(self, initialValue):
        return _openstudiomodelcore.ExternalInterfaceSchedule_setInitialValue(self, initialValue)

    def setExportToBCVTB(self, exportToBCVTB):
        return _openstudiomodelcore.ExternalInterfaceSchedule_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self):
        return _openstudiomodelcore.ExternalInterfaceSchedule_resetExportToBCVTB(self)

# Register ExternalInterfaceSchedule in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceSchedule_swigregister(ExternalInterfaceSchedule)

def toExternalInterfaceSchedule(idfObject):
    return _openstudiomodelcore.toExternalInterfaceSchedule(idfObject)

def getExternalInterfaceSchedule(t_model, t_handle):
    return _openstudiomodelcore.getExternalInterfaceSchedule(t_model, t_handle)

def getExternalInterfaceSchedules(t_model):
    return _openstudiomodelcore.getExternalInterfaceSchedules(t_model)

def getExternalInterfaceScheduleByName(t_model, t_name):
    return _openstudiomodelcore.getExternalInterfaceScheduleByName(t_model, t_name)

def getExternalInterfaceSchedulesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getExternalInterfaceSchedulesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceSchedule(self) -> OptionalExternalInterfaceSchedule:
    """Try to cast the ModelObject to a ExternalInterfaceSchedule.

    :return: An Optional ExternalInterfaceSchedule.
    """
    return toExternalInterfaceSchedule(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceSchedule = _to_ExternalInterfaceSchedule

def _getExternalInterfaceSchedule(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExternalInterfaceSchedule:
    """Try to get an object of type ExternalInterfaceSchedule referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExternalInterfaceSchedule.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExternalInterfaceSchedule(self, t_handle)
Model.getExternalInterfaceSchedule = _getExternalInterfaceSchedule

def _getExternalInterfaceSchedules(self) -> ExternalInterfaceScheduleVector:
    """Get a vector of all objects of type ExternalInterfaceSchedule in the model.

    :return: A vector of ExternalInterfaceSchedule.
    """
    return getExternalInterfaceSchedules(self)
Model.getExternalInterfaceSchedules = _getExternalInterfaceSchedules

def _getExternalInterfaceScheduleByName(self, t_name: str) -> OptionalExternalInterfaceSchedule:
    """Try to get an object of type ExternalInterfaceSchedule that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExternalInterfaceSchedule.
    """
    return getExternalInterfaceScheduleByName(self, t_name)
Model.getExternalInterfaceScheduleByName = _getExternalInterfaceScheduleByName

def _getExternalInterfaceSchedulesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceScheduleVector:
    """Returns all objects of type ExternalInterfaceSchedule named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExternalInterfaceSchedulesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceSchedulesByName = _getExternalInterfaceSchedulesByName

class ExternalInterfaceVariable(ModelObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _openstudiomodelcore.delete_ExternalInterfaceVariable

    def __init__(self, *args):
        _openstudiomodelcore.ExternalInterfaceVariable_swiginit(self, _openstudiomodelcore.new_ExternalInterfaceVariable(*args))

    @staticmethod
    def iddObjectType():
        return _openstudiomodelcore.ExternalInterfaceVariable_iddObjectType()

    def initialValue(self):
        return _openstudiomodelcore.ExternalInterfaceVariable_initialValue(self)

    def exportToBCVTB(self):
        return _openstudiomodelcore.ExternalInterfaceVariable_exportToBCVTB(self)

    def isExportToBCVTBDefaulted(self):
        return _openstudiomodelcore.ExternalInterfaceVariable_isExportToBCVTBDefaulted(self)

    def setInitialValue(self, initialValue):
        return _openstudiomodelcore.ExternalInterfaceVariable_setInitialValue(self, initialValue)

    def setExportToBCVTB(self, exportToBCVTB):
        return _openstudiomodelcore.ExternalInterfaceVariable_setExportToBCVTB(self, exportToBCVTB)

    def resetExportToBCVTB(self):
        return _openstudiomodelcore.ExternalInterfaceVariable_resetExportToBCVTB(self)

# Register ExternalInterfaceVariable in _openstudiomodelcore:
_openstudiomodelcore.ExternalInterfaceVariable_swigregister(ExternalInterfaceVariable)

def toExternalInterfaceVariable(idfObject):
    return _openstudiomodelcore.toExternalInterfaceVariable(idfObject)

def getExternalInterfaceVariable(t_model, t_handle):
    return _openstudiomodelcore.getExternalInterfaceVariable(t_model, t_handle)

def getExternalInterfaceVariables(t_model):
    return _openstudiomodelcore.getExternalInterfaceVariables(t_model)

def getExternalInterfaceVariableByName(t_model, t_name):
    return _openstudiomodelcore.getExternalInterfaceVariableByName(t_model, t_name)

def getExternalInterfaceVariablesByName(t_model, t_name, t_exactMatch):
    return _openstudiomodelcore.getExternalInterfaceVariablesByName(t_model, t_name, t_exactMatch)

def _to_ExternalInterfaceVariable(self) -> OptionalExternalInterfaceVariable:
    """Try to cast the ModelObject to a ExternalInterfaceVariable.

    :return: An Optional ExternalInterfaceVariable.
    """
    return toExternalInterfaceVariable(self)
openstudioutilitiesidf.IdfObject.to_ExternalInterfaceVariable = _to_ExternalInterfaceVariable

def _getExternalInterfaceVariable(self, t_handle: typing.Union[openstudioutilitiescore.UUID, str]) -> OptionalExternalInterfaceVariable:
    """Try to get an object of type ExternalInterfaceVariable referenced by its handle.

    :param t_handle: The object's handle
    :return: An Optional ExternalInterfaceVariable.
    """
    if isinstance(t_handle, str):
        t_handle = openstudioutilitiescore.toUUID(t_handle)
    return getExternalInterfaceVariable(self, t_handle)
Model.getExternalInterfaceVariable = _getExternalInterfaceVariable

def _getExternalInterfaceVariables(self) -> ExternalInterfaceVariableVector:
    """Get a vector of all objects of type ExternalInterfaceVariable in the model.

    :return: A vector of ExternalInterfaceVariable.
    """
    return getExternalInterfaceVariables(self)
Model.getExternalInterfaceVariables = _getExternalInterfaceVariables

def _getExternalInterfaceVariableByName(self, t_name: str) -> OptionalExternalInterfaceVariable:
    """Try to get an object of type ExternalInterfaceVariable that has this specific name (case-insentive).

    :param t_name: The object's name
    :return: An Optional ExternalInterfaceVariable.
    """
    return getExternalInterfaceVariableByName(self, t_name)
Model.getExternalInterfaceVariableByName = _getExternalInterfaceVariableByName

def _getExternalInterfaceVariablesByName(self, t_name: str, t_exactMatch: bool) -> ExternalInterfaceVariableVector:
    """Returns all objects of type ExternalInterfaceVariable named t_name (case insensitive).

    :param t_name: The object's name
    :param t_exactMatch: if false, will return all objects with name or name plus an integer suffix

    :return: A vector of matches.
    """
    return getExternalInterfaceVariablesByName(self, t_name, t_exactMatch)
Model.getExternalInterfaceVariablesByName = _getExternalInterfaceVariablesByName


